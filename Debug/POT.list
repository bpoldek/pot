
POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001257c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  08012730  08012730  00022730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801331c  0801331c  00030364  2**0
                  CONTENTS
  4 .ARM          00000000  0801331c  0801331c  00030364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801331c  0801331c  00030364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801331c  0801331c  0002331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013320  08013320  00023320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  08013324  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d44  20000364  08013688  00030364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a8  08013688  000320a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a08  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000606f  00000000  00000000  00061d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  00067e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e80  00000000  00000000  00069f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033191  00000000  00000000  0006bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c2f0  00000000  00000000  0009ef59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122ebf  00000000  00000000  000cb249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a080  00000000  00000000  001ee15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000364 	.word	0x20000364
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012714 	.word	0x08012714

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000368 	.word	0x20000368
 80001ec:	08012714 	.word	0x08012714

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4623      	mov	r3, r4
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	4603      	mov	r3, r0
 8000d28:	80bb      	strh	r3, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d36:	2b7f      	cmp	r3, #127	; 0x7f
 8000d38:	f300 8100 	bgt.w	8000f3c <GFX_draw_char+0x228>
 8000d3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d40:	2b3f      	cmp	r3, #63	; 0x3f
 8000d42:	f300 80fb 	bgt.w	8000f3c <GFX_draw_char+0x228>
 8000d46:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	440b      	add	r3, r1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f340 80ef 	ble.w	8000f3c <GFX_draw_char+0x228>
 8000d5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f340 80e6 	ble.w	8000f3c <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e0aa      	b.n	8000ecc <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	441a      	add	r2, r3
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a6f      	ldr	r2, [pc, #444]	; (8000f44 <GFX_draw_char+0x230>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	73bb      	strb	r3, [r7, #14]
 8000d8e:	e092      	b.n	8000eb6 <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d040      	beq.n	8000e1c <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d116      	bne.n	8000dd0 <GFX_draw_char+0xbc>
 8000da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d112      	bne.n	8000dd0 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4413      	add	r3, r2
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b218      	sxth	r0, r3
 8000db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	883a      	ldrh	r2, [r7, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f000 f9f9 	bl	80011c0 <SSD1306_draw_pixel>
 8000dce:	e069      	b.n	8000ea4 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	fb12 f303 	smulbb	r3, r2, r3
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4413      	add	r3, r2
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b218      	sxth	r0, r3
 8000dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	fb12 f303 	smulbb	r3, r2, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b219      	sxth	r1, r3
 8000e04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e0e:	b21c      	sxth	r4, r3
 8000e10:	883b      	ldrh	r3, [r7, #0]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4623      	mov	r3, r4
 8000e16:	f000 f8d1 	bl	8000fbc <GFX_draw_fill_rect>
 8000e1a:	e043      	b.n	8000ea4 <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 8000e1c:	8c3a      	ldrh	r2, [r7, #32]
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d03f      	beq.n	8000ea4 <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 8000e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d116      	bne.n	8000e5a <GFX_draw_char+0x146>
 8000e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d112      	bne.n	8000e5a <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b218      	sxth	r0, r3
 8000e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	8c3a      	ldrh	r2, [r7, #32]
 8000e52:	4619      	mov	r1, r3
 8000e54:	f000 f9b4 	bl	80011c0 <SSD1306_draw_pixel>
 8000e58:	e024      	b.n	8000ea4 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	fb12 f303 	smulbb	r3, r2, r3
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b218      	sxth	r0, r3
 8000e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	fb12 f303 	smulbb	r3, r2, r3
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b219      	sxth	r1, r3
 8000e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e98:	b21c      	sxth	r4, r3
 8000e9a:	8c3b      	ldrh	r3, [r7, #32]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	f000 f88c 	bl	8000fbc <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 8000ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73bb      	strb	r3, [r7, #14]
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	085b      	lsrs	r3, r3, #1
 8000eb4:	737b      	strb	r3, [r7, #13]
 8000eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f6bf af68 	bge.w	8000d90 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	f77f af50 	ble.w	8000d76 <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 8000ed6:	8c3a      	ldrh	r2, [r7, #32]
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d02f      	beq.n	8000f3e <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d10e      	bne.n	8000f04 <GFX_draw_char+0x1f0>
 8000ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10a      	bne.n	8000f04 <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b218      	sxth	r0, r3
 8000ef6:	8c3b      	ldrh	r3, [r7, #32]
 8000ef8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000efc:	2208      	movs	r2, #8
 8000efe:	f000 fad9 	bl	80014b4 <SSD1306_draw_fast_vline>
 8000f02:	e01c      	b.n	8000f3e <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8000f04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	4413      	add	r3, r2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b218      	sxth	r0, r3
 8000f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b21c      	sxth	r4, r3
 8000f2c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f30:	8c3b      	ldrh	r3, [r7, #32]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4623      	mov	r3, r4
 8000f36:	f000 f841 	bl	8000fbc <GFX_draw_fill_rect>
 8000f3a:	e000      	b.n	8000f3e <GFX_draw_char+0x22a>
		return;
 8000f3c:	bf00      	nop
		}
	}
}
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	0801290c 	.word	0x0801290c

08000f48 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	60ba      	str	r2, [r7, #8]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	460b      	mov	r3, r1
 8000f58:	81bb      	strh	r3, [r7, #12]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
	while(*c)
 8000f62:	e022      	b.n	8000faa <GFX_draw_string+0x62>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b218      	sxth	r0, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	88fc      	ldrh	r4, [r7, #6]
 8000f76:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	f7ff fec2 	bl	8000d14 <GFX_draw_char>
		offset += (5 + 1) * size_x;
 8000f90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f94:	461a      	mov	r2, r3
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	75fb      	strb	r3, [r7, #23]
		c++;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1d8      	bne.n	8000f64 <GFX_draw_string+0x1c>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4623      	mov	r3, r4
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	81fb      	strh	r3, [r7, #14]
 8000fde:	e00e      	b.n	8000ffe <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000fe0:	8c3b      	ldrh	r3, [r7, #32]
 8000fe2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fe6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fea:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000fee:	f000 fa61 	bl	80014b4 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000ff2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	81fb      	strh	r3, [r7, #14]
 8000ffe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001002:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001006:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800100a:	440b      	add	r3, r1
 800100c:	429a      	cmp	r2, r3
 800100e:	dbe7      	blt.n	8000fe0 <GFX_draw_fill_rect+0x24>
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
	...

0800101c <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af04      	add	r7, sp, #16
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	b29a      	uxth	r2, r3
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2178      	movs	r1, #120	; 0x78
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <platform_write+0x34>)
 8001042:	f003 fff3 	bl	800502c <HAL_I2C_Mem_Write>
	return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000069c 	.word	0x2000069c

08001054 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af02      	add	r7, sp, #8
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	b29a      	uxth	r2, r3
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	2178      	movs	r1, #120	; 0x78
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <platform_write_dma+0x30>)
 8001076:	f004 fa07 	bl	8005488 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000069c 	.word	0x2000069c

08001088 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	2201      	movs	r2, #1
 8001096:	4619      	mov	r1, r3
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ffbf 	bl	800101c <platform_write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SSD1306_init>:

bool SSD1306_init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 80010ae:	2302      	movs	r3, #2
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	238f      	movs	r3, #143	; 0x8f
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	2302      	movs	r3, #2
 80010b8:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 80010ba:	4b40      	ldr	r3, [pc, #256]	; (80011bc <SSD1306_init+0x114>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10d      	bne.n	80010de <SSD1306_init+0x36>
 80010c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010c6:	f00c fee1 	bl	800de8c <malloc>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <SSD1306_init+0x114>)
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <SSD1306_init+0x114>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <SSD1306_init+0x36>
  {
    return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e06a      	b.n	80011b4 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 80010de:	f000 f949 	bl	8001374 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 80010e2:	20ae      	movs	r0, #174	; 0xae
 80010e4:	f7ff ffd0 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 80010e8:	20d5      	movs	r0, #213	; 0xd5
 80010ea:	f7ff ffcd 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80010ee:	20e0      	movs	r0, #224	; 0xe0
 80010f0:	f7ff ffca 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80010f4:	20a8      	movs	r0, #168	; 0xa8
 80010f6:	f7ff ffc7 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80010fa:	203f      	movs	r0, #63	; 0x3f
 80010fc:	f7ff ffc4 	bl	8001088 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8001100:	20d3      	movs	r0, #211	; 0xd3
 8001102:	f7ff ffc1 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ffbe 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 800110c:	2040      	movs	r0, #64	; 0x40
 800110e:	f7ff ffbb 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 8001112:	208d      	movs	r0, #141	; 0x8d
 8001114:	f7ff ffb8 	bl	8001088 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <SSD1306_init+0x7a>
 800111e:	2310      	movs	r3, #16
 8001120:	e000      	b.n	8001124 <SSD1306_init+0x7c>
 8001122:	2314      	movs	r3, #20
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ffaf 	bl	8001088 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 800112a:	2020      	movs	r0, #32
 800112c:	f7ff ffac 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff ffa9 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 8001136:	20b0      	movs	r0, #176	; 0xb0
 8001138:	f7ff ffa6 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 800113c:	20c8      	movs	r0, #200	; 0xc8
 800113e:	f7ff ffa3 	bl	8001088 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 8001142:	2312      	movs	r3, #18
 8001144:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <SSD1306_init+0xa8>
 800114c:	239f      	movs	r3, #159	; 0x9f
 800114e:	e000      	b.n	8001152 <SSD1306_init+0xaa>
 8001150:	23cf      	movs	r3, #207	; 0xcf
 8001152:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8001154:	20da      	movs	r0, #218	; 0xda
 8001156:	f7ff ff97 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff93 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8001162:	2081      	movs	r0, #129	; 0x81
 8001164:	f7ff ff90 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff8c 	bl	8001088 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8001170:	20d9      	movs	r0, #217	; 0xd9
 8001172:	f7ff ff89 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <SSD1306_init+0xd8>
 800117c:	2322      	movs	r3, #34	; 0x22
 800117e:	e000      	b.n	8001182 <SSD1306_init+0xda>
 8001180:	23f1      	movs	r3, #241	; 0xf1
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff80 	bl	8001088 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8001188:	20db      	movs	r0, #219	; 0xdb
 800118a:	f7ff ff7d 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 800118e:	2040      	movs	r0, #64	; 0x40
 8001190:	f7ff ff7a 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8001194:	20a4      	movs	r0, #164	; 0xa4
 8001196:	f7ff ff77 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800119a:	20a6      	movs	r0, #166	; 0xa6
 800119c:	f7ff ff74 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 80011a0:	202e      	movs	r0, #46	; 0x2e
 80011a2:	f7ff ff71 	bl	8001088 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 80011a6:	20af      	movs	r0, #175	; 0xaf
 80011a8:	f7ff ff6e 	bl	8001088 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 fb19 	bl	80017e4 <SSD1306_set_rotation>
  return true;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000380 	.word	0x20000380

080011c0 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
 80011ca:	460b      	mov	r3, r1
 80011cc:	80bb      	strh	r3, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f2c0 80c4 	blt.w	8001364 <SSD1306_draw_pixel+0x1a4>
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	2b7f      	cmp	r3, #127	; 0x7f
 80011e2:	f300 80bf 	bgt.w	8001364 <SSD1306_draw_pixel+0x1a4>
 80011e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f2c0 80ba 	blt.w	8001364 <SSD1306_draw_pixel+0x1a4>
 80011f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011f4:	2b3f      	cmp	r3, #63	; 0x3f
 80011f6:	f300 80b5 	bgt.w	8001364 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80011fa:	f000 fb03 	bl	8001804 <SSD1306_get_rotation>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b03      	cmp	r3, #3
 8001202:	d023      	beq.n	800124c <SSD1306_draw_pixel+0x8c>
 8001204:	2b03      	cmp	r3, #3
 8001206:	dc33      	bgt.n	8001270 <SSD1306_draw_pixel+0xb0>
 8001208:	2b01      	cmp	r3, #1
 800120a:	d002      	beq.n	8001212 <SSD1306_draw_pixel+0x52>
 800120c:	2b02      	cmp	r3, #2
 800120e:	d012      	beq.n	8001236 <SSD1306_draw_pixel+0x76>
 8001210:	e02e      	b.n	8001270 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	4053      	eors	r3, r2
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	88ba      	ldrh	r2, [r7, #4]
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	4053      	eors	r3, r2
 8001220:	80bb      	strh	r3, [r7, #4]
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	4053      	eors	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001230:	b29b      	uxth	r3, r3
 8001232:	80fb      	strh	r3, [r7, #6]
				break;
 8001234:	e01c      	b.n	8001270 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800123c:	b29b      	uxth	r3, r3
 800123e:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001246:	b29b      	uxth	r3, r3
 8001248:	80bb      	strh	r3, [r7, #4]
				break;
 800124a:	e011      	b.n	8001270 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	4053      	eors	r3, r2
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	88ba      	ldrh	r2, [r7, #4]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4053      	eors	r3, r2
 800125a:	80bb      	strh	r3, [r7, #4]
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	4053      	eors	r3, r2
 8001262:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800126a:	b29b      	uxth	r3, r3
 800126c:	80bb      	strh	r3, [r7, #4]
				break;
 800126e:	bf00      	nop
		}

		switch (color)
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d051      	beq.n	800131a <SSD1306_draw_pixel+0x15a>
 8001276:	2b02      	cmp	r3, #2
 8001278:	dc75      	bgt.n	8001366 <SSD1306_draw_pixel+0x1a6>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d026      	beq.n	80012cc <SSD1306_draw_pixel+0x10c>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d171      	bne.n	8001366 <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <SSD1306_draw_pixel+0x1b0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800128a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da00      	bge.n	8001294 <SSD1306_draw_pixel+0xd4>
 8001292:	3307      	adds	r3, #7
 8001294:	10db      	asrs	r3, r3, #3
 8001296:	b218      	sxth	r0, r3
 8001298:	4603      	mov	r3, r0
 800129a:	01db      	lsls	r3, r3, #7
 800129c:	440b      	add	r3, r1
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b25a      	sxtb	r2, r3
 80012a4:	88bb      	ldrh	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b25c      	sxtb	r4, r3
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <SSD1306_draw_pixel+0x1b0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012be:	4602      	mov	r2, r0
 80012c0:	01d2      	lsls	r2, r2, #7
 80012c2:	440a      	add	r2, r1
 80012c4:	4413      	add	r3, r2
 80012c6:	b2e2      	uxtb	r2, r4
 80012c8:	701a      	strb	r2, [r3, #0]
				break;
 80012ca:	e04c      	b.n	8001366 <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <SSD1306_draw_pixel+0x1b0>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da00      	bge.n	80012de <SSD1306_draw_pixel+0x11e>
 80012dc:	3307      	adds	r3, #7
 80012de:	10db      	asrs	r3, r3, #3
 80012e0:	b218      	sxth	r0, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	01db      	lsls	r3, r3, #7
 80012e6:	440b      	add	r3, r1
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4013      	ands	r3, r2
 8001302:	b25c      	sxtb	r4, r3
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <SSD1306_draw_pixel+0x1b0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800130c:	4602      	mov	r2, r0
 800130e:	01d2      	lsls	r2, r2, #7
 8001310:	440a      	add	r2, r1
 8001312:	4413      	add	r3, r2
 8001314:	b2e2      	uxtb	r2, r4
 8001316:	701a      	strb	r2, [r3, #0]
				break;
 8001318:	e025      	b.n	8001366 <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <SSD1306_draw_pixel+0x1b0>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001322:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	da00      	bge.n	800132c <SSD1306_draw_pixel+0x16c>
 800132a:	3307      	adds	r3, #7
 800132c:	10db      	asrs	r3, r3, #3
 800132e:	b218      	sxth	r0, r3
 8001330:	4603      	mov	r3, r0
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	440b      	add	r3, r1
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b25a      	sxtb	r2, r3
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	2101      	movs	r1, #1
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4053      	eors	r3, r2
 800134c:	b25c      	sxtb	r4, r3
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SSD1306_draw_pixel+0x1b0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001356:	4602      	mov	r2, r0
 8001358:	01d2      	lsls	r2, r2, #7
 800135a:	440a      	add	r2, r1
 800135c:	4413      	add	r3, r2
 800135e:	b2e2      	uxtb	r2, r4
 8001360:	701a      	strb	r2, [r3, #0]
				break;
 8001362:	e000      	b.n	8001366 <SSD1306_draw_pixel+0x1a6>
		}
	}
 8001364:	bf00      	nop
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	bf00      	nop
 8001370:	20000380 	.word	0x20000380

08001374 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <SSD1306_display_clear+0x18>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fd8a 	bl	800de9c <memset>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000380 	.word	0x20000380

08001390 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001390:	b490      	push	{r4, r7}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4604      	mov	r4, r0
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	4603      	mov	r3, r0
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	807b      	strh	r3, [r7, #2]
 80013aa:	4613      	mov	r3, r2
 80013ac:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 80013ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db75      	blt.n	80014a2 <SSD1306_draw_fast_hline_internal+0x112>
 80013b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ba:	2b3f      	cmp	r3, #63	; 0x3f
 80013bc:	dc71      	bgt.n	80014a2 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 80013be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da06      	bge.n	80013d4 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	807b      	strh	r3, [r7, #2]
			x = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 80013d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013dc:	4413      	add	r3, r2
 80013de:	2b80      	cmp	r3, #128	; 0x80
 80013e0:	dd04      	ble.n	80013ec <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 80013ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd56      	ble.n	80014a2 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <SSD1306_draw_fast_hline_internal+0x120>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <SSD1306_draw_fast_hline_internal+0x72>
 8001400:	3307      	adds	r3, #7
 8001402:	10db      	asrs	r3, r3, #3
 8001404:	b21b      	sxth	r3, r3
 8001406:	01d9      	lsls	r1, r3, #7
 8001408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140c:	440b      	add	r3, r1
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	2201      	movs	r2, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8001420:	883b      	ldrh	r3, [r7, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d034      	beq.n	8001490 <SSD1306_draw_fast_hline_internal+0x100>
 8001426:	2b02      	cmp	r3, #2
 8001428:	dc3c      	bgt.n	80014a4 <SSD1306_draw_fast_hline_internal+0x114>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d013      	beq.n	8001456 <SSD1306_draw_fast_hline_internal+0xc6>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d138      	bne.n	80014a4 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 8001432:	e007      	b.n	8001444 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60fa      	str	r2, [r7, #12]
 800143a:	7819      	ldrb	r1, [r3, #0]
 800143c:	7afa      	ldrb	r2, [r7, #11]
 800143e:	430a      	orrs	r2, r1
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001444:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001448:	b29a      	uxth	r2, r3
 800144a:	3a01      	subs	r2, #1
 800144c:	b292      	uxth	r2, r2
 800144e:	807a      	strh	r2, [r7, #2]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ef      	bne.n	8001434 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8001454:	e026      	b.n	80014a4 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8001456:	7afb      	ldrb	r3, [r7, #11]
 8001458:	43db      	mvns	r3, r3
 800145a:	72fb      	strb	r3, [r7, #11]
					while (w--)
 800145c:	e007      	b.n	800146e <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	60fa      	str	r2, [r7, #12]
 8001464:	7819      	ldrb	r1, [r3, #0]
 8001466:	7afa      	ldrb	r2, [r7, #11]
 8001468:	400a      	ands	r2, r1
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
					while (w--)
 800146e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001472:	b29a      	uxth	r2, r3
 8001474:	3a01      	subs	r2, #1
 8001476:	b292      	uxth	r2, r2
 8001478:	807a      	strh	r2, [r7, #2]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ef      	bne.n	800145e <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 800147e:	e011      	b.n	80014a4 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60fa      	str	r2, [r7, #12]
 8001486:	7819      	ldrb	r1, [r3, #0]
 8001488:	7afa      	ldrb	r2, [r7, #11]
 800148a:	404a      	eors	r2, r1
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001490:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001494:	b29a      	uxth	r2, r3
 8001496:	3a01      	subs	r2, #1
 8001498:	b292      	uxth	r2, r2
 800149a:	807a      	strh	r2, [r7, #2]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1ef      	bne.n	8001480 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 80014a0:	e000      	b.n	80014a4 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 80014a2:	bf00      	nop
	}
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc90      	pop	{r4, r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000380 	.word	0x20000380

080014b4 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	4603      	mov	r3, r0
 80014c8:	80bb      	strh	r3, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]
 80014ce:	4613      	mov	r3, r2
 80014d0:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 80014d6:	f000 f995 	bl	8001804 <SSD1306_get_rotation>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d033      	beq.n	8001548 <SSD1306_draw_fast_vline+0x94>
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	dc45      	bgt.n	8001570 <SSD1306_draw_fast_vline+0xbc>
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d002      	beq.n	80014ee <SSD1306_draw_fast_vline+0x3a>
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d01b      	beq.n	8001524 <SSD1306_draw_fast_vline+0x70>
 80014ec:	e040      	b.n	8001570 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 80014f2:	88fa      	ldrh	r2, [r7, #6]
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	4053      	eors	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	88ba      	ldrh	r2, [r7, #4]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	4053      	eors	r3, r2
 8001500:	80bb      	strh	r3, [r7, #4]
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	4053      	eors	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001510:	b29b      	uxth	r3, r3
 8001512:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	3301      	adds	r3, #1
 800151e:	b29b      	uxth	r3, r3
 8001520:	80fb      	strh	r3, [r7, #6]
  			break;
 8001522:	e025      	b.n	8001570 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800152a:	b29b      	uxth	r3, r3
 800152c:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001534:	b29b      	uxth	r3, r3
 8001536:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8001538:	88ba      	ldrh	r2, [r7, #4]
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001546:	e013      	b.n	8001570 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 800154c:	88fa      	ldrh	r2, [r7, #6]
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	4053      	eors	r3, r2
 8001552:	80fb      	strh	r3, [r7, #6]
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4053      	eors	r3, r2
 800155a:	80bb      	strh	r3, [r7, #4]
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	4053      	eors	r3, r2
 8001562:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800156a:	b29b      	uxth	r3, r3
 800156c:	80bb      	strh	r3, [r7, #4]
  	    	break;
 800156e:	bf00      	nop
	}

	if (bSwap)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8001576:	883b      	ldrh	r3, [r7, #0]
 8001578:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800157c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001580:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001584:	f7ff ff04 	bl	8001390 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8001588:	e008      	b.n	800159c <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 800158a:	883b      	ldrh	r3, [r7, #0]
 800158c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001590:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001594:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001598:	f000 f804 	bl	80015a4 <SSD1306_draw_fast_vline_internal>
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80015a4:	b490      	push	{r4, r7}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
 80015be:	4613      	mov	r3, r2
 80015c0:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f2c0 80da 	blt.w	8001780 <SSD1306_draw_fast_vline_internal+0x1dc>
 80015cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d0:	2b7f      	cmp	r3, #127	; 0x7f
 80015d2:	f300 80d5 	bgt.w	8001780 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 80015d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da06      	bge.n	80015ec <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	807b      	strh	r3, [r7, #2]
			__y = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 80015ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015f4:	4413      	add	r3, r2
 80015f6:	2b40      	cmp	r3, #64	; 0x40
 80015f8:	dd04      	ble.n	8001604 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001600:	b29b      	uxth	r3, r3
 8001602:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8001604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f340 80b9 	ble.w	8001780 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	737b      	strb	r3, [r7, #13]
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8001616:	4b5d      	ldr	r3, [pc, #372]	; (800178c <SSD1306_draw_fast_vline_internal+0x1e8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	7b7a      	ldrb	r2, [r7, #13]
 800161c:	08d2      	lsrs	r2, r2, #3
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	01d1      	lsls	r1, r2, #7
 8001622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001626:	440a      	add	r2, r1
 8001628:	4413      	add	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 800162c:	7b7b      	ldrb	r3, [r7, #13]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d040      	beq.n	80016bc <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f1c3 0308 	rsb	r3, r3, #8
 8001640:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 800164a:	7dfa      	ldrb	r2, [r7, #23]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	429a      	cmp	r2, r3
 8001650:	d20b      	bcs.n	800166a <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	fa42 f303 	asr.w	r3, r2, r3
 800165e:	b25a      	sxtb	r2, r3
 8001660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001664:	4013      	ands	r3, r2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 800166a:	883b      	ldrh	r3, [r7, #0]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d01a      	beq.n	80016a6 <SSD1306_draw_fast_vline_internal+0x102>
 8001670:	2b02      	cmp	r3, #2
 8001672:	dc20      	bgt.n	80016b6 <SSD1306_draw_fast_vline_internal+0x112>
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <SSD1306_draw_fast_vline_internal+0xe8>
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11c      	bne.n	80016b6 <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	4313      	orrs	r3, r2
 8001684:	b2da      	uxtb	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	701a      	strb	r2, [r3, #0]
						break;
 800168a:	e014      	b.n	80016b6 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25a      	sxtb	r2, r3
 8001692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001696:	43db      	mvns	r3, r3
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4013      	ands	r3, r2
 800169c:	b25b      	sxtb	r3, r3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	701a      	strb	r2, [r3, #0]
						break;
 80016a4:	e007      	b.n	80016b6 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	4053      	eors	r3, r2
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	701a      	strb	r2, [r3, #0]
						break;
 80016b4:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	3380      	adds	r3, #128	; 0x80
 80016ba:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 80016bc:	7dfa      	ldrb	r2, [r7, #23]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d35d      	bcc.n	8001780 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 80016c4:	7dfa      	ldrb	r2, [r7, #23]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b07      	cmp	r3, #7
 80016d0:	d925      	bls.n	800171e <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 80016d2:	883b      	ldrh	r3, [r7, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d10f      	bne.n	80016f8 <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	43db      	mvns	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3380      	adds	r3, #128	; 0x80
 80016e8:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	3b08      	subs	r3, #8
 80016ee:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	d8f0      	bhi.n	80016d8 <SSD1306_draw_fast_vline_internal+0x134>
 80016f6:	e012      	b.n	800171e <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 80016f8:	883b      	ldrh	r3, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SSD1306_draw_fast_vline_internal+0x15e>
 80016fe:	23ff      	movs	r3, #255	; 0xff
 8001700:	e000      	b.n	8001704 <SSD1306_draw_fast_vline_internal+0x160>
 8001702:	2300      	movs	r3, #0
 8001704:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	7b3a      	ldrb	r2, [r7, #12]
 800170a:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	3380      	adds	r3, #128	; 0x80
 8001710:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8001712:	7dfb      	ldrb	r3, [r7, #23]
 8001714:	3b08      	subs	r3, #8
 8001716:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b07      	cmp	r3, #7
 800171c:	d8f3      	bhi.n	8001706 <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d02d      	beq.n	8001780 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8001734:	883b      	ldrh	r3, [r7, #0]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d01a      	beq.n	8001770 <SSD1306_draw_fast_vline_internal+0x1cc>
 800173a:	2b02      	cmp	r3, #2
 800173c:	dc21      	bgt.n	8001782 <SSD1306_draw_fast_vline_internal+0x1de>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <SSD1306_draw_fast_vline_internal+0x1b2>
 8001742:	2b01      	cmp	r3, #1
 8001744:	d11d      	bne.n	8001782 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	4313      	orrs	r3, r2
 800174e:	b2da      	uxtb	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	701a      	strb	r2, [r3, #0]
							break;
 8001754:	e015      	b.n	8001782 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25a      	sxtb	r2, r3
 800175c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001760:	43db      	mvns	r3, r3
 8001762:	b25b      	sxtb	r3, r3
 8001764:	4013      	ands	r3, r2
 8001766:	b25b      	sxtb	r3, r3
 8001768:	b2da      	uxtb	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	701a      	strb	r2, [r3, #0]
							break;
 800176e:	e008      	b.n	8001782 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	4053      	eors	r3, r2
 8001778:	b2da      	uxtb	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	701a      	strb	r2, [r3, #0]
							break;
 800177e:	e000      	b.n	8001782 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8001780:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bc90      	pop	{r4, r7}
 800178a:	4770      	bx	lr
 800178c:	20000380 	.word	0x20000380
 8001790:	08012e0c 	.word	0x08012e0c
 8001794:	08012e14 	.word	0x08012e14

08001798 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 80017a4:	2022      	movs	r0, #34	; 0x22
 80017a6:	f7ff fc6f 	bl	8001088 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fc6c 	bl	8001088 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80017b0:	20ff      	movs	r0, #255	; 0xff
 80017b2:	f7ff fc69 	bl	8001088 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 80017b6:	2021      	movs	r0, #33	; 0x21
 80017b8:	f7ff fc66 	bl	8001088 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fc63 	bl	8001088 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 80017c2:	207f      	movs	r0, #127	; 0x7f
 80017c4:	f7ff fc60 	bl	8001088 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SSD1306_display_repaint+0x48>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	4619      	mov	r1, r3
 80017d0:	2040      	movs	r0, #64	; 0x40
 80017d2:	f7ff fc3f 	bl	8001054 <platform_write_dma>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000380 	.word	0x20000380

080017e4 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <SSD1306_set_rotation+0x1c>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	7013      	strb	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000384 	.word	0x20000384

08001804 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	return rotation;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <SSD1306_get_rotation+0x14>)
 800180a:	781b      	ldrb	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000384 	.word	0x20000384

0800181c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <MX_ADC1_Init+0xe4>)
 8001842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <MX_ADC1_Init+0xe0>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <MX_ADC1_Init+0xe0>)
 800185e:	2204      	movs	r2, #4
 8001860:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001864:	2200      	movs	r2, #0
 8001866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <MX_ADC1_Init+0xe0>)
 800186a:	2200      	movs	r2, #0
 800186c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001870:	2201      	movs	r2, #1
 8001872:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <MX_ADC1_Init+0xe0>)
 800187e:	2200      	movs	r2, #0
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001884:	2200      	movs	r2, #0
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_ADC1_Init+0xe0>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_ADC1_Init+0xe0>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <MX_ADC1_Init+0xe0>)
 80018a0:	f002 f826 	bl	80038f0 <HAL_ADC_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80018aa:	f001 fba0 	bl	8002fee <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	4810      	ldr	r0, [pc, #64]	; (80018fc <MX_ADC1_Init+0xe0>)
 80018ba:	f002 fda5 	bl	8004408 <HAL_ADCEx_MultiModeConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018c4:	f001 fb93 	bl	8002fee <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_ADC1_Init+0xe8>)
 80018ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018cc:	2306      	movs	r3, #6
 80018ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d4:	237f      	movs	r3, #127	; 0x7f
 80018d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d8:	2304      	movs	r3, #4
 80018da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_ADC1_Init+0xe0>)
 80018e6:	f002 f95d 	bl	8003ba4 <HAL_ADC_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80018f0:	f001 fb7d 	bl	8002fee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200005b8 	.word	0x200005b8
 8001900:	50040000 	.word	0x50040000
 8001904:	c7520000 	.word	0xc7520000

08001908 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0a6      	sub	sp, #152	; 0x98
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	228c      	movs	r2, #140	; 0x8c
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00c fabf 	bl	800de9c <memset>
  if(adcHandle->Instance==ADC1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_ADC_MspInit+0x80>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d12b      	bne.n	8001980 <HAL_ADC_MspInit+0x78>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800192c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800192e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800193e:	2308      	movs	r3, #8
 8001940:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001942:	2302      	movs	r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001946:	2302      	movs	r3, #2
 8001948:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800194a:	2302      	movs	r3, #2
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800194e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4618      	mov	r0, r3
 800195a:	f007 fa15 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8001964:	f001 fb43 	bl	8002fee <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_ADC_MspInit+0x84>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_ADC_MspInit+0x84>)
 800196e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_ADC_MspInit+0x84>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001980:	bf00      	nop
 8001982:	3798      	adds	r7, #152	; 0x98
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	50040000 	.word	0x50040000
 800198c:	40021000 	.word	0x40021000

08001990 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	4613      	mov	r3, r2
 80019a0:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fc90 	bl	80022c8 <null_ptr_check>
 80019a8:	4603      	mov	r3, r0
 80019aa:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80019ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11c      	bne.n	80019ee <bmp280_get_regs+0x5e>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d019      	beq.n	80019ee <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	789b      	ldrb	r3, [r3, #2]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c8:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685c      	ldr	r4, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7858      	ldrb	r0, [r3, #1]
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	7bf9      	ldrb	r1, [r7, #15]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	47a0      	blx	r4
 80019dc:	4603      	mov	r3, r0
 80019de:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 80019e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 80019e8:	23fc      	movs	r3, #252	; 0xfc
 80019ea:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 80019ec:	e001      	b.n	80019f2 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80019ee:	23ff      	movs	r3, #255	; 0xff
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80019f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}

080019fe <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80019fe:	b590      	push	{r4, r7, lr}
 8001a00:	b089      	sub	sp, #36	; 0x24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d901      	bls.n	8001a18 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001a14:	2304      	movs	r3, #4
 8001a16:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f000 fc55 	bl	80022c8 <null_ptr_check>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001a22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d14d      	bne.n	8001ac6 <bmp280_set_regs+0xc8>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d04a      	beq.n	8001ac6 <bmp280_set_regs+0xc8>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d047      	beq.n	8001ac6 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d041      	beq.n	8001ac0 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d114      	bne.n	8001a74 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e00d      	b.n	8001a6c <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	7efb      	ldrb	r3, [r7, #27]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001a66:	7efb      	ldrb	r3, [r7, #27]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	76fb      	strb	r3, [r7, #27]
 8001a6c:	7efa      	ldrb	r2, [r7, #27]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3ed      	bcc.n	8001a50 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d90d      	bls.n	8001a96 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f107 0110 	add.w	r1, r7, #16
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fc40 	bl	8002308 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	83bb      	strh	r3, [r7, #28]
 8001a94:	e001      	b.n	8001a9a <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689c      	ldr	r4, [r3, #8]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	7858      	ldrb	r0, [r3, #1]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	7819      	ldrb	r1, [r3, #0]
 8001aa6:	8bbb      	ldrh	r3, [r7, #28]
 8001aa8:	f107 0210 	add.w	r2, r7, #16
 8001aac:	47a0      	blx	r4
 8001aae:	4603      	mov	r3, r0
 8001ab0:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8001aba:	23fc      	movs	r3, #252	; 0xfc
 8001abc:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001abe:	e005      	b.n	8001acc <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001ac0:	23fd      	movs	r3, #253	; 0xfd
 8001ac2:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001ac4:	e002      	b.n	8001acc <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001ac6:	23ff      	movs	r3, #255	; 0xff
 8001ac8:	77fb      	strb	r3, [r7, #31]
 8001aca:	e000      	b.n	8001ace <bmp280_set_regs+0xd0>
        if (len != 0)
 8001acc:	bf00      	nop
    }

    return rslt;
 8001ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd90      	pop	{r4, r7, pc}

08001ada <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001ae2:	23e0      	movs	r3, #224	; 0xe0
 8001ae4:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001ae6:	23b6      	movs	r3, #182	; 0xb6
 8001ae8:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fbec 	bl	80022c8 <null_ptr_check>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10d      	bne.n	8001b18 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001afc:	f107 010d 	add.w	r1, r7, #13
 8001b00:	f107 000e 	add.w	r0, r7, #14
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f7ff ff79 	bl	80019fe <bmp280_set_regs>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2002      	movs	r0, #2
 8001b16:	4798      	blx	r3
    }

    return rslt;
 8001b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fbc9 	bl	80022c8 <null_ptr_check>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d150      	bne.n	8001be4 <bmp280_init+0xc0>
    {
        while (try_count)
 8001b42:	e02d      	b.n	8001ba0 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	20d0      	movs	r0, #208	; 0xd0
 8001b4c:	f7ff ff20 	bl	8001990 <bmp280_get_regs>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11a      	bne.n	8001b92 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8001b60:	2b56      	cmp	r3, #86	; 0x56
 8001b62:	d007      	beq.n	8001b74 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b57      	cmp	r3, #87	; 0x57
 8001b6a:	d003      	beq.n	8001b74 <bmp280_init+0x50>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b58      	cmp	r3, #88	; 0x58
 8001b72:	d10e      	bne.n	8001b92 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffb0 	bl	8001ada <bmp280_soft_reset>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d110      	bne.n	8001ba8 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fbea 	bl	8002360 <get_calib_param>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001b90:	e00a      	b.n	8001ba8 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	200a      	movs	r0, #10
 8001b98:	4798      	blx	r3
            --try_count;
 8001b9a:	7bbb      	ldrb	r3, [r7, #14]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ce      	bne.n	8001b44 <bmp280_init+0x20>
 8001ba6:	e000      	b.n	8001baa <bmp280_init+0x86>
                break;
 8001ba8:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001bb0:	23fe      	movs	r3, #254	; 0xfe
 8001bb2:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d113      	bne.n	8001be4 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f000 fb62 	bl	80022c8 <null_ptr_check>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d137      	bne.n	8001c80 <bmp280_get_config+0x90>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d034      	beq.n	8001c80 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001c16:	f107 010c 	add.w	r1, r7, #12
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	20f4      	movs	r0, #244	; 0xf4
 8001c20:	f7ff feb6 	bl	8001990 <bmp280_get_regs>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d129      	bne.n	8001c84 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001c3a:	7b3b      	ldrb	r3, [r7, #12]
 8001c3c:	109b      	asrs	r3, r3, #2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001c4a:	7b7b      	ldrb	r3, [r7, #13]
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	109b      	asrs	r3, r3, #2
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8001c64:	7b7b      	ldrb	r3, [r7, #13]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	332c      	adds	r3, #44	; 0x2c
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]
 8001c7a:	7912      	ldrb	r2, [r2, #4]
 8001c7c:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001c7e:	e001      	b.n	8001c84 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001c80:	23ff      	movs	r3, #255	; 0xff
 8001c82:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 fbfc 	bl	800249c <conf_sensor>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	6039      	str	r1, [r7, #0]
 8001cb8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f000 fb04 	bl	80022c8 <null_ptr_check>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fbe0 	bl	800249c <conf_sensor>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f000 fae2 	bl	80022c8 <null_ptr_check>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d133      	bne.n	8001d78 <bmp280_get_uncomp_data+0x8c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d030      	beq.n	8001d78 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001d16:	f107 0108 	add.w	r1, r7, #8
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2206      	movs	r2, #6
 8001d1e:	20f7      	movs	r0, #247	; 0xf7
 8001d20:	f7ff fe36 	bl	8001990 <bmp280_get_regs>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d120      	bne.n	8001d72 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8001d30:	7a3b      	ldrb	r3, [r7, #8]
 8001d32:	031a      	lsls	r2, r3, #12
 8001d34:	7a7b      	ldrb	r3, [r7, #9]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	7aba      	ldrb	r2, [r7, #10]
 8001d3c:	0912      	lsrs	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	031a      	lsls	r2, r3, #12
 8001d4a:	7b3b      	ldrb	r3, [r7, #12]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	7b7a      	ldrb	r2, [r7, #13]
 8001d52:	0912      	lsrs	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fc4e 	bl	8002608 <st_check_boundaries>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001d70:	e004      	b.n	8001d7c <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8001d72:	23f3      	movs	r3, #243	; 0xf3
 8001d74:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001d76:	e001      	b.n	8001d7c <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001d78:	23ff      	movs	r3, #255	; 0xff
 8001d7a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001d88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d8c:	b08a      	sub	sp, #40	; 0x28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa96 	bl	80022c8 <null_ptr_check>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001da2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80ac 	bne.w	8001f04 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f7fe fbc9 	bl	8000544 <__aeabi_i2d>
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <bmp280_get_comp_temp_double+0x1a0>)
 8001db8:	f7fe fd58 	bl	800086c <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8a1b      	ldrh	r3, [r3, #16]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbab 	bl	8000524 <__aeabi_ui2d>
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <bmp280_get_comp_temp_double+0x1a4>)
 8001dd4:	f7fe fd4a 	bl	800086c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fa62 	bl	80002a8 <__aeabi_dsub>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
               ((double) dev->calib_param.dig_t2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fba6 	bl	8000544 <__aeabi_i2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	f7fe fc0a 	bl	8000618 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e0c:	68b8      	ldr	r0, [r7, #8]
 8001e0e:	f7fe fb99 	bl	8000544 <__aeabi_i2d>
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e1a:	f7fe fd27 	bl	800086c <__aeabi_ddiv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4614      	mov	r4, r2
 8001e24:	461d      	mov	r5, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8a1b      	ldrh	r3, [r3, #16]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb7a 	bl	8000524 <__aeabi_ui2d>
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <bmp280_get_comp_temp_double+0x1a8>)
 8001e36:	f7fe fd19 	bl	800086c <__aeabi_ddiv>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f7fe fa31 	bl	80002a8 <__aeabi_dsub>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f7fe fb78 	bl	8000544 <__aeabi_i2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e5c:	f7fe fd06 	bl	800086c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4690      	mov	r8, r2
 8001e66:	4699      	mov	r9, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	8a1b      	ldrh	r3, [r3, #16]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb59 	bl	8000524 <__aeabi_ui2d>
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <bmp280_get_comp_temp_double+0x1a8>)
 8001e78:	f7fe fcf8 	bl	800086c <__aeabi_ddiv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4640      	mov	r0, r8
 8001e82:	4649      	mov	r1, r9
 8001e84:	f7fe fa10 	bl	80002a8 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f7fe fbc2 	bl	8000618 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
            ((double) dev->calib_param.dig_t3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb4e 	bl	8000544 <__aeabi_i2d>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
        var2 =
 8001eac:	4620      	mov	r0, r4
 8001eae:	4629      	mov	r1, r5
 8001eb0:	f7fe fbb2 	bl	8000618 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001ebc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ec0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ec4:	f7fe f9f2 	bl	80002ac <__adddf3>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fe52 	bl	8000b78 <__aeabi_d2iz>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001eda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ede:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ee2:	f7fe f9e3 	bl	80002ac <__adddf3>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <bmp280_get_comp_temp_double+0x1ac>)
 8001ef4:	f7fe fcba 	bl	800086c <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	e9c1 2300 	strd	r2, r3, [r1]
 8001f02:	e009      	b.n	8001f18 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001f12:	23ef      	movs	r3, #239	; 0xef
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001f18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f26:	bf00      	nop
 8001f28:	40d00000 	.word	0x40d00000
 8001f2c:	40900000 	.word	0x40900000
 8001f30:	40c00000 	.word	0x40c00000
 8001f34:	40b40000 	.word	0x40b40000

08001f38 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8001f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f3c:	b08a      	sub	sp, #40	; 0x28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9be 	bl	80022c8 <null_ptr_check>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001f52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 8197 	bne.w	800228a <bmp280_get_comp_pres_double+0x352>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe faef 	bl	8000544 <__aeabi_i2d>
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f6e:	f7fe fc7d 	bl	800086c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	4bc8      	ldr	r3, [pc, #800]	; (80022a0 <bmp280_get_comp_pres_double+0x368>)
 8001f80:	f7fe f992 	bl	80002a8 <__aeabi_dsub>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f94:	f7fe fb40 	bl	8000618 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe facc 	bl	8000544 <__aeabi_i2d>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe fb30 	bl	8000618 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4bb7      	ldr	r3, [pc, #732]	; (80022a4 <bmp280_get_comp_pres_double+0x36c>)
 8001fc6:	f7fe fc51 	bl	800086c <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fab3 	bl	8000544 <__aeabi_i2d>
 8001fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fe2:	f7fe fb19 	bl	8000618 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	f7fe f95b 	bl	80002ac <__adddf3>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ffe:	f7fe f955 	bl	80002ac <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	4ba6      	ldr	r3, [pc, #664]	; (80022a8 <bmp280_get_comp_pres_double+0x370>)
 8002010:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002014:	f7fe fc2a 	bl	800086c <__aeabi_ddiv>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa8c 	bl	8000544 <__aeabi_i2d>
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b9e      	ldr	r3, [pc, #632]	; (80022ac <bmp280_get_comp_pres_double+0x374>)
 8002032:	f7fe faf1 	bl	8000618 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe f935 	bl	80002ac <__adddf3>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa77 	bl	8000544 <__aeabi_i2d>
 8002056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205a:	f7fe fadd 	bl	8000618 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800206a:	f7fe fad5 	bl	8000618 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b8d      	ldr	r3, [pc, #564]	; (80022b0 <bmp280_get_comp_pres_double+0x378>)
 800207c:	f7fe fbf6 	bl	800086c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4614      	mov	r4, r2
 8002086:	461d      	mov	r5, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa58 	bl	8000544 <__aeabi_i2d>
 8002094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002098:	f7fe fabe 	bl	8000618 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f902 	bl	80002ac <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <bmp280_get_comp_pres_double+0x378>)
 80020b6:	f7fe fbd9 	bl	800086c <__aeabi_ddiv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	e9c7 2306 	strd	r2, r3, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <bmp280_get_comp_pres_double+0x36c>)
 80020c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020cc:	f7fe fbce 	bl	800086c <__aeabi_ddiv>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b75      	ldr	r3, [pc, #468]	; (80022b4 <bmp280_get_comp_pres_double+0x37c>)
 80020de:	f7fe f8e5 	bl	80002ac <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4614      	mov	r4, r2
 80020e8:	461d      	mov	r5, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8adb      	ldrh	r3, [r3, #22]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa18 	bl	8000524 <__aeabi_ui2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fa8c 	bl	8000618 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9c7 2306 	strd	r2, r3, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8002108:	68b8      	ldr	r0, [r7, #8]
 800210a:	f7fe fa0b 	bl	8000524 <__aeabi_ui2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	4968      	ldr	r1, [pc, #416]	; (80022b8 <bmp280_get_comp_pres_double+0x380>)
 8002118:	f7fe f8c6 	bl	80002a8 <__aeabi_dsub>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	e9c1 2300 	strd	r2, r3, [r1]
        if (var1 < 0 || var1 > 0)
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002132:	f7fe fce3 	bl	8000afc <__aeabi_dcmplt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <bmp280_get_comp_pres_double+0x21c>
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002148:	f7fe fcf6 	bl	8000b38 <__aeabi_dcmpgt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8091 	beq.w	8002276 <bmp280_get_comp_pres_double+0x33e>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	e9d3 4500 	ldrd	r4, r5, [r3]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <bmp280_get_comp_pres_double+0x384>)
 8002160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002164:	f7fe fb82 	bl	800086c <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fe f89a 	bl	80002a8 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a346      	add	r3, pc, #280	; (adr r3, 8002298 <bmp280_get_comp_pres_double+0x360>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fa49 	bl	8000618 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002192:	f7fe fb6b 	bl	800086c <__aeabi_ddiv>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	e9c1 2300 	strd	r2, r3, [r1]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9cc 	bl	8000544 <__aeabi_i2d>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe fa31 	bl	8000618 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fa28 	bl	8000618 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <bmp280_get_comp_pres_double+0x388>)
 80021d6:	f7fe fb49 	bl	800086c <__aeabi_ddiv>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	e9c7 2306 	strd	r2, r3, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9a8 	bl	8000544 <__aeabi_i2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe fa0c 	bl	8000618 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <bmp280_get_comp_pres_double+0x36c>)
 800220e:	f7fe fb2d 	bl	800086c <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	e9c7 2304 	strd	r2, r3, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002224:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002228:	f7fe f840 	bl	80002ac <__adddf3>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4690      	mov	r8, r2
 8002232:	4699      	mov	r9, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f982 	bl	8000544 <__aeabi_i2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4640      	mov	r0, r8
 8002246:	4649      	mov	r1, r9
 8002248:	f7fe f830 	bl	80002ac <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <bmp280_get_comp_pres_double+0x38c>)
 800225a:	f7fe fb07 	bl	800086c <__aeabi_ddiv>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f7fe f821 	bl	80002ac <__adddf3>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	68f9      	ldr	r1, [r7, #12]
 8002270:	e9c1 2300 	strd	r2, r3, [r1]
 8002274:	e009      	b.n	800228a <bmp280_get_comp_pres_double+0x352>
        }
        else
        {
            *pressure = 0;
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9c1 2300 	strd	r2, r3, [r1]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8002284:	23ee      	movs	r3, #238	; 0xee
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 800228a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800228e:	4618      	mov	r0, r3
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002298:	00000000 	.word	0x00000000
 800229c:	40b86a00 	.word	0x40b86a00
 80022a0:	40ef4000 	.word	0x40ef4000
 80022a4:	40e00000 	.word	0x40e00000
 80022a8:	40100000 	.word	0x40100000
 80022ac:	40f00000 	.word	0x40f00000
 80022b0:	41200000 	.word	0x41200000
 80022b4:	3ff00000 	.word	0x3ff00000
 80022b8:	41300000 	.word	0x41300000
 80022bc:	40b00000 	.word	0x40b00000
 80022c0:	41e00000 	.word	0x41e00000
 80022c4:	40300000 	.word	0x40300000

080022c8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <null_ptr_check+0x26>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <null_ptr_check+0x26>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <null_ptr_check+0x26>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80022ee:	23ff      	movs	r3, #255	; 0xff
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e001      	b.n	80022f8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
 800231a:	e016      	b.n	800234a <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	441a      	add	r2, r3
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	440b      	add	r3, r1
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	441a      	add	r2, r3
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4619      	mov	r1, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	440b      	add	r3, r1
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	3301      	adds	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
 800234a:	7dfa      	ldrb	r2, [r7, #23]
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3e4      	bcc.n	800231c <interleave_data+0x14>
    }
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ffa3 	bl	80022c8 <null_ptr_check>
 8002382:	4603      	mov	r3, r0
 8002384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8002388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800238c:	2b00      	cmp	r3, #0
 800238e:	d17f      	bne.n	8002490 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8002390:	f107 010c 	add.w	r1, r7, #12
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2218      	movs	r2, #24
 8002398:	2088      	movs	r0, #136	; 0x88
 800239a:	f7ff faf9 	bl	8001990 <bmp280_get_regs>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80023a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d171      	bne.n	8002490 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 80023ac:	7b7b      	ldrb	r3, [r7, #13]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	7b3b      	ldrb	r3, [r7, #12]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80023d2:	7c7b      	ldrb	r3, [r7, #17]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	7c3b      	ldrb	r3, [r7, #16]
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	7cbb      	ldrb	r3, [r7, #18]
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80023f8:	7d7b      	ldrb	r3, [r7, #21]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	7d3b      	ldrb	r3, [r7, #20]
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	b21a      	sxth	r2, r3
 8002410:	7dbb      	ldrb	r3, [r7, #22]
 8002412:	b21b      	sxth	r3, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 800241c:	7e7b      	ldrb	r3, [r7, #25]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b21a      	sxth	r2, r3
 8002422:	7e3b      	ldrb	r3, [r7, #24]
 8002424:	b21b      	sxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800242e:	7efb      	ldrb	r3, [r7, #27]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	b21a      	sxth	r2, r3
 8002434:	7ebb      	ldrb	r3, [r7, #26]
 8002436:	b21b      	sxth	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8002440:	7f7b      	ldrb	r3, [r7, #29]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21a      	sxth	r2, r3
 8002446:	7f3b      	ldrb	r3, [r7, #28]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8002452:	7ffb      	ldrb	r3, [r7, #31]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	7fbb      	ldrb	r3, [r7, #30]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8002464:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	b21a      	sxth	r2, r3
 800246c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 800247a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b21a      	sxth	r2, r3
 8002482:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8002490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80024aa:	2300      	movs	r3, #0
 80024ac:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 80024ae:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80024b2:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff07 	bl	80022c8 <null_ptr_check>
 80024ba:	4603      	mov	r3, r0
 80024bc:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 80024be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 8095 	bne.w	80025f2 <conf_sensor+0x156>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8091 	beq.w	80025f2 <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 80024d0:	f107 0114 	add.w	r1, r7, #20
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	20f4      	movs	r0, #244	; 0xf4
 80024da:	f7ff fa59 	bl	8001990 <bmp280_get_regs>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80024e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 8086 	bne.w	80025f8 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff faf4 	bl	8001ada <bmp280_soft_reset>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80024f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d17c      	bne.n	80025f8 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80024fe:	7d3b      	ldrb	r3, [r7, #20]
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	b25a      	sxtb	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	b25b      	sxtb	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b25b      	sxtb	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8002518:	7d3b      	ldrb	r3, [r7, #20]
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f023 031c 	bic.w	r3, r3, #28
 8002520:	b25a      	sxtb	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	b25b      	sxtb	r3, r3
 800252a:	f003 031c 	and.w	r3, r3, #28
 800252e:	b25b      	sxtb	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b25b      	sxtb	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8002538:	7d7b      	ldrb	r3, [r7, #21]
 800253a:	b25b      	sxtb	r3, r3
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	b25a      	sxtb	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	789b      	ldrb	r3, [r3, #2]
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	b25b      	sxtb	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b25b      	sxtb	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8002552:	7d7b      	ldrb	r3, [r7, #21]
 8002554:	b25b      	sxtb	r3, r3
 8002556:	f023 031c 	bic.w	r3, r3, #28
 800255a:	b25a      	sxtb	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	78db      	ldrb	r3, [r3, #3]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	b25b      	sxtb	r3, r3
 8002564:	f003 031c 	and.w	r3, r3, #28
 8002568:	b25b      	sxtb	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b25b      	sxtb	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8002572:	7d7b      	ldrb	r3, [r7, #21]
 8002574:	b25b      	sxtb	r3, r3
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	b25a      	sxtb	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	b25b      	sxtb	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	b25b      	sxtb	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8002590:	f107 0114 	add.w	r1, r7, #20
 8002594:	f107 0010 	add.w	r0, r7, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f7ff fa2f 	bl	80019fe <bmp280_set_regs>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 80025a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d125      	bne.n	80025f8 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	332c      	adds	r3, #44	; 0x2c
 80025b2:	6810      	ldr	r0, [r2, #0]
 80025b4:	6018      	str	r0, [r3, #0]
 80025b6:	7912      	ldrb	r2, [r2, #4]
 80025b8:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 80025c0:	7d3b      	ldrb	r3, [r7, #20]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	f023 0303 	bic.w	r3, r3, #3
 80025c8:	b25a      	sxtb	r2, r3
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 80025dc:	f107 0114 	add.w	r1, r7, #20
 80025e0:	f107 0010 	add.w	r0, r7, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f7ff fa09 	bl	80019fe <bmp280_set_regs>
 80025ec:	4603      	mov	r3, r0
 80025ee:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80025f0:	e002      	b.n	80025f8 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80025f2:	23ff      	movs	r3, #255	; 0xff
 80025f4:	75fb      	strb	r3, [r7, #23]
 80025f6:	e000      	b.n	80025fa <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 80025f8:	bf00      	nop
    }

    return rslt;
 80025fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd03      	ble.n	8002624 <st_check_boundaries+0x1c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <st_check_boundaries+0x6c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	dd09      	ble.n	8002638 <st_check_boundaries+0x30>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	dd03      	ble.n	8002632 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	4a11      	ldr	r2, [pc, #68]	; (8002674 <st_check_boundaries+0x6c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	dd02      	ble.n	8002638 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8002632:	23f4      	movs	r3, #244	; 0xf4
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e015      	b.n	8002664 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	dd03      	ble.n	8002646 <st_check_boundaries+0x3e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <st_check_boundaries+0x6c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	dd02      	ble.n	800264c <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8002646:	23f6      	movs	r3, #246	; 0xf6
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e00b      	b.n	8002664 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	dd03      	ble.n	800265a <st_check_boundaries+0x52>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <st_check_boundaries+0x6c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	dd02      	ble.n	8002660 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 800265a:	23f5      	movs	r3, #245	; 0xf5
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e001      	b.n	8002664 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002664:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	000fffef 	.word	0x000fffef

08002678 <BMP280_init>:
#include "bmp280.h"
#include "bmp280_add.h"

struct bmp280_dev bmp;

int8_t BMP280_init(void) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
	int8_t rslt;
    struct bmp280_config conf;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <BMP280_init+0xa4>)
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <BMP280_init+0xa8>)
 8002682:	60da      	str	r2, [r3, #12]

    /* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
    bmp.dev_id = (BMP280_I2C_ADDR_PRIM<<1);
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <BMP280_init+0xa4>)
 8002686:	22ee      	movs	r2, #238	; 0xee
 8002688:	705a      	strb	r2, [r3, #1]

    /* Select the interface mode as I2C */
    bmp.intf = BMP280_I2C_INTF;
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <BMP280_init+0xa4>)
 800268c:	2201      	movs	r2, #1
 800268e:	709a      	strb	r2, [r3, #2]

    /* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
    bmp.read = i2c_reg_read;
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <BMP280_init+0xa4>)
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <BMP280_init+0xac>)
 8002694:	605a      	str	r2, [r3, #4]
    bmp.write = i2c_reg_write;
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <BMP280_init+0xa4>)
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <BMP280_init+0xb0>)
 800269a:	609a      	str	r2, [r3, #8]
     * bmp.dev_id = 0;
     * bmp.read = spi_reg_read;
     * bmp.write = spi_reg_write;
     * bmp.intf = BMP280_SPI_INTF;
     */
    rslt = bmp280_init(&bmp);
 800269c:	481f      	ldr	r0, [pc, #124]	; (800271c <BMP280_init+0xa4>)
 800269e:	f7ff fa41 	bl	8001b24 <bmp280_init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_init status", rslt);
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	4619      	mov	r1, r3
 80026ac:	481f      	ldr	r0, [pc, #124]	; (800272c <BMP280_init+0xb4>)
 80026ae:	f000 f925 	bl	80028fc <print_rslt>

    /* Always read the current settings before writing, especially when
     * all the configuration is not modified
     */
    rslt = bmp280_get_config(&conf, &bmp);
 80026b2:	463b      	mov	r3, r7
 80026b4:	4919      	ldr	r1, [pc, #100]	; (800271c <BMP280_init+0xa4>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fa9a 	bl	8001bf0 <bmp280_get_config>
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_get_config status", rslt);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4619      	mov	r1, r3
 80026c6:	481a      	ldr	r0, [pc, #104]	; (8002730 <BMP280_init+0xb8>)
 80026c8:	f000 f918 	bl	80028fc <print_rslt>

    /* configuring the temperature oversampling, filter coefficient and output data rate */
    /* Overwrite the desired settings */
    conf.filter = BMP280_FILTER_COEFF_2;
 80026cc:	2301      	movs	r3, #1
 80026ce:	70fb      	strb	r3, [r7, #3]

    /* Pressure oversampling set at 4x */
    conf.os_pres = BMP280_OS_4X;
 80026d0:	2303      	movs	r3, #3
 80026d2:	707b      	strb	r3, [r7, #1]

    /* Temperature oversampling set at 4x */
    conf.os_temp = BMP280_OS_4X;
 80026d4:	2303      	movs	r3, #3
 80026d6:	703b      	strb	r3, [r7, #0]

    /* Setting the output data rate as 1HZ(1000ms) */
    conf.odr = BMP280_ODR_1000_MS;
 80026d8:	2305      	movs	r3, #5
 80026da:	70bb      	strb	r3, [r7, #2]
    rslt = bmp280_set_config(&conf, &bmp);
 80026dc:	463b      	mov	r3, r7
 80026de:	490f      	ldr	r1, [pc, #60]	; (800271c <BMP280_init+0xa4>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fad5 	bl	8001c90 <bmp280_set_config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_set_config status", rslt);
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	4619      	mov	r1, r3
 80026f0:	4810      	ldr	r0, [pc, #64]	; (8002734 <BMP280_init+0xbc>)
 80026f2:	f000 f903 	bl	80028fc <print_rslt>

    /* Always set the power mode after setting the configuration */
    rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 80026f6:	4909      	ldr	r1, [pc, #36]	; (800271c <BMP280_init+0xa4>)
 80026f8:	2003      	movs	r0, #3
 80026fa:	f7ff fad8 	bl	8001cae <bmp280_set_power_mode>
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_set_power_mode status", rslt);
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <BMP280_init+0xc0>)
 800270a:	f000 f8f7 	bl	80028fc <print_rslt>

    return rslt;
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000620 	.word	0x20000620
 8002720:	08002865 	.word	0x08002865
 8002724:	080028bd 	.word	0x080028bd
 8002728:	0800287d 	.word	0x0800287d
 800272c:	08012730 	.word	0x08012730
 8002730:	08012744 	.word	0x08012744
 8002734:	08012760 	.word	0x08012760
 8002738:	0801277c 	.word	0x0801277c

0800273c <BMP280_read>:

int8_t BMP280_read(void) {
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b0a2      	sub	sp, #136	; 0x88
 8002740:	af04      	add	r7, sp, #16
     struct bmp280_uncomp_data ucomp_data;
     uint32_t pres32, pres64, temp32;
     double pres, temp;

	 /* Pobranie danych z czujnika */
     rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8002742:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002746:	4940      	ldr	r1, [pc, #256]	; (8002848 <BMP280_read+0x10c>)
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff facf 	bl	8001cec <bmp280_get_uncomp_data>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      //rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp);
     // rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp);


     /* Konwersja na liczby zmiennoprzecinkowe */
      rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
 8002754:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002756:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800275a:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <BMP280_read+0x10c>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fbeb 	bl	8001f38 <bmp280_get_comp_pres_double>
 8002762:	4603      	mov	r3, r0
 8002764:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
 8002768:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800276a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800276e:	4a36      	ldr	r2, [pc, #216]	; (8002848 <BMP280_read+0x10c>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fb09 	bl	8001d88 <bmp280_get_comp_temp_double>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
     /* Wyswietlenie wartosci */

     char komunikat1[20];
     char komunikat2[20];
     char usb_com[42];
     sprintf(komunikat1,"%.2f C ", temp);
 800277c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002780:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002784:	4931      	ldr	r1, [pc, #196]	; (800284c <BMP280_read+0x110>)
 8002786:	f00c fae3 	bl	800ed50 <siprintf>
     sprintf(komunikat2,"%.2f HPa ", pres/100);
 800278a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <BMP280_read+0x114>)
 8002794:	f7fe f86a 	bl	800086c <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80027a0:	492c      	ldr	r1, [pc, #176]	; (8002854 <BMP280_read+0x118>)
 80027a2:	f00c fad5 	bl	800ed50 <siprintf>
     GFX_draw_string(0, 48, (unsigned char *)"Temperatura:", WHITE, BLACK, 1, 1);
 80027a6:	2301      	movs	r3, #1
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	2301      	movs	r3, #1
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2301      	movs	r3, #1
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <BMP280_read+0x11c>)
 80027b6:	2130      	movs	r1, #48	; 0x30
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fbc5 	bl	8000f48 <GFX_draw_string>
     GFX_draw_string(0, 40, komunikat1, WHITE, BLACK, 1, 1);
 80027be:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80027c2:	2301      	movs	r3, #1
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2301      	movs	r3, #1
 80027d0:	2128      	movs	r1, #40	; 0x28
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe fbb8 	bl	8000f48 <GFX_draw_string>
     GFX_draw_string(0, 32, (unsigned char *)"Cisnienie:", WHITE, BLACK, 1, 1);
 80027d8:	2301      	movs	r3, #1
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	2301      	movs	r3, #1
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2300      	movs	r3, #0
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <BMP280_read+0x120>)
 80027e8:	2120      	movs	r1, #32
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe fbac 	bl	8000f48 <GFX_draw_string>
     GFX_draw_string(0, 24, komunikat2, WHITE, BLACK, 1, 1);
 80027f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027f4:	2301      	movs	r3, #1
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2301      	movs	r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2300      	movs	r3, #0
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	2118      	movs	r1, #24
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fb9f 	bl	8000f48 <GFX_draw_string>
     sprintf(usb_com,"Temperatura: %.2f Ciśnienie: %.2f \r\n", temp ,pres/100);
 800280a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800280e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <BMP280_read+0x114>)
 8002818:	f7fe f828 	bl	800086c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	1d38      	adds	r0, r7, #4
 8002822:	e9cd 2300 	strd	r2, r3, [sp]
 8002826:	4622      	mov	r2, r4
 8002828:	462b      	mov	r3, r5
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <BMP280_read+0x124>)
 800282c:	f00c fa90 	bl	800ed50 <siprintf>
     CDC_Transmit_FS(&usb_com,sizeof(usb_com));
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	212a      	movs	r1, #42	; 0x2a
 8002834:	4618      	mov	r0, r3
 8002836:	f00a fd71 	bl	800d31c <CDC_Transmit_FS>

     return rslt;
 800283a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800283e:	4618      	mov	r0, r3
 8002840:	3778      	adds	r7, #120	; 0x78
 8002842:	46bd      	mov	sp, r7
 8002844:	bdb0      	pop	{r4, r5, r7, pc}
 8002846:	bf00      	nop
 8002848:	20000620 	.word	0x20000620
 800284c:	0801279c 	.word	0x0801279c
 8002850:	40590000 	.word	0x40590000
 8002854:	080127a4 	.word	0x080127a4
 8002858:	080127b0 	.word	0x080127b0
 800285c:	080127c0 	.word	0x080127c0
 8002860:	080127cc 	.word	0x080127cc

08002864 <delay_ms>:
 *  @param[in] period_ms  : the required wait time in milliseconds.
 *  @return void.
 *
 */
void delay_ms(uint32_t period_ms)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
    /* Implement the delay routine according to the target machine */
	HAL_Delay(period_ms);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fe7b 	bl	8003568 <HAL_Delay>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af04      	add	r7, sp, #16
 8002882:	603a      	str	r2, [r7, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
 800288a:	460b      	mov	r3, r1
 800288c:	71bb      	strb	r3, [r7, #6]
 800288e:	4613      	mov	r3, r2
 8002890:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C write routine according to the target machine. */
	HAL_I2C_Mem_Write(&hi2c2, i2c_addr, reg_addr, 1, reg_data, length, 100);
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	b299      	uxth	r1, r3
 8002896:	79bb      	ldrb	r3, [r7, #6]
 8002898:	b29a      	uxth	r2, r3
 800289a:	2364      	movs	r3, #100	; 0x64
 800289c:	9302      	str	r3, [sp, #8]
 800289e:	88bb      	ldrh	r3, [r7, #4]
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2301      	movs	r3, #1
 80028a8:	4803      	ldr	r0, [pc, #12]	; (80028b8 <i2c_reg_write+0x3c>)
 80028aa:	f002 fbbf 	bl	800502c <HAL_I2C_Mem_Write>
    return 0;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200006e8 	.word	0x200006e8

080028bc <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	603a      	str	r2, [r7, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
 80028ca:	460b      	mov	r3, r1
 80028cc:	71bb      	strb	r3, [r7, #6]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C read routine according to the target machine. */
	HAL_I2C_Mem_Read(&hi2c2, i2c_addr, reg_addr, 1, reg_data, length, 100);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	b299      	uxth	r1, r3
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	2364      	movs	r3, #100	; 0x64
 80028dc:	9302      	str	r3, [sp, #8]
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2301      	movs	r3, #1
 80028e8:	4803      	ldr	r0, [pc, #12]	; (80028f8 <i2c_reg_read+0x3c>)
 80028ea:	f002 fcb3 	bl	8005254 <HAL_I2C_Mem_Read>
    return 0;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200006e8 	.word	0x200006e8

080028fc <print_rslt>:
 *  @param[in] rslt     : error code returned by the API whose execution status has to be printed.
 *
 *  @return void.
 */
void print_rslt(char * api_name, int8_t rslt)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP280_OK)
 8002908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d039      	beq.n	8002984 <print_rslt+0x88>
    {
    	printf("%s\t", api_name);
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	481e      	ldr	r0, [pc, #120]	; (800298c <print_rslt+0x90>)
 8002914:	f00c f9ee 	bl	800ecf4 <iprintf>
        if (rslt == BMP280_E_NULL_PTR)
 8002918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d106      	bne.n	8002930 <print_rslt+0x34>
        {
            printf("Error [%d] : Null pointer error\r\n", rslt);
 8002922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002926:	4619      	mov	r1, r3
 8002928:	4819      	ldr	r0, [pc, #100]	; (8002990 <print_rslt+0x94>)
 800292a:	f00c f9e3 	bl	800ecf4 <iprintf>
        {
            /* For more error codes refer "*_defs.h" */
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 800292e:	e029      	b.n	8002984 <print_rslt+0x88>
        else if (rslt == BMP280_E_COMM_FAIL)
 8002930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002934:	f113 0f04 	cmn.w	r3, #4
 8002938:	d106      	bne.n	8002948 <print_rslt+0x4c>
            printf("Error [%d] : Bus communication failed\r\n", rslt);
 800293a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800293e:	4619      	mov	r1, r3
 8002940:	4814      	ldr	r0, [pc, #80]	; (8002994 <print_rslt+0x98>)
 8002942:	f00c f9d7 	bl	800ecf4 <iprintf>
}
 8002946:	e01d      	b.n	8002984 <print_rslt+0x88>
        else if (rslt == BMP280_E_IMPLAUS_TEMP)
 8002948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294c:	f113 0f07 	cmn.w	r3, #7
 8002950:	d106      	bne.n	8002960 <print_rslt+0x64>
            printf("Error [%d] : Invalid Temperature\r\n", rslt);
 8002952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002956:	4619      	mov	r1, r3
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <print_rslt+0x9c>)
 800295a:	f00c f9cb 	bl	800ecf4 <iprintf>
}
 800295e:	e011      	b.n	8002984 <print_rslt+0x88>
        else if (rslt == BMP280_E_DEV_NOT_FOUND)
 8002960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002964:	f113 0f02 	cmn.w	r3, #2
 8002968:	d106      	bne.n	8002978 <print_rslt+0x7c>
            printf("Error [%d] : Device not found\r\n", rslt);
 800296a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296e:	4619      	mov	r1, r3
 8002970:	480a      	ldr	r0, [pc, #40]	; (800299c <print_rslt+0xa0>)
 8002972:	f00c f9bf 	bl	800ecf4 <iprintf>
}
 8002976:	e005      	b.n	8002984 <print_rslt+0x88>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8002978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297c:	4619      	mov	r1, r3
 800297e:	4808      	ldr	r0, [pc, #32]	; (80029a0 <print_rslt+0xa4>)
 8002980:	f00c f9b8 	bl	800ecf4 <iprintf>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	080127f4 	.word	0x080127f4
 8002990:	080127f8 	.word	0x080127f8
 8002994:	0801281c 	.word	0x0801281c
 8002998:	08012844 	.word	0x08012844
 800299c:	08012868 	.word	0x08012868
 80029a0:	08012888 	.word	0x08012888

080029a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_DMA_Init+0x38>)
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <MX_DMA_Init+0x38>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6493      	str	r3, [r2, #72]	; 0x48
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_DMA_Init+0x38>)
 80029b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2010      	movs	r0, #16
 80029c8:	f001 fe86 	bl	80046d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80029cc:	2010      	movs	r0, #16
 80029ce:	f001 fe9f 	bl	8004710 <HAL_NVIC_EnableIRQ>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <MX_GPIO_Init>:
        * EXTI
     PG7   ------> LPUART1_TX
     PG8   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <MX_GPIO_Init+0x140>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a49      	ldr	r2, [pc, #292]	; (8002b20 <MX_GPIO_Init+0x140>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002a56:	f005 fb3f 	bl	80080d8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <MX_GPIO_Init+0x140>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
 8002a74:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002a78:	482a      	ldr	r0, [pc, #168]	; (8002b24 <MX_GPIO_Init+0x144>)
 8002a7a:	f002 fa2f 	bl	8004edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	4829      	ldr	r0, [pc, #164]	; (8002b28 <MX_GPIO_Init+0x148>)
 8002a84:	f002 fa2a 	bl	8004edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4823      	ldr	r0, [pc, #140]	; (8002b2c <MX_GPIO_Init+0x14c>)
 8002aa0:	f002 f88a 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002aa4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	4819      	ldr	r0, [pc, #100]	; (8002b24 <MX_GPIO_Init+0x144>)
 8002abe:	f002 f87b 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4814      	ldr	r0, [pc, #80]	; (8002b28 <MX_GPIO_Init+0x148>)
 8002ad6:	f002 f86f 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_GPIO_Init+0x148>)
 8002af2:	f002 f861 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002af6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b08:	2308      	movs	r3, #8
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_GPIO_Init+0x148>)
 8002b14:	f002 f850 	bl	8004bb8 <HAL_GPIO_Init>

}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	48000400 	.word	0x48000400
 8002b28:	48001800 	.word	0x48001800
 8002b2c:	48000800 	.word	0x48000800

08002b30 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <MX_I2C1_Init+0x78>)
 8002b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <MX_I2C1_Init+0x7c>)
 8002b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b6a:	480e      	ldr	r0, [pc, #56]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b6c:	f002 f9ce 	bl	8004f0c <HAL_I2C_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b76:	f000 fa3a 	bl	8002fee <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4809      	ldr	r0, [pc, #36]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b7e:	f004 f8fb 	bl	8006d78 <HAL_I2CEx_ConfigAnalogFilter>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b88:	f000 fa31 	bl	8002fee <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_I2C1_Init+0x74>)
 8002b90:	f004 f93d 	bl	8006e0e <HAL_I2CEx_ConfigDigitalFilter>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b9a:	f000 fa28 	bl	8002fee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000069c 	.word	0x2000069c
 8002ba8:	40005400 	.word	0x40005400
 8002bac:	00909beb 	.word	0x00909beb

08002bb0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <MX_I2C2_Init+0x78>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <MX_I2C2_Init+0x7c>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bea:	480e      	ldr	r0, [pc, #56]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bec:	f002 f98e 	bl	8004f0c <HAL_I2C_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002bf6:	f000 f9fa 	bl	8002fee <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4809      	ldr	r0, [pc, #36]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002bfe:	f004 f8bb 	bl	8006d78 <HAL_I2CEx_ConfigAnalogFilter>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c08:	f000 f9f1 	bl	8002fee <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <MX_I2C2_Init+0x74>)
 8002c10:	f004 f8fd 	bl	8006e0e <HAL_I2CEx_ConfigDigitalFilter>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c1a:	f000 f9e8 	bl	8002fee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200006e8 	.word	0x200006e8
 8002c28:	40005800 	.word	0x40005800
 8002c2c:	00301347 	.word	0x00301347

08002c30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0ae      	sub	sp, #184	; 0xb8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c48:	f107 0318 	add.w	r3, r7, #24
 8002c4c:	228c      	movs	r2, #140	; 0x8c
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f00b f923 	bl	800de9c <memset>
  if(i2cHandle->Instance==I2C1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <HAL_I2C_MspInit+0x198>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d16d      	bne.n	8002d3c <HAL_I2C_MspInit+0x10c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c60:	2340      	movs	r3, #64	; 0x40
 8002c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c68:	f107 0318 	add.w	r3, r7, #24
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f006 f88b 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c78:	f000 f9b9 	bl	8002fee <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9c:	2312      	movs	r3, #18
 8002c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4845      	ldr	r0, [pc, #276]	; (8002dd0 <HAL_I2C_MspInit+0x1a0>)
 8002cbc:	f001 ff7c 	bl	8004bb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc0:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	4a41      	ldr	r2, [pc, #260]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cca:	6593      	str	r3, [r2, #88]	; 0x58
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002cda:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <HAL_I2C_MspInit+0x1a8>)
 8002cdc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cea:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002d02:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d0e:	4831      	ldr	r0, [pc, #196]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002d10:	f001 fd0c 	bl	800472c <HAL_DMA_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8002d1a:	f000 f968 	bl	8002fee <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
 8002d24:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <HAL_I2C_MspInit+0x1a4>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	201f      	movs	r0, #31
 8002d30:	f001 fcd2 	bl	80046d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d34:	201f      	movs	r0, #31
 8002d36:	f001 fceb 	bl	8004710 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002d3a:	e040      	b.n	8002dbe <HAL_I2C_MspInit+0x18e>
  else if(i2cHandle->Instance==I2C2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_I2C_MspInit+0x1ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d13b      	bne.n	8002dbe <HAL_I2C_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d4e:	f107 0318 	add.w	r3, r7, #24
 8002d52:	4618      	mov	r0, r3
 8002d54:	f006 f818 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_MspInit+0x132>
      Error_Handler();
 8002d5e:	f000 f946 	bl	8002fee <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d82:	2312      	movs	r3, #18
 8002d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d94:	2304      	movs	r3, #4
 8002d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <HAL_I2C_MspInit+0x1a0>)
 8002da2:	f001 ff09 	bl	8004bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db0:	6593      	str	r3, [r2, #88]	; 0x58
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_I2C_MspInit+0x19c>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	37b8      	adds	r7, #184	; 0xb8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40005400 	.word	0x40005400
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	20000654 	.word	0x20000654
 8002dd8:	4002006c 	.word	0x4002006c
 8002ddc:	40005800 	.word	0x40005800

08002de0 <get_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b08b      	sub	sp, #44	; 0x2c
 8002de4:	af04      	add	r7, sp, #16
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002de6:	463b      	mov	r3, r7
 8002de8:	2200      	movs	r2, #0
 8002dea:	4619      	mov	r1, r3
 8002dec:	4814      	ldr	r0, [pc, #80]	; (8002e40 <get_time+0x60>)
 8002dee:	f006 fdad 	bl	800994c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	2200      	movs	r2, #0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4811      	ldr	r0, [pc, #68]	; (8002e40 <get_time+0x60>)
 8002dfc:	f006 fe89 	bl	8009b12 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */

	 sprintf((char*)time,"%02d:%02d %02d.%02d.%2d",gTime.Hours, gTime.Minutes,gDate.Date, gDate.Month, gDate.Year);
 8002e00:	783b      	ldrb	r3, [r7, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	461c      	mov	r4, r3
 8002e08:	7dbb      	ldrb	r3, [r7, #22]
 8002e0a:	7d7a      	ldrb	r2, [r7, #21]
 8002e0c:	7df9      	ldrb	r1, [r7, #23]
 8002e0e:	9102      	str	r1, [sp, #8]
 8002e10:	9201      	str	r2, [sp, #4]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4623      	mov	r3, r4
 8002e16:	4602      	mov	r2, r0
 8002e18:	490a      	ldr	r1, [pc, #40]	; (8002e44 <get_time+0x64>)
 8002e1a:	480b      	ldr	r0, [pc, #44]	; (8002e48 <get_time+0x68>)
 8002e1c:	f00b ff98 	bl	800ed50 <siprintf>
	/* Display date Format: dd-mm-yy */

	 //sprintf((char*)date,"%02d.%02d.%2d",gDate.Date, gDate.Month, gDate.Year);
	  GFX_draw_string(0, 56, time, BLACK, WHITE, 1, 1);
 8002e20:	2301      	movs	r3, #1
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	2301      	movs	r3, #1
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <get_time+0x68>)
 8002e30:	2138      	movs	r1, #56	; 0x38
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe f888 	bl	8000f48 <GFX_draw_string>
	  //GFX_draw_string(0, 0, date, WHITE, BLACK, 1, 1);
}
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	2000074c 	.word	0x2000074c
 8002e44:	080128ac 	.word	0x080128ac
 8002e48:	20000734 	.word	0x20000734

08002e4c <set_time>:
void set_time (void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  sTime.Hours = 0x19; // set hours
 8002e52:	2319      	movs	r3, #25
 8002e54:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22; // set minutes
 8002e56:	2322      	movs	r3, #34	; 0x22
 8002e58:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30; // set seconds
 8002e5a:	2330      	movs	r3, #48	; 0x30
 8002e5c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4812      	ldr	r0, [pc, #72]	; (8002eb8 <set_time+0x6c>)
 8002e6e:	f006 fcd0 	bl	8009812 <HAL_RTC_SetTime>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <set_time+0x30>
  {
    Error_Handler();
 8002e78:	f000 f8b9 	bl	8002fee <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY; //
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY; //
 8002e80:	2302      	movs	r3, #2
 8002e82:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10; // date
 8002e84:	2310      	movs	r3, #16
 8002e86:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22; // year
 8002e88:	2322      	movs	r3, #34	; 0x22
 8002e8a:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4619      	mov	r1, r3
 8002e92:	4809      	ldr	r0, [pc, #36]	; (8002eb8 <set_time+0x6c>)
 8002e94:	f006 fdb6 	bl	8009a04 <HAL_RTC_SetDate>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <set_time+0x56>
  {
    Error_Handler();
 8002e9e:	f000 f8a6 	bl	8002fee <Error_Handler>
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002ea2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <set_time+0x6c>)
 8002eaa:	f006 ff51 	bl	8009d50 <HAL_RTCEx_BKUPWrite>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000074c 	.word	0x2000074c

08002ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ec0:	f000 fb19 	bl	80034f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ec4:	f000 f822 	bl	8002f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec8:	f7ff fd8a 	bl	80029e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ecc:	f7ff fd6a 	bl	80029a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8002ed0:	f7ff fe2e 	bl	8002b30 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002ed4:	f7fe fca2 	bl	800181c <MX_ADC1_Init>
  MX_I2C2_Init();
 8002ed8:	f7ff fe6a 	bl	8002bb0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8002edc:	f00a f960 	bl	800d1a0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8002ee0:	f000 f88a 	bl	8002ff8 <MX_RTC_Init>
  GFX_draw_string(0, 0, (unsigned char *)"Pierszy", WHITE, BLACK, 1, 1);*/
  /*SSD1306_init();
  SSD1306_display_repaint();
  BMP280_init();
  set_time();*/
  set_time();
 8002ee4:	f7ff ffb2 	bl	8002e4c <set_time>
  SSD1306_init();
 8002ee8:	f7fe f8de 	bl	80010a8 <SSD1306_init>
  SSD1306_display_repaint();
 8002eec:	f7fe fc54 	bl	8001798 <SSD1306_display_repaint>
  BMP280_init();
 8002ef0:	f7ff fbc2 	bl	8002678 <BMP280_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8002ef4:	f7ff ff74 	bl	8002de0 <get_time>
	  BMP280_read();
 8002ef8:	f7ff fc20 	bl	800273c <BMP280_read>
	  SSD1306_display_repaint();
 8002efc:	f7fe fc4c 	bl	8001798 <SSD1306_display_repaint>
	  HAL_Delay(1000);
 8002f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f04:	f000 fb30 	bl	8003568 <HAL_Delay>
  {
 8002f08:	e7f4      	b.n	8002ef4 <main+0x38>
	...

08002f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b096      	sub	sp, #88	; 0x58
 8002f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	2244      	movs	r2, #68	; 0x44
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f00a ffbe 	bl	800de9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f20:	463b      	mov	r3, r7
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f32:	f005 f86b 	bl	800800c <HAL_PWREx_ControlVoltageScaling>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002f3c:	f000 f857 	bl	8002fee <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f40:	f005 f846 	bl	8007fd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f44:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <SystemClock_Config+0xc0>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <SystemClock_Config+0xc0>)
 8002f4c:	f023 0318 	bic.w	r3, r3, #24
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002f54:	2326      	movs	r3, #38	; 0x26
 8002f56:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002f62:	2301      	movs	r3, #1
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f66:	2340      	movs	r3, #64	; 0x40
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002f76:	230a      	movs	r3, #10
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f82:	2302      	movs	r3, #2
 8002f84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 f8b4 	bl	80080f8 <HAL_RCC_OscConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002f96:	f000 f82a 	bl	8002fee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f9a:	230f      	movs	r3, #15
 8002f9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002faa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f005 fcc5 	bl	8008944 <HAL_RCC_ClockConfig>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002fc0:	f000 f815 	bl	8002fee <Error_Handler>
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	3758      	adds	r7, #88	; 0x58
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fe2:	f000 faa1 	bl	8003528 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff2:	b672      	cpsid	i
}
 8002ff4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <Error_Handler+0x8>

08002ff8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <MX_RTC_Init+0xb4>)
 8003014:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003018:	2200      	movs	r2, #0
 800301a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <MX_RTC_Init+0xb0>)
 800301e:	227f      	movs	r2, #127	; 0x7f
 8003020:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <MX_RTC_Init+0xb0>)
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003030:	2200      	movs	r2, #0
 8003032:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003036:	2200      	movs	r2, #0
 8003038:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <MX_RTC_Init+0xb0>)
 800303c:	2200      	movs	r2, #0
 800303e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003040:	4819      	ldr	r0, [pc, #100]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003042:	f006 fb6b 	bl	800971c <HAL_RTC_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800304c:	f7ff ffcf 	bl	8002fee <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 8003050:	2319      	movs	r3, #25
 8003052:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x5;
 8003054:	2305      	movs	r3, #5
 8003056:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003058:	2300      	movs	r3, #0
 800305a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2201      	movs	r2, #1
 8003068:	4619      	mov	r1, r3
 800306a:	480f      	ldr	r0, [pc, #60]	; (80030a8 <MX_RTC_Init+0xb0>)
 800306c:	f006 fbd1 	bl	8009812 <HAL_RTC_SetTime>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003076:	f7ff ffba 	bl	8002fee <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800307a:	2304      	movs	r3, #4
 800307c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800307e:	2302      	movs	r3, #2
 8003080:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8003082:	2310      	movs	r3, #16
 8003084:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003086:	2300      	movs	r3, #0
 8003088:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800308a:	463b      	mov	r3, r7
 800308c:	2201      	movs	r2, #1
 800308e:	4619      	mov	r1, r3
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_RTC_Init+0xb0>)
 8003092:	f006 fcb7 	bl	8009a04 <HAL_RTC_SetDate>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800309c:	f7ff ffa7 	bl	8002fee <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000074c 	.word	0x2000074c
 80030ac:	40002800 	.word	0x40002800

080030b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0a6      	sub	sp, #152	; 0x98
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	228c      	movs	r2, #140	; 0x8c
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f00a feeb 	bl	800de9c <memset>
  if(rtcHandle->Instance==RTC)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_RTC_MspInit+0x5c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d118      	bne.n	8003102 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4618      	mov	r0, r3
 80030e4:	f005 fe50 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80030ee:	f7ff ff7e 	bl	8002fee <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_RTC_MspInit+0x60>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_RTC_MspInit+0x60>)
 80030fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003102:	bf00      	nop
 8003104:	3798      	adds	r7, #152	; 0x98
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40002800 	.word	0x40002800
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_MspInit+0x44>)
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <HAL_MspInit+0x44>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6613      	str	r3, [r2, #96]	; 0x60
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_MspInit+0x44>)
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_MspInit+0x44>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_MspInit+0x44>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6593      	str	r3, [r2, #88]	; 0x58
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_MspInit+0x44>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	201c      	movs	r0, #28
 8003172:	f001 fab1 	bl	80046d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003176:	201c      	movs	r0, #28
 8003178:	f001 faca 	bl	8004710 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_InitTick+0xa4>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_InitTick+0xa4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_InitTick+0xa4>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003194:	f107 0210 	add.w	r2, r7, #16
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f005 fd60 	bl	8008c64 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80031a4:	f005 fd48 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 80031a8:	4603      	mov	r3, r0
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_InitTick+0xa8>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9b      	lsrs	r3, r3, #18
 80031b8:	3b01      	subs	r3, #1
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_InitTick+0xac>)
 80031be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_InitTick+0xac>)
 80031c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031ca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <HAL_InitTick+0xac>)
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_InitTick+0xac>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_InitTick+0xac>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80031de:	480a      	ldr	r0, [pc, #40]	; (8003208 <HAL_InitTick+0xac>)
 80031e0:	f006 fdcf 	bl	8009d82 <HAL_TIM_Base_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80031ea:	4807      	ldr	r0, [pc, #28]	; (8003208 <HAL_InitTick+0xac>)
 80031ec:	f006 fe2a 	bl	8009e44 <HAL_TIM_Base_Start_IT>
 80031f0:	4603      	mov	r3, r0
 80031f2:	e000      	b.n	80031f6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3730      	adds	r7, #48	; 0x30
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	431bde83 	.word	0x431bde83
 8003208:	20000770 	.word	0x20000770

0800320c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <NMI_Handler+0x4>

08003212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003216:	e7fe      	b.n	8003216 <HardFault_Handler+0x4>

08003218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321c:	e7fe      	b.n	800321c <MemManage_Handler+0x4>

0800321e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003222:	e7fe      	b.n	8003222 <BusFault_Handler+0x4>

08003224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <UsageFault_Handler+0x4>

0800322a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <DMA1_Channel6_IRQHandler+0x10>)
 800326a:	f001 fbb8 	bl	80049de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000654 	.word	0x20000654

08003278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <TIM2_IRQHandler+0x10>)
 800327e:	f006 fe51 	bl	8009f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000770 	.word	0x20000770

0800328c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003290:	4802      	ldr	r0, [pc, #8]	; (800329c <I2C1_EV_IRQHandler+0x10>)
 8003292:	f002 f9ef 	bl	8005674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000069c 	.word	0x2000069c

080032a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <OTG_FS_IRQHandler+0x10>)
 80032a6:	f003 ff51 	bl	800714c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20001c90 	.word	0x20001c90

080032b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
	return 1;
 80032b8:	2301      	movs	r3, #1
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <_kill>:

int _kill(int pid, int sig)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032ce:	f00a fdb3 	bl	800de38 <__errno>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2216      	movs	r2, #22
 80032d6:	601a      	str	r2, [r3, #0]
	return -1;
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_exit>:

void _exit (int status)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ffe7 	bl	80032c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032f6:	e7fe      	b.n	80032f6 <_exit+0x12>

080032f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e00a      	b.n	8003320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800330a:	f3af 8000 	nop.w
 800330e:	4601      	mov	r1, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	60ba      	str	r2, [r7, #8]
 8003316:	b2ca      	uxtb	r2, r1
 8003318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	dbf0      	blt.n	800330a <_read+0x12>
	}

return len;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e009      	b.n	8003358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	60ba      	str	r2, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	dbf1      	blt.n	8003344 <_write+0x12>
	}
	return len;
 8003360:	687b      	ldr	r3, [r7, #4]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_close>:

int _close(int file)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	return -1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003392:	605a      	str	r2, [r3, #4]
	return 0;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <_isatty>:

int _isatty(int file)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
	return 1;
 80033aa:	2301      	movs	r3, #1
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
	return 0;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <_sbrk+0x5c>)
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <_sbrk+0x60>)
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <_sbrk+0x64>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <_sbrk+0x64>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <_sbrk+0x68>)
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <_sbrk+0x64>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	429a      	cmp	r2, r3
 8003402:	d207      	bcs.n	8003414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003404:	f00a fd18 	bl	800de38 <__errno>
 8003408:	4603      	mov	r3, r0
 800340a:	220c      	movs	r2, #12
 800340c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	e009      	b.n	8003428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <_sbrk+0x64>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800341a:	4b07      	ldr	r3, [pc, #28]	; (8003438 <_sbrk+0x64>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	4a05      	ldr	r2, [pc, #20]	; (8003438 <_sbrk+0x64>)
 8003424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20050000 	.word	0x20050000
 8003434:	00000400 	.word	0x00000400
 8003438:	20000388 	.word	0x20000388
 800343c:	200020a8 	.word	0x200020a8

08003440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <SystemInit+0x5c>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <SystemInit+0x5c>)
 800344c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <SystemInit+0x60>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <SystemInit+0x60>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <SystemInit+0x60>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <SystemInit+0x60>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <SystemInit+0x60>)
 800346c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003470:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003474:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <SystemInit+0x60>)
 8003478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800347c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <SystemInit+0x60>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <SystemInit+0x60>)
 8003484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003488:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <SystemInit+0x60>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000ed00 	.word	0xe000ed00
 80034a0:	40021000 	.word	0x40021000

080034a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034a8:	f7ff ffca 	bl	8003440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034ac:	480c      	ldr	r0, [pc, #48]	; (80034e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80034ae:	490d      	ldr	r1, [pc, #52]	; (80034e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <LoopForever+0xe>)
  movs r3, #0
 80034b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b4:	e002      	b.n	80034bc <LoopCopyDataInit>

080034b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ba:	3304      	adds	r3, #4

080034bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034c0:	d3f9      	bcc.n	80034b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80034c4:	4c0a      	ldr	r4, [pc, #40]	; (80034f0 <LoopForever+0x16>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c8:	e001      	b.n	80034ce <LoopFillZerobss>

080034ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034cc:	3204      	adds	r2, #4

080034ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034d0:	d3fb      	bcc.n	80034ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034d2:	f00a fcb7 	bl	800de44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034d6:	f7ff fcf1 	bl	8002ebc <main>

080034da <LoopForever>:

LoopForever:
    b LoopForever
 80034da:	e7fe      	b.n	80034da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80034e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e4:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 80034e8:	08013324 	.word	0x08013324
  ldr r2, =_sbss
 80034ec:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 80034f0:	200020a8 	.word	0x200020a8

080034f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034f4:	e7fe      	b.n	80034f4 <ADC1_2_IRQHandler>

080034f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003500:	2003      	movs	r0, #3
 8003502:	f001 f8de 	bl	80046c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003506:	200f      	movs	r0, #15
 8003508:	f7ff fe28 	bl	800315c <HAL_InitTick>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	71fb      	strb	r3, [r7, #7]
 8003516:	e001      	b.n	800351c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003518:	f7ff fdfc 	bl	8003114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800351c:	79fb      	ldrb	r3, [r7, #7]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x20>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_IncTick+0x24>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4413      	add	r3, r2
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_IncTick+0x24>)
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000008 	.word	0x20000008
 800354c:	200007bc 	.word	0x200007bc

08003550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return uwTick;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_GetTick+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	200007bc 	.word	0x200007bc

08003568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003570:	f7ff ffee 	bl	8003550 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d005      	beq.n	800358e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_Delay+0x44>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800358e:	bf00      	nop
 8003590:	f7ff ffde 	bl	8003550 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d8f7      	bhi.n	8003590 <HAL_Delay+0x28>
  {
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000008 	.word	0x20000008

080035b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3360      	adds	r3, #96	; 0x60
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <LL_ADC_SetOffset+0x44>)
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	03fff000 	.word	0x03fff000

08003660 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3360      	adds	r3, #96	; 0x60
 800366e:	461a      	mov	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3360      	adds	r3, #96	; 0x60
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	615a      	str	r2, [r3, #20]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3330      	adds	r3, #48	; 0x30
 80036f8:	461a      	mov	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	211f      	movs	r1, #31
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	f003 011f 	and.w	r1, r3, #31
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3314      	adds	r3, #20
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	0e5b      	lsrs	r3, r3, #25
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0d1b      	lsrs	r3, r3, #20
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2107      	movs	r1, #7
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0d1b      	lsrs	r3, r3, #20
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	431a      	orrs	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0318 	and.w	r3, r3, #24
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80037bc:	40d9      	lsrs	r1, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	400b      	ands	r3, r1
 80037c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	0007ffff 	.word	0x0007ffff

080037e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6093      	str	r3, [r2, #8]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003818:	d101      	bne.n	800381e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800383c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003840:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003868:	d101      	bne.n	800386e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <LL_ADC_IsEnabled+0x18>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <LL_ADC_IsEnabled+0x1a>
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d101      	bne.n	80038ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d101      	bne.n	80038e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e139      	b.n	8003b7e <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd fff5 	bl	8001908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff67 	bl	8003804 <LL_ADC_IsDeepPowerDownEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff4d 	bl	80037e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff82 	bl	8003854 <LL_ADC_IsInternalRegulatorEnabled>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d115      	bne.n	8003982 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff66 	bl	800382c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003960:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_ADC_Init+0x298>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	4a89      	ldr	r2, [pc, #548]	; (8003b8c <HAL_ADC_Init+0x29c>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003974:	e002      	b.n	800397c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3b01      	subs	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f9      	bne.n	8003976 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff64 	bl	8003854 <LL_ADC_IsInternalRegulatorEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff75 	bl	80038a2 <LL_ADC_REG_IsConversionOngoing>
 80039b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 80d2 	bne.w	8003b6c <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80ce 	bne.w	8003b6c <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039d8:	f043 0202 	orr.w	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff49 	bl	800387c <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d115      	bne.n	8003a1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f0:	4867      	ldr	r0, [pc, #412]	; (8003b90 <HAL_ADC_Init+0x2a0>)
 80039f2:	f7ff ff43 	bl	800387c <LL_ADC_IsEnabled>
 80039f6:	4604      	mov	r4, r0
 80039f8:	4866      	ldr	r0, [pc, #408]	; (8003b94 <HAL_ADC_Init+0x2a4>)
 80039fa:	f7ff ff3f 	bl	800387c <LL_ADC_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	431c      	orrs	r4, r3
 8003a02:	4865      	ldr	r0, [pc, #404]	; (8003b98 <HAL_ADC_Init+0x2a8>)
 8003a04:	f7ff ff3a 	bl	800387c <LL_ADC_IsEnabled>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4323      	orrs	r3, r4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4861      	ldr	r0, [pc, #388]	; (8003b9c <HAL_ADC_Init+0x2ac>)
 8003a18:	f7ff fdca 	bl	80035b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7e5b      	ldrb	r3, [r3, #25]
 8003a20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d106      	bne.n	8003a58 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	045b      	lsls	r3, r3, #17
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	4b49      	ldr	r3, [pc, #292]	; (8003ba0 <HAL_ADC_Init+0x2b0>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff08 	bl	80038a2 <LL_ADC_REG_IsConversionOngoing>
 8003a92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff15 	bl	80038c8 <LL_ADC_INJ_IsConversionOngoing>
 8003a9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d140      	bne.n	8003b28 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d13d      	bne.n	8003b28 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7e1b      	ldrb	r3, [r3, #24]
 8003ab4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ab6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003abe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ace:	f023 0306 	bic.w	r3, r3, #6
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d118      	bne.n	8003b18 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	611a      	str	r2, [r3, #16]
 8003b16:	e007      	b.n	8003b28 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10c      	bne.n	8003b4a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f023 010f 	bic.w	r1, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	1e5a      	subs	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
 8003b48:	e007      	b.n	8003b5a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 020f 	bic.w	r2, r2, #15
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58
 8003b6a:	e007      	b.n	8003b7c <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f043 0210 	orr.w	r2, r3, #16
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	; 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	053e2d63 	.word	0x053e2d63
 8003b90:	50040000 	.word	0x50040000
 8003b94:	50040100 	.word	0x50040100
 8003b98:	50040200 	.word	0x50040200
 8003b9c:	50040300 	.word	0x50040300
 8003ba0:	fff0c007 	.word	0xfff0c007

08003ba4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0b6      	sub	sp, #216	; 0xd8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x22>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e3e3      	b.n	800438e <HAL_ADC_ConfigChannel+0x7ea>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fe65 	bl	80038a2 <LL_ADC_REG_IsConversionOngoing>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 83c4 	bne.w	8004368 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d824      	bhi.n	8003c32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	3b02      	subs	r3, #2
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d81b      	bhi.n	8003c2a <HAL_ADC_ConfigChannel+0x86>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_ADC_ConfigChannel+0x54>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c21 	.word	0x08003c21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	605a      	str	r2, [r3, #4]
          break;
 8003c0e:	e011      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2212      	movs	r2, #18
 8003c14:	605a      	str	r2, [r3, #4]
          break;
 8003c16:	e00d      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2218      	movs	r2, #24
 8003c1c:	605a      	str	r2, [r3, #4]
          break;
 8003c1e:	e009      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c26:	605a      	str	r2, [r3, #4]
          break;
 8003c28:	e004      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	605a      	str	r2, [r3, #4]
          break;
 8003c30:	e000      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003c32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7ff fd51 	bl	80036e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fe29 	bl	80038a2 <LL_ADC_REG_IsConversionOngoing>
 8003c50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fe35 	bl	80038c8 <LL_ADC_INJ_IsConversionOngoing>
 8003c5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 81c1 	bne.w	8003fee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 81bc 	bne.w	8003fee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7ff fd58 	bl	8003740 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fd12 	bl	80036c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c9e:	e00e      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f7ff fd47 	bl	8003740 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fd02 	bl	80036c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d00a      	beq.n	8003cf6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6919      	ldr	r1, [r3, #16]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cf0:	f7ff fc92 	bl	8003618 <LL_ADC_SetOffset>
 8003cf4:	e17b      	b.n	8003fee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fcaf 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x17e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fca4 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	0e9b      	lsrs	r3, r3, #26
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	e01e      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x1bc>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fc99 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e004      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003d54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1d4>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	e018      	b.n	8003daa <HAL_ADC_ConfigChannel+0x206>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003d94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e004      	b.n	8003daa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003da0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d106      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fc68 	bl	800368c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fc4c 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x244>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fc41 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	f003 021f 	and.w	r2, r3, #31
 8003de6:	e01e      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x282>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fc36 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e004      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x29a>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	0e9b      	lsrs	r3, r3, #26
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	e018      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x2cc>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003e62:	2320      	movs	r3, #32
 8003e64:	e004      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d106      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fc05 	bl	800368c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fbe9 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x30a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fbde 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	0e9b      	lsrs	r3, r3, #26
 8003ea8:	f003 021f 	and.w	r2, r3, #31
 8003eac:	e01e      	b.n	8003eec <HAL_ADC_ConfigChannel+0x348>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fbd3 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e004      	b.n	8003eea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x360>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	0e9b      	lsrs	r3, r3, #26
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	e016      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x38e>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003f24:	2320      	movs	r3, #32
 8003f26:	e004      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d106      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fba4 	bl	800368c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2103      	movs	r1, #3
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fb88 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x3cc>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2103      	movs	r1, #3
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fb7d 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	e017      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x3fc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2103      	movs	r1, #3
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fb72 	bl	8003660 <LL_ADC_GetOffsetChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003f92:	2320      	movs	r3, #32
 8003f94:	e003      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x414>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0e9b      	lsrs	r3, r3, #26
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	e011      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x438>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e003      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d106      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fb4f 	bl	800368c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fc42 	bl	800387c <LL_ADC_IsEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 8140 	bne.w	8004280 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	461a      	mov	r2, r3
 800400e:	f7ff fbc3 	bl	8003798 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4a8f      	ldr	r2, [pc, #572]	; (8004254 <HAL_ADC_ConfigChannel+0x6b0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	f040 8131 	bne.w	8004280 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x4a2>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	3301      	adds	r3, #1
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2b09      	cmp	r3, #9
 800403c:	bf94      	ite	ls
 800403e:	2301      	movls	r3, #1
 8004040:	2300      	movhi	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e019      	b.n	800407a <HAL_ADC_ConfigChannel+0x4d6>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004056:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e003      	b.n	800406a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2b09      	cmp	r3, #9
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800407a:	2b00      	cmp	r3, #0
 800407c:	d079      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_ADC_ConfigChannel+0x4f6>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0e9b      	lsrs	r3, r3, #26
 8004090:	3301      	adds	r3, #1
 8004092:	069b      	lsls	r3, r3, #26
 8004094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004098:	e015      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x522>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	fa93 f3a3 	rbit	r3, r3
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80040b2:	2320      	movs	r3, #32
 80040b4:	e003      	b.n	80040be <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	069b      	lsls	r3, r3, #26
 80040c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x542>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	0e9b      	lsrs	r3, r3, #26
 80040d8:	3301      	adds	r3, #1
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	e017      	b.n	8004116 <HAL_ADC_ConfigChannel+0x572>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80040f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80040f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80040fe:	2320      	movs	r3, #32
 8004100:	e003      	b.n	800410a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	ea42 0103 	orr.w	r1, r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <HAL_ADC_ConfigChannel+0x598>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	0e9b      	lsrs	r3, r3, #26
 800412c:	3301      	adds	r3, #1
 800412e:	f003 021f 	and.w	r2, r3, #31
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	051b      	lsls	r3, r3, #20
 800413a:	e018      	b.n	800416e <HAL_ADC_ConfigChannel+0x5ca>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004154:	2320      	movs	r3, #32
 8004156:	e003      	b.n	8004160 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3301      	adds	r3, #1
 8004162:	f003 021f 	and.w	r2, r3, #31
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416e:	430b      	orrs	r3, r1
 8004170:	e081      	b.n	8004276 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <HAL_ADC_ConfigChannel+0x5ea>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	0e9b      	lsrs	r3, r3, #26
 8004184:	3301      	adds	r3, #1
 8004186:	069b      	lsls	r3, r3, #26
 8004188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800418c:	e015      	b.n	80041ba <HAL_ADC_ConfigChannel+0x616>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80041a6:	2320      	movs	r3, #32
 80041a8:	e003      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	069b      	lsls	r3, r3, #26
 80041b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_ADC_ConfigChannel+0x636>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0e9b      	lsrs	r3, r3, #26
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2101      	movs	r1, #1
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	e017      	b.n	800420a <HAL_ADC_ConfigChannel+0x666>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	61fb      	str	r3, [r7, #28]
  return result;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e003      	b.n	80041fe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	ea42 0103 	orr.w	r1, r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10d      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x692>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	3301      	adds	r3, #1
 8004222:	f003 021f 	and.w	r2, r3, #31
 8004226:	4613      	mov	r3, r2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4413      	add	r3, r2
 800422c:	3b1e      	subs	r3, #30
 800422e:	051b      	lsls	r3, r3, #20
 8004230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004234:	e01e      	b.n	8004274 <HAL_ADC_ConfigChannel+0x6d0>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	613b      	str	r3, [r7, #16]
  return result;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800424e:	2320      	movs	r3, #32
 8004250:	e006      	b.n	8004260 <HAL_ADC_ConfigChannel+0x6bc>
 8004252:	bf00      	nop
 8004254:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f003 021f 	and.w	r2, r3, #31
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	3b1e      	subs	r3, #30
 800426e:	051b      	lsls	r3, r3, #20
 8004270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004274:	430b      	orrs	r3, r1
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	4619      	mov	r1, r3
 800427c:	f7ff fa60 	bl	8003740 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b44      	ldr	r3, [pc, #272]	; (8004398 <HAL_ADC_ConfigChannel+0x7f4>)
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d07a      	beq.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800428c:	4843      	ldr	r0, [pc, #268]	; (800439c <HAL_ADC_ConfigChannel+0x7f8>)
 800428e:	f7ff f9b5 	bl	80035fc <LL_ADC_GetCommonPathInternalCh>
 8004292:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a41      	ldr	r2, [pc, #260]	; (80043a0 <HAL_ADC_ConfigChannel+0x7fc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d12c      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d126      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <HAL_ADC_ConfigChannel+0x800>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x71c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3b      	ldr	r2, [pc, #236]	; (80043a8 <HAL_ADC_ConfigChannel+0x804>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d15d      	bne.n	800437c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042c8:	4619      	mov	r1, r3
 80042ca:	4834      	ldr	r0, [pc, #208]	; (800439c <HAL_ADC_ConfigChannel+0x7f8>)
 80042cc:	f7ff f983 	bl	80035d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_ADC_ConfigChannel+0x808>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	4a36      	ldr	r2, [pc, #216]	; (80043b0 <HAL_ADC_ConfigChannel+0x80c>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042ea:	e002      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042f8:	e040      	b.n	800437c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_ADC_ConfigChannel+0x810>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d118      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x792>
 8004304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d112      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_ADC_ConfigChannel+0x800>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_ADC_ConfigChannel+0x780>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <HAL_ADC_ConfigChannel+0x804>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d12d      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432c:	4619      	mov	r1, r3
 800432e:	481b      	ldr	r0, [pc, #108]	; (800439c <HAL_ADC_ConfigChannel+0x7f8>)
 8004330:	f7ff f951 	bl	80035d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004334:	e024      	b.n	8004380 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <HAL_ADC_ConfigChannel+0x814>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d120      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <HAL_ADC_ConfigChannel+0x800>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d115      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800435a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800435e:	4619      	mov	r1, r3
 8004360:	480e      	ldr	r0, [pc, #56]	; (800439c <HAL_ADC_ConfigChannel+0x7f8>)
 8004362:	f7ff f938 	bl	80035d6 <LL_ADC_SetCommonPathInternalCh>
 8004366:	e00c      	b.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	f043 0220 	orr.w	r2, r3, #32
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800437a:	e002      	b.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004380:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800438a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800438e:	4618      	mov	r0, r3
 8004390:	37d8      	adds	r7, #216	; 0xd8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	80080000 	.word	0x80080000
 800439c:	50040300 	.word	0x50040300
 80043a0:	c7520000 	.word	0xc7520000
 80043a4:	50040000 	.word	0x50040000
 80043a8:	50040200 	.word	0x50040200
 80043ac:	20000000 	.word	0x20000000
 80043b0:	053e2d63 	.word	0x053e2d63
 80043b4:	cb840000 	.word	0xcb840000
 80043b8:	80000001 	.word	0x80000001

080043bc <LL_ADC_IsEnabled>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <LL_ADC_IsEnabled+0x18>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <LL_ADC_IsEnabled+0x1a>
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d101      	bne.n	80043fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b0a1      	sub	sp, #132	; 0x84
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004422:	2302      	movs	r3, #2
 8004424:	e093      	b.n	800454e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800442e:	2300      	movs	r3, #0
 8004430:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004432:	2300      	movs	r3, #0
 8004434:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a47      	ldr	r2, [pc, #284]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d102      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004440:	4b46      	ldr	r3, [pc, #280]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e001      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e072      	b.n	800454e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ffb9 	bl	80043e2 <LL_ADC_REG_IsConversionOngoing>
 8004470:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffb3 	bl	80043e2 <LL_ADC_REG_IsConversionOngoing>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d154      	bne.n	800452c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004484:	2b00      	cmp	r3, #0
 8004486:	d151      	bne.n	800452c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004488:	4b35      	ldr	r3, [pc, #212]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800448a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02c      	beq.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044a6:	035b      	lsls	r3, r3, #13
 80044a8:	430b      	orrs	r3, r1
 80044aa:	431a      	orrs	r2, r3
 80044ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044b0:	4829      	ldr	r0, [pc, #164]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80044b2:	f7ff ff83 	bl	80043bc <LL_ADC_IsEnabled>
 80044b6:	4604      	mov	r4, r0
 80044b8:	4828      	ldr	r0, [pc, #160]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80044ba:	f7ff ff7f 	bl	80043bc <LL_ADC_IsEnabled>
 80044be:	4603      	mov	r3, r0
 80044c0:	431c      	orrs	r4, r3
 80044c2:	4828      	ldr	r0, [pc, #160]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80044c4:	f7ff ff7a 	bl	80043bc <LL_ADC_IsEnabled>
 80044c8:	4603      	mov	r3, r0
 80044ca:	4323      	orrs	r3, r4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d137      	bne.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044d8:	f023 030f 	bic.w	r3, r3, #15
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	6811      	ldr	r1, [r2, #0]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	6892      	ldr	r2, [r2, #8]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	431a      	orrs	r2, r3
 80044e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ec:	e028      	b.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044fa:	4817      	ldr	r0, [pc, #92]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80044fc:	f7ff ff5e 	bl	80043bc <LL_ADC_IsEnabled>
 8004500:	4604      	mov	r4, r0
 8004502:	4816      	ldr	r0, [pc, #88]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004504:	f7ff ff5a 	bl	80043bc <LL_ADC_IsEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	431c      	orrs	r4, r3
 800450c:	4815      	ldr	r0, [pc, #84]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800450e:	f7ff ff55 	bl	80043bc <LL_ADC_IsEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	4323      	orrs	r3, r4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d112      	bne.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800451a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004522:	f023 030f 	bic.w	r3, r3, #15
 8004526:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004528:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800452a:	e009      	b.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800453e:	e000      	b.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004540:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800454a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800454e:	4618      	mov	r0, r3
 8004550:	3784      	adds	r7, #132	; 0x84
 8004552:	46bd      	mov	sp, r7
 8004554:	bd90      	pop	{r4, r7, pc}
 8004556:	bf00      	nop
 8004558:	50040000 	.word	0x50040000
 800455c:	50040100 	.word	0x50040100
 8004560:	50040300 	.word	0x50040300
 8004564:	50040200 	.word	0x50040200

08004568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <__NVIC_SetPriorityGrouping+0x44>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004584:	4013      	ands	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <__NVIC_SetPriorityGrouping+0x44>)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	60d3      	str	r3, [r2, #12]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <__NVIC_GetPriorityGrouping+0x18>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	f003 0307 	and.w	r3, r3, #7
}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	db0b      	blt.n	80045f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	f003 021f 	and.w	r2, r3, #31
 80045e4:	4907      	ldr	r1, [pc, #28]	; (8004604 <__NVIC_EnableIRQ+0x38>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2001      	movs	r0, #1
 80045ee:	fa00 f202 	lsl.w	r2, r0, r2
 80045f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000e100 	.word	0xe000e100

08004608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	6039      	str	r1, [r7, #0]
 8004612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004618:	2b00      	cmp	r3, #0
 800461a:	db0a      	blt.n	8004632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	490c      	ldr	r1, [pc, #48]	; (8004654 <__NVIC_SetPriority+0x4c>)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	440b      	add	r3, r1
 800462c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004630:	e00a      	b.n	8004648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4908      	ldr	r1, [pc, #32]	; (8004658 <__NVIC_SetPriority+0x50>)
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	3b04      	subs	r3, #4
 8004640:	0112      	lsls	r2, r2, #4
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	440b      	add	r3, r1
 8004646:	761a      	strb	r2, [r3, #24]
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000e100 	.word	0xe000e100
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f1c3 0307 	rsb	r3, r3, #7
 8004676:	2b04      	cmp	r3, #4
 8004678:	bf28      	it	cs
 800467a:	2304      	movcs	r3, #4
 800467c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3304      	adds	r3, #4
 8004682:	2b06      	cmp	r3, #6
 8004684:	d902      	bls.n	800468c <NVIC_EncodePriority+0x30>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3b03      	subs	r3, #3
 800468a:	e000      	b.n	800468e <NVIC_EncodePriority+0x32>
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43da      	mvns	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	401a      	ands	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a4:	f04f 31ff 	mov.w	r1, #4294967295
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	43d9      	mvns	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b4:	4313      	orrs	r3, r2
         );
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3724      	adds	r7, #36	; 0x24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ff4c 	bl	8004568 <__NVIC_SetPriorityGrouping>
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046ea:	f7ff ff61 	bl	80045b0 <__NVIC_GetPriorityGrouping>
 80046ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7ff ffb1 	bl	800465c <NVIC_EncodePriority>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff80 	bl	8004608 <__NVIC_SetPriority>
}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff54 	bl	80045cc <__NVIC_EnableIRQ>
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e098      	b.n	8004870 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	4b4d      	ldr	r3, [pc, #308]	; (800487c <HAL_DMA_Init+0x150>)
 8004746:	429a      	cmp	r2, r3
 8004748:	d80f      	bhi.n	800476a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_DMA_Init+0x154>)
 8004752:	4413      	add	r3, r2
 8004754:	4a4b      	ldr	r2, [pc, #300]	; (8004884 <HAL_DMA_Init+0x158>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	009a      	lsls	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a48      	ldr	r2, [pc, #288]	; (8004888 <HAL_DMA_Init+0x15c>)
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
 8004768:	e00e      	b.n	8004788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_DMA_Init+0x160>)
 8004772:	4413      	add	r3, r2
 8004774:	4a43      	ldr	r2, [pc, #268]	; (8004884 <HAL_DMA_Init+0x158>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	009a      	lsls	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a42      	ldr	r2, [pc, #264]	; (8004890 <HAL_DMA_Init+0x164>)
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e2:	d039      	beq.n	8004858 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	4a27      	ldr	r2, [pc, #156]	; (8004888 <HAL_DMA_Init+0x15c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d11a      	bne.n	8004824 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80047ee:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_DMA_Init+0x168>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f003 031c 	and.w	r3, r3, #28
 80047fa:	210f      	movs	r1, #15
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	4924      	ldr	r1, [pc, #144]	; (8004894 <HAL_DMA_Init+0x168>)
 8004804:	4013      	ands	r3, r2
 8004806:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004808:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_DMA_Init+0x168>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	f003 031c 	and.w	r3, r3, #28
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	491d      	ldr	r1, [pc, #116]	; (8004894 <HAL_DMA_Init+0x168>)
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]
 8004822:	e019      	b.n	8004858 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <HAL_DMA_Init+0x16c>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	f003 031c 	and.w	r3, r3, #28
 8004830:	210f      	movs	r1, #15
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	4917      	ldr	r1, [pc, #92]	; (8004898 <HAL_DMA_Init+0x16c>)
 800483a:	4013      	ands	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_DMA_Init+0x16c>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f003 031c 	and.w	r3, r3, #28
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	4911      	ldr	r1, [pc, #68]	; (8004898 <HAL_DMA_Init+0x16c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40020407 	.word	0x40020407
 8004880:	bffdfff8 	.word	0xbffdfff8
 8004884:	cccccccd 	.word	0xcccccccd
 8004888:	40020000 	.word	0x40020000
 800488c:	bffdfbf8 	.word	0xbffdfbf8
 8004890:	40020400 	.word	0x40020400
 8004894:	400200a8 	.word	0x400200a8
 8004898:	400204a8 	.word	0x400204a8

0800489c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_DMA_Start_IT+0x20>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e04b      	b.n	8004954 <HAL_DMA_Start_IT+0xb8>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d13a      	bne.n	8004946 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f92f 	bl	8004b58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 020e 	orr.w	r2, r2, #14
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e00f      	b.n	8004934 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0204 	bic.w	r2, r2, #4
 8004922:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 020a 	orr.w	r2, r2, #10
 8004932:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e005      	b.n	8004952 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d005      	beq.n	8004980 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2204      	movs	r2, #4
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e029      	b.n	80049d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020e 	bic.w	r2, r2, #14
 800498e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f003 021c 	and.w	r2, r3, #28
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f202 	lsl.w	r2, r1, r2
 80049b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
    }
  }
  return status;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f003 031c 	and.w	r3, r3, #28
 80049fe:	2204      	movs	r2, #4
 8004a00:	409a      	lsls	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d026      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x7a>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d021      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0204 	bic.w	r2, r2, #4
 8004a30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f003 021c 	and.w	r2, r3, #28
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2104      	movs	r1, #4
 8004a40:	fa01 f202 	lsl.w	r2, r1, r2
 8004a44:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d071      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004a56:	e06c      	b.n	8004b32 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	f003 031c 	and.w	r3, r3, #28
 8004a60:	2202      	movs	r2, #2
 8004a62:	409a      	lsls	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02e      	beq.n	8004aca <HAL_DMA_IRQHandler+0xec>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d029      	beq.n	8004aca <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 020a 	bic.w	r2, r2, #10
 8004a92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	f003 021c 	and.w	r2, r3, #28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004aae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d038      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ac8:	e033      	b.n	8004b32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f003 031c 	and.w	r3, r3, #28
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x156>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d025      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 020e 	bic.w	r2, r2, #14
 8004af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f003 021c 	and.w	r2, r3, #28
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
}
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b4a:	b2db      	uxtb	r3, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f003 021c 	and.w	r2, r3, #28
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d108      	bne.n	8004b9c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b9a:	e007      	b.n	8004bac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bc6:	e166      	b.n	8004e96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8158 	beq.w	8004e90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d005      	beq.n	8004bf8 <HAL_GPIO_Init+0x40>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d130      	bne.n	8004c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	2203      	movs	r2, #3
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c2e:	2201      	movs	r2, #1
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 0201 	and.w	r2, r3, #1
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d017      	beq.n	8004c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d123      	bne.n	8004cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	08da      	lsrs	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3208      	adds	r2, #8
 8004caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	220f      	movs	r2, #15
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	08da      	lsrs	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3208      	adds	r2, #8
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0203 	and.w	r2, r3, #3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80b2 	beq.w	8004e90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2c:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <HAL_GPIO_Init+0x2fc>)
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d30:	4a60      	ldr	r2, [pc, #384]	; (8004eb4 <HAL_GPIO_Init+0x2fc>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6613      	str	r3, [r2, #96]	; 0x60
 8004d38:	4b5e      	ldr	r3, [pc, #376]	; (8004eb4 <HAL_GPIO_Init+0x2fc>)
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d44:	4a5c      	ldr	r2, [pc, #368]	; (8004eb8 <HAL_GPIO_Init+0x300>)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	220f      	movs	r2, #15
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d6e:	d02b      	beq.n	8004dc8 <HAL_GPIO_Init+0x210>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a52      	ldr	r2, [pc, #328]	; (8004ebc <HAL_GPIO_Init+0x304>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d025      	beq.n	8004dc4 <HAL_GPIO_Init+0x20c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a51      	ldr	r2, [pc, #324]	; (8004ec0 <HAL_GPIO_Init+0x308>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d01f      	beq.n	8004dc0 <HAL_GPIO_Init+0x208>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a50      	ldr	r2, [pc, #320]	; (8004ec4 <HAL_GPIO_Init+0x30c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d019      	beq.n	8004dbc <HAL_GPIO_Init+0x204>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a4f      	ldr	r2, [pc, #316]	; (8004ec8 <HAL_GPIO_Init+0x310>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <HAL_GPIO_Init+0x200>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a4e      	ldr	r2, [pc, #312]	; (8004ecc <HAL_GPIO_Init+0x314>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00d      	beq.n	8004db4 <HAL_GPIO_Init+0x1fc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a4d      	ldr	r2, [pc, #308]	; (8004ed0 <HAL_GPIO_Init+0x318>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <HAL_GPIO_Init+0x1f8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a4c      	ldr	r2, [pc, #304]	; (8004ed4 <HAL_GPIO_Init+0x31c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_GPIO_Init+0x1f4>
 8004da8:	2307      	movs	r3, #7
 8004daa:	e00e      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004dac:	2308      	movs	r3, #8
 8004dae:	e00c      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004db0:	2306      	movs	r3, #6
 8004db2:	e00a      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004db4:	2305      	movs	r3, #5
 8004db6:	e008      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004db8:	2304      	movs	r3, #4
 8004dba:	e006      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e004      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e002      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_GPIO_Init+0x212>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	f002 0203 	and.w	r2, r2, #3
 8004dd0:	0092      	lsls	r2, r2, #2
 8004dd2:	4093      	lsls	r3, r2
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dda:	4937      	ldr	r1, [pc, #220]	; (8004eb8 <HAL_GPIO_Init+0x300>)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	3302      	adds	r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de8:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e0c:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e12:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e36:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <HAL_GPIO_Init+0x320>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3301      	adds	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f47f ae91 	bne.w	8004bc8 <HAL_GPIO_Init+0x10>
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	48000400 	.word	0x48000400
 8004ec0:	48000800 	.word	0x48000800
 8004ec4:	48000c00 	.word	0x48000c00
 8004ec8:	48001000 	.word	0x48001000
 8004ecc:	48001400 	.word	0x48001400
 8004ed0:	48001800 	.word	0x48001800
 8004ed4:	48001c00 	.word	0x48001c00
 8004ed8:	40010400 	.word	0x40010400

08004edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eec:	787b      	ldrb	r3, [r7, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ef2:	887a      	ldrh	r2, [r7, #2]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e081      	b.n	8005022 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fd fe7c 	bl	8002c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	; 0x24
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	e006      	b.n	8004f94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d104      	bne.n	8004fa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4603      	mov	r3, r0
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	460b      	mov	r3, r1
 8005040:	813b      	strh	r3, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b20      	cmp	r3, #32
 8005050:	f040 80f9 	bne.w	8005246 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_I2C_Mem_Write+0x34>
 800505a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0ed      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_I2C_Mem_Write+0x4e>
 8005076:	2302      	movs	r3, #2
 8005078:	e0e6      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005082:	f7fe fa65 	bl	8003550 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2319      	movs	r3, #25
 800508e:	2201      	movs	r2, #1
 8005090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f001 fbd2 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0d1      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2221      	movs	r2, #33	; 0x21
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2240      	movs	r2, #64	; 0x40
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050cc:	88f8      	ldrh	r0, [r7, #6]
 80050ce:	893a      	ldrh	r2, [r7, #8]
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4603      	mov	r3, r0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fe21 	bl	8005d24 <I2C_RequestMemoryWrite>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0a9      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2bff      	cmp	r3, #255	; 0xff
 80050fc:	d90e      	bls.n	800511c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	b2da      	uxtb	r2, r3
 800510a:	8979      	ldrh	r1, [r7, #10]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f001 fd3b 	bl	8006b90 <I2C_TransferConfig>
 800511a:	e00f      	b.n	800513c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	b2da      	uxtb	r2, r3
 800512c:	8979      	ldrh	r1, [r7, #10]
 800512e:	2300      	movs	r3, #0
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f001 fd2a 	bl	8006b90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f001 fbbc 	bl	80068be <I2C_WaitOnTXISFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e07b      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d034      	beq.n	80051f4 <HAL_I2C_Mem_Write+0x1c8>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d130      	bne.n	80051f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	2200      	movs	r2, #0
 800519a:	2180      	movs	r1, #128	; 0x80
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f001 fb4e 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e04d      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2bff      	cmp	r3, #255	; 0xff
 80051b4:	d90e      	bls.n	80051d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	8979      	ldrh	r1, [r7, #10]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f001 fcdf 	bl	8006b90 <I2C_TransferConfig>
 80051d2:	e00f      	b.n	80051f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 fcce 	bl	8006b90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d19e      	bne.n	800513c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f001 fb9b 	bl	800693e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e01a      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2220      	movs	r2, #32
 8005218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <HAL_I2C_Mem_Write+0x224>)
 8005226:	400b      	ands	r3, r1
 8005228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	fe00e800 	.word	0xfe00e800

08005254 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 80fd 	bne.w	8005476 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_I2C_Mem_Read+0x34>
 8005282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0f1      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x4e>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0ea      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052aa:	f7fe f951 	bl	8003550 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2319      	movs	r3, #25
 80052b6:	2201      	movs	r2, #1
 80052b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f001 fabe 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0d5      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2222      	movs	r2, #34	; 0x22
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2240      	movs	r2, #64	; 0x40
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052f4:	88f8      	ldrh	r0, [r7, #6]
 80052f6:	893a      	ldrh	r2, [r7, #8]
 80052f8:	8979      	ldrh	r1, [r7, #10]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4603      	mov	r3, r0
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fd61 	bl	8005dcc <I2C_RequestMemoryRead>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0ad      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2bff      	cmp	r3, #255	; 0xff
 8005324:	d90e      	bls.n	8005344 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	22ff      	movs	r2, #255	; 0xff
 800532a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	4b52      	ldr	r3, [pc, #328]	; (8005480 <HAL_I2C_Mem_Read+0x22c>)
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f001 fc27 	bl	8006b90 <I2C_TransferConfig>
 8005342:	e00f      	b.n	8005364 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	b2da      	uxtb	r2, r3
 8005354:	8979      	ldrh	r1, [r7, #10]
 8005356:	4b4a      	ldr	r3, [pc, #296]	; (8005480 <HAL_I2C_Mem_Read+0x22c>)
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f001 fc16 	bl	8006b90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	2200      	movs	r2, #0
 800536c:	2104      	movs	r1, #4
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f001 fa65 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e07c      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d034      	beq.n	8005424 <HAL_I2C_Mem_Read+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d130      	bne.n	8005424 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f001 fa36 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e04d      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2bff      	cmp	r3, #255	; 0xff
 80053e4:	d90e      	bls.n	8005404 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	8979      	ldrh	r1, [r7, #10]
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f001 fbc7 	bl	8006b90 <I2C_TransferConfig>
 8005402:	e00f      	b.n	8005424 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	b2da      	uxtb	r2, r3
 8005414:	8979      	ldrh	r1, [r7, #10]
 8005416:	2300      	movs	r3, #0
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f001 fbb6 	bl	8006b90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d19a      	bne.n	8005364 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f001 fa83 	bl	800693e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e01a      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2220      	movs	r2, #32
 8005448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_I2C_Mem_Read+0x230>)
 8005456:	400b      	ands	r3, r1
 8005458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	e000      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
  }
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	80002400 	.word	0x80002400
 8005484:	fe00e800 	.word	0xfe00e800

08005488 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4603      	mov	r3, r0
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	460b      	mov	r3, r1
 800549c:	813b      	strh	r3, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	f040 80d5 	bne.w	800565a <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_I2C_Mem_Write_DMA+0x34>
 80054b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0c9      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d6:	d101      	bne.n	80054dc <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80054d8:	2302      	movs	r3, #2
 80054da:	e0bf      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_I2C_Mem_Write_DMA+0x62>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0b8      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054f2:	f7fe f82d 	bl	8003550 <HAL_GetTick>
 80054f6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2221      	movs	r2, #33	; 0x21
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a51      	ldr	r2, [pc, #324]	; (8005664 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a51      	ldr	r2, [pc, #324]	; (8005668 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8005524:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2bff      	cmp	r3, #255	; 0xff
 800552e:	d906      	bls.n	800553e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	e007      	b.n	800554e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800554c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800554e:	88f8      	ldrh	r0, [r7, #6]
 8005550:	893a      	ldrh	r2, [r7, #8]
 8005552:	8979      	ldrh	r1, [r7, #10]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	2319      	movs	r3, #25
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4603      	mov	r3, r0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fbe0 	bl	8005d24 <I2C_RequestMemoryWrite>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e072      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	2b00      	cmp	r3, #0
 800557c:	d020      	beq.n	80055c0 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	4a3a      	ldr	r2, [pc, #232]	; (800566c <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	4a39      	ldr	r2, [pc, #228]	; (8005670 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 800558c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	2200      	movs	r2, #0
 800559c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3328      	adds	r3, #40	; 0x28
 80055aa:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80055b0:	f7ff f974 	bl	800489c <HAL_DMA_Start_IT>
 80055b4:	4603      	mov	r3, r0
 80055b6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d139      	bne.n	8005632 <HAL_I2C_Mem_Write_DMA+0x1aa>
 80055be:	e013      	b.n	80055e8 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e039      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	8979      	ldrh	r1, [r7, #10]
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 faca 	bl	8006b90 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005616:	2110      	movs	r1, #16
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f001 faeb 	bl	8006bf4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	e014      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	f043 0210 	orr.w	r2, r3, #16
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	ffff0000 	.word	0xffff0000
 8005668:	0800597f 	.word	0x0800597f
 800566c:	0800673f 	.word	0x0800673f
 8005670:	080067d5 	.word	0x080067d5

08005674 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
  }
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
 8005704:	4613      	mov	r3, r2
 8005706:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <I2C_Slave_ISR_IT+0x24>
 8005798:	2302      	movs	r3, #2
 800579a:	e0ec      	b.n	8005976 <I2C_Slave_ISR_IT+0x1fe>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80057bc:	6939      	ldr	r1, [r7, #16]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fd42 	bl	8006248 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d04d      	beq.n	800586c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	091b      	lsrs	r3, r3, #4
 80057d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d047      	beq.n	800586c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d128      	bne.n	8005838 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b28      	cmp	r3, #40	; 0x28
 80057f0:	d108      	bne.n	8005804 <I2C_Slave_ISR_IT+0x8c>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f8:	d104      	bne.n	8005804 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80057fa:	6939      	ldr	r1, [r7, #16]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 fe2d 	bl	800645c <I2C_ITListenCplt>
 8005802:	e032      	b.n	800586a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b29      	cmp	r3, #41	; 0x29
 800580e:	d10e      	bne.n	800582e <I2C_Slave_ISR_IT+0xb6>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005816:	d00a      	beq.n	800582e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2210      	movs	r2, #16
 800581e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 ff68 	bl	80066f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fbe5 	bl	8005ff6 <I2C_ITSlaveSeqCplt>
 800582c:	e01d      	b.n	800586a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2210      	movs	r2, #16
 8005834:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005836:	e096      	b.n	8005966 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2210      	movs	r2, #16
 800583e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <I2C_Slave_ISR_IT+0xe4>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005858:	f040 8085 	bne.w	8005966 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	4619      	mov	r1, r3
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fe50 	bl	8006508 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005868:	e07d      	b.n	8005966 <I2C_Slave_ISR_IT+0x1ee>
 800586a:	e07c      	b.n	8005966 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d030      	beq.n	80058da <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02a      	beq.n	80058da <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d018      	beq.n	80058c0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d14f      	bne.n	800596a <I2C_Slave_ISR_IT+0x1f2>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d0:	d04b      	beq.n	800596a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fb8f 	bl	8005ff6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80058d8:	e047      	b.n	800596a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	08db      	lsrs	r3, r3, #3
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	08db      	lsrs	r3, r3, #3
 80058ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d004      	beq.n	80058fc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80058f2:	6939      	ldr	r1, [r7, #16]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fabd 	bl	8005e74 <I2C_ITAddrCplt>
 80058fa:	e037      	b.n	800596c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d031      	beq.n	800596c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02b      	beq.n	800596c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	781a      	ldrb	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	851a      	strh	r2, [r3, #40]	; 0x28
 800594e:	e00d      	b.n	800596c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005956:	d002      	beq.n	800595e <I2C_Slave_ISR_IT+0x1e6>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fb49 	bl	8005ff6 <I2C_ITSlaveSeqCplt>
 8005964:	e002      	b.n	800596c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005966:	bf00      	nop
 8005968:	e000      	b.n	800596c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800596a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b088      	sub	sp, #32
 8005982:	af02      	add	r7, sp, #8
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <I2C_Master_ISR_DMA+0x1a>
 8005994:	2302      	movs	r3, #2
 8005996:	e0e1      	b.n	8005b5c <I2C_Master_ISR_DMA+0x1de>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	091b      	lsrs	r3, r3, #4
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d017      	beq.n	80059dc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2210      	movs	r2, #16
 80059be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	f043 0204 	orr.w	r2, r3, #4
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80059cc:	2120      	movs	r1, #32
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f001 f910 	bl	8006bf4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fe8e 	bl	80066f6 <I2C_Flush_TXDR>
 80059da:	e0ba      	b.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d072      	beq.n	8005ace <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	099b      	lsrs	r3, r3, #6
 80059ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d06c      	beq.n	8005ace <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d04e      	beq.n	8005aac <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2bff      	cmp	r3, #255	; 0xff
 8005a24:	d906      	bls.n	8005a34 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	e010      	b.n	8005a56 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a46:	d003      	beq.n	8005a50 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e002      	b.n	8005a56 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a54:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	8a79      	ldrh	r1, [r7, #18]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 f893 	bl	8006b90 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b22      	cmp	r3, #34	; 0x22
 8005a86:	d108      	bne.n	8005a9a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a96:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005a98:	e05b      	b.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005aaa:	e052      	b.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aba:	d003      	beq.n	8005ac4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fa5d 	bl	8005f7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005ac2:	e046      	b.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ac4:	2140      	movs	r1, #64	; 0x40
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fd1e 	bl	8006508 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005acc:	e041      	b.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d029      	beq.n	8005b2e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	099b      	lsrs	r3, r3, #6
 8005ade:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d023      	beq.n	8005b2e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d119      	bne.n	8005b24 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005afe:	d027      	beq.n	8005b50 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b08:	d108      	bne.n	8005b1c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b18:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005b1a:	e019      	b.n	8005b50 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fa2d 	bl	8005f7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005b22:	e015      	b.n	8005b50 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fcee 	bl	8006508 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b2c:	e010      	b.n	8005b50 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fab3 	bl	80060b4 <I2C_ITMasterCplt>
 8005b4e:	e000      	b.n	8005b52 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005b50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <I2C_Slave_ISR_DMA+0x24>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e0c9      	b.n	8005d1c <I2C_Slave_ISR_DMA+0x1b8>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fb4c 	bl	8006248 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 809a 	beq.w	8005cf2 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8093 	beq.w	8005cf2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	0b9b      	lsrs	r3, r3, #14
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d105      	bne.n	8005be4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	0bdb      	lsrs	r3, r3, #15
 8005bdc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d07f      	beq.n	8005ce4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	0bdb      	lsrs	r3, r3, #15
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005c04:	2301      	movs	r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0b9b      	lsrs	r3, r3, #14
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d128      	bne.n	8005c84 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b28      	cmp	r3, #40	; 0x28
 8005c3c:	d108      	bne.n	8005c50 <I2C_Slave_ISR_DMA+0xec>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c44:	d104      	bne.n	8005c50 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fc07 	bl	800645c <I2C_ITListenCplt>
 8005c4e:	e048      	b.n	8005ce2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b29      	cmp	r3, #41	; 0x29
 8005c5a:	d10e      	bne.n	8005c7a <I2C_Slave_ISR_DMA+0x116>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c62:	d00a      	beq.n	8005c7a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fd42 	bl	80066f6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f9bf 	bl	8005ff6 <I2C_ITSlaveSeqCplt>
 8005c78:	e033      	b.n	8005ce2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2210      	movs	r2, #16
 8005c80:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005c82:	e034      	b.n	8005cee <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2210      	movs	r2, #16
 8005c8a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	f043 0204 	orr.w	r2, r3, #4
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c9e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <I2C_Slave_ISR_DMA+0x14a>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cac:	d11f      	bne.n	8005cee <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b21      	cmp	r3, #33	; 0x21
 8005cb2:	d002      	beq.n	8005cba <I2C_Slave_ISR_DMA+0x156>
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b29      	cmp	r3, #41	; 0x29
 8005cb8:	d103      	bne.n	8005cc2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2221      	movs	r2, #33	; 0x21
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc0:	e008      	b.n	8005cd4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2b22      	cmp	r3, #34	; 0x22
 8005cc6:	d002      	beq.n	8005cce <I2C_Slave_ISR_DMA+0x16a>
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b2a      	cmp	r3, #42	; 0x2a
 8005ccc:	d102      	bne.n	8005cd4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2222      	movs	r2, #34	; 0x22
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	4619      	mov	r1, r3
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fc14 	bl	8006508 <I2C_ITError>
      if (treatdmanack == 1U)
 8005ce0:	e005      	b.n	8005cee <I2C_Slave_ISR_DMA+0x18a>
 8005ce2:	e004      	b.n	8005cee <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2210      	movs	r2, #16
 8005cea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005cec:	e011      	b.n	8005d12 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005cee:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005cf0:	e00f      	b.n	8005d12 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f8b1 	bl	8005e74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	817b      	strh	r3, [r7, #10]
 8005d36:	460b      	mov	r3, r1
 8005d38:	813b      	strh	r3, [r7, #8]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	8979      	ldrh	r1, [r7, #10]
 8005d44:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <I2C_RequestMemoryWrite+0xa4>)
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 ff1f 	bl	8006b90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fdb1 	bl	80068be <I2C_WaitOnTXISFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e02c      	b.n	8005dc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d105      	bne.n	8005d78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6c:	893b      	ldrh	r3, [r7, #8]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	629a      	str	r2, [r3, #40]	; 0x28
 8005d76:	e015      	b.n	8005da4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d78:	893b      	ldrh	r3, [r7, #8]
 8005d7a:	0a1b      	lsrs	r3, r3, #8
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fd97 	bl	80068be <I2C_WaitOnTXISFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e012      	b.n	8005dc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9a:	893b      	ldrh	r3, [r7, #8]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2200      	movs	r2, #0
 8005dac:	2180      	movs	r1, #128	; 0x80
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fd45 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	80002000 	.word	0x80002000

08005dcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	817b      	strh	r3, [r7, #10]
 8005dde:	460b      	mov	r3, r1
 8005de0:	813b      	strh	r3, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	8979      	ldrh	r1, [r7, #10]
 8005dec:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <I2C_RequestMemoryRead+0xa4>)
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fecc 	bl	8006b90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	69b9      	ldr	r1, [r7, #24]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fd5e 	bl	80068be <I2C_WaitOnTXISFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e02c      	b.n	8005e66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d105      	bne.n	8005e1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e12:	893b      	ldrh	r3, [r7, #8]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e1c:	e015      	b.n	8005e4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e1e:	893b      	ldrh	r3, [r7, #8]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fd44 	bl	80068be <I2C_WaitOnTXISFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e012      	b.n	8005e66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e40:	893b      	ldrh	r3, [r7, #8]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2140      	movs	r1, #64	; 0x40
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fcf2 	bl	800683e <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	80002000 	.word	0x80002000

08005e74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e8a:	2b28      	cmp	r3, #40	; 0x28
 8005e8c:	d16a      	bne.n	8005f64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005eac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ec8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d138      	bne.n	8005f44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	09db      	lsrs	r3, r3, #7
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	89bb      	ldrh	r3, [r7, #12]
 8005eda:	4053      	eors	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f003 0306 	and.w	r3, r3, #6
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11c      	bne.n	8005f20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d13b      	bne.n	8005f74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2208      	movs	r2, #8
 8005f08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f12:	89ba      	ldrh	r2, [r7, #12]
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fbed 	bl	80056f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f1e:	e029      	b.n	8005f74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005f20:	893b      	ldrh	r3, [r7, #8]
 8005f22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fec7 	bl	8006cbc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f36:	89ba      	ldrh	r2, [r7, #12]
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff fbdb 	bl	80056f8 <HAL_I2C_AddrCallback>
}
 8005f42:	e017      	b.n	8005f74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 feb7 	bl	8006cbc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f56:	89ba      	ldrh	r2, [r7, #12]
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fbcb 	bl	80056f8 <HAL_I2C_AddrCallback>
}
 8005f62:	e007      	b.n	8005f74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b21      	cmp	r3, #33	; 0x21
 8005f96:	d115      	bne.n	8005fc4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2211      	movs	r2, #17
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fac:	2101      	movs	r1, #1
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fe84 	bl	8006cbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fb73 	bl	80056a8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fc2:	e014      	b.n	8005fee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2212      	movs	r2, #18
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005fd8:	2102      	movs	r1, #2
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fe6e 	bl	8006cbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fb67 	bl	80056bc <HAL_I2C_MasterRxCpltCallback>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0b9b      	lsrs	r3, r3, #14
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e00d      	b.n	8006048 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	0bdb      	lsrs	r3, r3, #15
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006046:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b29      	cmp	r3, #41	; 0x29
 8006052:	d112      	bne.n	800607a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2228      	movs	r2, #40	; 0x28
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2221      	movs	r2, #33	; 0x21
 8006060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fe29 	bl	8006cbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fb2c 	bl	80056d0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006078:	e017      	b.n	80060aa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b2a      	cmp	r3, #42	; 0x2a
 8006084:	d111      	bne.n	80060aa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2228      	movs	r2, #40	; 0x28
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2222      	movs	r2, #34	; 0x22
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006094:	2102      	movs	r1, #2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fe10 	bl	8006cbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fb1d 	bl	80056e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2220      	movs	r2, #32
 80060c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b21      	cmp	r3, #33	; 0x21
 80060d4:	d107      	bne.n	80060e6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060d6:	2101      	movs	r1, #1
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fdef 	bl	8006cbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2211      	movs	r2, #17
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
 80060e4:	e00c      	b.n	8006100 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b22      	cmp	r3, #34	; 0x22
 80060f0:	d106      	bne.n	8006100 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060f2:	2102      	movs	r1, #2
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fde1 	bl	8006cbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2212      	movs	r2, #18
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b4d      	ldr	r3, [pc, #308]	; (8006240 <I2C_ITMasterCplt+0x18c>)
 800610c:	400b      	ands	r3, r1
 800610e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a4a      	ldr	r2, [pc, #296]	; (8006244 <I2C_ITMasterCplt+0x190>)
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2210      	movs	r2, #16
 800612e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	f043 0204 	orr.w	r2, r3, #4
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b60      	cmp	r3, #96	; 0x60
 8006146:	d10b      	bne.n	8006160 <I2C_ITMasterCplt+0xac>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	b2db      	uxtb	r3, r3
 800615c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800615e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fac8 	bl	80066f6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b60      	cmp	r3, #96	; 0x60
 8006176:	d002      	beq.n	800617e <I2C_ITMasterCplt+0xca>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d006      	beq.n	800618c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f9bf 	bl	8006508 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800618a:	e054      	b.n	8006236 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b21      	cmp	r3, #33	; 0x21
 8006196:	d124      	bne.n	80061e2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d10b      	bne.n	80061ca <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fab0 	bl	8005728 <HAL_I2C_MemTxCpltCallback>
}
 80061c8:	e035      	b.n	8006236 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fa64 	bl	80056a8 <HAL_I2C_MasterTxCpltCallback>
}
 80061e0:	e029      	b.n	8006236 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b22      	cmp	r3, #34	; 0x22
 80061ec:	d123      	bne.n	8006236 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d10b      	bne.n	8006220 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fa8f 	bl	800573c <HAL_I2C_MemRxCpltCallback>
}
 800621e:	e00a      	b.n	8006236 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fa43 	bl	80056bc <HAL_I2C_MasterRxCpltCallback>
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	fe00e800 	.word	0xfe00e800
 8006244:	ffff0000 	.word	0xffff0000

08006248 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006264:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2220      	movs	r2, #32
 800626c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b21      	cmp	r3, #33	; 0x21
 8006272:	d002      	beq.n	800627a <I2C_ITSlaveCplt+0x32>
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2b29      	cmp	r3, #41	; 0x29
 8006278:	d108      	bne.n	800628c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800627a:	f248 0101 	movw	r1, #32769	; 0x8001
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fd1c 	bl	8006cbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2221      	movs	r2, #33	; 0x21
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
 800628a:	e00d      	b.n	80062a8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b22      	cmp	r3, #34	; 0x22
 8006290:	d002      	beq.n	8006298 <I2C_ITSlaveCplt+0x50>
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b2a      	cmp	r3, #42	; 0x2a
 8006296:	d107      	bne.n	80062a8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006298:	f248 0102 	movw	r1, #32770	; 0x8002
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fd0d 	bl	8006cbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2222      	movs	r2, #34	; 0x22
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6859      	ldr	r1, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b64      	ldr	r3, [pc, #400]	; (8006454 <I2C_ITSlaveCplt+0x20c>)
 80062c4:	400b      	ands	r3, r1
 80062c6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fa14 	bl	80066f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	0b9b      	lsrs	r3, r3, #14
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d013      	beq.n	8006302 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d020      	beq.n	8006334 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006300:	e018      	b.n	8006334 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	0bdb      	lsrs	r3, r3, #15
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800631c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d006      	beq.n	8006334 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0304 	bic.w	r3, r3, #4
 8006346:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	f043 0204 	orr.w	r2, r3, #4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f8a7 	bl	8006508 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b28      	cmp	r3, #40	; 0x28
 80063c4:	d141      	bne.n	800644a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80063c6:	6979      	ldr	r1, [r7, #20]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f847 	bl	800645c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063ce:	e03c      	b.n	800644a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063d8:	d014      	beq.n	8006404 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fe0b 	bl	8005ff6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <I2C_ITSlaveCplt+0x210>)
 80063e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff f989 	bl	8005714 <HAL_I2C_ListenCpltCallback>
}
 8006402:	e022      	b.n	800644a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b22      	cmp	r3, #34	; 0x22
 800640e:	d10e      	bne.n	800642e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff f95c 	bl	80056e4 <HAL_I2C_SlaveRxCpltCallback>
}
 800642c:	e00d      	b.n	800644a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff f943 	bl	80056d0 <HAL_I2C_SlaveTxCpltCallback>
}
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	fe00e800 	.word	0xfe00e800
 8006458:	ffff0000 	.word	0xffff0000

0800645c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a26      	ldr	r2, [pc, #152]	; (8006504 <I2C_ITListenCplt+0xa8>)
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d022      	beq.n	80064da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d012      	beq.n	80064da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	f043 0204 	orr.w	r2, r3, #4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064da:	f248 0103 	movw	r1, #32771	; 0x8003
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fbec 	bl	8006cbc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2210      	movs	r2, #16
 80064ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f90d 	bl	8005714 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	ffff0000 	.word	0xffff0000

08006508 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a5d      	ldr	r2, [pc, #372]	; (800669c <I2C_ITError+0x194>)
 8006526:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b28      	cmp	r3, #40	; 0x28
 800653e:	d005      	beq.n	800654c <I2C_ITError+0x44>
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b29      	cmp	r3, #41	; 0x29
 8006544:	d002      	beq.n	800654c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b2a      	cmp	r3, #42	; 0x2a
 800654a:	d10b      	bne.n	8006564 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800654c:	2103      	movs	r1, #3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fbb4 	bl	8006cbc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2228      	movs	r2, #40	; 0x28
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a50      	ldr	r2, [pc, #320]	; (80066a0 <I2C_ITError+0x198>)
 8006560:	635a      	str	r2, [r3, #52]	; 0x34
 8006562:	e011      	b.n	8006588 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006564:	f248 0103 	movw	r1, #32771	; 0x8003
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fba7 	bl	8006cbc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b60      	cmp	r3, #96	; 0x60
 8006578:	d003      	beq.n	8006582 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	2b00      	cmp	r3, #0
 8006594:	d039      	beq.n	800660a <I2C_ITError+0x102>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b11      	cmp	r3, #17
 800659a:	d002      	beq.n	80065a2 <I2C_ITError+0x9a>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b21      	cmp	r3, #33	; 0x21
 80065a0:	d133      	bne.n	800660a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b0:	d107      	bne.n	80065c2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fab8 	bl	8004b3c <HAL_DMA_GetState>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d017      	beq.n	8006602 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	4a33      	ldr	r2, [pc, #204]	; (80066a4 <I2C_ITError+0x19c>)
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe f9b8 	bl	800495c <HAL_DMA_Abort_IT>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d04d      	beq.n	800668e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006600:	e045      	b.n	800668e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f850 	bl	80066a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006608:	e041      	b.n	800668e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d039      	beq.n	8006686 <I2C_ITError+0x17e>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b12      	cmp	r3, #18
 8006616:	d002      	beq.n	800661e <I2C_ITError+0x116>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b22      	cmp	r3, #34	; 0x22
 800661c:	d133      	bne.n	8006686 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662c:	d107      	bne.n	800663e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800663c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe fa7a 	bl	8004b3c <HAL_DMA_GetState>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d017      	beq.n	800667e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006652:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <I2C_ITError+0x19c>)
 8006654:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe f97a 	bl	800495c <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d011      	beq.n	8006692 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800667c:	e009      	b.n	8006692 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f812 	bl	80066a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006684:	e005      	b.n	8006692 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f80e 	bl	80066a8 <I2C_TreatErrorCallback>
  }
}
 800668c:	e002      	b.n	8006694 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006692:	bf00      	nop
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	ffff0000 	.word	0xffff0000
 80066a0:	08005779 	.word	0x08005779
 80066a4:	08006803 	.word	0x08006803

080066a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b60      	cmp	r3, #96	; 0x60
 80066ba:	d10e      	bne.n	80066da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff f846 	bl	8005764 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066d8:	e009      	b.n	80066ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff f831 	bl	8005750 <HAL_I2C_ErrorCallback>
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b02      	cmp	r3, #2
 800670a:	d103      	bne.n	8006714 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b01      	cmp	r3, #1
 8006720:	d007      	beq.n	8006732 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	619a      	str	r2, [r3, #24]
  }
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800675a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006766:	2120      	movs	r1, #32
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fa43 	bl	8006bf4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800676e:	e02d      	b.n	80067cc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006778:	441a      	add	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	2bff      	cmp	r3, #255	; 0xff
 8006786:	d903      	bls.n	8006790 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	22ff      	movs	r2, #255	; 0xff
 800678c:	851a      	strh	r2, [r3, #40]	; 0x28
 800678e:	e004      	b.n	800679a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	4619      	mov	r1, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3328      	adds	r3, #40	; 0x28
 80067aa:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80067b0:	f7fe f874 	bl	800489c <HAL_DMA_Start_IT>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80067ba:	2110      	movs	r1, #16
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff fea3 	bl	8006508 <I2C_ITError>
}
 80067c2:	e003      	b.n	80067cc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80067c4:	2140      	movs	r1, #64	; 0x40
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fa14 	bl	8006bf4 <I2C_Enable_IRQ>
}
 80067cc:	bf00      	nop
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067f0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80067f2:	2110      	movs	r1, #16
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff fe87 	bl	8006508 <I2C_ITError>
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	2200      	movs	r2, #0
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	2200      	movs	r2, #0
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff ff39 	bl	80066a8 <I2C_TreatErrorCallback>
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	603b      	str	r3, [r7, #0]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800684e:	e022      	b.n	8006896 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d01e      	beq.n	8006896 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006858:	f7fc fe7a 	bl	8003550 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d113      	bne.n	8006896 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e00f      	b.n	80068b6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4013      	ands	r3, r2
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	bf0c      	ite	eq
 80068a6:	2301      	moveq	r3, #1
 80068a8:	2300      	movne	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d0cd      	beq.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068ca:	e02c      	b.n	8006926 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f871 	bl	80069b8 <I2C_IsErrorOccurred>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e02a      	b.n	8006936 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d01e      	beq.n	8006926 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e8:	f7fc fe32 	bl	8003550 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d302      	bcc.n	80068fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d113      	bne.n	8006926 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e007      	b.n	8006936 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d1cb      	bne.n	80068cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800694a:	e028      	b.n	800699e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f831 	bl	80069b8 <I2C_IsErrorOccurred>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e026      	b.n	80069ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006960:	f7fc fdf6 	bl	8003550 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	429a      	cmp	r2, r3
 800696e:	d302      	bcc.n	8006976 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d113      	bne.n	800699e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e007      	b.n	80069ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d1cf      	bne.n	800694c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d075      	beq.n	8006ad0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2210      	movs	r2, #16
 80069ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069ec:	e056      	b.n	8006a9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d052      	beq.n	8006a9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fc fdab 	bl	8003550 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_IsErrorOccurred+0x54>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d147      	bne.n	8006a9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d12e      	bne.n	8006a8e <I2C_IsErrorOccurred+0xd6>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a36:	d02a      	beq.n	8006a8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d027      	beq.n	8006a8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a4c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a4e:	f7fc fd7f 	bl	8003550 <HAL_GetTick>
 8006a52:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a54:	e01b      	b.n	8006a8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a56:	f7fc fd7b 	bl	8003550 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b19      	cmp	r3, #25
 8006a62:	d914      	bls.n	8006a8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d1dc      	bne.n	8006a56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d003      	beq.n	8006ab2 <I2C_IsErrorOccurred+0xfa>
 8006aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d09d      	beq.n	80069ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f043 0304 	orr.w	r3, r3, #4
 8006ac8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f043 0308 	orr.w	r3, r3, #8
 8006b0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01c      	beq.n	8006b80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fdd5 	bl	80066f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <I2C_IsErrorOccurred+0x1d4>)
 8006b58:	400b      	ands	r3, r1
 8006b5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	fe00e800 	.word	0xfe00e800

08006b90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	817b      	strh	r3, [r7, #10]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ba8:	7a7b      	ldrb	r3, [r7, #9]
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bb0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bbe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	0d5b      	lsrs	r3, r3, #21
 8006bca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <I2C_TransferConfig+0x60>)
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	ea02 0103 	and.w	r1, r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	03ff63ff 	.word	0x03ff63ff

08006bf4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c08:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <I2C_Enable_IRQ+0xc0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006c12:	4a29      	ldr	r2, [pc, #164]	; (8006cb8 <I2C_Enable_IRQ+0xc4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d11d      	bne.n	8006c54 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da03      	bge.n	8006c28 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	d103      	bne.n	8006c36 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006c34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c36:	887b      	ldrh	r3, [r7, #2]
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d103      	bne.n	8006c44 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d125      	bne.n	8006c96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c50:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c52:	e020      	b.n	8006c96 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da03      	bge.n	8006c64 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c64:	887b      	ldrh	r3, [r7, #2]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006c74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c76:	887b      	ldrh	r3, [r7, #2]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006c86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d103      	bne.n	8006c96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f043 0320 	orr.w	r3, r3, #32
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6819      	ldr	r1, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	0800597f 	.word	0x0800597f
 8006cb8:	08005b65 	.word	0x08005b65

08006cbc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ccc:	887b      	ldrh	r3, [r7, #2]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00f      	beq.n	8006cf6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cea:	2b28      	cmp	r3, #40	; 0x28
 8006cec:	d003      	beq.n	8006cf6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006cf4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00f      	beq.n	8006d20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006d06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d14:	2b28      	cmp	r3, #40	; 0x28
 8006d16:	d003      	beq.n	8006d20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006d1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da03      	bge.n	8006d30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006d2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	d103      	bne.n	8006d3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d103      	bne.n	8006d4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f043 0320 	orr.w	r3, r3, #32
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d4c:	887b      	ldrh	r3, [r7, #2]
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d103      	bne.n	8006d5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6819      	ldr	r1, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	43da      	mvns	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	400a      	ands	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d138      	bne.n	8006e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e032      	b.n	8006e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e000      	b.n	8006e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
  }
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d139      	bne.n	8006e98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e033      	b.n	8006e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2224      	movs	r2, #36	; 0x24
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea8:	b08f      	sub	sp, #60	; 0x3c
 8006eaa:	af0a      	add	r7, sp, #40	; 0x28
 8006eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e116      	b.n	80070e6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f006 fb7c 	bl	800d5d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2203      	movs	r2, #3
 8006edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f003 faed 	bl	800a4d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	687e      	ldr	r6, [r7, #4]
 8006f04:	466d      	mov	r5, sp
 8006f06:	f106 0410 	add.w	r4, r6, #16
 8006f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f16:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f1a:	1d33      	adds	r3, r6, #4
 8006f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f1e:	6838      	ldr	r0, [r7, #0]
 8006f20:	f003 fa00 	bl	800a324 <USB_CoreInit>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e0d7      	b.n	80070e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f003 fadb 	bl	800a4f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	e04a      	b.n	8006fde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f48:	7bfa      	ldrb	r2, [r7, #15]
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	333d      	adds	r3, #61	; 0x3d
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f5c:	7bfa      	ldrb	r2, [r7, #15]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	333c      	adds	r3, #60	; 0x3c
 8006f6c:	7bfa      	ldrb	r2, [r7, #15]
 8006f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f70:	7bfa      	ldrb	r2, [r7, #15]
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	b298      	uxth	r0, r3
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	3342      	adds	r3, #66	; 0x42
 8006f84:	4602      	mov	r2, r0
 8006f86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f88:	7bfa      	ldrb	r2, [r7, #15]
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	333f      	adds	r3, #63	; 0x3f
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f9c:	7bfa      	ldrb	r2, [r7, #15]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3344      	adds	r3, #68	; 0x44
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006fb0:	7bfa      	ldrb	r2, [r7, #15]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	3348      	adds	r3, #72	; 0x48
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fc4:	7bfa      	ldrb	r2, [r7, #15]
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	3350      	adds	r3, #80	; 0x50
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
 8006fde:	7bfa      	ldrb	r2, [r7, #15]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d3af      	bcc.n	8006f48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e044      	b.n	8007078 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fee:	7bfa      	ldrb	r2, [r7, #15]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007016:	7bfa      	ldrb	r2, [r7, #15]
 8007018:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800701a:	7bfa      	ldrb	r2, [r7, #15]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007030:	7bfa      	ldrb	r2, [r7, #15]
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007046:	7bfa      	ldrb	r2, [r7, #15]
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800705c:	7bfa      	ldrb	r2, [r7, #15]
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	4613      	mov	r3, r2
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	1a9b      	subs	r3, r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	3301      	adds	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
 8007078:	7bfa      	ldrb	r2, [r7, #15]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d3b5      	bcc.n	8006fee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	687e      	ldr	r6, [r7, #4]
 800708a:	466d      	mov	r5, sp
 800708c:	f106 0410 	add.w	r4, r6, #16
 8007090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007098:	e894 0003 	ldmia.w	r4, {r0, r1}
 800709c:	e885 0003 	stmia.w	r5, {r0, r1}
 80070a0:	1d33      	adds	r3, r6, #4
 80070a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070a4:	6838      	ldr	r0, [r7, #0]
 80070a6:	f003 fa73 	bl	800a590 <USB_DevInit>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e014      	b.n	80070e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d102      	bne.n	80070da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 ff57 	bl	8007f88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f004 fa45 	bl	800b56e <USB_DevDisconnect>

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_PCD_Start+0x1c>
 8007106:	2302      	movs	r3, #2
 8007108:	e01c      	b.n	8007144 <HAL_PCD_Start+0x56>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	2b01      	cmp	r3, #1
 8007118:	d105      	bne.n	8007126 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f003 f9c2 	bl	800a4b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f004 f9f9 	bl	800b52c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800714c:	b590      	push	{r4, r7, lr}
 800714e:	b08d      	sub	sp, #52	; 0x34
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f004 fab7 	bl	800b6d6 <USB_GetMode>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8384 	bne.w	8007878 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f004 fa1b 	bl	800b5b0 <USB_ReadInterrupts>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 837a 	beq.w	8007876 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f004 fa12 	bl	800b5b0 <USB_ReadInterrupts>
 800718c:	4603      	mov	r3, r0
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d107      	bne.n	80071a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695a      	ldr	r2, [r3, #20]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f002 0202 	and.w	r2, r2, #2
 80071a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f004 fa00 	bl	800b5b0 <USB_ReadInterrupts>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d161      	bne.n	800727e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0210 	bic.w	r2, r2, #16
 80071c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4413      	add	r3, r2
 80071e6:	3304      	adds	r3, #4
 80071e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	0c5b      	lsrs	r3, r3, #17
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d124      	bne.n	8007240 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d035      	beq.n	800726e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800720c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007210:	b29b      	uxth	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	6a38      	ldr	r0, [r7, #32]
 8007216:	f004 f837 	bl	800b288 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007226:	441a      	add	r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	091b      	lsrs	r3, r3, #4
 8007234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007238:	441a      	add	r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	619a      	str	r2, [r3, #24]
 800723e:	e016      	b.n	800726e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	0c5b      	lsrs	r3, r3, #17
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	2b06      	cmp	r3, #6
 800724a:	d110      	bne.n	800726e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007252:	2208      	movs	r2, #8
 8007254:	4619      	mov	r1, r3
 8007256:	6a38      	ldr	r0, [r7, #32]
 8007258:	f004 f816 	bl	800b288 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007268:	441a      	add	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699a      	ldr	r2, [r3, #24]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0210 	orr.w	r2, r2, #16
 800727c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f004 f994 	bl	800b5b0 <USB_ReadInterrupts>
 8007288:	4603      	mov	r3, r0
 800728a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800728e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007292:	d16e      	bne.n	8007372 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f004 f99a 	bl	800b5d6 <USB_ReadDevAllOutEpInterrupt>
 80072a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80072a4:	e062      	b.n	800736c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d057      	beq.n	8007360 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f004 f9bf 	bl	800b63e <USB_ReadDevOutEPInterrupt>
 80072c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00c      	beq.n	80072e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	461a      	mov	r2, r3
 80072da:	2301      	movs	r3, #1
 80072dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80072de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fd77 	bl	8007dd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00c      	beq.n	800730a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	461a      	mov	r2, r3
 80072fe:	2308      	movs	r3, #8
 8007300:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fdb3 	bl	8007e70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	461a      	mov	r2, r3
 8007322:	2310      	movs	r3, #16
 8007324:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	2320      	movs	r3, #32
 8007340:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d009      	beq.n	8007360 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	461a      	mov	r2, r3
 800735a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800735e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	3301      	adds	r3, #1
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d199      	bne.n	80072a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f004 f91a 	bl	800b5b0 <USB_ReadInterrupts>
 800737c:	4603      	mov	r3, r0
 800737e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007386:	f040 808c 	bne.w	80074a2 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f004 f93b 	bl	800b60a <USB_ReadDevAllInEpInterrupt>
 8007394:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800739a:	e07e      	b.n	800749a <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d073      	beq.n	800748e <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	4611      	mov	r1, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f004 f962 	bl	800b67a <USB_ReadDevInEPInterrupt>
 80073b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d020      	beq.n	8007404 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	2201      	movs	r2, #1
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	43db      	mvns	r3, r3
 80073dc:	69f9      	ldr	r1, [r7, #28]
 80073de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073e2:	4013      	ands	r3, r2
 80073e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	461a      	mov	r2, r3
 80073f4:	2301      	movs	r3, #1
 80073f6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f006 f995 	bl	800d72e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	461a      	mov	r2, r3
 800741c:	2308      	movs	r3, #8
 800741e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	461a      	mov	r2, r3
 8007438:	2310      	movs	r3, #16
 800743a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	461a      	mov	r2, r3
 8007454:	2340      	movs	r3, #64	; 0x40
 8007456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00c      	beq.n	800747c <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007464:	6a38      	ldr	r0, [r7, #32]
 8007466:	f003 f9df 	bl	800a828 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	461a      	mov	r2, r3
 8007478:	2302      	movs	r3, #2
 800747a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc1a 	bl	8007cc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	3301      	adds	r3, #1
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	2b00      	cmp	r3, #0
 800749e:	f47f af7d 	bne.w	800739c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f004 f882 	bl	800b5b0 <USB_ReadInterrupts>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b6:	d122      	bne.n	80074fe <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c6:	f023 0301 	bic.w	r3, r3, #1
 80074ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d108      	bne.n	80074e8 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074de:	2100      	movs	r1, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f006 fc3d 	bl	800dd60 <HAL_PCDEx_LPM_Callback>
 80074e6:	e002      	b.n	80074ee <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f006 f98d 	bl	800d808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695a      	ldr	r2, [r3, #20]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80074fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f004 f854 	bl	800b5b0 <USB_ReadInterrupts>
 8007508:	4603      	mov	r3, r0
 800750a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007512:	d112      	bne.n	800753a <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b01      	cmp	r3, #1
 8007522:	d102      	bne.n	800752a <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f006 f949 	bl	800d7bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695a      	ldr	r2, [r3, #20]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007538:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f004 f836 	bl	800b5b0 <USB_ReadInterrupts>
 8007544:	4603      	mov	r3, r0
 8007546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800754a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800754e:	d121      	bne.n	8007594 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800755e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d111      	bne.n	800758e <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007578:	089b      	lsrs	r3, r3, #2
 800757a:	f003 020f 	and.w	r2, r3, #15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f006 fbea 	bl	800dd60 <HAL_PCDEx_LPM_Callback>
 800758c:	e002      	b.n	8007594 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f006 f914 	bl	800d7bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f004 f809 	bl	800b5b0 <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a8:	f040 80b5 	bne.w	8007716 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2110      	movs	r1, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f003 f92e 	bl	800a828 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075cc:	2300      	movs	r3, #0
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d0:	e046      	b.n	8007660 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	461a      	mov	r2, r3
 80075e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007604:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	461a      	mov	r2, r3
 8007614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007618:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007658:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	3301      	adds	r3, #1
 800765e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007666:	429a      	cmp	r2, r3
 8007668:	d3b3      	bcc.n	80075d2 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007678:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800767c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007696:	f043 030b 	orr.w	r3, r3, #11
 800769a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ac:	f043 030b 	orr.w	r3, r3, #11
 80076b0:	6453      	str	r3, [r2, #68]	; 0x44
 80076b2:	e015      	b.n	80076e0 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80076ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076da:	f043 030b 	orr.w	r3, r3, #11
 80076de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076fe:	4619      	mov	r1, r3
 8007700:	4610      	mov	r0, r2
 8007702:	f004 f819 	bl	800b738 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695a      	ldr	r2, [r3, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f003 ff48 	bl	800b5b0 <USB_ReadInterrupts>
 8007720:	4603      	mov	r3, r0
 8007722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772a:	d124      	bne.n	8007776 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f003 ffde 	bl	800b6f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f003 f8ed 	bl	800a91a <USB_GetDevSpeed>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681c      	ldr	r4, [r3, #0]
 800774c:	f001 fa68 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8007750:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	4620      	mov	r0, r4
 800775c:	f002 fe0e 	bl	800a37c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f006 f80c 	bl	800d77e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007774:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f003 ff18 	bl	800b5b0 <USB_ReadInterrupts>
 8007780:	4603      	mov	r3, r0
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b08      	cmp	r3, #8
 8007788:	d10a      	bne.n	80077a0 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f005 ffe9 	bl	800d762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695a      	ldr	r2, [r3, #20]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f002 0208 	and.w	r2, r2, #8
 800779e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f003 ff03 	bl	800b5b0 <USB_ReadInterrupts>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b4:	d10f      	bne.n	80077d6 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f006 f85b 	bl	800d87c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695a      	ldr	r2, [r3, #20]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80077d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f003 fee8 	bl	800b5b0 <USB_ReadInterrupts>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ea:	d10f      	bne.n	800780c <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f006 f82e 	bl	800d858 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695a      	ldr	r2, [r3, #20]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800780a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f003 fecd 	bl	800b5b0 <USB_ReadInterrupts>
 8007816:	4603      	mov	r3, r0
 8007818:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007820:	d10a      	bne.n	8007838 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f006 f83c 	bl	800d8a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f003 feb7 	bl	800b5b0 <USB_ReadInterrupts>
 8007842:	4603      	mov	r3, r0
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b04      	cmp	r3, #4
 800784a:	d115      	bne.n	8007878 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f006 f82c 	bl	800d8bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6859      	ldr	r1, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
 8007874:	e000      	b.n	8007878 <HAL_PCD_IRQHandler+0x72c>
      return;
 8007876:	bf00      	nop
    }
  }
}
 8007878:	3734      	adds	r7, #52	; 0x34
 800787a:	46bd      	mov	sp, r7
 800787c:	bd90      	pop	{r4, r7, pc}

0800787e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_PCD_SetAddress+0x1a>
 8007894:	2302      	movs	r3, #2
 8007896:	e013      	b.n	80078c0 <HAL_PCD_SetAddress+0x42>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 fe15 	bl	800b4e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	461a      	mov	r2, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	70fb      	strb	r3, [r7, #3]
 80078da:	460b      	mov	r3, r1
 80078dc:	803b      	strh	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da0f      	bge.n	800790e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	f003 020f 	and.w	r2, r3, #15
 80078f4:	4613      	mov	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	3338      	adds	r3, #56	; 0x38
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	3304      	adds	r3, #4
 8007904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	705a      	strb	r2, [r3, #1]
 800790c:	e00f      	b.n	800792e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800793a:	883a      	ldrh	r2, [r7, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	78ba      	ldrb	r2, [r7, #2]
 8007944:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007958:	78bb      	ldrb	r3, [r7, #2]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d102      	bne.n	8007964 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_PCD_EP_Open+0xaa>
 800796e:	2302      	movs	r3, #2
 8007970:	e00e      	b.n	8007990 <HAL_PCD_EP_Open+0xc8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	4618      	mov	r0, r3
 8007982:	f002 ffe9 	bl	800a958 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800798e:	7afb      	ldrb	r3, [r7, #11]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da0f      	bge.n	80079cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	3338      	adds	r3, #56	; 0x38
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	705a      	strb	r2, [r3, #1]
 80079ca:	e00f      	b.n	80079ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	f003 020f 	and.w	r2, r3, #15
 80079d2:	4613      	mov	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	3304      	adds	r3, #4
 80079e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <HAL_PCD_EP_Close+0x6e>
 8007a02:	2302      	movs	r3, #2
 8007a04:	e00e      	b.n	8007a24 <HAL_PCD_EP_Close+0x8c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f003 f827 	bl	800aa68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	f003 020f 	and.w	r2, r3, #15
 8007a42:	4613      	mov	r3, r2
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	3304      	adds	r3, #4
 8007a54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6979      	ldr	r1, [r7, #20]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f003 faa4 	bl	800afd8 <USB_EP0StartXfer>
 8007a90:	e005      	b.n	8007a9e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6979      	ldr	r1, [r7, #20]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f003 f8c1 	bl	800ac20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	f003 020f 	and.w	r2, r3, #15
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007aca:	681b      	ldr	r3, [r3, #0]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	4613      	mov	r3, r2
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	1a9b      	subs	r3, r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	3338      	adds	r3, #56	; 0x38
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2201      	movs	r2, #1
 8007b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6979      	ldr	r1, [r7, #20]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f003 fa4f 	bl	800afd8 <USB_EP0StartXfer>
 8007b3a:	e005      	b.n	8007b48 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6979      	ldr	r1, [r7, #20]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f003 f86c 	bl	800ac20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d901      	bls.n	8007b70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e04e      	b.n	8007c0e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da0f      	bge.n	8007b98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	f003 020f 	and.w	r2, r3, #15
 8007b7e:	4613      	mov	r3, r2
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	1a9b      	subs	r3, r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	3338      	adds	r3, #56	; 0x38
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	705a      	strb	r2, [r3, #1]
 8007b96:	e00d      	b.n	8007bb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	3304      	adds	r3, #4
 8007bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_PCD_EP_SetStall+0x82>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e01c      	b.n	8007c0e <HAL_PCD_EP_SetStall+0xbc>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f003 fba8 	bl	800b338 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d108      	bne.n	8007c04 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f003 fd9a 	bl	800b738 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d901      	bls.n	8007c34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e042      	b.n	8007cba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	da0f      	bge.n	8007c5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	f003 020f 	and.w	r2, r3, #15
 8007c42:	4613      	mov	r3, r2
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	3338      	adds	r3, #56	; 0x38
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4413      	add	r3, r2
 8007c50:	3304      	adds	r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	705a      	strb	r2, [r3, #1]
 8007c5a:	e00f      	b.n	8007c7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	f003 020f 	and.w	r2, r3, #15
 8007c62:	4613      	mov	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_PCD_EP_ClrStall+0x86>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e00e      	b.n	8007cba <HAL_PCD_EP_ClrStall+0xa4>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68f9      	ldr	r1, [r7, #12]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f003 fbb2 	bl	800b414 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	3338      	adds	r3, #56	; 0x38
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d901      	bls.n	8007cfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e067      	b.n	8007dca <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d902      	bls.n	8007d16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	3303      	adds	r3, #3
 8007d1a:	089b      	lsrs	r3, r3, #2
 8007d1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d1e:	e026      	b.n	8007d6e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	695a      	ldr	r2, [r3, #20]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d902      	bls.n	8007d3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	3303      	adds	r3, #3
 8007d40:	089b      	lsrs	r3, r3, #2
 8007d42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68d9      	ldr	r1, [r3, #12]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	6978      	ldr	r0, [r7, #20]
 8007d52:	f003 fa5f 	bl	800b214 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	441a      	add	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	441a      	add	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d809      	bhi.n	8007d98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	699a      	ldr	r2, [r3, #24]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d203      	bcs.n	8007d98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1c3      	bne.n	8007d20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	695a      	ldr	r2, [r3, #20]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d811      	bhi.n	8007dc8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	2201      	movs	r2, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	6939      	ldr	r1, [r7, #16]
 8007dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	333c      	adds	r3, #60	; 0x3c
 8007dec:	3304      	adds	r3, #4
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <PCD_EP_OutXfrComplete_int+0x98>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d124      	bne.n	8007e54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	461a      	mov	r2, r3
 8007e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e26:	6093      	str	r3, [r2, #8]
 8007e28:	e01a      	b.n	8007e60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	461a      	mov	r2, r3
 8007e42:	2320      	movs	r3, #32
 8007e44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f005 fc53 	bl	800d6f8 <HAL_PCD_DataOutStageCallback>
 8007e52:	e005      	b.n	8007e60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f005 fc4c 	bl	800d6f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	4f54310a 	.word	0x4f54310a

08007e70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	333c      	adds	r3, #60	; 0x3c
 8007e88:	3304      	adds	r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a0c      	ldr	r2, [pc, #48]	; (8007ed4 <PCD_EP_OutSetupPacket_int+0x64>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d90e      	bls.n	8007ec4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f005 fc05 	bl	800d6d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	4f54300a 	.word	0x4f54300a

08007ed8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ef6:	883b      	ldrh	r3, [r7, #0]
 8007ef8:	0419      	lsls	r1, r3, #16
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	629a      	str	r2, [r3, #40]	; 0x28
 8007f04:	e028      	b.n	8007f58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
 8007f18:	e00d      	b.n	8007f36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	3340      	adds	r3, #64	; 0x40
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	3301      	adds	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d3ec      	bcc.n	8007f1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f40:	883b      	ldrh	r3, [r7, #0]
 8007f42:	0418      	lsls	r0, r3, #16
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6819      	ldr	r1, [r3, #0]
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	4302      	orrs	r2, r0
 8007f50:	3340      	adds	r3, #64	; 0x40
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fba:	f043 0303 	orr.w	r3, r3, #3
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a04      	ldr	r2, [pc, #16]	; (8007fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fde:	6013      	str	r3, [r2, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40007000 	.word	0x40007000

08007ff0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <HAL_PWREx_GetVoltageRange+0x18>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40007000 	.word	0x40007000

0800800c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801a:	d130      	bne.n	800807e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800801c:	4b23      	ldr	r3, [pc, #140]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008028:	d038      	beq.n	800809c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800802a:	4b20      	ldr	r3, [pc, #128]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008032:	4a1e      	ldr	r2, [pc, #120]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008038:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800803a:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2232      	movs	r2, #50	; 0x32
 8008040:	fb02 f303 	mul.w	r3, r2, r3
 8008044:	4a1b      	ldr	r2, [pc, #108]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008046:	fba2 2303 	umull	r2, r3, r2, r3
 800804a:	0c9b      	lsrs	r3, r3, #18
 800804c:	3301      	adds	r3, #1
 800804e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008050:	e002      	b.n	8008058 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3b01      	subs	r3, #1
 8008056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008058:	4b14      	ldr	r3, [pc, #80]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008064:	d102      	bne.n	800806c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f2      	bne.n	8008052 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008078:	d110      	bne.n	800809c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e00f      	b.n	800809e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800808a:	d007      	beq.n	800809c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800808c:	4b07      	ldr	r3, [pc, #28]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008094:	4a05      	ldr	r2, [pc, #20]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800809a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40007000 	.word	0x40007000
 80080b0:	20000000 	.word	0x20000000
 80080b4:	431bde83 	.word	0x431bde83

080080b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80080c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080c6:	6053      	str	r3, [r2, #4]
}
 80080c8:	bf00      	nop
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40007000 	.word	0x40007000

080080d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a04      	ldr	r2, [pc, #16]	; (80080f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80080e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080e6:	6053      	str	r3, [r2, #4]
}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40007000 	.word	0x40007000

080080f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f000 bc16 	b.w	8008938 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800810c:	4ba0      	ldr	r3, [pc, #640]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 030c 	and.w	r3, r3, #12
 8008114:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008116:	4b9e      	ldr	r3, [pc, #632]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80e4 	beq.w	80082f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d007      	beq.n	8008144 <HAL_RCC_OscConfig+0x4c>
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b0c      	cmp	r3, #12
 8008138:	f040 808b 	bne.w	8008252 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b01      	cmp	r3, #1
 8008140:	f040 8087 	bne.w	8008252 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008144:	4b92      	ldr	r3, [pc, #584]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <HAL_RCC_OscConfig+0x64>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e3ed      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	4b8b      	ldr	r3, [pc, #556]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <HAL_RCC_OscConfig+0x7e>
 800816c:	4b88      	ldr	r3, [pc, #544]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008174:	e005      	b.n	8008182 <HAL_RCC_OscConfig+0x8a>
 8008176:	4b86      	ldr	r3, [pc, #536]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800817c:	091b      	lsrs	r3, r3, #4
 800817e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008182:	4293      	cmp	r3, r2
 8008184:	d223      	bcs.n	80081ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fd9c 	bl	8008cc8 <RCC_SetFlashLatencyFromMSIRange>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e3ce      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800819a:	4b7d      	ldr	r3, [pc, #500]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a7c      	ldr	r2, [pc, #496]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081a0:	f043 0308 	orr.w	r3, r3, #8
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	4b7a      	ldr	r3, [pc, #488]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	4977      	ldr	r1, [pc, #476]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081b8:	4b75      	ldr	r3, [pc, #468]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	4972      	ldr	r1, [pc, #456]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	e025      	b.n	800821a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081ce:	4b70      	ldr	r3, [pc, #448]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a6f      	ldr	r2, [pc, #444]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081d4:	f043 0308 	orr.w	r3, r3, #8
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	4b6d      	ldr	r3, [pc, #436]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	496a      	ldr	r1, [pc, #424]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081ec:	4b68      	ldr	r3, [pc, #416]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	4965      	ldr	r1, [pc, #404]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fd5c 	bl	8008cc8 <RCC_SetFlashLatencyFromMSIRange>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e38e      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800821a:	f000 fc75 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 800821e:	4602      	mov	r2, r0
 8008220:	4b5b      	ldr	r3, [pc, #364]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	495a      	ldr	r1, [pc, #360]	; (8008394 <HAL_RCC_OscConfig+0x29c>)
 800822c:	5ccb      	ldrb	r3, [r1, r3]
 800822e:	f003 031f 	and.w	r3, r3, #31
 8008232:	fa22 f303 	lsr.w	r3, r2, r3
 8008236:	4a58      	ldr	r2, [pc, #352]	; (8008398 <HAL_RCC_OscConfig+0x2a0>)
 8008238:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800823a:	4b58      	ldr	r3, [pc, #352]	; (800839c <HAL_RCC_OscConfig+0x2a4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f7fa ff8c 	bl	800315c <HAL_InitTick>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d052      	beq.n	80082f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	e372      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d032      	beq.n	80082c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800825a:	4b4d      	ldr	r3, [pc, #308]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a4c      	ldr	r2, [pc, #304]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008266:	f7fb f973 	bl	8003550 <HAL_GetTick>
 800826a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800826e:	f7fb f96f 	bl	8003550 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e35b      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008280:	4b43      	ldr	r3, [pc, #268]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0f0      	beq.n	800826e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800828c:	4b40      	ldr	r3, [pc, #256]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a3f      	ldr	r2, [pc, #252]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008292:	f043 0308 	orr.w	r3, r3, #8
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	4b3d      	ldr	r3, [pc, #244]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	493a      	ldr	r1, [pc, #232]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082aa:	4b39      	ldr	r3, [pc, #228]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	4935      	ldr	r1, [pc, #212]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	604b      	str	r3, [r1, #4]
 80082be:	e01a      	b.n	80082f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80082c0:	4b33      	ldr	r3, [pc, #204]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a32      	ldr	r2, [pc, #200]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082cc:	f7fb f940 	bl	8003550 <HAL_GetTick>
 80082d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082d2:	e008      	b.n	80082e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082d4:	f7fb f93c 	bl	8003550 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e328      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082e6:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f0      	bne.n	80082d4 <HAL_RCC_OscConfig+0x1dc>
 80082f2:	e000      	b.n	80082f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d073      	beq.n	80083ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d005      	beq.n	8008314 <HAL_RCC_OscConfig+0x21c>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b0c      	cmp	r3, #12
 800830c:	d10e      	bne.n	800832c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d10b      	bne.n	800832c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008314:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d063      	beq.n	80083e8 <HAL_RCC_OscConfig+0x2f0>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d15f      	bne.n	80083e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e305      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008334:	d106      	bne.n	8008344 <HAL_RCC_OscConfig+0x24c>
 8008336:	4b16      	ldr	r3, [pc, #88]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a15      	ldr	r2, [pc, #84]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800833c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	e01d      	b.n	8008380 <HAL_RCC_OscConfig+0x288>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800834c:	d10c      	bne.n	8008368 <HAL_RCC_OscConfig+0x270>
 800834e:	4b10      	ldr	r3, [pc, #64]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a0f      	ldr	r2, [pc, #60]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	4b0d      	ldr	r3, [pc, #52]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a0c      	ldr	r2, [pc, #48]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	e00b      	b.n	8008380 <HAL_RCC_OscConfig+0x288>
 8008368:	4b09      	ldr	r3, [pc, #36]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a08      	ldr	r2, [pc, #32]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800836e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a05      	ldr	r2, [pc, #20]	; (8008390 <HAL_RCC_OscConfig+0x298>)
 800837a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800837e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01b      	beq.n	80083c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008388:	f7fb f8e2 	bl	8003550 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800838e:	e010      	b.n	80083b2 <HAL_RCC_OscConfig+0x2ba>
 8008390:	40021000 	.word	0x40021000
 8008394:	08012e1c 	.word	0x08012e1c
 8008398:	20000000 	.word	0x20000000
 800839c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fb f8d6 	bl	8003550 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e2c2      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083b2:	4baf      	ldr	r3, [pc, #700]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f0      	beq.n	80083a0 <HAL_RCC_OscConfig+0x2a8>
 80083be:	e014      	b.n	80083ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fb f8c6 	bl	8003550 <HAL_GetTick>
 80083c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c8:	f7fb f8c2 	bl	8003550 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b64      	cmp	r3, #100	; 0x64
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e2ae      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083da:	4ba5      	ldr	r3, [pc, #660]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x2d0>
 80083e6:	e000      	b.n	80083ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d060      	beq.n	80084b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d005      	beq.n	8008408 <HAL_RCC_OscConfig+0x310>
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b0c      	cmp	r3, #12
 8008400:	d119      	bne.n	8008436 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b02      	cmp	r3, #2
 8008406:	d116      	bne.n	8008436 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008408:	4b99      	ldr	r3, [pc, #612]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <HAL_RCC_OscConfig+0x328>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e28b      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008420:	4b93      	ldr	r3, [pc, #588]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	061b      	lsls	r3, r3, #24
 800842e:	4990      	ldr	r1, [pc, #576]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008430:	4313      	orrs	r3, r2
 8008432:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008434:	e040      	b.n	80084b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d023      	beq.n	8008486 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800843e:	4b8c      	ldr	r3, [pc, #560]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a8b      	ldr	r2, [pc, #556]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844a:	f7fb f881 	bl	8003550 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008450:	e008      	b.n	8008464 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008452:	f7fb f87d 	bl	8003550 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e269      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008464:	4b82      	ldr	r3, [pc, #520]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0f0      	beq.n	8008452 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008470:	4b7f      	ldr	r3, [pc, #508]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	061b      	lsls	r3, r3, #24
 800847e:	497c      	ldr	r1, [pc, #496]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008480:	4313      	orrs	r3, r2
 8008482:	604b      	str	r3, [r1, #4]
 8008484:	e018      	b.n	80084b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008486:	4b7a      	ldr	r3, [pc, #488]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a79      	ldr	r2, [pc, #484]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 800848c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008492:	f7fb f85d 	bl	8003550 <HAL_GetTick>
 8008496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800849a:	f7fb f859 	bl	8003550 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e245      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084ac:	4b70      	ldr	r3, [pc, #448]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1f0      	bne.n	800849a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d03c      	beq.n	800853e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01c      	beq.n	8008506 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084cc:	4b68      	ldr	r3, [pc, #416]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80084ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d2:	4a67      	ldr	r2, [pc, #412]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084dc:	f7fb f838 	bl	8003550 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e4:	f7fb f834 	bl	8003550 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e220      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084f6:	4b5e      	ldr	r3, [pc, #376]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80084f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0ef      	beq.n	80084e4 <HAL_RCC_OscConfig+0x3ec>
 8008504:	e01b      	b.n	800853e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008506:	4b5a      	ldr	r3, [pc, #360]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800850c:	4a58      	ldr	r2, [pc, #352]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 800850e:	f023 0301 	bic.w	r3, r3, #1
 8008512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008516:	f7fb f81b 	bl	8003550 <HAL_GetTick>
 800851a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800851c:	e008      	b.n	8008530 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800851e:	f7fb f817 	bl	8003550 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d901      	bls.n	8008530 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e203      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008530:	4b4f      	ldr	r3, [pc, #316]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1ef      	bne.n	800851e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a6 	beq.w	8008698 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800854c:	2300      	movs	r3, #0
 800854e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008550:	4b47      	ldr	r3, [pc, #284]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10d      	bne.n	8008578 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800855c:	4b44      	ldr	r3, [pc, #272]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 800855e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008560:	4a43      	ldr	r2, [pc, #268]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008566:	6593      	str	r3, [r2, #88]	; 0x58
 8008568:	4b41      	ldr	r3, [pc, #260]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008570:	60bb      	str	r3, [r7, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008574:	2301      	movs	r3, #1
 8008576:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008578:	4b3e      	ldr	r3, [pc, #248]	; (8008674 <HAL_RCC_OscConfig+0x57c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008580:	2b00      	cmp	r3, #0
 8008582:	d118      	bne.n	80085b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008584:	4b3b      	ldr	r3, [pc, #236]	; (8008674 <HAL_RCC_OscConfig+0x57c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a3a      	ldr	r2, [pc, #232]	; (8008674 <HAL_RCC_OscConfig+0x57c>)
 800858a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800858e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008590:	f7fa ffde 	bl	8003550 <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008598:	f7fa ffda 	bl	8003550 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e1c6      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085aa:	4b32      	ldr	r3, [pc, #200]	; (8008674 <HAL_RCC_OscConfig+0x57c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d108      	bne.n	80085d0 <HAL_RCC_OscConfig+0x4d8>
 80085be:	4b2c      	ldr	r3, [pc, #176]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c4:	4a2a      	ldr	r2, [pc, #168]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085ce:	e024      	b.n	800861a <HAL_RCC_OscConfig+0x522>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	2b05      	cmp	r3, #5
 80085d6:	d110      	bne.n	80085fa <HAL_RCC_OscConfig+0x502>
 80085d8:	4b25      	ldr	r3, [pc, #148]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085de:	4a24      	ldr	r2, [pc, #144]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085e0:	f043 0304 	orr.w	r3, r3, #4
 80085e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085e8:	4b21      	ldr	r3, [pc, #132]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	4a20      	ldr	r2, [pc, #128]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085f8:	e00f      	b.n	800861a <HAL_RCC_OscConfig+0x522>
 80085fa:	4b1d      	ldr	r3, [pc, #116]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 80085fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008600:	4a1b      	ldr	r2, [pc, #108]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008602:	f023 0301 	bic.w	r3, r3, #1
 8008606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800860a:	4b19      	ldr	r3, [pc, #100]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	4a17      	ldr	r2, [pc, #92]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008612:	f023 0304 	bic.w	r3, r3, #4
 8008616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d016      	beq.n	8008650 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008622:	f7fa ff95 	bl	8003550 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008628:	e00a      	b.n	8008640 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862a:	f7fa ff91 	bl	8003550 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	f241 3288 	movw	r2, #5000	; 0x1388
 8008638:	4293      	cmp	r3, r2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e17b      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <HAL_RCC_OscConfig+0x578>)
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0ed      	beq.n	800862a <HAL_RCC_OscConfig+0x532>
 800864e:	e01a      	b.n	8008686 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008650:	f7fa ff7e 	bl	8003550 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008656:	e00f      	b.n	8008678 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008658:	f7fa ff7a 	bl	8003550 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	f241 3288 	movw	r2, #5000	; 0x1388
 8008666:	4293      	cmp	r3, r2
 8008668:	d906      	bls.n	8008678 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e164      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
 800866e:	bf00      	nop
 8008670:	40021000 	.word	0x40021000
 8008674:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008678:	4ba8      	ldr	r3, [pc, #672]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e8      	bne.n	8008658 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008686:	7ffb      	ldrb	r3, [r7, #31]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d105      	bne.n	8008698 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800868c:	4ba3      	ldr	r3, [pc, #652]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800868e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008690:	4aa2      	ldr	r2, [pc, #648]	; (800891c <HAL_RCC_OscConfig+0x824>)
 8008692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008696:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d03c      	beq.n	800871e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01c      	beq.n	80086e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086ac:	4b9b      	ldr	r3, [pc, #620]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80086ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086b2:	4a9a      	ldr	r2, [pc, #616]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80086b4:	f043 0301 	orr.w	r3, r3, #1
 80086b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086bc:	f7fa ff48 	bl	8003550 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086c4:	f7fa ff44 	bl	8003550 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e130      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086d6:	4b91      	ldr	r3, [pc, #580]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80086d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0ef      	beq.n	80086c4 <HAL_RCC_OscConfig+0x5cc>
 80086e4:	e01b      	b.n	800871e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086e6:	4b8d      	ldr	r3, [pc, #564]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80086e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086ec:	4a8b      	ldr	r2, [pc, #556]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80086ee:	f023 0301 	bic.w	r3, r3, #1
 80086f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f6:	f7fa ff2b 	bl	8003550 <HAL_GetTick>
 80086fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086fc:	e008      	b.n	8008710 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086fe:	f7fa ff27 	bl	8003550 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e113      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008710:	4b82      	ldr	r3, [pc, #520]	; (800891c <HAL_RCC_OscConfig+0x824>)
 8008712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1ef      	bne.n	80086fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 8107 	beq.w	8008936 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	2b02      	cmp	r3, #2
 800872e:	f040 80cb 	bne.w	80088c8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008732:	4b7a      	ldr	r3, [pc, #488]	; (800891c <HAL_RCC_OscConfig+0x824>)
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f003 0203 	and.w	r2, r3, #3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	429a      	cmp	r2, r3
 8008744:	d12c      	bne.n	80087a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008750:	3b01      	subs	r3, #1
 8008752:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008754:	429a      	cmp	r2, r3
 8008756:	d123      	bne.n	80087a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008764:	429a      	cmp	r2, r3
 8008766:	d11b      	bne.n	80087a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008774:	429a      	cmp	r2, r3
 8008776:	d113      	bne.n	80087a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	3b01      	subs	r3, #1
 8008786:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008788:	429a      	cmp	r2, r3
 800878a:	d109      	bne.n	80087a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	3b01      	subs	r3, #1
 800879a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800879c:	429a      	cmp	r2, r3
 800879e:	d06d      	beq.n	800887c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b0c      	cmp	r3, #12
 80087a4:	d068      	beq.n	8008878 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80087a6:	4b5d      	ldr	r3, [pc, #372]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80087b2:	4b5a      	ldr	r3, [pc, #360]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e0ba      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80087c2:	4b56      	ldr	r3, [pc, #344]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a55      	ldr	r2, [pc, #340]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80087c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087ce:	f7fa febf 	bl	8003550 <HAL_GetTick>
 80087d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d6:	f7fa febb 	bl	8003550 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e0a7      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087e8:	4b4c      	ldr	r3, [pc, #304]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f0      	bne.n	80087d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087f4:	4b49      	ldr	r3, [pc, #292]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	4b49      	ldr	r3, [pc, #292]	; (8008920 <HAL_RCC_OscConfig+0x828>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008804:	3a01      	subs	r2, #1
 8008806:	0112      	lsls	r2, r2, #4
 8008808:	4311      	orrs	r1, r2
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800880e:	0212      	lsls	r2, r2, #8
 8008810:	4311      	orrs	r1, r2
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008816:	0852      	lsrs	r2, r2, #1
 8008818:	3a01      	subs	r2, #1
 800881a:	0552      	lsls	r2, r2, #21
 800881c:	4311      	orrs	r1, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008822:	0852      	lsrs	r2, r2, #1
 8008824:	3a01      	subs	r2, #1
 8008826:	0652      	lsls	r2, r2, #25
 8008828:	4311      	orrs	r1, r2
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800882e:	06d2      	lsls	r2, r2, #27
 8008830:	430a      	orrs	r2, r1
 8008832:	493a      	ldr	r1, [pc, #232]	; (800891c <HAL_RCC_OscConfig+0x824>)
 8008834:	4313      	orrs	r3, r2
 8008836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008838:	4b38      	ldr	r3, [pc, #224]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a37      	ldr	r2, [pc, #220]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800883e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008844:	4b35      	ldr	r3, [pc, #212]	; (800891c <HAL_RCC_OscConfig+0x824>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4a34      	ldr	r2, [pc, #208]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800884a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800884e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008850:	f7fa fe7e 	bl	8003550 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008858:	f7fa fe7a 	bl	8003550 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e066      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800886a:	4b2c      	ldr	r3, [pc, #176]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0f0      	beq.n	8008858 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008876:	e05e      	b.n	8008936 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e05d      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800887c:	4b27      	ldr	r3, [pc, #156]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d156      	bne.n	8008936 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008888:	4b24      	ldr	r3, [pc, #144]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a23      	ldr	r2, [pc, #140]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800888e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008894:	4b21      	ldr	r3, [pc, #132]	; (800891c <HAL_RCC_OscConfig+0x824>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	4a20      	ldr	r2, [pc, #128]	; (800891c <HAL_RCC_OscConfig+0x824>)
 800889a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800889e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088a0:	f7fa fe56 	bl	8003550 <HAL_GetTick>
 80088a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088a6:	e008      	b.n	80088ba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088a8:	f7fa fe52 	bl	8003550 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e03e      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088ba:	4b18      	ldr	r3, [pc, #96]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f0      	beq.n	80088a8 <HAL_RCC_OscConfig+0x7b0>
 80088c6:	e036      	b.n	8008936 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2b0c      	cmp	r3, #12
 80088cc:	d031      	beq.n	8008932 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a12      	ldr	r2, [pc, #72]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	4a09      	ldr	r2, [pc, #36]	; (800891c <HAL_RCC_OscConfig+0x824>)
 80088f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80088fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008900:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008902:	f7fa fe25 	bl	8003550 <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008908:	e00c      	b.n	8008924 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800890a:	f7fa fe21 	bl	8003550 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d905      	bls.n	8008924 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e00d      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
 800891c:	40021000 	.word	0x40021000
 8008920:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008924:	4b06      	ldr	r3, [pc, #24]	; (8008940 <HAL_RCC_OscConfig+0x848>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1ec      	bne.n	800890a <HAL_RCC_OscConfig+0x812>
 8008930:	e001      	b.n	8008936 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3720      	adds	r7, #32
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40021000 	.word	0x40021000

08008944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0c8      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008958:	4b66      	ldr	r3, [pc, #408]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d910      	bls.n	8008988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008966:	4b63      	ldr	r3, [pc, #396]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f023 0207 	bic.w	r2, r3, #7
 800896e:	4961      	ldr	r1, [pc, #388]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	4313      	orrs	r3, r2
 8008974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008976:	4b5f      	ldr	r3, [pc, #380]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d001      	beq.n	8008988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e0b0      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d04c      	beq.n	8008a2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b03      	cmp	r3, #3
 800899a:	d107      	bne.n	80089ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800899c:	4b56      	ldr	r3, [pc, #344]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d121      	bne.n	80089ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e09e      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d107      	bne.n	80089c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089b4:	4b50      	ldr	r3, [pc, #320]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d115      	bne.n	80089ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e092      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d107      	bne.n	80089dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089cc:	4b4a      	ldr	r3, [pc, #296]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e086      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089dc:	4b46      	ldr	r3, [pc, #280]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e07e      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089ec:	4b42      	ldr	r3, [pc, #264]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f023 0203 	bic.w	r2, r3, #3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	493f      	ldr	r1, [pc, #252]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089fe:	f7fa fda7 	bl	8003550 <HAL_GetTick>
 8008a02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a04:	e00a      	b.n	8008a1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a06:	f7fa fda3 	bl	8003550 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d901      	bls.n	8008a1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e066      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 020c 	and.w	r2, r3, #12
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d1eb      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d008      	beq.n	8008a4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a3a:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	492c      	ldr	r1, [pc, #176]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a4c:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d210      	bcs.n	8008a7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5a:	4b26      	ldr	r3, [pc, #152]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f023 0207 	bic.w	r2, r3, #7
 8008a62:	4924      	ldr	r1, [pc, #144]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6a:	4b22      	ldr	r3, [pc, #136]	; (8008af4 <HAL_RCC_ClockConfig+0x1b0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d001      	beq.n	8008a7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e036      	b.n	8008aea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d008      	beq.n	8008a9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a88:	4b1b      	ldr	r3, [pc, #108]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	4918      	ldr	r1, [pc, #96]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	4910      	ldr	r1, [pc, #64]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008aba:	f000 f825 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <HAL_RCC_ClockConfig+0x1b4>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	091b      	lsrs	r3, r3, #4
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	490c      	ldr	r1, [pc, #48]	; (8008afc <HAL_RCC_ClockConfig+0x1b8>)
 8008acc:	5ccb      	ldrb	r3, [r1, r3]
 8008ace:	f003 031f 	and.w	r3, r3, #31
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008ada:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <HAL_RCC_ClockConfig+0x1c0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fa fb3c 	bl	800315c <HAL_InitTick>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	72fb      	strb	r3, [r7, #11]

  return status;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40022000 	.word	0x40022000
 8008af8:	40021000 	.word	0x40021000
 8008afc:	08012e1c 	.word	0x08012e1c
 8008b00:	20000000 	.word	0x20000000
 8008b04:	20000004 	.word	0x20000004

08008b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	2300      	movs	r3, #0
 8008b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b16:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 030c 	and.w	r3, r3, #12
 8008b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b20:	4b3b      	ldr	r3, [pc, #236]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <HAL_RCC_GetSysClockFreq+0x34>
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b0c      	cmp	r3, #12
 8008b34:	d121      	bne.n	8008b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d11e      	bne.n	8008b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008b3c:	4b34      	ldr	r3, [pc, #208]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0308 	and.w	r3, r3, #8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d107      	bne.n	8008b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008b48:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b4e:	0a1b      	lsrs	r3, r3, #8
 8008b50:	f003 030f 	and.w	r3, r3, #15
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	e005      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008b58:	4b2d      	ldr	r3, [pc, #180]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008b64:	4a2b      	ldr	r2, [pc, #172]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10d      	bne.n	8008b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b78:	e00a      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d102      	bne.n	8008b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b80:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8008b82:	61bb      	str	r3, [r7, #24]
 8008b84:	e004      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d101      	bne.n	8008b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b8c:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8008b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b0c      	cmp	r3, #12
 8008b94:	d134      	bne.n	8008c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b96:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d003      	beq.n	8008bae <HAL_RCC_GetSysClockFreq+0xa6>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d003      	beq.n	8008bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8008bac:	e005      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008bae:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8008bb0:	617b      	str	r3, [r7, #20]
      break;
 8008bb2:	e005      	b.n	8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008bb4:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8008bb6:	617b      	str	r3, [r7, #20]
      break;
 8008bb8:	e002      	b.n	8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	617b      	str	r3, [r7, #20]
      break;
 8008bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008bc0:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	3301      	adds	r3, #1
 8008bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008bce:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	fb02 f203 	mul.w	r2, r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	0e5b      	lsrs	r3, r3, #25
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008c00:	69bb      	ldr	r3, [r7, #24]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3724      	adds	r7, #36	; 0x24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40021000 	.word	0x40021000
 8008c14:	08012e34 	.word	0x08012e34
 8008c18:	00f42400 	.word	0x00f42400
 8008c1c:	007a1200 	.word	0x007a1200

08008c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c24:	4b03      	ldr	r3, [pc, #12]	; (8008c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c26:	681b      	ldr	r3, [r3, #0]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000000 	.word	0x20000000

08008c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c3c:	f7ff fff0 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8008c40:	4602      	mov	r2, r0
 8008c42:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	4904      	ldr	r1, [pc, #16]	; (8008c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c4e:	5ccb      	ldrb	r3, [r1, r3]
 8008c50:	f003 031f 	and.w	r3, r3, #31
 8008c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	08012e2c 	.word	0x08012e2c

08008c64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	220f      	movs	r2, #15
 8008c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008c74:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 0203 	and.w	r2, r3, #3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008c8c:	4b0c      	ldr	r3, [pc, #48]	; (8008cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	08db      	lsrs	r3, r3, #3
 8008c9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008ca6:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <HAL_RCC_GetClockConfig+0x60>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0207 	and.w	r2, r3, #7
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	601a      	str	r2, [r3, #0]
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	40022000 	.word	0x40022000

08008cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008cd4:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008ce0:	f7ff f986 	bl	8007ff0 <HAL_PWREx_GetVoltageRange>
 8008ce4:	6178      	str	r0, [r7, #20]
 8008ce6:	e014      	b.n	8008d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ce8:	4b25      	ldr	r3, [pc, #148]	; (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cec:	4a24      	ldr	r2, [pc, #144]	; (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8008cf4:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d00:	f7ff f976 	bl	8007ff0 <HAL_PWREx_GetVoltageRange>
 8008d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d06:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0a:	4a1d      	ldr	r2, [pc, #116]	; (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d18:	d10b      	bne.n	8008d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b80      	cmp	r3, #128	; 0x80
 8008d1e:	d919      	bls.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2ba0      	cmp	r3, #160	; 0xa0
 8008d24:	d902      	bls.n	8008d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008d26:	2302      	movs	r3, #2
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	e013      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	e010      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d902      	bls.n	8008d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008d38:	2303      	movs	r3, #3
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	e00a      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d102      	bne.n	8008d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008d44:	2302      	movs	r3, #2
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	e004      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b70      	cmp	r3, #112	; 0x70
 8008d4e:	d101      	bne.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008d50:	2301      	movs	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008d54:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f023 0207 	bic.w	r2, r3, #7
 8008d5c:	4909      	ldr	r1, [pc, #36]	; (8008d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008d64:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d001      	beq.n	8008d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40022000 	.word	0x40022000

08008d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d90:	2300      	movs	r3, #0
 8008d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d94:	2300      	movs	r3, #0
 8008d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d041      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008da8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008dac:	d02a      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008dae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008db2:	d824      	bhi.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008db4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db8:	d008      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dbe:	d81e      	bhi.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dc8:	d010      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008dca:	e018      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008dcc:	4b86      	ldr	r3, [pc, #536]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	4a85      	ldr	r2, [pc, #532]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008dd8:	e015      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 facd 	bl	8009380 <RCCEx_PLLSAI1_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008dea:	e00c      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3320      	adds	r3, #32
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fbb6 	bl	8009564 <RCCEx_PLLSAI2_Config>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008dfc:	e003      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	74fb      	strb	r3, [r7, #19]
      break;
 8008e02:	e000      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e06:	7cfb      	ldrb	r3, [r7, #19]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e0c:	4b76      	ldr	r3, [pc, #472]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e1a:	4973      	ldr	r1, [pc, #460]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008e22:	e001      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e24:	7cfb      	ldrb	r3, [r7, #19]
 8008e26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d041      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e3c:	d02a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008e3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e42:	d824      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e48:	d008      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e4e:	d81e      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00a      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e58:	d010      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008e5a:	e018      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008e5c:	4b62      	ldr	r3, [pc, #392]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	4a61      	ldr	r2, [pc, #388]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008e68:	e015      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	2100      	movs	r1, #0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fa85 	bl	8009380 <RCCEx_PLLSAI1_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008e7a:	e00c      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3320      	adds	r3, #32
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fb6e 	bl	8009564 <RCCEx_PLLSAI2_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008e8c:	e003      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	74fb      	strb	r3, [r7, #19]
      break;
 8008e92:	e000      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e96:	7cfb      	ldrb	r3, [r7, #19]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10b      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e9c:	4b52      	ldr	r3, [pc, #328]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eaa:	494f      	ldr	r1, [pc, #316]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008eb2:	e001      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb4:	7cfb      	ldrb	r3, [r7, #19]
 8008eb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80a0 	beq.w	8009006 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008eca:	4b47      	ldr	r3, [pc, #284]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e000      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008eda:	2300      	movs	r3, #0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00d      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ee0:	4b41      	ldr	r3, [pc, #260]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee4:	4a40      	ldr	r2, [pc, #256]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eea:	6593      	str	r3, [r2, #88]	; 0x58
 8008eec:	4b3e      	ldr	r3, [pc, #248]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ef4:	60bb      	str	r3, [r7, #8]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008efc:	4b3b      	ldr	r3, [pc, #236]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a3a      	ldr	r2, [pc, #232]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f08:	f7fa fb22 	bl	8003550 <HAL_GetTick>
 8008f0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f0e:	e009      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f10:	f7fa fb1e 	bl	8003550 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d902      	bls.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	74fb      	strb	r3, [r7, #19]
        break;
 8008f22:	e005      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f24:	4b31      	ldr	r3, [pc, #196]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0ef      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008f30:	7cfb      	ldrb	r3, [r7, #19]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d15c      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f36:	4b2c      	ldr	r3, [pc, #176]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01f      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d019      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f54:	4b24      	ldr	r3, [pc, #144]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f60:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f66:	4a20      	ldr	r2, [pc, #128]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f70:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f76:	4a1c      	ldr	r2, [pc, #112]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f80:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d016      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f92:	f7fa fadd 	bl	8003550 <HAL_GetTick>
 8008f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f98:	e00b      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f9a:	f7fa fad9 	bl	8003550 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d902      	bls.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	74fb      	strb	r3, [r7, #19]
            break;
 8008fb0:	e006      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0ec      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008fc0:	7cfb      	ldrb	r3, [r7, #19]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10c      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fc6:	4b08      	ldr	r3, [pc, #32]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd6:	4904      	ldr	r1, [pc, #16]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008fde:	e009      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fe0:	7cfb      	ldrb	r3, [r7, #19]
 8008fe2:	74bb      	strb	r3, [r7, #18]
 8008fe4:	e006      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008fe6:	bf00      	nop
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff0:	7cfb      	ldrb	r3, [r7, #19]
 8008ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ff4:	7c7b      	ldrb	r3, [r7, #17]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d105      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ffa:	4ba6      	ldr	r3, [pc, #664]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffe:	4aa5      	ldr	r2, [pc, #660]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009012:	4ba0      	ldr	r3, [pc, #640]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009018:	f023 0203 	bic.w	r2, r3, #3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	499c      	ldr	r1, [pc, #624]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009034:	4b97      	ldr	r3, [pc, #604]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903a:	f023 020c 	bic.w	r2, r3, #12
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	4994      	ldr	r1, [pc, #592]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0304 	and.w	r3, r3, #4
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009056:	4b8f      	ldr	r3, [pc, #572]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	498b      	ldr	r1, [pc, #556]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009066:	4313      	orrs	r3, r2
 8009068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00a      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009078:	4b86      	ldr	r3, [pc, #536]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800907a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009086:	4983      	ldr	r1, [pc, #524]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0310 	and.w	r3, r3, #16
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800909a:	4b7e      	ldr	r3, [pc, #504]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800909c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a8:	497a      	ldr	r1, [pc, #488]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00a      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090bc:	4b75      	ldr	r3, [pc, #468]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ca:	4972      	ldr	r1, [pc, #456]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090de:	4b6d      	ldr	r3, [pc, #436]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80090e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ec:	4969      	ldr	r1, [pc, #420]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009100:	4b64      	ldr	r3, [pc, #400]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800910e:	4961      	ldr	r1, [pc, #388]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009110:	4313      	orrs	r3, r2
 8009112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009122:	4b5c      	ldr	r3, [pc, #368]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009130:	4958      	ldr	r1, [pc, #352]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009132:	4313      	orrs	r3, r2
 8009134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00a      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009144:	4b53      	ldr	r3, [pc, #332]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	4950      	ldr	r1, [pc, #320]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009154:	4313      	orrs	r3, r2
 8009156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009166:	4b4b      	ldr	r3, [pc, #300]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009174:	4947      	ldr	r1, [pc, #284]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00a      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009188:	4b42      	ldr	r3, [pc, #264]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800918a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800918e:	f023 0203 	bic.w	r2, r3, #3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009196:	493f      	ldr	r1, [pc, #252]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009198:	4313      	orrs	r3, r2
 800919a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d028      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091aa:	4b3a      	ldr	r3, [pc, #232]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b8:	4936      	ldr	r1, [pc, #216]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c8:	d106      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091ca:	4b32      	ldr	r3, [pc, #200]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	4a31      	ldr	r2, [pc, #196]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80091d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091d4:	60d3      	str	r3, [r2, #12]
 80091d6:	e011      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091e0:	d10c      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3304      	adds	r3, #4
 80091e6:	2101      	movs	r1, #1
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 f8c9 	bl	8009380 <RCCEx_PLLSAI1_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80091f2:	7cfb      	ldrb	r3, [r7, #19]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d028      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009208:	4b22      	ldr	r3, [pc, #136]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009216:	491f      	ldr	r1, [pc, #124]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009218:	4313      	orrs	r3, r2
 800921a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009226:	d106      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009228:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	4a19      	ldr	r2, [pc, #100]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800922e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009232:	60d3      	str	r3, [r2, #12]
 8009234:	e011      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800923e:	d10c      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	2101      	movs	r1, #1
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f89a 	bl	8009380 <RCCEx_PLLSAI1_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009250:	7cfb      	ldrb	r3, [r7, #19]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8009256:	7cfb      	ldrb	r3, [r7, #19]
 8009258:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d02a      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009266:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009274:	4907      	ldr	r1, [pc, #28]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009276:	4313      	orrs	r3, r2
 8009278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009284:	d108      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009286:	4b03      	ldr	r3, [pc, #12]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	4a02      	ldr	r2, [pc, #8]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800928c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009290:	60d3      	str	r3, [r2, #12]
 8009292:	e013      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8009294:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800929c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092a0:	d10c      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3304      	adds	r3, #4
 80092a6:	2101      	movs	r1, #1
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f869 	bl	8009380 <RCCEx_PLLSAI1_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80092b2:	7cfb      	ldrb	r3, [r7, #19]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80092b8:	7cfb      	ldrb	r3, [r7, #19]
 80092ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d02f      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092c8:	4b2c      	ldr	r3, [pc, #176]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80092ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d6:	4929      	ldr	r1, [pc, #164]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092e6:	d10d      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3304      	adds	r3, #4
 80092ec:	2102      	movs	r1, #2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f846 	bl	8009380 <RCCEx_PLLSAI1_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80092f8:	7cfb      	ldrb	r3, [r7, #19]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d014      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80092fe:	7cfb      	ldrb	r3, [r7, #19]
 8009300:	74bb      	strb	r3, [r7, #18]
 8009302:	e011      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d10c      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3320      	adds	r3, #32
 8009312:	2102      	movs	r1, #2
 8009314:	4618      	mov	r0, r3
 8009316:	f000 f925 	bl	8009564 <RCCEx_PLLSAI2_Config>
 800931a:	4603      	mov	r3, r0
 800931c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800931e:	7cfb      	ldrb	r3, [r7, #19]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009324:	7cfb      	ldrb	r3, [r7, #19]
 8009326:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009334:	4b11      	ldr	r3, [pc, #68]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009344:	490d      	ldr	r1, [pc, #52]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009346:	4313      	orrs	r3, r2
 8009348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009358:	4b08      	ldr	r3, [pc, #32]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800935a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009368:	4904      	ldr	r1, [pc, #16]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009370:	7cbb      	ldrb	r3, [r7, #18]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	40021000 	.word	0x40021000

08009380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800938e:	4b74      	ldr	r3, [pc, #464]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d018      	beq.n	80093cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800939a:	4b71      	ldr	r3, [pc, #452]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0203 	and.w	r2, r3, #3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d10d      	bne.n	80093c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
       ||
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d009      	beq.n	80093c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80093b2:	4b6b      	ldr	r3, [pc, #428]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	091b      	lsrs	r3, r3, #4
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
       ||
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d047      	beq.n	8009456 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	73fb      	strb	r3, [r7, #15]
 80093ca:	e044      	b.n	8009456 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d018      	beq.n	8009406 <RCCEx_PLLSAI1_Config+0x86>
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d825      	bhi.n	8009424 <RCCEx_PLLSAI1_Config+0xa4>
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d002      	beq.n	80093e2 <RCCEx_PLLSAI1_Config+0x62>
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d009      	beq.n	80093f4 <RCCEx_PLLSAI1_Config+0x74>
 80093e0:	e020      	b.n	8009424 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80093e2:	4b5f      	ldr	r3, [pc, #380]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d11d      	bne.n	800942a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093f2:	e01a      	b.n	800942a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80093f4:	4b5a      	ldr	r3, [pc, #360]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d116      	bne.n	800942e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009404:	e013      	b.n	800942e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009406:	4b56      	ldr	r3, [pc, #344]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10f      	bne.n	8009432 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009412:	4b53      	ldr	r3, [pc, #332]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009422:	e006      	b.n	8009432 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
      break;
 8009428:	e004      	b.n	8009434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800942a:	bf00      	nop
 800942c:	e002      	b.n	8009434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800942e:	bf00      	nop
 8009430:	e000      	b.n	8009434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009432:	bf00      	nop
    }

    if(status == HAL_OK)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10d      	bne.n	8009456 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800943a:	4b49      	ldr	r3, [pc, #292]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6819      	ldr	r1, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	3b01      	subs	r3, #1
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	430b      	orrs	r3, r1
 8009450:	4943      	ldr	r1, [pc, #268]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009452:	4313      	orrs	r3, r2
 8009454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d17c      	bne.n	8009556 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800945c:	4b40      	ldr	r3, [pc, #256]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a3f      	ldr	r2, [pc, #252]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009468:	f7fa f872 	bl	8003550 <HAL_GetTick>
 800946c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800946e:	e009      	b.n	8009484 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009470:	f7fa f86e 	bl	8003550 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d902      	bls.n	8009484 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	73fb      	strb	r3, [r7, #15]
        break;
 8009482:	e005      	b.n	8009490 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009484:	4b36      	ldr	r3, [pc, #216]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1ef      	bne.n	8009470 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d15f      	bne.n	8009556 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d110      	bne.n	80094be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800949c:	4b30      	ldr	r3, [pc, #192]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80094a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	6892      	ldr	r2, [r2, #8]
 80094ac:	0211      	lsls	r1, r2, #8
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	68d2      	ldr	r2, [r2, #12]
 80094b2:	06d2      	lsls	r2, r2, #27
 80094b4:	430a      	orrs	r2, r1
 80094b6:	492a      	ldr	r1, [pc, #168]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	610b      	str	r3, [r1, #16]
 80094bc:	e027      	b.n	800950e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d112      	bne.n	80094ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094c4:	4b26      	ldr	r3, [pc, #152]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80094cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6892      	ldr	r2, [r2, #8]
 80094d4:	0211      	lsls	r1, r2, #8
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6912      	ldr	r2, [r2, #16]
 80094da:	0852      	lsrs	r2, r2, #1
 80094dc:	3a01      	subs	r2, #1
 80094de:	0552      	lsls	r2, r2, #21
 80094e0:	430a      	orrs	r2, r1
 80094e2:	491f      	ldr	r1, [pc, #124]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	610b      	str	r3, [r1, #16]
 80094e8:	e011      	b.n	800950e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094ea:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80094f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6892      	ldr	r2, [r2, #8]
 80094fa:	0211      	lsls	r1, r2, #8
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6952      	ldr	r2, [r2, #20]
 8009500:	0852      	lsrs	r2, r2, #1
 8009502:	3a01      	subs	r2, #1
 8009504:	0652      	lsls	r2, r2, #25
 8009506:	430a      	orrs	r2, r1
 8009508:	4915      	ldr	r1, [pc, #84]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 800950a:	4313      	orrs	r3, r2
 800950c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800950e:	4b14      	ldr	r3, [pc, #80]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a13      	ldr	r2, [pc, #76]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009514:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009518:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800951a:	f7fa f819 	bl	8003550 <HAL_GetTick>
 800951e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009520:	e009      	b.n	8009536 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009522:	f7fa f815 	bl	8003550 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d902      	bls.n	8009536 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	73fb      	strb	r3, [r7, #15]
          break;
 8009534:	e005      	b.n	8009542 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0ef      	beq.n	8009522 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d106      	bne.n	8009556 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	4903      	ldr	r1, [pc, #12]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009552:	4313      	orrs	r3, r2
 8009554:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40021000 	.word	0x40021000

08009564 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009572:	4b69      	ldr	r3, [pc, #420]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d018      	beq.n	80095b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800957e:	4b66      	ldr	r3, [pc, #408]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0203 	and.w	r2, r3, #3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d10d      	bne.n	80095aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
       ||
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009596:	4b60      	ldr	r3, [pc, #384]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	091b      	lsrs	r3, r3, #4
 800959c:	f003 0307 	and.w	r3, r3, #7
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
       ||
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d047      	beq.n	800963a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	73fb      	strb	r3, [r7, #15]
 80095ae:	e044      	b.n	800963a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d018      	beq.n	80095ea <RCCEx_PLLSAI2_Config+0x86>
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d825      	bhi.n	8009608 <RCCEx_PLLSAI2_Config+0xa4>
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d002      	beq.n	80095c6 <RCCEx_PLLSAI2_Config+0x62>
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d009      	beq.n	80095d8 <RCCEx_PLLSAI2_Config+0x74>
 80095c4:	e020      	b.n	8009608 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80095c6:	4b54      	ldr	r3, [pc, #336]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11d      	bne.n	800960e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095d6:	e01a      	b.n	800960e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80095d8:	4b4f      	ldr	r3, [pc, #316]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d116      	bne.n	8009612 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095e8:	e013      	b.n	8009612 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80095ea:	4b4b      	ldr	r3, [pc, #300]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10f      	bne.n	8009616 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80095f6:	4b48      	ldr	r3, [pc, #288]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009606:	e006      	b.n	8009616 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
      break;
 800960c:	e004      	b.n	8009618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009616:	bf00      	nop
    }

    if(status == HAL_OK)
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10d      	bne.n	800963a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800961e:	4b3e      	ldr	r3, [pc, #248]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	3b01      	subs	r3, #1
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	430b      	orrs	r3, r1
 8009634:	4938      	ldr	r1, [pc, #224]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009636:	4313      	orrs	r3, r2
 8009638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d166      	bne.n	800970e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009640:	4b35      	ldr	r3, [pc, #212]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a34      	ldr	r2, [pc, #208]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800964a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800964c:	f7f9 ff80 	bl	8003550 <HAL_GetTick>
 8009650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009652:	e009      	b.n	8009668 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009654:	f7f9 ff7c 	bl	8003550 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d902      	bls.n	8009668 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
        break;
 8009666:	e005      	b.n	8009674 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009668:	4b2b      	ldr	r3, [pc, #172]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1ef      	bne.n	8009654 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d149      	bne.n	800970e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d110      	bne.n	80096a2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009680:	4b25      	ldr	r3, [pc, #148]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	6892      	ldr	r2, [r2, #8]
 8009690:	0211      	lsls	r1, r2, #8
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68d2      	ldr	r2, [r2, #12]
 8009696:	06d2      	lsls	r2, r2, #27
 8009698:	430a      	orrs	r2, r1
 800969a:	491f      	ldr	r1, [pc, #124]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 800969c:	4313      	orrs	r3, r2
 800969e:	614b      	str	r3, [r1, #20]
 80096a0:	e011      	b.n	80096c6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80096aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6892      	ldr	r2, [r2, #8]
 80096b2:	0211      	lsls	r1, r2, #8
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6912      	ldr	r2, [r2, #16]
 80096b8:	0852      	lsrs	r2, r2, #1
 80096ba:	3a01      	subs	r2, #1
 80096bc:	0652      	lsls	r2, r2, #25
 80096be:	430a      	orrs	r2, r1
 80096c0:	4915      	ldr	r1, [pc, #84]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80096c6:	4b14      	ldr	r3, [pc, #80]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a13      	ldr	r2, [pc, #76]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80096cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d2:	f7f9 ff3d 	bl	8003550 <HAL_GetTick>
 80096d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80096d8:	e009      	b.n	80096ee <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80096da:	f7f9 ff39 	bl	8003550 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d902      	bls.n	80096ee <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	73fb      	strb	r3, [r7, #15]
          break;
 80096ec:	e005      	b.n	80096fa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0ef      	beq.n	80096da <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d106      	bne.n	800970e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009702:	695a      	ldr	r2, [r3, #20]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	4903      	ldr	r1, [pc, #12]	; (8009718 <RCCEx_PLLSAI2_Config+0x1b4>)
 800970a:	4313      	orrs	r3, r2
 800970c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	40021000 	.word	0x40021000

0800971c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d06c      	beq.n	8009808 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f9 fcb4 	bl	80030b0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	22ca      	movs	r2, #202	; 0xca
 8009756:	625a      	str	r2, [r3, #36]	; 0x24
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2253      	movs	r2, #83	; 0x53
 800975e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fa49 	bl	8009bf8 <RTC_EnterInitMode>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d14b      	bne.n	8009808 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	6812      	ldr	r2, [r2, #0]
 800977a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800977e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009782:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6899      	ldr	r1, [r3, #8]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	431a      	orrs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68d2      	ldr	r2, [r2, #12]
 80097aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6919      	ldr	r1, [r3, #16]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	041a      	lsls	r2, r3, #16
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fa4d 	bl	8009c60 <RTC_ExitInitMode>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11b      	bne.n	8009808 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f022 0203 	bic.w	r2, r2, #3
 80097de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69da      	ldr	r2, [r3, #28]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	431a      	orrs	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	22ff      	movs	r2, #255	; 0xff
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009808:	7bfb      	ldrb	r3, [r7, #15]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009812:	b590      	push	{r4, r7, lr}
 8009814:	b087      	sub	sp, #28
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_RTC_SetTime+0x1a>
 8009828:	2302      	movs	r3, #2
 800982a:	e08b      	b.n	8009944 <HAL_RTC_SetTime+0x132>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	22ca      	movs	r2, #202	; 0xca
 8009842:	625a      	str	r2, [r3, #36]	; 0x24
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2253      	movs	r2, #83	; 0x53
 800984a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f9d3 	bl	8009bf8 <RTC_EnterInitMode>
 8009852:	4603      	mov	r3, r0
 8009854:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009856:	7cfb      	ldrb	r3, [r7, #19]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d163      	bne.n	8009924 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d126      	bne.n	80098b0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986c:	2b00      	cmp	r3, #0
 800986e:	d102      	bne.n	8009876 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2200      	movs	r2, #0
 8009874:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fa2e 	bl	8009cdc <RTC_ByteToBcd2>
 8009880:	4603      	mov	r3, r0
 8009882:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fa27 	bl	8009cdc <RTC_ByteToBcd2>
 800988e:	4603      	mov	r3, r0
 8009890:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009892:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	789b      	ldrb	r3, [r3, #2]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fa1f 	bl	8009cdc <RTC_ByteToBcd2>
 800989e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098a0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	78db      	ldrb	r3, [r3, #3]
 80098a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80098aa:	4313      	orrs	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	e018      	b.n	80098e2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2200      	movs	r2, #0
 80098c2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80098d0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098d6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	78db      	ldrb	r3, [r3, #3]
 80098dc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80098de:	4313      	orrs	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80098ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80098f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009900:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6899      	ldr	r1, [r3, #8]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	431a      	orrs	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 f9a0 	bl	8009c60 <RTC_ExitInitMode>
 8009920:	4603      	mov	r3, r0
 8009922:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	22ff      	movs	r2, #255	; 0xff
 800992a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800992c:	7cfb      	ldrb	r3, [r7, #19]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009942:	7cfb      	ldrb	r3, [r7, #19]
}
 8009944:	4618      	mov	r0, r3
 8009946:	371c      	adds	r7, #28
 8009948:	46bd      	mov	sp, r7
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800997a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800997e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800998a:	b2da      	uxtb	r2, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	0a1b      	lsrs	r3, r3, #8
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999a:	b2da      	uxtb	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	0d9b      	lsrs	r3, r3, #22
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d11a      	bne.n	80099fa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 f9a7 	bl	8009d1c <RTC_Bcd2ToByte>
 80099ce:	4603      	mov	r3, r0
 80099d0:	461a      	mov	r2, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f99e 	bl	8009d1c <RTC_Bcd2ToByte>
 80099e0:	4603      	mov	r3, r0
 80099e2:	461a      	mov	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	789b      	ldrb	r3, [r3, #2]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f995 	bl	8009d1c <RTC_Bcd2ToByte>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d101      	bne.n	8009a1e <HAL_RTC_SetDate+0x1a>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e075      	b.n	8009b0a <HAL_RTC_SetDate+0x106>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10e      	bne.n	8009a52 <HAL_RTC_SetDate+0x4e>
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	785b      	ldrb	r3, [r3, #1]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d008      	beq.n	8009a52 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	785b      	ldrb	r3, [r3, #1]
 8009a44:	f023 0310 	bic.w	r3, r3, #16
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	330a      	adds	r3, #10
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11c      	bne.n	8009a92 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	78db      	ldrb	r3, [r3, #3]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 f93d 	bl	8009cdc <RTC_ByteToBcd2>
 8009a62:	4603      	mov	r3, r0
 8009a64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	785b      	ldrb	r3, [r3, #1]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f936 	bl	8009cdc <RTC_ByteToBcd2>
 8009a70:	4603      	mov	r3, r0
 8009a72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009a74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	789b      	ldrb	r3, [r3, #2]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f92e 	bl	8009cdc <RTC_ByteToBcd2>
 8009a80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e00e      	b.n	8009ab0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	78db      	ldrb	r3, [r3, #3]
 8009a96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009a9e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009aa4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009aac:	4313      	orrs	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	22ca      	movs	r2, #202	; 0xca
 8009ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2253      	movs	r2, #83	; 0x53
 8009abe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f899 	bl	8009bf8 <RTC_EnterInitMode>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009aca:	7cfb      	ldrb	r3, [r7, #19]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10c      	bne.n	8009aea <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ada:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ade:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 f8bd 	bl	8009c60 <RTC_ExitInitMode>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	22ff      	movs	r2, #255	; 0xff
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009af2:	7cfb      	ldrb	r3, [r7, #19]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009b08:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd90      	pop	{r4, r7, pc}

08009b12 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	0c1b      	lsrs	r3, r3, #16
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	f003 031f 	and.w	r3, r3, #31
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	0b5b      	lsrs	r3, r3, #13
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 0307 	and.w	r3, r3, #7
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d11a      	bne.n	8009ba2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	78db      	ldrb	r3, [r3, #3]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 f8d3 	bl	8009d1c <RTC_Bcd2ToByte>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f8ca 	bl	8009d1c <RTC_Bcd2ToByte>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	789b      	ldrb	r3, [r3, #2]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 f8c1 	bl	8009d1c <RTC_Bcd2ToByte>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009bc2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009bc4:	f7f9 fcc4 	bl	8003550 <HAL_GetTick>
 8009bc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009bca:	e009      	b.n	8009be0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bcc:	f7f9 fcc0 	bl	8003550 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bda:	d901      	bls.n	8009be0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e007      	b.n	8009bf0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0ee      	beq.n	8009bcc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d120      	bne.n	8009c54 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009c1c:	f7f9 fc98 	bl	8003550 <HAL_GetTick>
 8009c20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009c22:	e00d      	b.n	8009c40 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009c24:	f7f9 fc94 	bl	8003550 <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c32:	d905      	bls.n	8009c40 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <RTC_EnterInitMode+0x5c>
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d1e7      	bne.n	8009c24 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	4a19      	ldr	r2, [pc, #100]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c76:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009c78:	4b17      	ldr	r3, [pc, #92]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10c      	bne.n	8009c9e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ff91 	bl	8009bac <HAL_RTC_WaitForSynchro>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01e      	beq.n	8009cce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2203      	movs	r2, #3
 8009c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	73fb      	strb	r3, [r7, #15]
 8009c9c:	e017      	b.n	8009cce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	4a0d      	ldr	r2, [pc, #52]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009ca4:	f023 0320 	bic.w	r3, r3, #32
 8009ca8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff ff7e 	bl	8009bac <HAL_RTC_WaitForSynchro>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2203      	movs	r2, #3
 8009cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009cc2:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	4a04      	ldr	r2, [pc, #16]	; (8009cd8 <RTC_ExitInitMode+0x78>)
 8009cc8:	f043 0320 	orr.w	r3, r3, #32
 8009ccc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	40002800 	.word	0x40002800

08009cdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009cee:	e005      	b.n	8009cfc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	3b0a      	subs	r3, #10
 8009cfa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	2b09      	cmp	r3, #9
 8009d00:	d8f6      	bhi.n	8009cf0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	b2db      	uxtb	r3, r3
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	091b      	lsrs	r3, r3, #4
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	0092      	lsls	r2, r2, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	f003 030f 	and.w	r3, r3, #15
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	4413      	add	r3, r2
 8009d42:	b2db      	uxtb	r3, r3
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3350      	adds	r3, #80	; 0x50
 8009d62:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	009a      	lsls	r2, r3, #2
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	461a      	mov	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6013      	str	r3, [r2, #0]
}
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e049      	b.n	8009e28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f841 	bl	8009e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	f000 f9f7 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d001      	beq.n	8009e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e04f      	b.n	8009efc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0201 	orr.w	r2, r2, #1
 8009e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a23      	ldr	r2, [pc, #140]	; (8009f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d01d      	beq.n	8009eba <HAL_TIM_Base_Start_IT+0x76>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e86:	d018      	beq.n	8009eba <HAL_TIM_Base_Start_IT+0x76>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1f      	ldr	r2, [pc, #124]	; (8009f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d013      	beq.n	8009eba <HAL_TIM_Base_Start_IT+0x76>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1e      	ldr	r2, [pc, #120]	; (8009f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00e      	beq.n	8009eba <HAL_TIM_Base_Start_IT+0x76>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1c      	ldr	r2, [pc, #112]	; (8009f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d009      	beq.n	8009eba <HAL_TIM_Base_Start_IT+0x76>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1b      	ldr	r2, [pc, #108]	; (8009f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d004      	beq.n	8009eba <HAL_TIM_Base_Start_IT+0x76>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a19      	ldr	r2, [pc, #100]	; (8009f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d115      	bne.n	8009ee6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b06      	cmp	r3, #6
 8009eca:	d015      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0xb4>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed2:	d011      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee4:	e008      	b.n	8009ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0201 	orr.w	r2, r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e000      	b.n	8009efa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	40012c00 	.word	0x40012c00
 8009f0c:	40000400 	.word	0x40000400
 8009f10:	40000800 	.word	0x40000800
 8009f14:	40000c00 	.word	0x40000c00
 8009f18:	40013400 	.word	0x40013400
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	00010007 	.word	0x00010007

08009f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d122      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d11b      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f06f 0202 	mvn.w	r2, #2
 8009f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f905 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 8009f6c:	e005      	b.n	8009f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8f7 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f908 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d122      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d11b      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0204 	mvn.w	r2, #4
 8009fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8db 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 8009fc0:	e005      	b.n	8009fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8cd 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f8de 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0308 	and.w	r3, r3, #8
 8009fde:	2b08      	cmp	r3, #8
 8009fe0:	d122      	bne.n	800a028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0308 	and.w	r3, r3, #8
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d11b      	bne.n	800a028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0208 	mvn.w	r2, #8
 8009ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8b1 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 800a014:	e005      	b.n	800a022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f8a3 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f8b4 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	2b10      	cmp	r3, #16
 800a034:	d122      	bne.n	800a07c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	2b10      	cmp	r3, #16
 800a042:	d11b      	bne.n	800a07c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f06f 0210 	mvn.w	r2, #16
 800a04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2208      	movs	r2, #8
 800a052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f887 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 800a068:	e005      	b.n	800a076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f879 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f88a 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	2b01      	cmp	r3, #1
 800a088:	d10e      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b01      	cmp	r3, #1
 800a096:	d107      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0201 	mvn.w	r2, #1
 800a0a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7f8 ff94 	bl	8002fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d10e      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c0:	2b80      	cmp	r3, #128	; 0x80
 800a0c2:	d107      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f914 	bl	800a2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e2:	d10e      	bne.n	800a102 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ee:	2b80      	cmp	r3, #128	; 0x80
 800a0f0:	d107      	bne.n	800a102 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a0fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f907 	bl	800a310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10c:	2b40      	cmp	r3, #64	; 0x40
 800a10e:	d10e      	bne.n	800a12e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11a:	2b40      	cmp	r3, #64	; 0x40
 800a11c:	d107      	bne.n	800a12e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f838 	bl	800a19e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	f003 0320 	and.w	r3, r3, #32
 800a138:	2b20      	cmp	r3, #32
 800a13a:	d10e      	bne.n	800a15a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b20      	cmp	r3, #32
 800a148:	d107      	bne.n	800a15a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f06f 0220 	mvn.w	r2, #32
 800a152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f8c7 	bl	800a2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a17e:	bf00      	nop
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a6:	bf00      	nop
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
	...

0800a1b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a40      	ldr	r2, [pc, #256]	; (800a2c8 <TIM_Base_SetConfig+0x114>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d013      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d2:	d00f      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a3d      	ldr	r2, [pc, #244]	; (800a2cc <TIM_Base_SetConfig+0x118>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00b      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a3c      	ldr	r2, [pc, #240]	; (800a2d0 <TIM_Base_SetConfig+0x11c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d007      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a3b      	ldr	r2, [pc, #236]	; (800a2d4 <TIM_Base_SetConfig+0x120>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d003      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a3a      	ldr	r2, [pc, #232]	; (800a2d8 <TIM_Base_SetConfig+0x124>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d108      	bne.n	800a206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a2f      	ldr	r2, [pc, #188]	; (800a2c8 <TIM_Base_SetConfig+0x114>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d01f      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a214:	d01b      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a2c      	ldr	r2, [pc, #176]	; (800a2cc <TIM_Base_SetConfig+0x118>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d017      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a2b      	ldr	r2, [pc, #172]	; (800a2d0 <TIM_Base_SetConfig+0x11c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a2a      	ldr	r2, [pc, #168]	; (800a2d4 <TIM_Base_SetConfig+0x120>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00f      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a29      	ldr	r2, [pc, #164]	; (800a2d8 <TIM_Base_SetConfig+0x124>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a28      	ldr	r2, [pc, #160]	; (800a2dc <TIM_Base_SetConfig+0x128>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a27      	ldr	r2, [pc, #156]	; (800a2e0 <TIM_Base_SetConfig+0x12c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a26      	ldr	r2, [pc, #152]	; (800a2e4 <TIM_Base_SetConfig+0x130>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d108      	bne.n	800a260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a10      	ldr	r2, [pc, #64]	; (800a2c8 <TIM_Base_SetConfig+0x114>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00f      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a12      	ldr	r2, [pc, #72]	; (800a2d8 <TIM_Base_SetConfig+0x124>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00b      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a11      	ldr	r2, [pc, #68]	; (800a2dc <TIM_Base_SetConfig+0x128>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d007      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a10      	ldr	r2, [pc, #64]	; (800a2e0 <TIM_Base_SetConfig+0x12c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d003      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a0f      	ldr	r2, [pc, #60]	; (800a2e4 <TIM_Base_SetConfig+0x130>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d103      	bne.n	800a2b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	691a      	ldr	r2, [r3, #16]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	615a      	str	r2, [r3, #20]
}
 800a2ba:	bf00      	nop
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40012c00 	.word	0x40012c00
 800a2cc:	40000400 	.word	0x40000400
 800a2d0:	40000800 	.word	0x40000800
 800a2d4:	40000c00 	.word	0x40000c00
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40014400 	.word	0x40014400
 800a2e4:	40014800 	.word	0x40014800

0800a2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a324:	b084      	sub	sp, #16
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	f107 001c 	add.w	r0, r7, #28
 800a332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 fa40 	bl	800b7c8 <USB_CoreReset>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	639a      	str	r2, [r3, #56]	; 0x38
 800a35e:	e005      	b.n	800a36c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a378:	b004      	add	sp, #16
 800a37a:	4770      	bx	lr

0800a37c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d165      	bne.n	800a45c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	4a3e      	ldr	r2, [pc, #248]	; (800a48c <USB_SetTurnaroundTime+0x110>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d906      	bls.n	800a3a6 <USB_SetTurnaroundTime+0x2a>
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4a3d      	ldr	r2, [pc, #244]	; (800a490 <USB_SetTurnaroundTime+0x114>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d202      	bcs.n	800a3a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3a0:	230f      	movs	r3, #15
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e05c      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	4a39      	ldr	r2, [pc, #228]	; (800a490 <USB_SetTurnaroundTime+0x114>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d306      	bcc.n	800a3bc <USB_SetTurnaroundTime+0x40>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	4a38      	ldr	r2, [pc, #224]	; (800a494 <USB_SetTurnaroundTime+0x118>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d202      	bcs.n	800a3bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3b6:	230e      	movs	r3, #14
 800a3b8:	617b      	str	r3, [r7, #20]
 800a3ba:	e051      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	4a35      	ldr	r2, [pc, #212]	; (800a494 <USB_SetTurnaroundTime+0x118>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d306      	bcc.n	800a3d2 <USB_SetTurnaroundTime+0x56>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4a34      	ldr	r2, [pc, #208]	; (800a498 <USB_SetTurnaroundTime+0x11c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d202      	bcs.n	800a3d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a3cc:	230d      	movs	r3, #13
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	e046      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4a30      	ldr	r2, [pc, #192]	; (800a498 <USB_SetTurnaroundTime+0x11c>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d306      	bcc.n	800a3e8 <USB_SetTurnaroundTime+0x6c>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	4a2f      	ldr	r2, [pc, #188]	; (800a49c <USB_SetTurnaroundTime+0x120>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d802      	bhi.n	800a3e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	617b      	str	r3, [r7, #20]
 800a3e6:	e03b      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	4a2c      	ldr	r2, [pc, #176]	; (800a49c <USB_SetTurnaroundTime+0x120>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d906      	bls.n	800a3fe <USB_SetTurnaroundTime+0x82>
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4a2b      	ldr	r2, [pc, #172]	; (800a4a0 <USB_SetTurnaroundTime+0x124>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d802      	bhi.n	800a3fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a3f8:	230b      	movs	r3, #11
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e030      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4a27      	ldr	r2, [pc, #156]	; (800a4a0 <USB_SetTurnaroundTime+0x124>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d906      	bls.n	800a414 <USB_SetTurnaroundTime+0x98>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a26      	ldr	r2, [pc, #152]	; (800a4a4 <USB_SetTurnaroundTime+0x128>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d802      	bhi.n	800a414 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a40e:	230a      	movs	r3, #10
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	e025      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4a23      	ldr	r2, [pc, #140]	; (800a4a4 <USB_SetTurnaroundTime+0x128>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d906      	bls.n	800a42a <USB_SetTurnaroundTime+0xae>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4a22      	ldr	r2, [pc, #136]	; (800a4a8 <USB_SetTurnaroundTime+0x12c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d202      	bcs.n	800a42a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a424:	2309      	movs	r3, #9
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e01a      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <USB_SetTurnaroundTime+0x12c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d306      	bcc.n	800a440 <USB_SetTurnaroundTime+0xc4>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a1d      	ldr	r2, [pc, #116]	; (800a4ac <USB_SetTurnaroundTime+0x130>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d802      	bhi.n	800a440 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a43a:	2308      	movs	r3, #8
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e00f      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4a1a      	ldr	r2, [pc, #104]	; (800a4ac <USB_SetTurnaroundTime+0x130>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d906      	bls.n	800a456 <USB_SetTurnaroundTime+0xda>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4a19      	ldr	r2, [pc, #100]	; (800a4b0 <USB_SetTurnaroundTime+0x134>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d202      	bcs.n	800a456 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a450:	2307      	movs	r3, #7
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	e004      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a456:	2306      	movs	r3, #6
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	e001      	b.n	800a460 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a45c:	2309      	movs	r3, #9
 800a45e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	029b      	lsls	r3, r3, #10
 800a474:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	371c      	adds	r7, #28
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	00d8acbf 	.word	0x00d8acbf
 800a490:	00e4e1c0 	.word	0x00e4e1c0
 800a494:	00f42400 	.word	0x00f42400
 800a498:	01067380 	.word	0x01067380
 800a49c:	011a499f 	.word	0x011a499f
 800a4a0:	01312cff 	.word	0x01312cff
 800a4a4:	014ca43f 	.word	0x014ca43f
 800a4a8:	016e3600 	.word	0x016e3600
 800a4ac:	01a6ab1f 	.word	0x01a6ab1f
 800a4b0:	01e84800 	.word	0x01e84800

0800a4b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f043 0201 	orr.w	r2, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f023 0201 	bic.w	r2, r3, #1
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d115      	bne.n	800a546 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a526:	2001      	movs	r0, #1
 800a528:	f7f9 f81e 	bl	8003568 <HAL_Delay>
      ms++;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3301      	adds	r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 f8cf 	bl	800b6d6 <USB_GetMode>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d01e      	beq.n	800a57c <USB_SetCurrentMode+0x84>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b31      	cmp	r3, #49	; 0x31
 800a542:	d9f0      	bls.n	800a526 <USB_SetCurrentMode+0x2e>
 800a544:	e01a      	b.n	800a57c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d115      	bne.n	800a578 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a558:	2001      	movs	r0, #1
 800a55a:	f7f9 f805 	bl	8003568 <HAL_Delay>
      ms++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 f8b6 	bl	800b6d6 <USB_GetMode>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <USB_SetCurrentMode+0x84>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b31      	cmp	r3, #49	; 0x31
 800a574:	d9f0      	bls.n	800a558 <USB_SetCurrentMode+0x60>
 800a576:	e001      	b.n	800a57c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e005      	b.n	800a588 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b32      	cmp	r3, #50	; 0x32
 800a580:	d101      	bne.n	800a586 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a590:	b084      	sub	sp, #16
 800a592:	b580      	push	{r7, lr}
 800a594:	b086      	sub	sp, #24
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a59e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	e009      	b.n	800a5c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3340      	adds	r3, #64	; 0x40
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	613b      	str	r3, [r7, #16]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2b0e      	cmp	r3, #14
 800a5c8:	d9f2      	bls.n	800a5b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d11c      	bne.n	800a60a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5de:	f043 0302 	orr.w	r3, r3, #2
 800a5e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	e005      	b.n	800a616 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a61c:	461a      	mov	r2, r3
 800a61e:	2300      	movs	r3, #0
 800a620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a628:	4619      	mov	r1, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a630:	461a      	mov	r2, r3
 800a632:	680b      	ldr	r3, [r1, #0]
 800a634:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a636:	2103      	movs	r1, #3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f955 	bl	800a8e8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a63e:	2110      	movs	r1, #16
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f8f1 	bl	800a828 <USB_FlushTxFifo>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f91b 	bl	800a88c <USB_FlushRxFifo>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a666:	461a      	mov	r2, r3
 800a668:	2300      	movs	r3, #0
 800a66a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a672:	461a      	mov	r2, r3
 800a674:	2300      	movs	r3, #0
 800a676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67e:	461a      	mov	r2, r3
 800a680:	2300      	movs	r3, #0
 800a682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	e043      	b.n	800a712 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a69c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6a0:	d118      	bne.n	800a6d4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e013      	b.n	800a6e6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	e008      	b.n	800a6e6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a704:	461a      	mov	r2, r3
 800a706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a70a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	3301      	adds	r3, #1
 800a710:	613b      	str	r3, [r7, #16]
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	d3b7      	bcc.n	800a68a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a71a:	2300      	movs	r3, #0
 800a71c:	613b      	str	r3, [r7, #16]
 800a71e:	e043      	b.n	800a7a8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a736:	d118      	bne.n	800a76a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	461a      	mov	r2, r3
 800a74c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	e013      	b.n	800a77c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a760:	461a      	mov	r2, r3
 800a762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	e008      	b.n	800a77c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a776:	461a      	mov	r2, r3
 800a778:	2300      	movs	r3, #0
 800a77a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a788:	461a      	mov	r2, r3
 800a78a:	2300      	movs	r3, #0
 800a78c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79a:	461a      	mov	r2, r3
 800a79c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	613b      	str	r3, [r7, #16]
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d3b7      	bcc.n	800a720 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a7d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f043 0210 	orr.w	r2, r3, #16
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699a      	ldr	r2, [r3, #24]
 800a7e2:	4b10      	ldr	r3, [pc, #64]	; (800a824 <USB_DevInit+0x294>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	f043 0208 	orr.w	r2, r3, #8
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d107      	bne.n	800a812 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a80a:	f043 0304 	orr.w	r3, r3, #4
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a81e:	b004      	add	sp, #16
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	803c3800 	.word	0x803c3800

0800a828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	4a12      	ldr	r2, [pc, #72]	; (800a888 <USB_FlushTxFifo+0x60>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d901      	bls.n	800a846 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e01a      	b.n	800a87c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	daf3      	bge.n	800a836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	019b      	lsls	r3, r3, #6
 800a856:	f043 0220 	orr.w	r2, r3, #32
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3301      	adds	r3, #1
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	4a08      	ldr	r2, [pc, #32]	; (800a888 <USB_FlushTxFifo+0x60>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d901      	bls.n	800a86e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e006      	b.n	800a87c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b20      	cmp	r3, #32
 800a878:	d0f1      	beq.n	800a85e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	00030d40 	.word	0x00030d40

0800a88c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	4a11      	ldr	r2, [pc, #68]	; (800a8e4 <USB_FlushRxFifo+0x58>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d901      	bls.n	800a8a8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e017      	b.n	800a8d8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	daf3      	bge.n	800a898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2210      	movs	r2, #16
 800a8b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	4a08      	ldr	r2, [pc, #32]	; (800a8e4 <USB_FlushRxFifo+0x58>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d901      	bls.n	800a8ca <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e006      	b.n	800a8d8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f003 0310 	and.w	r3, r3, #16
 800a8d2:	2b10      	cmp	r3, #16
 800a8d4:	d0f1      	beq.n	800a8ba <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	00030d40 	.word	0x00030d40

0800a8e8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	68f9      	ldr	r1, [r7, #12]
 800a904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a908:	4313      	orrs	r3, r2
 800a90a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b087      	sub	sp, #28
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 0306 	and.w	r3, r3, #6
 800a932:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d002      	beq.n	800a940 <USB_GetDevSpeed+0x26>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b06      	cmp	r3, #6
 800a93e:	d102      	bne.n	800a946 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a940:	2302      	movs	r3, #2
 800a942:	75fb      	strb	r3, [r7, #23]
 800a944:	e001      	b.n	800a94a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a946:	230f      	movs	r3, #15
 800a948:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	371c      	adds	r7, #28
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d13a      	bne.n	800a9ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97a:	69da      	ldr	r2, [r3, #28]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	f003 030f 	and.w	r3, r3, #15
 800a984:	2101      	movs	r1, #1
 800a986:	fa01 f303 	lsl.w	r3, r1, r3
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	68f9      	ldr	r1, [r7, #12]
 800a98e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a992:	4313      	orrs	r3, r2
 800a994:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d155      	bne.n	800aa58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	78db      	ldrb	r3, [r3, #3]
 800a9c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	059b      	lsls	r3, r3, #22
 800a9ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	e036      	b.n	800aa58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f0:	69da      	ldr	r2, [r3, #28]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	f003 030f 	and.w	r3, r3, #15
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	68f9      	ldr	r1, [r7, #12]
 800aa04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d11a      	bne.n	800aa58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	015a      	lsls	r2, r3, #5
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	78db      	ldrb	r3, [r3, #3]
 800aa3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa3e:	430b      	orrs	r3, r1
 800aa40:	4313      	orrs	r3, r2
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	0151      	lsls	r1, r2, #5
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	440a      	add	r2, r1
 800aa4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
	...

0800aa68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	785b      	ldrb	r3, [r3, #1]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d161      	bne.n	800ab48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa9a:	d11f      	bne.n	800aadc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	0151      	lsls	r1, r2, #5
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	440a      	add	r2, r1
 800aab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	015a      	lsls	r2, r3, #5
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4413      	add	r3, r2
 800aac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	0151      	lsls	r1, r2, #5
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	440a      	add	r2, r1
 800aad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aada:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 030f 	and.w	r3, r3, #15
 800aaec:	2101      	movs	r1, #1
 800aaee:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	68f9      	ldr	r1, [r7, #12]
 800aaf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aafc:	4013      	ands	r3, r2
 800aafe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab06:	69da      	ldr	r2, [r3, #28]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	f003 030f 	and.w	r3, r3, #15
 800ab10:	2101      	movs	r1, #1
 800ab12:	fa01 f303 	lsl.w	r3, r1, r3
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	43db      	mvns	r3, r3
 800ab1a:	68f9      	ldr	r1, [r7, #12]
 800ab1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab20:	4013      	ands	r3, r2
 800ab22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	0159      	lsls	r1, r3, #5
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	440b      	add	r3, r1
 800ab3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4b35      	ldr	r3, [pc, #212]	; (800ac18 <USB_DeactivateEndpoint+0x1b0>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	600b      	str	r3, [r1, #0]
 800ab46:	e060      	b.n	800ac0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	015a      	lsls	r2, r3, #5
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	4413      	add	r3, r2
 800ab50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab5e:	d11f      	bne.n	800aba0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	0151      	lsls	r1, r2, #5
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	440a      	add	r2, r1
 800ab96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	2101      	movs	r1, #1
 800abb2:	fa01 f303 	lsl.w	r3, r1, r3
 800abb6:	041b      	lsls	r3, r3, #16
 800abb8:	43db      	mvns	r3, r3
 800abba:	68f9      	ldr	r1, [r7, #12]
 800abbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc0:	4013      	ands	r3, r2
 800abc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 030f 	and.w	r3, r3, #15
 800abd4:	2101      	movs	r1, #1
 800abd6:	fa01 f303 	lsl.w	r3, r1, r3
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	43db      	mvns	r3, r3
 800abde:	68f9      	ldr	r1, [r7, #12]
 800abe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abe4:	4013      	ands	r3, r2
 800abe6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	0159      	lsls	r1, r3, #5
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	440b      	add	r3, r1
 800abfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac02:	4619      	mov	r1, r3
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <USB_DeactivateEndpoint+0x1b4>)
 800ac06:	4013      	ands	r3, r2
 800ac08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	ec337800 	.word	0xec337800
 800ac1c:	eff37800 	.word	0xeff37800

0800ac20 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	f040 810a 	bne.w	800ae52 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d132      	bne.n	800acac <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	0151      	lsls	r1, r2, #5
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	440a      	add	r2, r1
 800ac5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	0151      	lsls	r1, r2, #5
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	440a      	add	r2, r1
 800aca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aca4:	0cdb      	lsrs	r3, r3, #19
 800aca6:	04db      	lsls	r3, r3, #19
 800aca8:	6113      	str	r3, [r2, #16]
 800acaa:	e074      	b.n	800ad96 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc6:	0cdb      	lsrs	r3, r3, #19
 800acc8:	04db      	lsls	r3, r3, #19
 800acca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	6959      	ldr	r1, [r3, #20]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	440b      	add	r3, r1
 800ad08:	1e59      	subs	r1, r3, #1
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad14:	4baf      	ldr	r3, [pc, #700]	; (800afd4 <USB_EPStartXfer+0x3b4>)
 800ad16:	400b      	ands	r3, r1
 800ad18:	6939      	ldr	r1, [r7, #16]
 800ad1a:	0148      	lsls	r0, r1, #5
 800ad1c:	6979      	ldr	r1, [r7, #20]
 800ad1e:	4401      	add	r1, r0
 800ad20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad24:	4313      	orrs	r3, r2
 800ad26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad34:	691a      	ldr	r2, [r3, #16]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad3e:	6939      	ldr	r1, [r7, #16]
 800ad40:	0148      	lsls	r0, r1, #5
 800ad42:	6979      	ldr	r1, [r7, #20]
 800ad44:	4401      	add	r1, r0
 800ad46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	78db      	ldrb	r3, [r3, #3]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d11f      	bne.n	800ad96 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ad74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	0151      	lsls	r1, r2, #5
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	440a      	add	r2, r1
 800ad8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad94:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	0151      	lsls	r1, r2, #5
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	440a      	add	r2, r1
 800adac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adb4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	78db      	ldrb	r3, [r3, #3]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d015      	beq.n	800adea <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8100 	beq.w	800afc8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	f003 030f 	and.w	r3, r3, #15
 800add8:	2101      	movs	r1, #1
 800adda:	fa01 f303 	lsl.w	r3, r1, r3
 800adde:	6979      	ldr	r1, [r7, #20]
 800ade0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ade4:	4313      	orrs	r3, r2
 800ade6:	634b      	str	r3, [r1, #52]	; 0x34
 800ade8:	e0ee      	b.n	800afc8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d110      	bne.n	800ae1c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	015a      	lsls	r2, r3, #5
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	0151      	lsls	r1, r2, #5
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	440a      	add	r2, r1
 800ae10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	e00f      	b.n	800ae3c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae3a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	68d9      	ldr	r1, [r3, #12]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781a      	ldrb	r2, [r3, #0]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9e2 	bl	800b214 <USB_WritePacket>
 800ae50:	e0ba      	b.n	800afc8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	0151      	lsls	r1, r2, #5
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	440a      	add	r2, r1
 800ae68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae6c:	0cdb      	lsrs	r3, r3, #19
 800ae6e:	04db      	lsls	r3, r3, #19
 800ae70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	0151      	lsls	r1, r2, #5
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	440a      	add	r2, r1
 800ae88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d123      	bne.n	800aee6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeb4:	6939      	ldr	r1, [r7, #16]
 800aeb6:	0148      	lsls	r0, r1, #5
 800aeb8:	6979      	ldr	r1, [r7, #20]
 800aeba:	4401      	add	r1, r0
 800aebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aec0:	4313      	orrs	r3, r2
 800aec2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	0151      	lsls	r1, r2, #5
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	440a      	add	r2, r1
 800aeda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aee2:	6113      	str	r3, [r2, #16]
 800aee4:	e033      	b.n	800af4e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695a      	ldr	r2, [r3, #20]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	4413      	add	r3, r2
 800aef0:	1e5a      	subs	r2, r3, #1
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af08:	691a      	ldr	r2, [r3, #16]
 800af0a:	89fb      	ldrh	r3, [r7, #14]
 800af0c:	04d9      	lsls	r1, r3, #19
 800af0e:	4b31      	ldr	r3, [pc, #196]	; (800afd4 <USB_EPStartXfer+0x3b4>)
 800af10:	400b      	ands	r3, r1
 800af12:	6939      	ldr	r1, [r7, #16]
 800af14:	0148      	lsls	r0, r1, #5
 800af16:	6979      	ldr	r1, [r7, #20]
 800af18:	4401      	add	r1, r0
 800af1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af1e:	4313      	orrs	r3, r2
 800af20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2e:	691a      	ldr	r2, [r3, #16]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	89f9      	ldrh	r1, [r7, #14]
 800af36:	fb01 f303 	mul.w	r3, r1, r3
 800af3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af3e:	6939      	ldr	r1, [r7, #16]
 800af40:	0148      	lsls	r0, r1, #5
 800af42:	6979      	ldr	r1, [r7, #20]
 800af44:	4401      	add	r1, r0
 800af46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af4a:	4313      	orrs	r3, r2
 800af4c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	78db      	ldrb	r3, [r3, #3]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d128      	bne.n	800afa8 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af62:	2b00      	cmp	r3, #0
 800af64:	d110      	bne.n	800af88 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	e00f      	b.n	800afa8 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	0151      	lsls	r1, r2, #5
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	440a      	add	r2, r1
 800af9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	0151      	lsls	r1, r2, #5
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	440a      	add	r2, r1
 800afbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	1ff80000 	.word	0x1ff80000

0800afd8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	785b      	ldrb	r3, [r3, #1]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	f040 80ab 	bne.w	800b14c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d132      	bne.n	800b064 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	015a      	lsls	r2, r3, #5
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	4413      	add	r3, r2
 800b006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	0151      	lsls	r1, r2, #5
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	440a      	add	r2, r1
 800b014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b01c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	015a      	lsls	r2, r3, #5
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4413      	add	r3, r2
 800b02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	0151      	lsls	r1, r2, #5
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	440a      	add	r2, r1
 800b038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b03c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	0151      	lsls	r1, r2, #5
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	440a      	add	r2, r1
 800b058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b05c:	0cdb      	lsrs	r3, r3, #19
 800b05e:	04db      	lsls	r3, r3, #19
 800b060:	6113      	str	r3, [r2, #16]
 800b062:	e04e      	b.n	800b102 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	0151      	lsls	r1, r2, #5
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	440a      	add	r2, r1
 800b07a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b07e:	0cdb      	lsrs	r3, r3, #19
 800b080:	04db      	lsls	r3, r3, #19
 800b082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	0151      	lsls	r1, r2, #5
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	440a      	add	r2, r1
 800b09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b09e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	695a      	ldr	r2, [r3, #20]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d903      	bls.n	800b0bc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	015a      	lsls	r2, r3, #5
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	0151      	lsls	r1, r2, #5
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	440a      	add	r2, r1
 800b0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e8:	691a      	ldr	r2, [r3, #16]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	0148      	lsls	r0, r1, #5
 800b0f6:	68f9      	ldr	r1, [r7, #12]
 800b0f8:	4401      	add	r1, r0
 800b0fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0fe:	4313      	orrs	r3, r2
 800b100:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	0151      	lsls	r1, r2, #5
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	440a      	add	r2, r1
 800b118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b120:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d06d      	beq.n	800b206 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	f003 030f 	and.w	r3, r3, #15
 800b13a:	2101      	movs	r1, #1
 800b13c:	fa01 f303 	lsl.w	r3, r1, r3
 800b140:	68f9      	ldr	r1, [r7, #12]
 800b142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b146:	4313      	orrs	r3, r2
 800b148:	634b      	str	r3, [r1, #52]	; 0x34
 800b14a:	e05c      	b.n	800b206 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	015a      	lsls	r2, r3, #5
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4413      	add	r3, r2
 800b154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	0151      	lsls	r1, r2, #5
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	440a      	add	r2, r1
 800b162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b166:	0cdb      	lsrs	r3, r3, #19
 800b168:	04db      	lsls	r3, r3, #19
 800b16a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	0151      	lsls	r1, r2, #5
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	440a      	add	r2, r1
 800b182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b18a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b18e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	689a      	ldr	r2, [r3, #8]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1cc:	691a      	ldr	r2, [r3, #16]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	0148      	lsls	r0, r1, #5
 800b1da:	68f9      	ldr	r1, [r7, #12]
 800b1dc:	4401      	add	r1, r0
 800b1de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	0151      	lsls	r1, r2, #5
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	440a      	add	r2, r1
 800b1fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b204:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b214:	b480      	push	{r7}
 800b216:	b089      	sub	sp, #36	; 0x24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4611      	mov	r1, r2
 800b220:	461a      	mov	r2, r3
 800b222:	460b      	mov	r3, r1
 800b224:	71fb      	strb	r3, [r7, #7]
 800b226:	4613      	mov	r3, r2
 800b228:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b232:	88bb      	ldrh	r3, [r7, #4]
 800b234:	3303      	adds	r3, #3
 800b236:	089b      	lsrs	r3, r3, #2
 800b238:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b23a:	2300      	movs	r3, #0
 800b23c:	61bb      	str	r3, [r7, #24]
 800b23e:	e018      	b.n	800b272 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	031a      	lsls	r2, r3, #12
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	4413      	add	r3, r2
 800b248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24c:	461a      	mov	r2, r3
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	3301      	adds	r3, #1
 800b258:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	3301      	adds	r3, #1
 800b25e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	3301      	adds	r3, #1
 800b264:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	3301      	adds	r3, #1
 800b26a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	3301      	adds	r3, #1
 800b270:	61bb      	str	r3, [r7, #24]
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	429a      	cmp	r2, r3
 800b278:	d3e2      	bcc.n	800b240 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3724      	adds	r7, #36	; 0x24
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b288:	b480      	push	{r7}
 800b28a:	b08b      	sub	sp, #44	; 0x2c
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	4613      	mov	r3, r2
 800b294:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b29e:	88fb      	ldrh	r3, [r7, #6]
 800b2a0:	089b      	lsrs	r3, r3, #2
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2a6:	88fb      	ldrh	r3, [r7, #6]
 800b2a8:	f003 0303 	and.w	r3, r3, #3
 800b2ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	623b      	str	r3, [r7, #32]
 800b2b2:	e014      	b.n	800b2de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	623b      	str	r3, [r7, #32]
 800b2de:	6a3a      	ldr	r2, [r7, #32]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d3e6      	bcc.n	800b2b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b2e6:	8bfb      	ldrh	r3, [r7, #30]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d01e      	beq.n	800b32a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f107 0310 	add.w	r3, r7, #16
 800b2fc:	6812      	ldr	r2, [r2, #0]
 800b2fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	00db      	lsls	r3, r3, #3
 800b308:	fa22 f303 	lsr.w	r3, r2, r3
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b310:	701a      	strb	r2, [r3, #0]
      i++;
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	3301      	adds	r3, #1
 800b316:	623b      	str	r3, [r7, #32]
      pDest++;
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	3301      	adds	r3, #1
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b31e:	8bfb      	ldrh	r3, [r7, #30]
 800b320:	3b01      	subs	r3, #1
 800b322:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b324:	8bfb      	ldrh	r3, [r7, #30]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1ea      	bne.n	800b300 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	372c      	adds	r7, #44	; 0x2c
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	785b      	ldrb	r3, [r3, #1]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d12c      	bne.n	800b3ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	db12      	blt.n	800b38c <USB_EPSetStall+0x54>
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00f      	beq.n	800b38c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	4413      	add	r3, r2
 800b374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	0151      	lsls	r1, r2, #5
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	440a      	add	r2, r1
 800b382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b38a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	e02b      	b.n	800b406 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	db12      	blt.n	800b3e6 <USB_EPSetStall+0xae>
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00f      	beq.n	800b3e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	0151      	lsls	r1, r2, #5
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	440a      	add	r2, r1
 800b3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b404:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	785b      	ldrb	r3, [r3, #1]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d128      	bne.n	800b482 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	440a      	add	r2, r1
 800b446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b44e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	78db      	ldrb	r3, [r3, #3]
 800b454:	2b03      	cmp	r3, #3
 800b456:	d003      	beq.n	800b460 <USB_EPClearStall+0x4c>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	78db      	ldrb	r3, [r3, #3]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d138      	bne.n	800b4d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	0151      	lsls	r1, r2, #5
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	440a      	add	r2, r1
 800b476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	e027      	b.n	800b4d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	0151      	lsls	r1, r2, #5
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	440a      	add	r2, r1
 800b498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	78db      	ldrb	r3, [r3, #3]
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d003      	beq.n	800b4b2 <USB_EPClearStall+0x9e>
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	78db      	ldrb	r3, [r3, #3]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d10f      	bne.n	800b4d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	0151      	lsls	r1, r2, #5
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	440a      	add	r2, r1
 800b4c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b502:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b514:	68f9      	ldr	r1, [r7, #12]
 800b516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b51a:	4313      	orrs	r3, r2
 800b51c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b546:	f023 0303 	bic.w	r3, r3, #3
 800b54a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b55a:	f023 0302 	bic.w	r3, r3, #2
 800b55e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b56e:	b480      	push	{r7}
 800b570:	b085      	sub	sp, #20
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b588:	f023 0303 	bic.w	r3, r3, #3
 800b58c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b59c:	f043 0302 	orr.w	r3, r3, #2
 800b5a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b085      	sub	sp, #20
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	0c1b      	lsrs	r3, r3, #16
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	4013      	ands	r3, r2
 800b62c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	b29b      	uxth	r3, r3
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	460b      	mov	r3, r1
 800b648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	4013      	ands	r3, r2
 800b66a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b66c:	68bb      	ldr	r3, [r7, #8]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b087      	sub	sp, #28
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	f003 030f 	and.w	r3, r3, #15
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6aa:	01db      	lsls	r3, r3, #7
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	f003 0301 	and.w	r3, r3, #1
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b085      	sub	sp, #20
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b70c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b710:	f023 0307 	bic.w	r3, r3, #7
 800b714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	333c      	adds	r3, #60	; 0x3c
 800b74a:	3304      	adds	r3, #4
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	4a1c      	ldr	r2, [pc, #112]	; (800b7c4 <USB_EP0_OutStart+0x8c>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d90a      	bls.n	800b76e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b768:	d101      	bne.n	800b76e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e024      	b.n	800b7b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b774:	461a      	mov	r2, r3
 800b776:	2300      	movs	r3, #0
 800b778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b78c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b79c:	f043 0318 	orr.w	r3, r3, #24
 800b7a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b7b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	4f54300a 	.word	0x4f54300a

0800b7c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60fb      	str	r3, [r7, #12]
 800b7da:	4a13      	ldr	r2, [pc, #76]	; (800b828 <USB_CoreReset+0x60>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d901      	bls.n	800b7e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e01a      	b.n	800b81a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	daf3      	bge.n	800b7d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	f043 0201 	orr.w	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	4a09      	ldr	r2, [pc, #36]	; (800b828 <USB_CoreReset+0x60>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d901      	bls.n	800b80c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e006      	b.n	800b81a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b01      	cmp	r3, #1
 800b816:	d0f1      	beq.n	800b7fc <USB_CoreReset+0x34>

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	00030d40 	.word	0x00030d40

0800b82c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b83c:	f002 fade 	bl	800ddfc <USBD_static_malloc>
 800b840:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d105      	bne.n	800b854 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b850:	2302      	movs	r3, #2
 800b852:	e066      	b.n	800b922 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7c1b      	ldrb	r3, [r3, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d119      	bne.n	800b898 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b868:	2202      	movs	r2, #2
 800b86a:	2181      	movs	r1, #129	; 0x81
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f002 f8b1 	bl	800d9d4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b87c:	2202      	movs	r2, #2
 800b87e:	2101      	movs	r1, #1
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f002 f8a7 	bl	800d9d4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2210      	movs	r2, #16
 800b892:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b896:	e016      	b.n	800b8c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b898:	2340      	movs	r3, #64	; 0x40
 800b89a:	2202      	movs	r2, #2
 800b89c:	2181      	movs	r1, #129	; 0x81
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f002 f898 	bl	800d9d4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8aa:	2340      	movs	r3, #64	; 0x40
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f002 f88f 	bl	800d9d4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2210      	movs	r2, #16
 800b8c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b8c6:	2308      	movs	r3, #8
 800b8c8:	2203      	movs	r2, #3
 800b8ca:	2182      	movs	r1, #130	; 0x82
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f002 f881 	bl	800d9d4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	7c1b      	ldrb	r3, [r3, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b902:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b906:	2101      	movs	r1, #1
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f002 f9dd 	bl	800dcc8 <USBD_LL_PrepareReceive>
 800b90e:	e007      	b.n	800b920 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b916:	2340      	movs	r3, #64	; 0x40
 800b918:	2101      	movs	r1, #1
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f002 f9d4 	bl	800dcc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b936:	2181      	movs	r1, #129	; 0x81
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f002 f889 	bl	800da50 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b944:	2101      	movs	r1, #1
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f002 f882 	bl	800da50 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b954:	2182      	movs	r1, #130	; 0x82
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f002 f87a 	bl	800da50 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00e      	beq.n	800b994 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b986:	4618      	mov	r0, r3
 800b988:	f002 fa46 	bl	800de18 <USBD_static_free>
    pdev->pClassData = NULL;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e0af      	b.n	800bb28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d03f      	beq.n	800ba54 <USBD_CDC_Setup+0xb4>
 800b9d4:	2b20      	cmp	r3, #32
 800b9d6:	f040 809f 	bne.w	800bb18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	88db      	ldrh	r3, [r3, #6]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d02e      	beq.n	800ba40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	b25b      	sxtb	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	da16      	bge.n	800ba1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b9f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	88d2      	ldrh	r2, [r2, #6]
 800b9fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	88db      	ldrh	r3, [r3, #6]
 800ba04:	2b07      	cmp	r3, #7
 800ba06:	bf28      	it	cs
 800ba08:	2307      	movcs	r3, #7
 800ba0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	89fa      	ldrh	r2, [r7, #14]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f001 fb43 	bl	800d09e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ba18:	e085      	b.n	800bb26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	785a      	ldrb	r2, [r3, #1]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	88db      	ldrh	r3, [r3, #6]
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ba30:	6939      	ldr	r1, [r7, #16]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	461a      	mov	r2, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f001 fb5c 	bl	800d0f6 <USBD_CtlPrepareRx>
      break;
 800ba3e:	e072      	b.n	800bb26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	7850      	ldrb	r0, [r2, #1]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	4798      	blx	r3
      break;
 800ba52:	e068      	b.n	800bb26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	785b      	ldrb	r3, [r3, #1]
 800ba58:	2b0b      	cmp	r3, #11
 800ba5a:	d852      	bhi.n	800bb02 <USBD_CDC_Setup+0x162>
 800ba5c:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <USBD_CDC_Setup+0xc4>)
 800ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba62:	bf00      	nop
 800ba64:	0800ba95 	.word	0x0800ba95
 800ba68:	0800bb11 	.word	0x0800bb11
 800ba6c:	0800bb03 	.word	0x0800bb03
 800ba70:	0800bb03 	.word	0x0800bb03
 800ba74:	0800bb03 	.word	0x0800bb03
 800ba78:	0800bb03 	.word	0x0800bb03
 800ba7c:	0800bb03 	.word	0x0800bb03
 800ba80:	0800bb03 	.word	0x0800bb03
 800ba84:	0800bb03 	.word	0x0800bb03
 800ba88:	0800bb03 	.word	0x0800bb03
 800ba8c:	0800babf 	.word	0x0800babf
 800ba90:	0800bae9 	.word	0x0800bae9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d107      	bne.n	800bab0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800baa0:	f107 030a 	add.w	r3, r7, #10
 800baa4:	2202      	movs	r2, #2
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 faf8 	bl	800d09e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800baae:	e032      	b.n	800bb16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f001 fa82 	bl	800cfbc <USBD_CtlError>
            ret = USBD_FAIL;
 800bab8:	2303      	movs	r3, #3
 800baba:	75fb      	strb	r3, [r7, #23]
          break;
 800babc:	e02b      	b.n	800bb16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	d107      	bne.n	800bada <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800baca:	f107 030d 	add.w	r3, r7, #13
 800bace:	2201      	movs	r2, #1
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f001 fae3 	bl	800d09e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bad8:	e01d      	b.n	800bb16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f001 fa6d 	bl	800cfbc <USBD_CtlError>
            ret = USBD_FAIL;
 800bae2:	2303      	movs	r3, #3
 800bae4:	75fb      	strb	r3, [r7, #23]
          break;
 800bae6:	e016      	b.n	800bb16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d00f      	beq.n	800bb14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f001 fa60 	bl	800cfbc <USBD_CtlError>
            ret = USBD_FAIL;
 800bafc:	2303      	movs	r3, #3
 800bafe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb00:	e008      	b.n	800bb14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f001 fa59 	bl	800cfbc <USBD_CtlError>
          ret = USBD_FAIL;
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb0e:	e002      	b.n	800bb16 <USBD_CDC_Setup+0x176>
          break;
 800bb10:	bf00      	nop
 800bb12:	e008      	b.n	800bb26 <USBD_CDC_Setup+0x186>
          break;
 800bb14:	bf00      	nop
      }
      break;
 800bb16:	e006      	b.n	800bb26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 fa4e 	bl	800cfbc <USBD_CtlError>
      ret = USBD_FAIL;
 800bb20:	2303      	movs	r3, #3
 800bb22:	75fb      	strb	r3, [r7, #23]
      break;
 800bb24:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	e04f      	b.n	800bbf2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	440b      	add	r3, r1
 800bb68:	3318      	adds	r3, #24
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d029      	beq.n	800bbc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bb70:	78fa      	ldrb	r2, [r7, #3]
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	3318      	adds	r3, #24
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	78f9      	ldrb	r1, [r7, #3]
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	460b      	mov	r3, r1
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	1a5b      	subs	r3, r3, r1
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4403      	add	r3, r0
 800bb90:	3344      	adds	r3, #68	; 0x44
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	fbb2 f1f3 	udiv	r1, r2, r3
 800bb98:	fb03 f301 	mul.w	r3, r3, r1
 800bb9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d110      	bne.n	800bbc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bba2:	78fa      	ldrb	r2, [r7, #3]
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	3318      	adds	r3, #24
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bbb6:	78f9      	ldrb	r1, [r7, #3]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2200      	movs	r2, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f002 f84b 	bl	800dc58 <USBD_LL_Transmit>
 800bbc2:	e015      	b.n	800bbf0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bbec:	78fa      	ldrb	r2, [r7, #3]
 800bbee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	460b      	mov	r3, r1
 800bc04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e015      	b.n	800bc48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f002 f889 	bl	800dd38 <USBD_LL_GetRxDataSize>
 800bc26:	4602      	mov	r2, r0
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bc42:	4611      	mov	r1, r2
 800bc44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e01b      	b.n	800bca2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d015      	beq.n	800bca0 <USBD_CDC_EP0_RxReady+0x50>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc7a:	2bff      	cmp	r3, #255	; 0xff
 800bc7c:	d010      	beq.n	800bca0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bc8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc94:	b292      	uxth	r2, r2
 800bc96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	22ff      	movs	r2, #255	; 0xff
 800bc9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2243      	movs	r2, #67	; 0x43
 800bcb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bcba:	4b03      	ldr	r3, [pc, #12]	; (800bcc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	20000094 	.word	0x20000094

0800bccc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2243      	movs	r2, #67	; 0x43
 800bcd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bcda:	4b03      	ldr	r3, [pc, #12]	; (800bce8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	20000050 	.word	0x20000050

0800bcec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2243      	movs	r2, #67	; 0x43
 800bcf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bcfa:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	200000d8 	.word	0x200000d8

0800bd0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	220a      	movs	r2, #10
 800bd18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd1a:	4b03      	ldr	r3, [pc, #12]	; (800bd28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	2000000c 	.word	0x2000000c

0800bd2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e004      	b.n	800bd4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b087      	sub	sp, #28
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e008      	b.n	800bd86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b085      	sub	sp, #20
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bda2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	e004      	b.n	800bdb8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdd2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e01a      	b.n	800be1c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d114      	bne.n	800be1a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be0e:	2181      	movs	r1, #129	; 0x81
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 ff21 	bl	800dc58 <USBD_LL_Transmit>

    ret = USBD_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be3e:	2303      	movs	r3, #3
 800be40:	e016      	b.n	800be70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	7c1b      	ldrb	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be54:	2101      	movs	r1, #1
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 ff36 	bl	800dcc8 <USBD_LL_PrepareReceive>
 800be5c:	e007      	b.n	800be6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be64:	2340      	movs	r3, #64	; 0x40
 800be66:	2101      	movs	r1, #1
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f001 ff2d 	bl	800dcc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	4613      	mov	r3, r2
 800be84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e01f      	b.n	800bed0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	79fa      	ldrb	r2, [r7, #7]
 800bec2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f001 fd07 	bl	800d8d8 <USBD_LL_Init>
 800beca:	4603      	mov	r3, r0
 800becc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bece:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bee2:	2300      	movs	r3, #0
 800bee4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800beec:	2303      	movs	r3, #3
 800beee:	e016      	b.n	800bf1e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0c:	f107 020e 	add.w	r2, r7, #14
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
 800bf14:	4602      	mov	r2, r0
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f001 fd1e 	bl	800d970 <USBD_LL_Start>
 800bf34:	4603      	mov	r3, r0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bf60:	2303      	movs	r3, #3
 800bf62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	78fa      	ldrb	r2, [r7, #3]
 800bf78:	4611      	mov	r1, r2
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	4798      	blx	r3
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d007      	beq.n	800bfb2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	78fa      	ldrb	r2, [r7, #3]
 800bfac:	4611      	mov	r1, r2
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	4798      	blx	r3
  }

  return USBD_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 ffba 	bl	800cf48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bff0:	f003 031f 	and.w	r3, r3, #31
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d01a      	beq.n	800c02e <USBD_LL_SetupStage+0x72>
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d822      	bhi.n	800c042 <USBD_LL_SetupStage+0x86>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <USBD_LL_SetupStage+0x4a>
 800c000:	2b01      	cmp	r3, #1
 800c002:	d00a      	beq.n	800c01a <USBD_LL_SetupStage+0x5e>
 800c004:	e01d      	b.n	800c042 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fa62 	bl	800c4d8 <USBD_StdDevReq>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
      break;
 800c018:	e020      	b.n	800c05c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fac6 	bl	800c5b4 <USBD_StdItfReq>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
      break;
 800c02c:	e016      	b.n	800c05c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fb05 	bl	800c646 <USBD_StdEPReq>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]
      break;
 800c040:	e00c      	b.n	800c05c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f001 fd33 	bl	800dabc <USBD_LL_StallEP>
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]
      break;
 800c05a:	bf00      	nop
  }

  return ret;
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b086      	sub	sp, #24
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	460b      	mov	r3, r1
 800c070:	607a      	str	r2, [r7, #4]
 800c072:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c074:	7afb      	ldrb	r3, [r7, #11]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d138      	bne.n	800c0ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c080:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d14a      	bne.n	800c122 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	689a      	ldr	r2, [r3, #8]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	429a      	cmp	r2, r3
 800c096:	d913      	bls.n	800c0c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	1ad2      	subs	r2, r2, r3
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	68da      	ldr	r2, [r3, #12]
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	bf28      	it	cs
 800c0b2:	4613      	movcs	r3, r2
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	6879      	ldr	r1, [r7, #4]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f001 f839 	bl	800d130 <USBD_CtlContinueRx>
 800c0be:	e030      	b.n	800c122 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	d10b      	bne.n	800c0e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d005      	beq.n	800c0e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f001 f834 	bl	800d152 <USBD_CtlSendStatus>
 800c0ea:	e01a      	b.n	800c122 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d114      	bne.n	800c122 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00e      	beq.n	800c122 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	7afa      	ldrb	r2, [r7, #11]
 800c10e:	4611      	mov	r1, r2
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	4798      	blx	r3
 800c114:	4603      	mov	r3, r0
 800c116:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c118:	7dfb      	ldrb	r3, [r7, #23]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
 800c120:	e000      	b.n	800c124 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	460b      	mov	r3, r1
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c13a:	7afb      	ldrb	r3, [r7, #11]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d16b      	bne.n	800c218 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3314      	adds	r3, #20
 800c144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d156      	bne.n	800c1fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	689a      	ldr	r2, [r3, #8]
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d914      	bls.n	800c186 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	1ad2      	subs	r2, r2, r3
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	461a      	mov	r2, r3
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 ffae 	bl	800d0d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c178:	2300      	movs	r3, #0
 800c17a:	2200      	movs	r2, #0
 800c17c:	2100      	movs	r1, #0
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f001 fda2 	bl	800dcc8 <USBD_LL_PrepareReceive>
 800c184:	e03b      	b.n	800c1fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d11c      	bne.n	800c1cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d316      	bcc.n	800c1cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d20f      	bcs.n	800c1cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 ff8f 	bl	800d0d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f001 fd7f 	bl	800dcc8 <USBD_LL_PrepareReceive>
 800c1ca:	e018      	b.n	800c1fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d10b      	bne.n	800c1f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1f0:	2180      	movs	r1, #128	; 0x80
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f001 fc62 	bl	800dabc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 ffbd 	bl	800d178 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c204:	2b01      	cmp	r3, #1
 800c206:	d122      	bne.n	800c24e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff fe98 	bl	800bf3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c216:	e01a      	b.n	800c24e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b03      	cmp	r3, #3
 800c222:	d114      	bne.n	800c24e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c22a:	695b      	ldr	r3, [r3, #20]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00e      	beq.n	800c24e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	7afa      	ldrb	r2, [r7, #11]
 800c23a:	4611      	mov	r1, r2
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	4798      	blx	r3
 800c240:	4603      	mov	r3, r0
 800c242:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	e000      	b.n	800c250 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	e02f      	b.n	800c2ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00f      	beq.n	800c2b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	6852      	ldr	r2, [r2, #4]
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2b6:	2340      	movs	r3, #64	; 0x40
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 fb89 	bl	800d9d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2240      	movs	r2, #64	; 0x40
 800c2ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2d2:	2340      	movs	r3, #64	; 0x40
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2180      	movs	r1, #128	; 0x80
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 fb7b 	bl	800d9d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2240      	movs	r2, #64	; 0x40
 800c2e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	78fa      	ldrb	r2, [r7, #3]
 800c304:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c322:	b2da      	uxtb	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2204      	movs	r2, #4
 800c32e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b04      	cmp	r3, #4
 800c352:	d106      	bne.n	800c362 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c382:	2303      	movs	r3, #3
 800c384:	e012      	b.n	800c3ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d10b      	bne.n	800c3aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a4:	69db      	ldr	r3, [r3, #28]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e014      	b.n	800c3f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d10d      	bne.n	800c3f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ec:	6a1b      	ldr	r3, [r3, #32]
 800c3ee:	78fa      	ldrb	r2, [r7, #3]
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c416:	2303      	movs	r3, #3
 800c418:	e014      	b.n	800c444 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b03      	cmp	r3, #3
 800c424:	d10d      	bne.n	800c442 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d007      	beq.n	800c442 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43a:	78fa      	ldrb	r2, [r7, #3]
 800c43c:	4611      	mov	r1, r2
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b082      	sub	sp, #8
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d009      	beq.n	800c490 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	6852      	ldr	r2, [r2, #4]
 800c488:	b2d2      	uxtb	r2, r2
 800c48a:	4611      	mov	r1, r2
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	4798      	blx	r3
  }

  return USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c49a:	b480      	push	{r7}
 800c49c:	b087      	sub	sp, #28
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c4b8:	8a3b      	ldrh	r3, [r7, #16]
 800c4ba:	021b      	lsls	r3, r3, #8
 800c4bc:	b21a      	sxth	r2, r3
 800c4be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	b21b      	sxth	r3, r3
 800c4c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c4c8:	89fb      	ldrh	r3, [r7, #14]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4ee:	2b40      	cmp	r3, #64	; 0x40
 800c4f0:	d005      	beq.n	800c4fe <USBD_StdDevReq+0x26>
 800c4f2:	2b40      	cmp	r3, #64	; 0x40
 800c4f4:	d853      	bhi.n	800c59e <USBD_StdDevReq+0xc6>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <USBD_StdDevReq+0x3a>
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	d14f      	bne.n	800c59e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	4798      	blx	r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]
      break;
 800c510:	e04a      	b.n	800c5a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	785b      	ldrb	r3, [r3, #1]
 800c516:	2b09      	cmp	r3, #9
 800c518:	d83b      	bhi.n	800c592 <USBD_StdDevReq+0xba>
 800c51a:	a201      	add	r2, pc, #4	; (adr r2, 800c520 <USBD_StdDevReq+0x48>)
 800c51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c589 	.word	0x0800c589
 800c528:	0800c593 	.word	0x0800c593
 800c52c:	0800c57f 	.word	0x0800c57f
 800c530:	0800c593 	.word	0x0800c593
 800c534:	0800c553 	.word	0x0800c553
 800c538:	0800c549 	.word	0x0800c549
 800c53c:	0800c593 	.word	0x0800c593
 800c540:	0800c56b 	.word	0x0800c56b
 800c544:	0800c55d 	.word	0x0800c55d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f9de 	bl	800c90c <USBD_GetDescriptor>
          break;
 800c550:	e024      	b.n	800c59c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fb6d 	bl	800cc34 <USBD_SetAddress>
          break;
 800c55a:	e01f      	b.n	800c59c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fbac 	bl	800ccbc <USBD_SetConfig>
 800c564:	4603      	mov	r3, r0
 800c566:	73fb      	strb	r3, [r7, #15]
          break;
 800c568:	e018      	b.n	800c59c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fc4b 	bl	800ce08 <USBD_GetConfig>
          break;
 800c572:	e013      	b.n	800c59c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fc7c 	bl	800ce74 <USBD_GetStatus>
          break;
 800c57c:	e00e      	b.n	800c59c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fcab 	bl	800cedc <USBD_SetFeature>
          break;
 800c586:	e009      	b.n	800c59c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fcba 	bl	800cf04 <USBD_ClrFeature>
          break;
 800c590:	e004      	b.n	800c59c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fd11 	bl	800cfbc <USBD_CtlError>
          break;
 800c59a:	bf00      	nop
      }
      break;
 800c59c:	e004      	b.n	800c5a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fd0b 	bl	800cfbc <USBD_CtlError>
      break;
 800c5a6:	bf00      	nop
  }

  return ret;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop

0800c5b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ca:	2b40      	cmp	r3, #64	; 0x40
 800c5cc:	d005      	beq.n	800c5da <USBD_StdItfReq+0x26>
 800c5ce:	2b40      	cmp	r3, #64	; 0x40
 800c5d0:	d82f      	bhi.n	800c632 <USBD_StdItfReq+0x7e>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <USBD_StdItfReq+0x26>
 800c5d6:	2b20      	cmp	r3, #32
 800c5d8:	d12b      	bne.n	800c632 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d81d      	bhi.n	800c624 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	889b      	ldrh	r3, [r3, #4]
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d813      	bhi.n	800c61a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	4798      	blx	r3
 800c600:	4603      	mov	r3, r0
 800c602:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	88db      	ldrh	r3, [r3, #6]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d110      	bne.n	800c62e <USBD_StdItfReq+0x7a>
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10d      	bne.n	800c62e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fd9d 	bl	800d152 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c618:	e009      	b.n	800c62e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fccd 	bl	800cfbc <USBD_CtlError>
          break;
 800c622:	e004      	b.n	800c62e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 fcc8 	bl	800cfbc <USBD_CtlError>
          break;
 800c62c:	e000      	b.n	800c630 <USBD_StdItfReq+0x7c>
          break;
 800c62e:	bf00      	nop
      }
      break;
 800c630:	e004      	b.n	800c63c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fcc1 	bl	800cfbc <USBD_CtlError>
      break;
 800c63a:	bf00      	nop
  }

  return ret;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	889b      	ldrh	r3, [r3, #4]
 800c658:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c662:	2b40      	cmp	r3, #64	; 0x40
 800c664:	d007      	beq.n	800c676 <USBD_StdEPReq+0x30>
 800c666:	2b40      	cmp	r3, #64	; 0x40
 800c668:	f200 8145 	bhi.w	800c8f6 <USBD_StdEPReq+0x2b0>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00c      	beq.n	800c68a <USBD_StdEPReq+0x44>
 800c670:	2b20      	cmp	r3, #32
 800c672:	f040 8140 	bne.w	800c8f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	4798      	blx	r3
 800c684:	4603      	mov	r3, r0
 800c686:	73fb      	strb	r3, [r7, #15]
      break;
 800c688:	e13a      	b.n	800c900 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	785b      	ldrb	r3, [r3, #1]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d007      	beq.n	800c6a2 <USBD_StdEPReq+0x5c>
 800c692:	2b03      	cmp	r3, #3
 800c694:	f300 8129 	bgt.w	800c8ea <USBD_StdEPReq+0x2a4>
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d07f      	beq.n	800c79c <USBD_StdEPReq+0x156>
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d03c      	beq.n	800c71a <USBD_StdEPReq+0xd4>
 800c6a0:	e123      	b.n	800c8ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d002      	beq.n	800c6b4 <USBD_StdEPReq+0x6e>
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d016      	beq.n	800c6e0 <USBD_StdEPReq+0x9a>
 800c6b2:	e02c      	b.n	800c70e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00d      	beq.n	800c6d6 <USBD_StdEPReq+0x90>
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	2b80      	cmp	r3, #128	; 0x80
 800c6be:	d00a      	beq.n	800c6d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f001 f9f9 	bl	800dabc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ca:	2180      	movs	r1, #128	; 0x80
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 f9f5 	bl	800dabc <USBD_LL_StallEP>
 800c6d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6d4:	e020      	b.n	800c718 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fc6f 	bl	800cfbc <USBD_CtlError>
              break;
 800c6de:	e01b      	b.n	800c718 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	885b      	ldrh	r3, [r3, #2]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10e      	bne.n	800c706 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00b      	beq.n	800c706 <USBD_StdEPReq+0xc0>
 800c6ee:	7bbb      	ldrb	r3, [r7, #14]
 800c6f0:	2b80      	cmp	r3, #128	; 0x80
 800c6f2:	d008      	beq.n	800c706 <USBD_StdEPReq+0xc0>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	88db      	ldrh	r3, [r3, #6]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d104      	bne.n	800c706 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 f9db 	bl	800dabc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fd23 	bl	800d152 <USBD_CtlSendStatus>

              break;
 800c70c:	e004      	b.n	800c718 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fc53 	bl	800cfbc <USBD_CtlError>
              break;
 800c716:	bf00      	nop
          }
          break;
 800c718:	e0ec      	b.n	800c8f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b02      	cmp	r3, #2
 800c724:	d002      	beq.n	800c72c <USBD_StdEPReq+0xe6>
 800c726:	2b03      	cmp	r3, #3
 800c728:	d016      	beq.n	800c758 <USBD_StdEPReq+0x112>
 800c72a:	e030      	b.n	800c78e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c72c:	7bbb      	ldrb	r3, [r7, #14]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00d      	beq.n	800c74e <USBD_StdEPReq+0x108>
 800c732:	7bbb      	ldrb	r3, [r7, #14]
 800c734:	2b80      	cmp	r3, #128	; 0x80
 800c736:	d00a      	beq.n	800c74e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c738:	7bbb      	ldrb	r3, [r7, #14]
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f001 f9bd 	bl	800dabc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c742:	2180      	movs	r1, #128	; 0x80
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f001 f9b9 	bl	800dabc <USBD_LL_StallEP>
 800c74a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c74c:	e025      	b.n	800c79a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fc33 	bl	800cfbc <USBD_CtlError>
              break;
 800c756:	e020      	b.n	800c79a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	885b      	ldrh	r3, [r3, #2]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d11b      	bne.n	800c798 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c760:	7bbb      	ldrb	r3, [r7, #14]
 800c762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c766:	2b00      	cmp	r3, #0
 800c768:	d004      	beq.n	800c774 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 f9da 	bl	800db28 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fcec 	bl	800d152 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	4798      	blx	r3
 800c788:	4603      	mov	r3, r0
 800c78a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c78c:	e004      	b.n	800c798 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fc13 	bl	800cfbc <USBD_CtlError>
              break;
 800c796:	e000      	b.n	800c79a <USBD_StdEPReq+0x154>
              break;
 800c798:	bf00      	nop
          }
          break;
 800c79a:	e0ab      	b.n	800c8f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d002      	beq.n	800c7ae <USBD_StdEPReq+0x168>
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d032      	beq.n	800c812 <USBD_StdEPReq+0x1cc>
 800c7ac:	e097      	b.n	800c8de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d007      	beq.n	800c7c4 <USBD_StdEPReq+0x17e>
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b80      	cmp	r3, #128	; 0x80
 800c7b8:	d004      	beq.n	800c7c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fbfd 	bl	800cfbc <USBD_CtlError>
                break;
 800c7c2:	e091      	b.n	800c8e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	da0b      	bge.n	800c7e4 <USBD_StdEPReq+0x19e>
 800c7cc:	7bbb      	ldrb	r3, [r7, #14]
 800c7ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	3310      	adds	r3, #16
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	4413      	add	r3, r2
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	e00b      	b.n	800c7fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	2200      	movs	r2, #0
 800c802:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	2202      	movs	r2, #2
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fc47 	bl	800d09e <USBD_CtlSendData>
              break;
 800c810:	e06a      	b.n	800c8e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c816:	2b00      	cmp	r3, #0
 800c818:	da11      	bge.n	800c83e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
 800c81c:	f003 020f 	and.w	r2, r3, #15
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	4613      	mov	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	440b      	add	r3, r1
 800c82c:	3324      	adds	r3, #36	; 0x24
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d117      	bne.n	800c864 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fbc0 	bl	800cfbc <USBD_CtlError>
                  break;
 800c83c:	e054      	b.n	800c8e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	f003 020f 	and.w	r2, r3, #15
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	440b      	add	r3, r1
 800c850:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d104      	bne.n	800c864 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fbad 	bl	800cfbc <USBD_CtlError>
                  break;
 800c862:	e041      	b.n	800c8e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	da0b      	bge.n	800c884 <USBD_StdEPReq+0x23e>
 800c86c:	7bbb      	ldrb	r3, [r7, #14]
 800c86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	3310      	adds	r3, #16
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	4413      	add	r3, r2
 800c880:	3304      	adds	r3, #4
 800c882:	e00b      	b.n	800c89c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4413      	add	r3, r2
 800c89a:	3304      	adds	r3, #4
 800c89c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <USBD_StdEPReq+0x264>
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	2b80      	cmp	r3, #128	; 0x80
 800c8a8:	d103      	bne.n	800c8b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	e00e      	b.n	800c8d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c8b2:	7bbb      	ldrb	r3, [r7, #14]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f001 f96c 	bl	800db94 <USBD_LL_IsStallEP>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e002      	b.n	800c8d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fbe1 	bl	800d09e <USBD_CtlSendData>
              break;
 800c8dc:	e004      	b.n	800c8e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fb6b 	bl	800cfbc <USBD_CtlError>
              break;
 800c8e6:	bf00      	nop
          }
          break;
 800c8e8:	e004      	b.n	800c8f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fb65 	bl	800cfbc <USBD_CtlError>
          break;
 800c8f2:	bf00      	nop
      }
      break;
 800c8f4:	e004      	b.n	800c900 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fb5f 	bl	800cfbc <USBD_CtlError>
      break;
 800c8fe:	bf00      	nop
  }

  return ret;
 800c900:	7bfb      	ldrb	r3, [r7, #15]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	0a1b      	lsrs	r3, r3, #8
 800c928:	b29b      	uxth	r3, r3
 800c92a:	3b01      	subs	r3, #1
 800c92c:	2b0e      	cmp	r3, #14
 800c92e:	f200 8152 	bhi.w	800cbd6 <USBD_GetDescriptor+0x2ca>
 800c932:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <USBD_GetDescriptor+0x2c>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c9a9 	.word	0x0800c9a9
 800c93c:	0800c9c1 	.word	0x0800c9c1
 800c940:	0800ca01 	.word	0x0800ca01
 800c944:	0800cbd7 	.word	0x0800cbd7
 800c948:	0800cbd7 	.word	0x0800cbd7
 800c94c:	0800cb77 	.word	0x0800cb77
 800c950:	0800cba3 	.word	0x0800cba3
 800c954:	0800cbd7 	.word	0x0800cbd7
 800c958:	0800cbd7 	.word	0x0800cbd7
 800c95c:	0800cbd7 	.word	0x0800cbd7
 800c960:	0800cbd7 	.word	0x0800cbd7
 800c964:	0800cbd7 	.word	0x0800cbd7
 800c968:	0800cbd7 	.word	0x0800cbd7
 800c96c:	0800cbd7 	.word	0x0800cbd7
 800c970:	0800c975 	.word	0x0800c975
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97a:	69db      	ldr	r3, [r3, #28]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00b      	beq.n	800c998 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c986:	69db      	ldr	r3, [r3, #28]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	7c12      	ldrb	r2, [r2, #16]
 800c98c:	f107 0108 	add.w	r1, r7, #8
 800c990:	4610      	mov	r0, r2
 800c992:	4798      	blx	r3
 800c994:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c996:	e126      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fb0e 	bl	800cfbc <USBD_CtlError>
        err++;
 800c9a0:	7afb      	ldrb	r3, [r7, #11]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	72fb      	strb	r3, [r7, #11]
      break;
 800c9a6:	e11e      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	7c12      	ldrb	r2, [r2, #16]
 800c9b4:	f107 0108 	add.w	r1, r7, #8
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	4798      	blx	r3
 800c9bc:	60f8      	str	r0, [r7, #12]
      break;
 800c9be:	e112      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	7c1b      	ldrb	r3, [r3, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10d      	bne.n	800c9e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d0:	f107 0208 	add.w	r2, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	2202      	movs	r2, #2
 800c9e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9e2:	e100      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	f107 0208 	add.w	r2, r7, #8
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
 800c9f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	701a      	strb	r2, [r3, #0]
      break;
 800c9fe:	e0f2      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	885b      	ldrh	r3, [r3, #2]
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b05      	cmp	r3, #5
 800ca08:	f200 80ac 	bhi.w	800cb64 <USBD_GetDescriptor+0x258>
 800ca0c:	a201      	add	r2, pc, #4	; (adr r2, 800ca14 <USBD_GetDescriptor+0x108>)
 800ca0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca12:	bf00      	nop
 800ca14:	0800ca2d 	.word	0x0800ca2d
 800ca18:	0800ca61 	.word	0x0800ca61
 800ca1c:	0800ca95 	.word	0x0800ca95
 800ca20:	0800cac9 	.word	0x0800cac9
 800ca24:	0800cafd 	.word	0x0800cafd
 800ca28:	0800cb31 	.word	0x0800cb31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00b      	beq.n	800ca50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	7c12      	ldrb	r2, [r2, #16]
 800ca44:	f107 0108 	add.w	r1, r7, #8
 800ca48:	4610      	mov	r0, r2
 800ca4a:	4798      	blx	r3
 800ca4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca4e:	e091      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fab2 	bl	800cfbc <USBD_CtlError>
            err++;
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca5e:	e089      	b.n	800cb74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00b      	beq.n	800ca84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	7c12      	ldrb	r2, [r2, #16]
 800ca78:	f107 0108 	add.w	r1, r7, #8
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	4798      	blx	r3
 800ca80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca82:	e077      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa98 	bl	800cfbc <USBD_CtlError>
            err++;
 800ca8c:	7afb      	ldrb	r3, [r7, #11]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	72fb      	strb	r3, [r7, #11]
          break;
 800ca92:	e06f      	b.n	800cb74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00b      	beq.n	800cab8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	7c12      	ldrb	r2, [r2, #16]
 800caac:	f107 0108 	add.w	r1, r7, #8
 800cab0:	4610      	mov	r0, r2
 800cab2:	4798      	blx	r3
 800cab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cab6:	e05d      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fa7e 	bl	800cfbc <USBD_CtlError>
            err++;
 800cac0:	7afb      	ldrb	r3, [r7, #11]
 800cac2:	3301      	adds	r3, #1
 800cac4:	72fb      	strb	r3, [r7, #11]
          break;
 800cac6:	e055      	b.n	800cb74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	7c12      	ldrb	r2, [r2, #16]
 800cae0:	f107 0108 	add.w	r1, r7, #8
 800cae4:	4610      	mov	r0, r2
 800cae6:	4798      	blx	r3
 800cae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caea:	e043      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fa64 	bl	800cfbc <USBD_CtlError>
            err++;
 800caf4:	7afb      	ldrb	r3, [r7, #11]
 800caf6:	3301      	adds	r3, #1
 800caf8:	72fb      	strb	r3, [r7, #11]
          break;
 800cafa:	e03b      	b.n	800cb74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb02:	695b      	ldr	r3, [r3, #20]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb0e:	695b      	ldr	r3, [r3, #20]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	7c12      	ldrb	r2, [r2, #16]
 800cb14:	f107 0108 	add.w	r1, r7, #8
 800cb18:	4610      	mov	r0, r2
 800cb1a:	4798      	blx	r3
 800cb1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb1e:	e029      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fa4a 	bl	800cfbc <USBD_CtlError>
            err++;
 800cb28:	7afb      	ldrb	r3, [r7, #11]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb2e:	e021      	b.n	800cb74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb36:	699b      	ldr	r3, [r3, #24]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00b      	beq.n	800cb54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	7c12      	ldrb	r2, [r2, #16]
 800cb48:	f107 0108 	add.w	r1, r7, #8
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
 800cb50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb52:	e00f      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fa30 	bl	800cfbc <USBD_CtlError>
            err++;
 800cb5c:	7afb      	ldrb	r3, [r7, #11]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	72fb      	strb	r3, [r7, #11]
          break;
 800cb62:	e007      	b.n	800cb74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fa28 	bl	800cfbc <USBD_CtlError>
          err++;
 800cb6c:	7afb      	ldrb	r3, [r7, #11]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cb72:	bf00      	nop
      }
      break;
 800cb74:	e037      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7c1b      	ldrb	r3, [r3, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d109      	bne.n	800cb92 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb86:	f107 0208 	add.w	r2, r7, #8
 800cb8a:	4610      	mov	r0, r2
 800cb8c:	4798      	blx	r3
 800cb8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb90:	e029      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fa11 	bl	800cfbc <USBD_CtlError>
        err++;
 800cb9a:	7afb      	ldrb	r3, [r7, #11]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	72fb      	strb	r3, [r7, #11]
      break;
 800cba0:	e021      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	7c1b      	ldrb	r3, [r3, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10d      	bne.n	800cbc6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb2:	f107 0208 	add.w	r2, r7, #8
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4798      	blx	r3
 800cbba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	2207      	movs	r2, #7
 800cbc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbc4:	e00f      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f9f7 	bl	800cfbc <USBD_CtlError>
        err++;
 800cbce:	7afb      	ldrb	r3, [r7, #11]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	72fb      	strb	r3, [r7, #11]
      break;
 800cbd4:	e007      	b.n	800cbe6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f9ef 	bl	800cfbc <USBD_CtlError>
      err++;
 800cbde:	7afb      	ldrb	r3, [r7, #11]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	72fb      	strb	r3, [r7, #11]
      break;
 800cbe4:	bf00      	nop
  }

  if (err != 0U)
 800cbe6:	7afb      	ldrb	r3, [r7, #11]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d11e      	bne.n	800cc2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	88db      	ldrh	r3, [r3, #6]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d016      	beq.n	800cc22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cbf4:	893b      	ldrh	r3, [r7, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00e      	beq.n	800cc18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	88da      	ldrh	r2, [r3, #6]
 800cbfe:	893b      	ldrh	r3, [r7, #8]
 800cc00:	4293      	cmp	r3, r2
 800cc02:	bf28      	it	cs
 800cc04:	4613      	movcs	r3, r2
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc0a:	893b      	ldrh	r3, [r7, #8]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	68f9      	ldr	r1, [r7, #12]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fa44 	bl	800d09e <USBD_CtlSendData>
 800cc16:	e009      	b.n	800cc2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f9ce 	bl	800cfbc <USBD_CtlError>
 800cc20:	e004      	b.n	800cc2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fa95 	bl	800d152 <USBD_CtlSendStatus>
 800cc28:	e000      	b.n	800cc2c <USBD_GetDescriptor+0x320>
    return;
 800cc2a:	bf00      	nop
  }
}
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop

0800cc34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	889b      	ldrh	r3, [r3, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d131      	bne.n	800ccaa <USBD_SetAddress+0x76>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	88db      	ldrh	r3, [r3, #6]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d12d      	bne.n	800ccaa <USBD_SetAddress+0x76>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	885b      	ldrh	r3, [r3, #2]
 800cc52:	2b7f      	cmp	r3, #127	; 0x7f
 800cc54:	d829      	bhi.n	800ccaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d104      	bne.n	800cc78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f9a3 	bl	800cfbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc76:	e01d      	b.n	800ccb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	7bfa      	ldrb	r2, [r7, #15]
 800cc7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 ffb1 	bl	800dbec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fa61 	bl	800d152 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d004      	beq.n	800cca0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2202      	movs	r2, #2
 800cc9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc9e:	e009      	b.n	800ccb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cca8:	e004      	b.n	800ccb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ccaa:	6839      	ldr	r1, [r7, #0]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f985 	bl	800cfbc <USBD_CtlError>
  }
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	885b      	ldrh	r3, [r3, #2]
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	4b4c      	ldr	r3, [pc, #304]	; (800ce04 <USBD_SetConfig+0x148>)
 800ccd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ccd4:	4b4b      	ldr	r3, [pc, #300]	; (800ce04 <USBD_SetConfig+0x148>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d905      	bls.n	800cce8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f96c 	bl	800cfbc <USBD_CtlError>
    return USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e088      	b.n	800cdfa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d002      	beq.n	800ccfa <USBD_SetConfig+0x3e>
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d025      	beq.n	800cd44 <USBD_SetConfig+0x88>
 800ccf8:	e071      	b.n	800cdde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ccfa:	4b42      	ldr	r3, [pc, #264]	; (800ce04 <USBD_SetConfig+0x148>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01c      	beq.n	800cd3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cd02:	4b40      	ldr	r3, [pc, #256]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd0c:	4b3d      	ldr	r3, [pc, #244]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	4619      	mov	r1, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff f91e 	bl	800bf54 <USBD_SetClassConfig>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d004      	beq.n	800cd2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f949 	bl	800cfbc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd2a:	e065      	b.n	800cdf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fa10 	bl	800d152 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2203      	movs	r2, #3
 800cd36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cd3a:	e05d      	b.n	800cdf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fa08 	bl	800d152 <USBD_CtlSendStatus>
      break;
 800cd42:	e059      	b.n	800cdf8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd44:	4b2f      	ldr	r3, [pc, #188]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d112      	bne.n	800cd72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2202      	movs	r2, #2
 800cd50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cd54:	4b2b      	ldr	r3, [pc, #172]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd5e:	4b29      	ldr	r3, [pc, #164]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff f911 	bl	800bf8c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f9f1 	bl	800d152 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd70:	e042      	b.n	800cdf8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cd72:	4b24      	ldr	r3, [pc, #144]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d02a      	beq.n	800cdd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff f8ff 	bl	800bf8c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd8e:	4b1d      	ldr	r3, [pc, #116]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd98:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <USBD_SetConfig+0x148>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff f8d8 	bl	800bf54 <USBD_SetClassConfig>
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00f      	beq.n	800cdce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f903 	bl	800cfbc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff f8e4 	bl	800bf8c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cdcc:	e014      	b.n	800cdf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f9bf 	bl	800d152 <USBD_CtlSendStatus>
      break;
 800cdd4:	e010      	b.n	800cdf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f9bb 	bl	800d152 <USBD_CtlSendStatus>
      break;
 800cddc:	e00c      	b.n	800cdf8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f8eb 	bl	800cfbc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cde6:	4b07      	ldr	r3, [pc, #28]	; (800ce04 <USBD_SetConfig+0x148>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff f8cd 	bl	800bf8c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf6:	bf00      	nop
  }

  return ret;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	2000038c 	.word	0x2000038c

0800ce08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	88db      	ldrh	r3, [r3, #6]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d004      	beq.n	800ce24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f8cd 	bl	800cfbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce22:	e023      	b.n	800ce6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	dc02      	bgt.n	800ce36 <USBD_GetConfig+0x2e>
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	dc03      	bgt.n	800ce3c <USBD_GetConfig+0x34>
 800ce34:	e015      	b.n	800ce62 <USBD_GetConfig+0x5a>
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d00b      	beq.n	800ce52 <USBD_GetConfig+0x4a>
 800ce3a:	e012      	b.n	800ce62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3308      	adds	r3, #8
 800ce46:	2201      	movs	r2, #1
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f927 	bl	800d09e <USBD_CtlSendData>
        break;
 800ce50:	e00c      	b.n	800ce6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3304      	adds	r3, #4
 800ce56:	2201      	movs	r2, #1
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f91f 	bl	800d09e <USBD_CtlSendData>
        break;
 800ce60:	e004      	b.n	800ce6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f8a9 	bl	800cfbc <USBD_CtlError>
        break;
 800ce6a:	bf00      	nop
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	3b01      	subs	r3, #1
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d81e      	bhi.n	800ceca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	88db      	ldrh	r3, [r3, #6]
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d004      	beq.n	800ce9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f890 	bl	800cfbc <USBD_CtlError>
        break;
 800ce9c:	e01a      	b.n	800ced4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d005      	beq.n	800ceba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	f043 0202 	orr.w	r2, r3, #2
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	330c      	adds	r3, #12
 800cebe:	2202      	movs	r2, #2
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f8eb 	bl	800d09e <USBD_CtlSendData>
      break;
 800cec8:	e004      	b.n	800ced4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ceca:	6839      	ldr	r1, [r7, #0]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f875 	bl	800cfbc <USBD_CtlError>
      break;
 800ced2:	bf00      	nop
  }
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	885b      	ldrh	r3, [r3, #2]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d106      	bne.n	800cefc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f92b 	bl	800d152 <USBD_CtlSendStatus>
  }
}
 800cefc:	bf00      	nop
 800cefe:	3708      	adds	r7, #8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	3b01      	subs	r3, #1
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d80b      	bhi.n	800cf34 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	885b      	ldrh	r3, [r3, #2]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d10c      	bne.n	800cf3e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f910 	bl	800d152 <USBD_CtlSendStatus>
      }
      break;
 800cf32:	e004      	b.n	800cf3e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f840 	bl	800cfbc <USBD_CtlError>
      break;
 800cf3c:	e000      	b.n	800cf40 <USBD_ClrFeature+0x3c>
      break;
 800cf3e:	bf00      	nop
  }
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	781a      	ldrb	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3301      	adds	r3, #1
 800cf62:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	781a      	ldrb	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f7ff fa91 	bl	800c49a <SWAPBYTE>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3301      	adds	r3, #1
 800cf84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f7ff fa84 	bl	800c49a <SWAPBYTE>
 800cf92:	4603      	mov	r3, r0
 800cf94:	461a      	mov	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff fa77 	bl	800c49a <SWAPBYTE>
 800cfac:	4603      	mov	r3, r0
 800cfae:	461a      	mov	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	80da      	strh	r2, [r3, #6]
}
 800cfb4:	bf00      	nop
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfc6:	2180      	movs	r1, #128	; 0x80
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fd77 	bl	800dabc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfce:	2100      	movs	r1, #0
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fd73 	bl	800dabc <USBD_LL_StallEP>
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b086      	sub	sp, #24
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d036      	beq.n	800d062 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cff8:	6938      	ldr	r0, [r7, #16]
 800cffa:	f000 f836 	bl	800d06a <USBD_GetLen>
 800cffe:	4603      	mov	r3, r0
 800d000:	3301      	adds	r3, #1
 800d002:	b29b      	uxth	r3, r3
 800d004:	005b      	lsls	r3, r3, #1
 800d006:	b29a      	uxth	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	4413      	add	r3, r2
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	7812      	ldrb	r2, [r2, #0]
 800d016:	701a      	strb	r2, [r3, #0]
  idx++;
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	3301      	adds	r3, #1
 800d01c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d01e:	7dfb      	ldrb	r3, [r7, #23]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	4413      	add	r3, r2
 800d024:	2203      	movs	r2, #3
 800d026:	701a      	strb	r2, [r3, #0]
  idx++;
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	3301      	adds	r3, #1
 800d02c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d02e:	e013      	b.n	800d058 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d030:	7dfb      	ldrb	r3, [r7, #23]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	4413      	add	r3, r2
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	7812      	ldrb	r2, [r2, #0]
 800d03a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3301      	adds	r3, #1
 800d040:	613b      	str	r3, [r7, #16]
    idx++;
 800d042:	7dfb      	ldrb	r3, [r7, #23]
 800d044:	3301      	adds	r3, #1
 800d046:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	4413      	add	r3, r2
 800d04e:	2200      	movs	r2, #0
 800d050:	701a      	strb	r2, [r3, #0]
    idx++;
 800d052:	7dfb      	ldrb	r3, [r7, #23]
 800d054:	3301      	adds	r3, #1
 800d056:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e7      	bne.n	800d030 <USBD_GetString+0x52>
 800d060:	e000      	b.n	800d064 <USBD_GetString+0x86>
    return;
 800d062:	bf00      	nop
  }
}
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d072:	2300      	movs	r3, #0
 800d074:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d07a:	e005      	b.n	800d088 <USBD_GetLen+0x1e>
  {
    len++;
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	3301      	adds	r3, #1
 800d080:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3301      	adds	r3, #1
 800d086:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1f5      	bne.n	800d07c <USBD_GetLen+0x12>
  }

  return len;
 800d090:	7bfb      	ldrb	r3, [r7, #15]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr

0800d09e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	60f8      	str	r0, [r7, #12]
 800d0a6:	60b9      	str	r1, [r7, #8]
 800d0a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 fdc7 	bl	800dc58 <USBD_LL_Transmit>

  return USBD_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 fdb6 	bl	800dc58 <USBD_LL_Transmit>

  return USBD_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	60f8      	str	r0, [r7, #12]
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2203      	movs	r2, #3
 800d106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	2100      	movs	r1, #0
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 fdd1 	bl	800dcc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	2100      	movs	r1, #0
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 fdc0 	bl	800dcc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2204      	movs	r2, #4
 800d15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d162:	2300      	movs	r3, #0
 800d164:	2200      	movs	r2, #0
 800d166:	2100      	movs	r1, #0
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fd75 	bl	800dc58 <USBD_LL_Transmit>

  return USBD_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2205      	movs	r2, #5
 800d184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d188:	2300      	movs	r3, #0
 800d18a:	2200      	movs	r2, #0
 800d18c:	2100      	movs	r1, #0
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fd9a 	bl	800dcc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	4912      	ldr	r1, [pc, #72]	; (800d1f0 <MX_USB_DEVICE_Init+0x50>)
 800d1a8:	4812      	ldr	r0, [pc, #72]	; (800d1f4 <MX_USB_DEVICE_Init+0x54>)
 800d1aa:	f7fe fe65 	bl	800be78 <USBD_Init>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1b4:	f7f5 ff1b 	bl	8002fee <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d1b8:	490f      	ldr	r1, [pc, #60]	; (800d1f8 <MX_USB_DEVICE_Init+0x58>)
 800d1ba:	480e      	ldr	r0, [pc, #56]	; (800d1f4 <MX_USB_DEVICE_Init+0x54>)
 800d1bc:	f7fe fe8c 	bl	800bed8 <USBD_RegisterClass>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1c6:	f7f5 ff12 	bl	8002fee <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d1ca:	490c      	ldr	r1, [pc, #48]	; (800d1fc <MX_USB_DEVICE_Init+0x5c>)
 800d1cc:	4809      	ldr	r0, [pc, #36]	; (800d1f4 <MX_USB_DEVICE_Init+0x54>)
 800d1ce:	f7fe fdad 	bl	800bd2c <USBD_CDC_RegisterInterface>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1d8:	f7f5 ff09 	bl	8002fee <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1dc:	4805      	ldr	r0, [pc, #20]	; (800d1f4 <MX_USB_DEVICE_Init+0x54>)
 800d1de:	f7fe fea2 	bl	800bf26 <USBD_Start>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1e8:	f7f5 ff01 	bl	8002fee <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1ec:	bf00      	nop
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20000130 	.word	0x20000130
 800d1f4:	200007c0 	.word	0x200007c0
 800d1f8:	20000018 	.word	0x20000018
 800d1fc:	2000011c 	.word	0x2000011c

0800d200 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d204:	2200      	movs	r2, #0
 800d206:	4905      	ldr	r1, [pc, #20]	; (800d21c <CDC_Init_FS+0x1c>)
 800d208:	4805      	ldr	r0, [pc, #20]	; (800d220 <CDC_Init_FS+0x20>)
 800d20a:	f7fe fda4 	bl	800bd56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d20e:	4905      	ldr	r1, [pc, #20]	; (800d224 <CDC_Init_FS+0x24>)
 800d210:	4803      	ldr	r0, [pc, #12]	; (800d220 <CDC_Init_FS+0x20>)
 800d212:	f7fe fdbe 	bl	800bd92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d216:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d218:	4618      	mov	r0, r3
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20001290 	.word	0x20001290
 800d220:	200007c0 	.word	0x200007c0
 800d224:	20000a90 	.word	0x20000a90

0800d228 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d228:	b480      	push	{r7}
 800d22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d22c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d22e:	4618      	mov	r0, r3
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	4603      	mov	r3, r0
 800d240:	6039      	str	r1, [r7, #0]
 800d242:	71fb      	strb	r3, [r7, #7]
 800d244:	4613      	mov	r3, r2
 800d246:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	2b23      	cmp	r3, #35	; 0x23
 800d24c:	d84a      	bhi.n	800d2e4 <CDC_Control_FS+0xac>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <CDC_Control_FS+0x1c>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d2e5 	.word	0x0800d2e5
 800d258:	0800d2e5 	.word	0x0800d2e5
 800d25c:	0800d2e5 	.word	0x0800d2e5
 800d260:	0800d2e5 	.word	0x0800d2e5
 800d264:	0800d2e5 	.word	0x0800d2e5
 800d268:	0800d2e5 	.word	0x0800d2e5
 800d26c:	0800d2e5 	.word	0x0800d2e5
 800d270:	0800d2e5 	.word	0x0800d2e5
 800d274:	0800d2e5 	.word	0x0800d2e5
 800d278:	0800d2e5 	.word	0x0800d2e5
 800d27c:	0800d2e5 	.word	0x0800d2e5
 800d280:	0800d2e5 	.word	0x0800d2e5
 800d284:	0800d2e5 	.word	0x0800d2e5
 800d288:	0800d2e5 	.word	0x0800d2e5
 800d28c:	0800d2e5 	.word	0x0800d2e5
 800d290:	0800d2e5 	.word	0x0800d2e5
 800d294:	0800d2e5 	.word	0x0800d2e5
 800d298:	0800d2e5 	.word	0x0800d2e5
 800d29c:	0800d2e5 	.word	0x0800d2e5
 800d2a0:	0800d2e5 	.word	0x0800d2e5
 800d2a4:	0800d2e5 	.word	0x0800d2e5
 800d2a8:	0800d2e5 	.word	0x0800d2e5
 800d2ac:	0800d2e5 	.word	0x0800d2e5
 800d2b0:	0800d2e5 	.word	0x0800d2e5
 800d2b4:	0800d2e5 	.word	0x0800d2e5
 800d2b8:	0800d2e5 	.word	0x0800d2e5
 800d2bc:	0800d2e5 	.word	0x0800d2e5
 800d2c0:	0800d2e5 	.word	0x0800d2e5
 800d2c4:	0800d2e5 	.word	0x0800d2e5
 800d2c8:	0800d2e5 	.word	0x0800d2e5
 800d2cc:	0800d2e5 	.word	0x0800d2e5
 800d2d0:	0800d2e5 	.word	0x0800d2e5
 800d2d4:	0800d2e5 	.word	0x0800d2e5
 800d2d8:	0800d2e5 	.word	0x0800d2e5
 800d2dc:	0800d2e5 	.word	0x0800d2e5
 800d2e0:	0800d2e5 	.word	0x0800d2e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2e4:	bf00      	nop
  }

  return (USBD_OK);
 800d2e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	4805      	ldr	r0, [pc, #20]	; (800d318 <CDC_Receive_FS+0x24>)
 800d302:	f7fe fd46 	bl	800bd92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d306:	4804      	ldr	r0, [pc, #16]	; (800d318 <CDC_Receive_FS+0x24>)
 800d308:	f7fe fd8c 	bl	800be24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d30c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	200007c0 	.word	0x200007c0

0800d31c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	460b      	mov	r3, r1
 800d326:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d32c:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <CDC_Transmit_FS+0x48>)
 800d32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d332:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d33e:	2301      	movs	r3, #1
 800d340:	e00b      	b.n	800d35a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d342:	887b      	ldrh	r3, [r7, #2]
 800d344:	461a      	mov	r2, r3
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	4806      	ldr	r0, [pc, #24]	; (800d364 <CDC_Transmit_FS+0x48>)
 800d34a:	f7fe fd04 	bl	800bd56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d34e:	4805      	ldr	r0, [pc, #20]	; (800d364 <CDC_Transmit_FS+0x48>)
 800d350:	f7fe fd38 	bl	800bdc4 <USBD_CDC_TransmitPacket>
 800d354:	4603      	mov	r3, r0
 800d356:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d358:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	200007c0 	.word	0x200007c0

0800d368 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d368:	b480      	push	{r7}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	371c      	adds	r7, #28
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
	...

0800d38c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	4603      	mov	r3, r0
 800d394:	6039      	str	r1, [r7, #0]
 800d396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2212      	movs	r2, #18
 800d39c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d39e:	4b03      	ldr	r3, [pc, #12]	; (800d3ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	20000150 	.word	0x20000150

0800d3b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	6039      	str	r1, [r7, #0]
 800d3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	2204      	movs	r2, #4
 800d3c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d3c2:	4b03      	ldr	r3, [pc, #12]	; (800d3d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	20000170 	.word	0x20000170

0800d3d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	6039      	str	r1, [r7, #0]
 800d3de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d105      	bne.n	800d3f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	4907      	ldr	r1, [pc, #28]	; (800d408 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3ea:	4808      	ldr	r0, [pc, #32]	; (800d40c <USBD_FS_ProductStrDescriptor+0x38>)
 800d3ec:	f7ff fdf7 	bl	800cfde <USBD_GetString>
 800d3f0:	e004      	b.n	800d3fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	4904      	ldr	r1, [pc, #16]	; (800d408 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3f6:	4805      	ldr	r0, [pc, #20]	; (800d40c <USBD_FS_ProductStrDescriptor+0x38>)
 800d3f8:	f7ff fdf1 	bl	800cfde <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3fc:	4b02      	ldr	r3, [pc, #8]	; (800d408 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20001a90 	.word	0x20001a90
 800d40c:	080128c4 	.word	0x080128c4

0800d410 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	4603      	mov	r3, r0
 800d418:	6039      	str	r1, [r7, #0]
 800d41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d41c:	683a      	ldr	r2, [r7, #0]
 800d41e:	4904      	ldr	r1, [pc, #16]	; (800d430 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d420:	4804      	ldr	r0, [pc, #16]	; (800d434 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d422:	f7ff fddc 	bl	800cfde <USBD_GetString>
  return USBD_StrDesc;
 800d426:	4b02      	ldr	r3, [pc, #8]	; (800d430 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20001a90 	.word	0x20001a90
 800d434:	080128dc 	.word	0x080128dc

0800d438 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	4603      	mov	r3, r0
 800d440:	6039      	str	r1, [r7, #0]
 800d442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	221a      	movs	r2, #26
 800d448:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d44a:	f000 f855 	bl	800d4f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d44e:	4b02      	ldr	r3, [pc, #8]	; (800d458 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20000174 	.word	0x20000174

0800d45c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	4603      	mov	r3, r0
 800d464:	6039      	str	r1, [r7, #0]
 800d466:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d468:	79fb      	ldrb	r3, [r7, #7]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d105      	bne.n	800d47a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d46e:	683a      	ldr	r2, [r7, #0]
 800d470:	4907      	ldr	r1, [pc, #28]	; (800d490 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d472:	4808      	ldr	r0, [pc, #32]	; (800d494 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d474:	f7ff fdb3 	bl	800cfde <USBD_GetString>
 800d478:	e004      	b.n	800d484 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	4904      	ldr	r1, [pc, #16]	; (800d490 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d47e:	4805      	ldr	r0, [pc, #20]	; (800d494 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d480:	f7ff fdad 	bl	800cfde <USBD_GetString>
  }
  return USBD_StrDesc;
 800d484:	4b02      	ldr	r3, [pc, #8]	; (800d490 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d486:	4618      	mov	r0, r3
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	20001a90 	.word	0x20001a90
 800d494:	080128f0 	.word	0x080128f0

0800d498 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	4603      	mov	r3, r0
 800d4a0:	6039      	str	r1, [r7, #0]
 800d4a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d105      	bne.n	800d4b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	4907      	ldr	r1, [pc, #28]	; (800d4cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4ae:	4808      	ldr	r0, [pc, #32]	; (800d4d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4b0:	f7ff fd95 	bl	800cfde <USBD_GetString>
 800d4b4:	e004      	b.n	800d4c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	4904      	ldr	r1, [pc, #16]	; (800d4cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4ba:	4805      	ldr	r0, [pc, #20]	; (800d4d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4bc:	f7ff fd8f 	bl	800cfde <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20001a90 	.word	0x20001a90
 800d4d0:	080128fc 	.word	0x080128fc

0800d4d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	6039      	str	r1, [r7, #0]
 800d4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	220c      	movs	r2, #12
 800d4e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d4e6:	4b03      	ldr	r3, [pc, #12]	; (800d4f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr
 800d4f4:	20000164 	.word	0x20000164

0800d4f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d4fe:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <Get_SerialNum+0x44>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d504:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <Get_SerialNum+0x48>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d50a:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <Get_SerialNum+0x4c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4413      	add	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d009      	beq.n	800d532 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d51e:	2208      	movs	r2, #8
 800d520:	4909      	ldr	r1, [pc, #36]	; (800d548 <Get_SerialNum+0x50>)
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f000 f814 	bl	800d550 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d528:	2204      	movs	r2, #4
 800d52a:	4908      	ldr	r1, [pc, #32]	; (800d54c <Get_SerialNum+0x54>)
 800d52c:	68b8      	ldr	r0, [r7, #8]
 800d52e:	f000 f80f 	bl	800d550 <IntToUnicode>
  }
}
 800d532:	bf00      	nop
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	1fff7590 	.word	0x1fff7590
 800d540:	1fff7594 	.word	0x1fff7594
 800d544:	1fff7598 	.word	0x1fff7598
 800d548:	20000176 	.word	0x20000176
 800d54c:	20000186 	.word	0x20000186

0800d550 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d562:	2300      	movs	r3, #0
 800d564:	75fb      	strb	r3, [r7, #23]
 800d566:	e027      	b.n	800d5b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	0f1b      	lsrs	r3, r3, #28
 800d56c:	2b09      	cmp	r3, #9
 800d56e:	d80b      	bhi.n	800d588 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	0f1b      	lsrs	r3, r3, #28
 800d574:	b2da      	uxtb	r2, r3
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	4619      	mov	r1, r3
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	440b      	add	r3, r1
 800d580:	3230      	adds	r2, #48	; 0x30
 800d582:	b2d2      	uxtb	r2, r2
 800d584:	701a      	strb	r2, [r3, #0]
 800d586:	e00a      	b.n	800d59e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	0f1b      	lsrs	r3, r3, #28
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	4619      	mov	r1, r3
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	440b      	add	r3, r1
 800d598:	3237      	adds	r2, #55	; 0x37
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	011b      	lsls	r3, r3, #4
 800d5a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5b2:	7dfb      	ldrb	r3, [r7, #23]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	75fb      	strb	r3, [r7, #23]
 800d5b8:	7dfa      	ldrb	r2, [r7, #23]
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d3d3      	bcc.n	800d568 <IntToUnicode+0x18>
  }
}
 800d5c0:	bf00      	nop
 800d5c2:	bf00      	nop
 800d5c4:	371c      	adds	r7, #28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
	...

0800d5d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b0ae      	sub	sp, #184	; 0xb8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d5dc:	2200      	movs	r2, #0
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	605a      	str	r2, [r3, #4]
 800d5e2:	609a      	str	r2, [r3, #8]
 800d5e4:	60da      	str	r2, [r3, #12]
 800d5e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d5e8:	f107 0318 	add.w	r3, r7, #24
 800d5ec:	228c      	movs	r2, #140	; 0x8c
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 fc53 	bl	800de9c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5fe:	d163      	bne.n	800d6c8 <HAL_PCD_MspInit+0xf8>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d604:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d606:	2300      	movs	r3, #0
 800d608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d60c:	f107 0318 	add.w	r3, r7, #24
 800d610:	4618      	mov	r0, r3
 800d612:	f7fb fbb9 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d61c:	f7f5 fce7 	bl	8002fee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d620:	4b2b      	ldr	r3, [pc, #172]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d624:	4a2a      	ldr	r2, [pc, #168]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d626:	f043 0301 	orr.w	r3, r3, #1
 800d62a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d62c:	4b28      	ldr	r3, [pc, #160]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d62e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	617b      	str	r3, [r7, #20]
 800d636:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d638:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d63c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d640:	2302      	movs	r3, #2
 800d642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d646:	2300      	movs	r3, #0
 800d648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d64c:	2303      	movs	r3, #3
 800d64e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d652:	230a      	movs	r3, #10
 800d654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d658:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d65c:	4619      	mov	r1, r3
 800d65e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d662:	f7f7 faa9 	bl	8004bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d666:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d66a:	4a19      	ldr	r2, [pc, #100]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d66c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d670:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d672:	4b17      	ldr	r3, [pc, #92]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d67a:	613b      	str	r3, [r7, #16]
 800d67c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d67e:	4b14      	ldr	r3, [pc, #80]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d114      	bne.n	800d6b4 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d68a:	4b11      	ldr	r3, [pc, #68]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d68e:	4a10      	ldr	r2, [pc, #64]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d694:	6593      	str	r3, [r2, #88]	; 0x58
 800d696:	4b0e      	ldr	r3, [pc, #56]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d69a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d6a2:	f7fa fd09 	bl	80080b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6aa:	4a09      	ldr	r2, [pc, #36]	; (800d6d0 <HAL_PCD_MspInit+0x100>)
 800d6ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6b0:	6593      	str	r3, [r2, #88]	; 0x58
 800d6b2:	e001      	b.n	800d6b8 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d6b4:	f7fa fd00 	bl	80080b8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	2043      	movs	r0, #67	; 0x43
 800d6be:	f7f7 f80b 	bl	80046d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d6c2:	2043      	movs	r0, #67	; 0x43
 800d6c4:	f7f7 f824 	bl	8004710 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d6c8:	bf00      	nop
 800d6ca:	37b8      	adds	r7, #184	; 0xb8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	40021000 	.word	0x40021000

0800d6d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f7fe fc66 	bl	800bfbc <USBD_LL_SetupStage>
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d70a:	78fa      	ldrb	r2, [r7, #3]
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	4613      	mov	r3, r2
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	1a9b      	subs	r3, r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	440b      	add	r3, r1
 800d718:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	78fb      	ldrb	r3, [r7, #3]
 800d720:	4619      	mov	r1, r3
 800d722:	f7fe fca0 	bl	800c066 <USBD_LL_DataOutStage>
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	460b      	mov	r3, r1
 800d738:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d740:	78fa      	ldrb	r2, [r7, #3]
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	4613      	mov	r3, r2
 800d746:	00db      	lsls	r3, r3, #3
 800d748:	1a9b      	subs	r3, r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	440b      	add	r3, r1
 800d74e:	3348      	adds	r3, #72	; 0x48
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	78fb      	ldrb	r3, [r7, #3]
 800d754:	4619      	mov	r1, r3
 800d756:	f7fe fce9 	bl	800c12c <USBD_LL_DataInStage>
}
 800d75a:	bf00      	nop
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b082      	sub	sp, #8
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fdfd 	bl	800c370 <USBD_LL_SOF>
}
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b084      	sub	sp, #16
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d786:	2301      	movs	r3, #1
 800d788:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d001      	beq.n	800d796 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d792:	f7f5 fc2c 	bl	8002fee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d79c:	7bfa      	ldrb	r2, [r7, #15]
 800d79e:	4611      	mov	r1, r2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe fda7 	bl	800c2f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fd53 	bl	800c258 <USBD_LL_Reset>
}
 800d7b2:	bf00      	nop
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	6812      	ldr	r2, [r2, #0]
 800d7d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7d6:	f043 0301 	orr.w	r3, r3, #1
 800d7da:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7fe fd96 	bl	800c314 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d005      	beq.n	800d7fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7f0:	4b04      	ldr	r3, [pc, #16]	; (800d804 <HAL_PCD_SuspendCallback+0x48>)
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	4a03      	ldr	r2, [pc, #12]	; (800d804 <HAL_PCD_SuspendCallback+0x48>)
 800d7f6:	f043 0306 	orr.w	r3, r3, #6
 800d7fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	e000ed00 	.word	0xe000ed00

0800d808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d822:	f023 0301 	bic.w	r3, r3, #1
 800d826:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a1b      	ldr	r3, [r3, #32]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d007      	beq.n	800d840 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d830:	4b08      	ldr	r3, [pc, #32]	; (800d854 <HAL_PCD_ResumeCallback+0x4c>)
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	4a07      	ldr	r2, [pc, #28]	; (800d854 <HAL_PCD_ResumeCallback+0x4c>)
 800d836:	f023 0306 	bic.w	r3, r3, #6
 800d83a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d83c:	f000 faf6 	bl	800de2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fd7a 	bl	800c340 <USBD_LL_Resume>
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	e000ed00 	.word	0xe000ed00

0800d858 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d86a:	78fa      	ldrb	r2, [r7, #3]
 800d86c:	4611      	mov	r1, r2
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fdc6 	bl	800c400 <USBD_LL_IsoOUTIncomplete>
}
 800d874:	bf00      	nop
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d88e:	78fa      	ldrb	r2, [r7, #3]
 800d890:	4611      	mov	r1, r2
 800d892:	4618      	mov	r0, r3
 800d894:	f7fe fd8e 	bl	800c3b4 <USBD_LL_IsoINIncomplete>
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fdcc 	bl	800c44c <USBD_LL_DevConnected>
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fdc9 	bl	800c462 <USBD_LL_DevDisconnected>
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d13c      	bne.n	800d962 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d8e8:	4a20      	ldr	r2, [pc, #128]	; (800d96c <USBD_LL_Init+0x94>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a1e      	ldr	r2, [pc, #120]	; (800d96c <USBD_LL_Init+0x94>)
 800d8f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d8f8:	4b1c      	ldr	r3, [pc, #112]	; (800d96c <USBD_LL_Init+0x94>)
 800d8fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d8fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d900:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <USBD_LL_Init+0x94>)
 800d902:	2206      	movs	r2, #6
 800d904:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d906:	4b19      	ldr	r3, [pc, #100]	; (800d96c <USBD_LL_Init+0x94>)
 800d908:	2202      	movs	r2, #2
 800d90a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d90c:	4b17      	ldr	r3, [pc, #92]	; (800d96c <USBD_LL_Init+0x94>)
 800d90e:	2202      	movs	r2, #2
 800d910:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d912:	4b16      	ldr	r3, [pc, #88]	; (800d96c <USBD_LL_Init+0x94>)
 800d914:	2200      	movs	r2, #0
 800d916:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d918:	4b14      	ldr	r3, [pc, #80]	; (800d96c <USBD_LL_Init+0x94>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d91e:	4b13      	ldr	r3, [pc, #76]	; (800d96c <USBD_LL_Init+0x94>)
 800d920:	2200      	movs	r2, #0
 800d922:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d924:	4b11      	ldr	r3, [pc, #68]	; (800d96c <USBD_LL_Init+0x94>)
 800d926:	2200      	movs	r2, #0
 800d928:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d92a:	4b10      	ldr	r3, [pc, #64]	; (800d96c <USBD_LL_Init+0x94>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d930:	4b0e      	ldr	r3, [pc, #56]	; (800d96c <USBD_LL_Init+0x94>)
 800d932:	2200      	movs	r2, #0
 800d934:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d936:	480d      	ldr	r0, [pc, #52]	; (800d96c <USBD_LL_Init+0x94>)
 800d938:	f7f9 fab5 	bl	8006ea6 <HAL_PCD_Init>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d942:	f7f5 fb54 	bl	8002fee <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d946:	2180      	movs	r1, #128	; 0x80
 800d948:	4808      	ldr	r0, [pc, #32]	; (800d96c <USBD_LL_Init+0x94>)
 800d94a:	f7fa fb0c 	bl	8007f66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d94e:	2240      	movs	r2, #64	; 0x40
 800d950:	2100      	movs	r1, #0
 800d952:	4806      	ldr	r0, [pc, #24]	; (800d96c <USBD_LL_Init+0x94>)
 800d954:	f7fa fac0 	bl	8007ed8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d958:	2280      	movs	r2, #128	; 0x80
 800d95a:	2101      	movs	r1, #1
 800d95c:	4803      	ldr	r0, [pc, #12]	; (800d96c <USBD_LL_Init+0x94>)
 800d95e:	f7fa fabb 	bl	8007ed8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	20001c90 	.word	0x20001c90

0800d970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d986:	4618      	mov	r0, r3
 800d988:	f7f9 fbb1 	bl	80070ee <HAL_PCD_Start>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b03      	cmp	r3, #3
 800d994:	d816      	bhi.n	800d9c4 <USBD_LL_Start+0x54>
 800d996:	a201      	add	r2, pc, #4	; (adr r2, 800d99c <USBD_LL_Start+0x2c>)
 800d998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99c:	0800d9ad 	.word	0x0800d9ad
 800d9a0:	0800d9b3 	.word	0x0800d9b3
 800d9a4:	0800d9b9 	.word	0x0800d9b9
 800d9a8:	0800d9bf 	.word	0x0800d9bf
    case HAL_OK :
      usb_status = USBD_OK;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b0:	e00b      	b.n	800d9ca <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b6:	e008      	b.n	800d9ca <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d9bc:	e005      	b.n	800d9ca <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9be:	2303      	movs	r3, #3
 800d9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c2:	e002      	b.n	800d9ca <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c8:	bf00      	nop
  }
  return usb_status;
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	4608      	mov	r0, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	70fb      	strb	r3, [r7, #3]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70bb      	strb	r3, [r7, #2]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d9fc:	78bb      	ldrb	r3, [r7, #2]
 800d9fe:	883a      	ldrh	r2, [r7, #0]
 800da00:	78f9      	ldrb	r1, [r7, #3]
 800da02:	f7f9 ff61 	bl	80078c8 <HAL_PCD_EP_Open>
 800da06:	4603      	mov	r3, r0
 800da08:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	d817      	bhi.n	800da40 <USBD_LL_OpenEP+0x6c>
 800da10:	a201      	add	r2, pc, #4	; (adr r2, 800da18 <USBD_LL_OpenEP+0x44>)
 800da12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da16:	bf00      	nop
 800da18:	0800da29 	.word	0x0800da29
 800da1c:	0800da2f 	.word	0x0800da2f
 800da20:	0800da35 	.word	0x0800da35
 800da24:	0800da3b 	.word	0x0800da3b
    case HAL_OK :
      usb_status = USBD_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	73fb      	strb	r3, [r7, #15]
    break;
 800da2c:	e00b      	b.n	800da46 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da2e:	2303      	movs	r3, #3
 800da30:	73fb      	strb	r3, [r7, #15]
    break;
 800da32:	e008      	b.n	800da46 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da34:	2301      	movs	r3, #1
 800da36:	73fb      	strb	r3, [r7, #15]
    break;
 800da38:	e005      	b.n	800da46 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da3a:	2303      	movs	r3, #3
 800da3c:	73fb      	strb	r3, [r7, #15]
    break;
 800da3e:	e002      	b.n	800da46 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800da40:	2303      	movs	r3, #3
 800da42:	73fb      	strb	r3, [r7, #15]
    break;
 800da44:	bf00      	nop
  }
  return usb_status;
 800da46:	7bfb      	ldrb	r3, [r7, #15]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da6a:	78fa      	ldrb	r2, [r7, #3]
 800da6c:	4611      	mov	r1, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f7f9 ff92 	bl	8007998 <HAL_PCD_EP_Close>
 800da74:	4603      	mov	r3, r0
 800da76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da78:	7bbb      	ldrb	r3, [r7, #14]
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d816      	bhi.n	800daac <USBD_LL_CloseEP+0x5c>
 800da7e:	a201      	add	r2, pc, #4	; (adr r2, 800da84 <USBD_LL_CloseEP+0x34>)
 800da80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da84:	0800da95 	.word	0x0800da95
 800da88:	0800da9b 	.word	0x0800da9b
 800da8c:	0800daa1 	.word	0x0800daa1
 800da90:	0800daa7 	.word	0x0800daa7
    case HAL_OK :
      usb_status = USBD_OK;
 800da94:	2300      	movs	r3, #0
 800da96:	73fb      	strb	r3, [r7, #15]
    break;
 800da98:	e00b      	b.n	800dab2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da9a:	2303      	movs	r3, #3
 800da9c:	73fb      	strb	r3, [r7, #15]
    break;
 800da9e:	e008      	b.n	800dab2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800daa0:	2301      	movs	r3, #1
 800daa2:	73fb      	strb	r3, [r7, #15]
    break;
 800daa4:	e005      	b.n	800dab2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daa6:	2303      	movs	r3, #3
 800daa8:	73fb      	strb	r3, [r7, #15]
    break;
 800daaa:	e002      	b.n	800dab2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800daac:	2303      	movs	r3, #3
 800daae:	73fb      	strb	r3, [r7, #15]
    break;
 800dab0:	bf00      	nop
  }
  return usb_status;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dad6:	78fa      	ldrb	r2, [r7, #3]
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fa f839 	bl	8007b52 <HAL_PCD_EP_SetStall>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dae4:	7bbb      	ldrb	r3, [r7, #14]
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d816      	bhi.n	800db18 <USBD_LL_StallEP+0x5c>
 800daea:	a201      	add	r2, pc, #4	; (adr r2, 800daf0 <USBD_LL_StallEP+0x34>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db07 	.word	0x0800db07
 800daf8:	0800db0d 	.word	0x0800db0d
 800dafc:	0800db13 	.word	0x0800db13
    case HAL_OK :
      usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	73fb      	strb	r3, [r7, #15]
    break;
 800db04:	e00b      	b.n	800db1e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	73fb      	strb	r3, [r7, #15]
    break;
 800db0a:	e008      	b.n	800db1e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db0c:	2301      	movs	r3, #1
 800db0e:	73fb      	strb	r3, [r7, #15]
    break;
 800db10:	e005      	b.n	800db1e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db12:	2303      	movs	r3, #3
 800db14:	73fb      	strb	r3, [r7, #15]
    break;
 800db16:	e002      	b.n	800db1e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800db18:	2303      	movs	r3, #3
 800db1a:	73fb      	strb	r3, [r7, #15]
    break;
 800db1c:	bf00      	nop
  }
  return usb_status;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	4611      	mov	r1, r2
 800db46:	4618      	mov	r0, r3
 800db48:	f7fa f865 	bl	8007c16 <HAL_PCD_EP_ClrStall>
 800db4c:	4603      	mov	r3, r0
 800db4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	2b03      	cmp	r3, #3
 800db54:	d816      	bhi.n	800db84 <USBD_LL_ClearStallEP+0x5c>
 800db56:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <USBD_LL_ClearStallEP+0x34>)
 800db58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5c:	0800db6d 	.word	0x0800db6d
 800db60:	0800db73 	.word	0x0800db73
 800db64:	0800db79 	.word	0x0800db79
 800db68:	0800db7f 	.word	0x0800db7f
    case HAL_OK :
      usb_status = USBD_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	73fb      	strb	r3, [r7, #15]
    break;
 800db70:	e00b      	b.n	800db8a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db72:	2303      	movs	r3, #3
 800db74:	73fb      	strb	r3, [r7, #15]
    break;
 800db76:	e008      	b.n	800db8a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db78:	2301      	movs	r3, #1
 800db7a:	73fb      	strb	r3, [r7, #15]
    break;
 800db7c:	e005      	b.n	800db8a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db7e:	2303      	movs	r3, #3
 800db80:	73fb      	strb	r3, [r7, #15]
    break;
 800db82:	e002      	b.n	800db8a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800db84:	2303      	movs	r3, #3
 800db86:	73fb      	strb	r3, [r7, #15]
    break;
 800db88:	bf00      	nop
  }
  return usb_status;
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dba6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	da0b      	bge.n	800dbc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbb6:	68f9      	ldr	r1, [r7, #12]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	440b      	add	r3, r1
 800dbc2:	333e      	adds	r3, #62	; 0x3e
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	e00b      	b.n	800dbe0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbce:	68f9      	ldr	r1, [r7, #12]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	1a9b      	subs	r3, r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbde:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc06:	78fa      	ldrb	r2, [r7, #3]
 800dc08:	4611      	mov	r1, r2
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7f9 fe37 	bl	800787e <HAL_PCD_SetAddress>
 800dc10:	4603      	mov	r3, r0
 800dc12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d816      	bhi.n	800dc48 <USBD_LL_SetUSBAddress+0x5c>
 800dc1a:	a201      	add	r2, pc, #4	; (adr r2, 800dc20 <USBD_LL_SetUSBAddress+0x34>)
 800dc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc20:	0800dc31 	.word	0x0800dc31
 800dc24:	0800dc37 	.word	0x0800dc37
 800dc28:	0800dc3d 	.word	0x0800dc3d
 800dc2c:	0800dc43 	.word	0x0800dc43
    case HAL_OK :
      usb_status = USBD_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73fb      	strb	r3, [r7, #15]
    break;
 800dc34:	e00b      	b.n	800dc4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc36:	2303      	movs	r3, #3
 800dc38:	73fb      	strb	r3, [r7, #15]
    break;
 800dc3a:	e008      	b.n	800dc4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc40:	e005      	b.n	800dc4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc42:	2303      	movs	r3, #3
 800dc44:	73fb      	strb	r3, [r7, #15]
    break;
 800dc46:	e002      	b.n	800dc4e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc4c:	bf00      	nop
  }
  return usb_status;
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	607a      	str	r2, [r7, #4]
 800dc62:	603b      	str	r3, [r7, #0]
 800dc64:	460b      	mov	r3, r1
 800dc66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc76:	7af9      	ldrb	r1, [r7, #11]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	f7f9 ff2c 	bl	8007ad8 <HAL_PCD_EP_Transmit>
 800dc80:	4603      	mov	r3, r0
 800dc82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dc84:	7dbb      	ldrb	r3, [r7, #22]
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d816      	bhi.n	800dcb8 <USBD_LL_Transmit+0x60>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <USBD_LL_Transmit+0x38>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca1 	.word	0x0800dca1
 800dc94:	0800dca7 	.word	0x0800dca7
 800dc98:	0800dcad 	.word	0x0800dcad
 800dc9c:	0800dcb3 	.word	0x0800dcb3
    case HAL_OK :
      usb_status = USBD_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	75fb      	strb	r3, [r7, #23]
    break;
 800dca4:	e00b      	b.n	800dcbe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dca6:	2303      	movs	r3, #3
 800dca8:	75fb      	strb	r3, [r7, #23]
    break;
 800dcaa:	e008      	b.n	800dcbe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcac:	2301      	movs	r3, #1
 800dcae:	75fb      	strb	r3, [r7, #23]
    break;
 800dcb0:	e005      	b.n	800dcbe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	75fb      	strb	r3, [r7, #23]
    break;
 800dcb6:	e002      	b.n	800dcbe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	75fb      	strb	r3, [r7, #23]
    break;
 800dcbc:	bf00      	nop
  }
  return usb_status;
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	607a      	str	r2, [r7, #4]
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dce6:	7af9      	ldrb	r1, [r7, #11]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	f7f9 fe9e 	bl	8007a2c <HAL_PCD_EP_Receive>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dcf4:	7dbb      	ldrb	r3, [r7, #22]
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d816      	bhi.n	800dd28 <USBD_LL_PrepareReceive+0x60>
 800dcfa:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <USBD_LL_PrepareReceive+0x38>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd11 	.word	0x0800dd11
 800dd04:	0800dd17 	.word	0x0800dd17
 800dd08:	0800dd1d 	.word	0x0800dd1d
 800dd0c:	0800dd23 	.word	0x0800dd23
    case HAL_OK :
      usb_status = USBD_OK;
 800dd10:	2300      	movs	r3, #0
 800dd12:	75fb      	strb	r3, [r7, #23]
    break;
 800dd14:	e00b      	b.n	800dd2e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd16:	2303      	movs	r3, #3
 800dd18:	75fb      	strb	r3, [r7, #23]
    break;
 800dd1a:	e008      	b.n	800dd2e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	75fb      	strb	r3, [r7, #23]
    break;
 800dd20:	e005      	b.n	800dd2e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd22:	2303      	movs	r3, #3
 800dd24:	75fb      	strb	r3, [r7, #23]
    break;
 800dd26:	e002      	b.n	800dd2e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	75fb      	strb	r3, [r7, #23]
    break;
 800dd2c:	bf00      	nop
  }
  return usb_status;
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	460b      	mov	r3, r1
 800dd42:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd4a:	78fa      	ldrb	r2, [r7, #3]
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7f9 feaa 	bl	8007aa8 <HAL_PCD_EP_GetRxCount>
 800dd54:	4603      	mov	r3, r0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
	...

0800dd60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dd6c:	78fb      	ldrb	r3, [r7, #3]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <HAL_PCDEx_LPM_Callback+0x18>
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d01f      	beq.n	800ddb6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dd76:	e03b      	b.n	800ddf0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d007      	beq.n	800dd90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd80:	f000 f854 	bl	800de2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd84:	4b1c      	ldr	r3, [pc, #112]	; (800ddf8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	4a1b      	ldr	r2, [pc, #108]	; (800ddf8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dd8a:	f023 0306 	bic.w	r3, r3, #6
 800dd8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	6812      	ldr	r2, [r2, #0]
 800dd9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dda2:	f023 0301 	bic.w	r3, r3, #1
 800dda6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fac6 	bl	800c340 <USBD_LL_Resume>
    break;
 800ddb4:	e01c      	b.n	800ddf0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	6812      	ldr	r2, [r2, #0]
 800ddc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fa9d 	bl	800c314 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d005      	beq.n	800ddee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dde2:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	4a04      	ldr	r2, [pc, #16]	; (800ddf8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dde8:	f043 0306 	orr.w	r3, r3, #6
 800ddec:	6113      	str	r3, [r2, #16]
    break;
 800ddee:	bf00      	nop
}
 800ddf0:	bf00      	nop
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	e000ed00 	.word	0xe000ed00

0800ddfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800de04:	4b03      	ldr	r3, [pc, #12]	; (800de14 <USBD_static_malloc+0x18>)
}
 800de06:	4618      	mov	r0, r3
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	20000390 	.word	0x20000390

0800de18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]

}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800de30:	f7f5 f86c 	bl	8002f0c <SystemClock_Config>
}
 800de34:	bf00      	nop
 800de36:	bd80      	pop	{r7, pc}

0800de38 <__errno>:
 800de38:	4b01      	ldr	r3, [pc, #4]	; (800de40 <__errno+0x8>)
 800de3a:	6818      	ldr	r0, [r3, #0]
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	20000190 	.word	0x20000190

0800de44 <__libc_init_array>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	4d0d      	ldr	r5, [pc, #52]	; (800de7c <__libc_init_array+0x38>)
 800de48:	4c0d      	ldr	r4, [pc, #52]	; (800de80 <__libc_init_array+0x3c>)
 800de4a:	1b64      	subs	r4, r4, r5
 800de4c:	10a4      	asrs	r4, r4, #2
 800de4e:	2600      	movs	r6, #0
 800de50:	42a6      	cmp	r6, r4
 800de52:	d109      	bne.n	800de68 <__libc_init_array+0x24>
 800de54:	4d0b      	ldr	r5, [pc, #44]	; (800de84 <__libc_init_array+0x40>)
 800de56:	4c0c      	ldr	r4, [pc, #48]	; (800de88 <__libc_init_array+0x44>)
 800de58:	f004 fc5c 	bl	8012714 <_init>
 800de5c:	1b64      	subs	r4, r4, r5
 800de5e:	10a4      	asrs	r4, r4, #2
 800de60:	2600      	movs	r6, #0
 800de62:	42a6      	cmp	r6, r4
 800de64:	d105      	bne.n	800de72 <__libc_init_array+0x2e>
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	f855 3b04 	ldr.w	r3, [r5], #4
 800de6c:	4798      	blx	r3
 800de6e:	3601      	adds	r6, #1
 800de70:	e7ee      	b.n	800de50 <__libc_init_array+0xc>
 800de72:	f855 3b04 	ldr.w	r3, [r5], #4
 800de76:	4798      	blx	r3
 800de78:	3601      	adds	r6, #1
 800de7a:	e7f2      	b.n	800de62 <__libc_init_array+0x1e>
 800de7c:	0801331c 	.word	0x0801331c
 800de80:	0801331c 	.word	0x0801331c
 800de84:	0801331c 	.word	0x0801331c
 800de88:	08013320 	.word	0x08013320

0800de8c <malloc>:
 800de8c:	4b02      	ldr	r3, [pc, #8]	; (800de98 <malloc+0xc>)
 800de8e:	4601      	mov	r1, r0
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	f000 b85b 	b.w	800df4c <_malloc_r>
 800de96:	bf00      	nop
 800de98:	20000190 	.word	0x20000190

0800de9c <memset>:
 800de9c:	4402      	add	r2, r0
 800de9e:	4603      	mov	r3, r0
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d100      	bne.n	800dea6 <memset+0xa>
 800dea4:	4770      	bx	lr
 800dea6:	f803 1b01 	strb.w	r1, [r3], #1
 800deaa:	e7f9      	b.n	800dea0 <memset+0x4>

0800deac <_free_r>:
 800deac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deae:	2900      	cmp	r1, #0
 800deb0:	d048      	beq.n	800df44 <_free_r+0x98>
 800deb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deb6:	9001      	str	r0, [sp, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f1a1 0404 	sub.w	r4, r1, #4
 800debe:	bfb8      	it	lt
 800dec0:	18e4      	addlt	r4, r4, r3
 800dec2:	f003 f91d 	bl	8011100 <__malloc_lock>
 800dec6:	4a20      	ldr	r2, [pc, #128]	; (800df48 <_free_r+0x9c>)
 800dec8:	9801      	ldr	r0, [sp, #4]
 800deca:	6813      	ldr	r3, [r2, #0]
 800decc:	4615      	mov	r5, r2
 800dece:	b933      	cbnz	r3, 800dede <_free_r+0x32>
 800ded0:	6063      	str	r3, [r4, #4]
 800ded2:	6014      	str	r4, [r2, #0]
 800ded4:	b003      	add	sp, #12
 800ded6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800deda:	f003 b917 	b.w	801110c <__malloc_unlock>
 800dede:	42a3      	cmp	r3, r4
 800dee0:	d90b      	bls.n	800defa <_free_r+0x4e>
 800dee2:	6821      	ldr	r1, [r4, #0]
 800dee4:	1862      	adds	r2, r4, r1
 800dee6:	4293      	cmp	r3, r2
 800dee8:	bf04      	itt	eq
 800deea:	681a      	ldreq	r2, [r3, #0]
 800deec:	685b      	ldreq	r3, [r3, #4]
 800deee:	6063      	str	r3, [r4, #4]
 800def0:	bf04      	itt	eq
 800def2:	1852      	addeq	r2, r2, r1
 800def4:	6022      	streq	r2, [r4, #0]
 800def6:	602c      	str	r4, [r5, #0]
 800def8:	e7ec      	b.n	800ded4 <_free_r+0x28>
 800defa:	461a      	mov	r2, r3
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	b10b      	cbz	r3, 800df04 <_free_r+0x58>
 800df00:	42a3      	cmp	r3, r4
 800df02:	d9fa      	bls.n	800defa <_free_r+0x4e>
 800df04:	6811      	ldr	r1, [r2, #0]
 800df06:	1855      	adds	r5, r2, r1
 800df08:	42a5      	cmp	r5, r4
 800df0a:	d10b      	bne.n	800df24 <_free_r+0x78>
 800df0c:	6824      	ldr	r4, [r4, #0]
 800df0e:	4421      	add	r1, r4
 800df10:	1854      	adds	r4, r2, r1
 800df12:	42a3      	cmp	r3, r4
 800df14:	6011      	str	r1, [r2, #0]
 800df16:	d1dd      	bne.n	800ded4 <_free_r+0x28>
 800df18:	681c      	ldr	r4, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	6053      	str	r3, [r2, #4]
 800df1e:	4421      	add	r1, r4
 800df20:	6011      	str	r1, [r2, #0]
 800df22:	e7d7      	b.n	800ded4 <_free_r+0x28>
 800df24:	d902      	bls.n	800df2c <_free_r+0x80>
 800df26:	230c      	movs	r3, #12
 800df28:	6003      	str	r3, [r0, #0]
 800df2a:	e7d3      	b.n	800ded4 <_free_r+0x28>
 800df2c:	6825      	ldr	r5, [r4, #0]
 800df2e:	1961      	adds	r1, r4, r5
 800df30:	428b      	cmp	r3, r1
 800df32:	bf04      	itt	eq
 800df34:	6819      	ldreq	r1, [r3, #0]
 800df36:	685b      	ldreq	r3, [r3, #4]
 800df38:	6063      	str	r3, [r4, #4]
 800df3a:	bf04      	itt	eq
 800df3c:	1949      	addeq	r1, r1, r5
 800df3e:	6021      	streq	r1, [r4, #0]
 800df40:	6054      	str	r4, [r2, #4]
 800df42:	e7c7      	b.n	800ded4 <_free_r+0x28>
 800df44:	b003      	add	sp, #12
 800df46:	bd30      	pop	{r4, r5, pc}
 800df48:	200005b0 	.word	0x200005b0

0800df4c <_malloc_r>:
 800df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4e:	1ccd      	adds	r5, r1, #3
 800df50:	f025 0503 	bic.w	r5, r5, #3
 800df54:	3508      	adds	r5, #8
 800df56:	2d0c      	cmp	r5, #12
 800df58:	bf38      	it	cc
 800df5a:	250c      	movcc	r5, #12
 800df5c:	2d00      	cmp	r5, #0
 800df5e:	4606      	mov	r6, r0
 800df60:	db01      	blt.n	800df66 <_malloc_r+0x1a>
 800df62:	42a9      	cmp	r1, r5
 800df64:	d903      	bls.n	800df6e <_malloc_r+0x22>
 800df66:	230c      	movs	r3, #12
 800df68:	6033      	str	r3, [r6, #0]
 800df6a:	2000      	movs	r0, #0
 800df6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df6e:	f003 f8c7 	bl	8011100 <__malloc_lock>
 800df72:	4921      	ldr	r1, [pc, #132]	; (800dff8 <_malloc_r+0xac>)
 800df74:	680a      	ldr	r2, [r1, #0]
 800df76:	4614      	mov	r4, r2
 800df78:	b99c      	cbnz	r4, 800dfa2 <_malloc_r+0x56>
 800df7a:	4f20      	ldr	r7, [pc, #128]	; (800dffc <_malloc_r+0xb0>)
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	b923      	cbnz	r3, 800df8a <_malloc_r+0x3e>
 800df80:	4621      	mov	r1, r4
 800df82:	4630      	mov	r0, r6
 800df84:	f000 fece 	bl	800ed24 <_sbrk_r>
 800df88:	6038      	str	r0, [r7, #0]
 800df8a:	4629      	mov	r1, r5
 800df8c:	4630      	mov	r0, r6
 800df8e:	f000 fec9 	bl	800ed24 <_sbrk_r>
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	d123      	bne.n	800dfde <_malloc_r+0x92>
 800df96:	230c      	movs	r3, #12
 800df98:	6033      	str	r3, [r6, #0]
 800df9a:	4630      	mov	r0, r6
 800df9c:	f003 f8b6 	bl	801110c <__malloc_unlock>
 800dfa0:	e7e3      	b.n	800df6a <_malloc_r+0x1e>
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	1b5b      	subs	r3, r3, r5
 800dfa6:	d417      	bmi.n	800dfd8 <_malloc_r+0x8c>
 800dfa8:	2b0b      	cmp	r3, #11
 800dfaa:	d903      	bls.n	800dfb4 <_malloc_r+0x68>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	441c      	add	r4, r3
 800dfb0:	6025      	str	r5, [r4, #0]
 800dfb2:	e004      	b.n	800dfbe <_malloc_r+0x72>
 800dfb4:	6863      	ldr	r3, [r4, #4]
 800dfb6:	42a2      	cmp	r2, r4
 800dfb8:	bf0c      	ite	eq
 800dfba:	600b      	streq	r3, [r1, #0]
 800dfbc:	6053      	strne	r3, [r2, #4]
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	f003 f8a4 	bl	801110c <__malloc_unlock>
 800dfc4:	f104 000b 	add.w	r0, r4, #11
 800dfc8:	1d23      	adds	r3, r4, #4
 800dfca:	f020 0007 	bic.w	r0, r0, #7
 800dfce:	1ac2      	subs	r2, r0, r3
 800dfd0:	d0cc      	beq.n	800df6c <_malloc_r+0x20>
 800dfd2:	1a1b      	subs	r3, r3, r0
 800dfd4:	50a3      	str	r3, [r4, r2]
 800dfd6:	e7c9      	b.n	800df6c <_malloc_r+0x20>
 800dfd8:	4622      	mov	r2, r4
 800dfda:	6864      	ldr	r4, [r4, #4]
 800dfdc:	e7cc      	b.n	800df78 <_malloc_r+0x2c>
 800dfde:	1cc4      	adds	r4, r0, #3
 800dfe0:	f024 0403 	bic.w	r4, r4, #3
 800dfe4:	42a0      	cmp	r0, r4
 800dfe6:	d0e3      	beq.n	800dfb0 <_malloc_r+0x64>
 800dfe8:	1a21      	subs	r1, r4, r0
 800dfea:	4630      	mov	r0, r6
 800dfec:	f000 fe9a 	bl	800ed24 <_sbrk_r>
 800dff0:	3001      	adds	r0, #1
 800dff2:	d1dd      	bne.n	800dfb0 <_malloc_r+0x64>
 800dff4:	e7cf      	b.n	800df96 <_malloc_r+0x4a>
 800dff6:	bf00      	nop
 800dff8:	200005b0 	.word	0x200005b0
 800dffc:	200005b4 	.word	0x200005b4

0800e000 <__cvt>:
 800e000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e004:	ec55 4b10 	vmov	r4, r5, d0
 800e008:	2d00      	cmp	r5, #0
 800e00a:	460e      	mov	r6, r1
 800e00c:	4619      	mov	r1, r3
 800e00e:	462b      	mov	r3, r5
 800e010:	bfbb      	ittet	lt
 800e012:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e016:	461d      	movlt	r5, r3
 800e018:	2300      	movge	r3, #0
 800e01a:	232d      	movlt	r3, #45	; 0x2d
 800e01c:	700b      	strb	r3, [r1, #0]
 800e01e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e020:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e024:	4691      	mov	r9, r2
 800e026:	f023 0820 	bic.w	r8, r3, #32
 800e02a:	bfbc      	itt	lt
 800e02c:	4622      	movlt	r2, r4
 800e02e:	4614      	movlt	r4, r2
 800e030:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e034:	d005      	beq.n	800e042 <__cvt+0x42>
 800e036:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e03a:	d100      	bne.n	800e03e <__cvt+0x3e>
 800e03c:	3601      	adds	r6, #1
 800e03e:	2102      	movs	r1, #2
 800e040:	e000      	b.n	800e044 <__cvt+0x44>
 800e042:	2103      	movs	r1, #3
 800e044:	ab03      	add	r3, sp, #12
 800e046:	9301      	str	r3, [sp, #4]
 800e048:	ab02      	add	r3, sp, #8
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	ec45 4b10 	vmov	d0, r4, r5
 800e050:	4653      	mov	r3, sl
 800e052:	4632      	mov	r2, r6
 800e054:	f001 fddc 	bl	800fc10 <_dtoa_r>
 800e058:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e05c:	4607      	mov	r7, r0
 800e05e:	d102      	bne.n	800e066 <__cvt+0x66>
 800e060:	f019 0f01 	tst.w	r9, #1
 800e064:	d022      	beq.n	800e0ac <__cvt+0xac>
 800e066:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e06a:	eb07 0906 	add.w	r9, r7, r6
 800e06e:	d110      	bne.n	800e092 <__cvt+0x92>
 800e070:	783b      	ldrb	r3, [r7, #0]
 800e072:	2b30      	cmp	r3, #48	; 0x30
 800e074:	d10a      	bne.n	800e08c <__cvt+0x8c>
 800e076:	2200      	movs	r2, #0
 800e078:	2300      	movs	r3, #0
 800e07a:	4620      	mov	r0, r4
 800e07c:	4629      	mov	r1, r5
 800e07e:	f7f2 fd33 	bl	8000ae8 <__aeabi_dcmpeq>
 800e082:	b918      	cbnz	r0, 800e08c <__cvt+0x8c>
 800e084:	f1c6 0601 	rsb	r6, r6, #1
 800e088:	f8ca 6000 	str.w	r6, [sl]
 800e08c:	f8da 3000 	ldr.w	r3, [sl]
 800e090:	4499      	add	r9, r3
 800e092:	2200      	movs	r2, #0
 800e094:	2300      	movs	r3, #0
 800e096:	4620      	mov	r0, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	f7f2 fd25 	bl	8000ae8 <__aeabi_dcmpeq>
 800e09e:	b108      	cbz	r0, 800e0a4 <__cvt+0xa4>
 800e0a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0a4:	2230      	movs	r2, #48	; 0x30
 800e0a6:	9b03      	ldr	r3, [sp, #12]
 800e0a8:	454b      	cmp	r3, r9
 800e0aa:	d307      	bcc.n	800e0bc <__cvt+0xbc>
 800e0ac:	9b03      	ldr	r3, [sp, #12]
 800e0ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0b0:	1bdb      	subs	r3, r3, r7
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	6013      	str	r3, [r2, #0]
 800e0b6:	b004      	add	sp, #16
 800e0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0bc:	1c59      	adds	r1, r3, #1
 800e0be:	9103      	str	r1, [sp, #12]
 800e0c0:	701a      	strb	r2, [r3, #0]
 800e0c2:	e7f0      	b.n	800e0a6 <__cvt+0xa6>

0800e0c4 <__exponent>:
 800e0c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2900      	cmp	r1, #0
 800e0ca:	bfb8      	it	lt
 800e0cc:	4249      	neglt	r1, r1
 800e0ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e0d2:	bfb4      	ite	lt
 800e0d4:	222d      	movlt	r2, #45	; 0x2d
 800e0d6:	222b      	movge	r2, #43	; 0x2b
 800e0d8:	2909      	cmp	r1, #9
 800e0da:	7042      	strb	r2, [r0, #1]
 800e0dc:	dd2a      	ble.n	800e134 <__exponent+0x70>
 800e0de:	f10d 0407 	add.w	r4, sp, #7
 800e0e2:	46a4      	mov	ip, r4
 800e0e4:	270a      	movs	r7, #10
 800e0e6:	46a6      	mov	lr, r4
 800e0e8:	460a      	mov	r2, r1
 800e0ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800e0ee:	fb07 1516 	mls	r5, r7, r6, r1
 800e0f2:	3530      	adds	r5, #48	; 0x30
 800e0f4:	2a63      	cmp	r2, #99	; 0x63
 800e0f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e0fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e0fe:	4631      	mov	r1, r6
 800e100:	dcf1      	bgt.n	800e0e6 <__exponent+0x22>
 800e102:	3130      	adds	r1, #48	; 0x30
 800e104:	f1ae 0502 	sub.w	r5, lr, #2
 800e108:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e10c:	1c44      	adds	r4, r0, #1
 800e10e:	4629      	mov	r1, r5
 800e110:	4561      	cmp	r1, ip
 800e112:	d30a      	bcc.n	800e12a <__exponent+0x66>
 800e114:	f10d 0209 	add.w	r2, sp, #9
 800e118:	eba2 020e 	sub.w	r2, r2, lr
 800e11c:	4565      	cmp	r5, ip
 800e11e:	bf88      	it	hi
 800e120:	2200      	movhi	r2, #0
 800e122:	4413      	add	r3, r2
 800e124:	1a18      	subs	r0, r3, r0
 800e126:	b003      	add	sp, #12
 800e128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e12e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e132:	e7ed      	b.n	800e110 <__exponent+0x4c>
 800e134:	2330      	movs	r3, #48	; 0x30
 800e136:	3130      	adds	r1, #48	; 0x30
 800e138:	7083      	strb	r3, [r0, #2]
 800e13a:	70c1      	strb	r1, [r0, #3]
 800e13c:	1d03      	adds	r3, r0, #4
 800e13e:	e7f1      	b.n	800e124 <__exponent+0x60>

0800e140 <_printf_float>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	ed2d 8b02 	vpush	{d8}
 800e148:	b08d      	sub	sp, #52	; 0x34
 800e14a:	460c      	mov	r4, r1
 800e14c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e150:	4616      	mov	r6, r2
 800e152:	461f      	mov	r7, r3
 800e154:	4605      	mov	r5, r0
 800e156:	f002 ffab 	bl	80110b0 <_localeconv_r>
 800e15a:	f8d0 a000 	ldr.w	sl, [r0]
 800e15e:	4650      	mov	r0, sl
 800e160:	f7f2 f846 	bl	80001f0 <strlen>
 800e164:	2300      	movs	r3, #0
 800e166:	930a      	str	r3, [sp, #40]	; 0x28
 800e168:	6823      	ldr	r3, [r4, #0]
 800e16a:	9305      	str	r3, [sp, #20]
 800e16c:	f8d8 3000 	ldr.w	r3, [r8]
 800e170:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e174:	3307      	adds	r3, #7
 800e176:	f023 0307 	bic.w	r3, r3, #7
 800e17a:	f103 0208 	add.w	r2, r3, #8
 800e17e:	f8c8 2000 	str.w	r2, [r8]
 800e182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e186:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e18a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e18e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e192:	9307      	str	r3, [sp, #28]
 800e194:	f8cd 8018 	str.w	r8, [sp, #24]
 800e198:	ee08 0a10 	vmov	s16, r0
 800e19c:	4b9f      	ldr	r3, [pc, #636]	; (800e41c <_printf_float+0x2dc>)
 800e19e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a6:	f7f2 fcd1 	bl	8000b4c <__aeabi_dcmpun>
 800e1aa:	bb88      	cbnz	r0, 800e210 <_printf_float+0xd0>
 800e1ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1b0:	4b9a      	ldr	r3, [pc, #616]	; (800e41c <_printf_float+0x2dc>)
 800e1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b6:	f7f2 fcab 	bl	8000b10 <__aeabi_dcmple>
 800e1ba:	bb48      	cbnz	r0, 800e210 <_printf_float+0xd0>
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2300      	movs	r3, #0
 800e1c0:	4640      	mov	r0, r8
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	f7f2 fc9a 	bl	8000afc <__aeabi_dcmplt>
 800e1c8:	b110      	cbz	r0, 800e1d0 <_printf_float+0x90>
 800e1ca:	232d      	movs	r3, #45	; 0x2d
 800e1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1d0:	4b93      	ldr	r3, [pc, #588]	; (800e420 <_printf_float+0x2e0>)
 800e1d2:	4894      	ldr	r0, [pc, #592]	; (800e424 <_printf_float+0x2e4>)
 800e1d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e1d8:	bf94      	ite	ls
 800e1da:	4698      	movls	r8, r3
 800e1dc:	4680      	movhi	r8, r0
 800e1de:	2303      	movs	r3, #3
 800e1e0:	6123      	str	r3, [r4, #16]
 800e1e2:	9b05      	ldr	r3, [sp, #20]
 800e1e4:	f023 0204 	bic.w	r2, r3, #4
 800e1e8:	6022      	str	r2, [r4, #0]
 800e1ea:	f04f 0900 	mov.w	r9, #0
 800e1ee:	9700      	str	r7, [sp, #0]
 800e1f0:	4633      	mov	r3, r6
 800e1f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f000 f9d8 	bl	800e5ac <_printf_common>
 800e1fc:	3001      	adds	r0, #1
 800e1fe:	f040 8090 	bne.w	800e322 <_printf_float+0x1e2>
 800e202:	f04f 30ff 	mov.w	r0, #4294967295
 800e206:	b00d      	add	sp, #52	; 0x34
 800e208:	ecbd 8b02 	vpop	{d8}
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	4642      	mov	r2, r8
 800e212:	464b      	mov	r3, r9
 800e214:	4640      	mov	r0, r8
 800e216:	4649      	mov	r1, r9
 800e218:	f7f2 fc98 	bl	8000b4c <__aeabi_dcmpun>
 800e21c:	b140      	cbz	r0, 800e230 <_printf_float+0xf0>
 800e21e:	464b      	mov	r3, r9
 800e220:	2b00      	cmp	r3, #0
 800e222:	bfbc      	itt	lt
 800e224:	232d      	movlt	r3, #45	; 0x2d
 800e226:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e22a:	487f      	ldr	r0, [pc, #508]	; (800e428 <_printf_float+0x2e8>)
 800e22c:	4b7f      	ldr	r3, [pc, #508]	; (800e42c <_printf_float+0x2ec>)
 800e22e:	e7d1      	b.n	800e1d4 <_printf_float+0x94>
 800e230:	6863      	ldr	r3, [r4, #4]
 800e232:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e236:	9206      	str	r2, [sp, #24]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	d13f      	bne.n	800e2bc <_printf_float+0x17c>
 800e23c:	2306      	movs	r3, #6
 800e23e:	6063      	str	r3, [r4, #4]
 800e240:	9b05      	ldr	r3, [sp, #20]
 800e242:	6861      	ldr	r1, [r4, #4]
 800e244:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e248:	2300      	movs	r3, #0
 800e24a:	9303      	str	r3, [sp, #12]
 800e24c:	ab0a      	add	r3, sp, #40	; 0x28
 800e24e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e252:	ab09      	add	r3, sp, #36	; 0x24
 800e254:	ec49 8b10 	vmov	d0, r8, r9
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	6022      	str	r2, [r4, #0]
 800e25c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e260:	4628      	mov	r0, r5
 800e262:	f7ff fecd 	bl	800e000 <__cvt>
 800e266:	9b06      	ldr	r3, [sp, #24]
 800e268:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e26a:	2b47      	cmp	r3, #71	; 0x47
 800e26c:	4680      	mov	r8, r0
 800e26e:	d108      	bne.n	800e282 <_printf_float+0x142>
 800e270:	1cc8      	adds	r0, r1, #3
 800e272:	db02      	blt.n	800e27a <_printf_float+0x13a>
 800e274:	6863      	ldr	r3, [r4, #4]
 800e276:	4299      	cmp	r1, r3
 800e278:	dd41      	ble.n	800e2fe <_printf_float+0x1be>
 800e27a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e27e:	fa5f fb8b 	uxtb.w	fp, fp
 800e282:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e286:	d820      	bhi.n	800e2ca <_printf_float+0x18a>
 800e288:	3901      	subs	r1, #1
 800e28a:	465a      	mov	r2, fp
 800e28c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e290:	9109      	str	r1, [sp, #36]	; 0x24
 800e292:	f7ff ff17 	bl	800e0c4 <__exponent>
 800e296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e298:	1813      	adds	r3, r2, r0
 800e29a:	2a01      	cmp	r2, #1
 800e29c:	4681      	mov	r9, r0
 800e29e:	6123      	str	r3, [r4, #16]
 800e2a0:	dc02      	bgt.n	800e2a8 <_printf_float+0x168>
 800e2a2:	6822      	ldr	r2, [r4, #0]
 800e2a4:	07d2      	lsls	r2, r2, #31
 800e2a6:	d501      	bpl.n	800e2ac <_printf_float+0x16c>
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	6123      	str	r3, [r4, #16]
 800e2ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d09c      	beq.n	800e1ee <_printf_float+0xae>
 800e2b4:	232d      	movs	r3, #45	; 0x2d
 800e2b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ba:	e798      	b.n	800e1ee <_printf_float+0xae>
 800e2bc:	9a06      	ldr	r2, [sp, #24]
 800e2be:	2a47      	cmp	r2, #71	; 0x47
 800e2c0:	d1be      	bne.n	800e240 <_printf_float+0x100>
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1bc      	bne.n	800e240 <_printf_float+0x100>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e7b9      	b.n	800e23e <_printf_float+0xfe>
 800e2ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e2ce:	d118      	bne.n	800e302 <_printf_float+0x1c2>
 800e2d0:	2900      	cmp	r1, #0
 800e2d2:	6863      	ldr	r3, [r4, #4]
 800e2d4:	dd0b      	ble.n	800e2ee <_printf_float+0x1ae>
 800e2d6:	6121      	str	r1, [r4, #16]
 800e2d8:	b913      	cbnz	r3, 800e2e0 <_printf_float+0x1a0>
 800e2da:	6822      	ldr	r2, [r4, #0]
 800e2dc:	07d0      	lsls	r0, r2, #31
 800e2de:	d502      	bpl.n	800e2e6 <_printf_float+0x1a6>
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	440b      	add	r3, r1
 800e2e4:	6123      	str	r3, [r4, #16]
 800e2e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e2e8:	f04f 0900 	mov.w	r9, #0
 800e2ec:	e7de      	b.n	800e2ac <_printf_float+0x16c>
 800e2ee:	b913      	cbnz	r3, 800e2f6 <_printf_float+0x1b6>
 800e2f0:	6822      	ldr	r2, [r4, #0]
 800e2f2:	07d2      	lsls	r2, r2, #31
 800e2f4:	d501      	bpl.n	800e2fa <_printf_float+0x1ba>
 800e2f6:	3302      	adds	r3, #2
 800e2f8:	e7f4      	b.n	800e2e4 <_printf_float+0x1a4>
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e7f2      	b.n	800e2e4 <_printf_float+0x1a4>
 800e2fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e304:	4299      	cmp	r1, r3
 800e306:	db05      	blt.n	800e314 <_printf_float+0x1d4>
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	6121      	str	r1, [r4, #16]
 800e30c:	07d8      	lsls	r0, r3, #31
 800e30e:	d5ea      	bpl.n	800e2e6 <_printf_float+0x1a6>
 800e310:	1c4b      	adds	r3, r1, #1
 800e312:	e7e7      	b.n	800e2e4 <_printf_float+0x1a4>
 800e314:	2900      	cmp	r1, #0
 800e316:	bfd4      	ite	le
 800e318:	f1c1 0202 	rsble	r2, r1, #2
 800e31c:	2201      	movgt	r2, #1
 800e31e:	4413      	add	r3, r2
 800e320:	e7e0      	b.n	800e2e4 <_printf_float+0x1a4>
 800e322:	6823      	ldr	r3, [r4, #0]
 800e324:	055a      	lsls	r2, r3, #21
 800e326:	d407      	bmi.n	800e338 <_printf_float+0x1f8>
 800e328:	6923      	ldr	r3, [r4, #16]
 800e32a:	4642      	mov	r2, r8
 800e32c:	4631      	mov	r1, r6
 800e32e:	4628      	mov	r0, r5
 800e330:	47b8      	blx	r7
 800e332:	3001      	adds	r0, #1
 800e334:	d12c      	bne.n	800e390 <_printf_float+0x250>
 800e336:	e764      	b.n	800e202 <_printf_float+0xc2>
 800e338:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e33c:	f240 80e0 	bls.w	800e500 <_printf_float+0x3c0>
 800e340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e344:	2200      	movs	r2, #0
 800e346:	2300      	movs	r3, #0
 800e348:	f7f2 fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d034      	beq.n	800e3ba <_printf_float+0x27a>
 800e350:	4a37      	ldr	r2, [pc, #220]	; (800e430 <_printf_float+0x2f0>)
 800e352:	2301      	movs	r3, #1
 800e354:	4631      	mov	r1, r6
 800e356:	4628      	mov	r0, r5
 800e358:	47b8      	blx	r7
 800e35a:	3001      	adds	r0, #1
 800e35c:	f43f af51 	beq.w	800e202 <_printf_float+0xc2>
 800e360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e364:	429a      	cmp	r2, r3
 800e366:	db02      	blt.n	800e36e <_printf_float+0x22e>
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	07d8      	lsls	r0, r3, #31
 800e36c:	d510      	bpl.n	800e390 <_printf_float+0x250>
 800e36e:	ee18 3a10 	vmov	r3, s16
 800e372:	4652      	mov	r2, sl
 800e374:	4631      	mov	r1, r6
 800e376:	4628      	mov	r0, r5
 800e378:	47b8      	blx	r7
 800e37a:	3001      	adds	r0, #1
 800e37c:	f43f af41 	beq.w	800e202 <_printf_float+0xc2>
 800e380:	f04f 0800 	mov.w	r8, #0
 800e384:	f104 091a 	add.w	r9, r4, #26
 800e388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e38a:	3b01      	subs	r3, #1
 800e38c:	4543      	cmp	r3, r8
 800e38e:	dc09      	bgt.n	800e3a4 <_printf_float+0x264>
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	079b      	lsls	r3, r3, #30
 800e394:	f100 8105 	bmi.w	800e5a2 <_printf_float+0x462>
 800e398:	68e0      	ldr	r0, [r4, #12]
 800e39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e39c:	4298      	cmp	r0, r3
 800e39e:	bfb8      	it	lt
 800e3a0:	4618      	movlt	r0, r3
 800e3a2:	e730      	b.n	800e206 <_printf_float+0xc6>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	464a      	mov	r2, r9
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	47b8      	blx	r7
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	f43f af27 	beq.w	800e202 <_printf_float+0xc2>
 800e3b4:	f108 0801 	add.w	r8, r8, #1
 800e3b8:	e7e6      	b.n	800e388 <_printf_float+0x248>
 800e3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	dc39      	bgt.n	800e434 <_printf_float+0x2f4>
 800e3c0:	4a1b      	ldr	r2, [pc, #108]	; (800e430 <_printf_float+0x2f0>)
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	47b8      	blx	r7
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	f43f af19 	beq.w	800e202 <_printf_float+0xc2>
 800e3d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	d102      	bne.n	800e3de <_printf_float+0x29e>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	07d9      	lsls	r1, r3, #31
 800e3dc:	d5d8      	bpl.n	800e390 <_printf_float+0x250>
 800e3de:	ee18 3a10 	vmov	r3, s16
 800e3e2:	4652      	mov	r2, sl
 800e3e4:	4631      	mov	r1, r6
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	47b8      	blx	r7
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	f43f af09 	beq.w	800e202 <_printf_float+0xc2>
 800e3f0:	f04f 0900 	mov.w	r9, #0
 800e3f4:	f104 0a1a 	add.w	sl, r4, #26
 800e3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3fa:	425b      	negs	r3, r3
 800e3fc:	454b      	cmp	r3, r9
 800e3fe:	dc01      	bgt.n	800e404 <_printf_float+0x2c4>
 800e400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e402:	e792      	b.n	800e32a <_printf_float+0x1ea>
 800e404:	2301      	movs	r3, #1
 800e406:	4652      	mov	r2, sl
 800e408:	4631      	mov	r1, r6
 800e40a:	4628      	mov	r0, r5
 800e40c:	47b8      	blx	r7
 800e40e:	3001      	adds	r0, #1
 800e410:	f43f aef7 	beq.w	800e202 <_printf_float+0xc2>
 800e414:	f109 0901 	add.w	r9, r9, #1
 800e418:	e7ee      	b.n	800e3f8 <_printf_float+0x2b8>
 800e41a:	bf00      	nop
 800e41c:	7fefffff 	.word	0x7fefffff
 800e420:	08012e68 	.word	0x08012e68
 800e424:	08012e6c 	.word	0x08012e6c
 800e428:	08012e74 	.word	0x08012e74
 800e42c:	08012e70 	.word	0x08012e70
 800e430:	08012e78 	.word	0x08012e78
 800e434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e438:	429a      	cmp	r2, r3
 800e43a:	bfa8      	it	ge
 800e43c:	461a      	movge	r2, r3
 800e43e:	2a00      	cmp	r2, #0
 800e440:	4691      	mov	r9, r2
 800e442:	dc37      	bgt.n	800e4b4 <_printf_float+0x374>
 800e444:	f04f 0b00 	mov.w	fp, #0
 800e448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e44c:	f104 021a 	add.w	r2, r4, #26
 800e450:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e452:	9305      	str	r3, [sp, #20]
 800e454:	eba3 0309 	sub.w	r3, r3, r9
 800e458:	455b      	cmp	r3, fp
 800e45a:	dc33      	bgt.n	800e4c4 <_printf_float+0x384>
 800e45c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e460:	429a      	cmp	r2, r3
 800e462:	db3b      	blt.n	800e4dc <_printf_float+0x39c>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	07da      	lsls	r2, r3, #31
 800e468:	d438      	bmi.n	800e4dc <_printf_float+0x39c>
 800e46a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e46c:	9b05      	ldr	r3, [sp, #20]
 800e46e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	eba2 0901 	sub.w	r9, r2, r1
 800e476:	4599      	cmp	r9, r3
 800e478:	bfa8      	it	ge
 800e47a:	4699      	movge	r9, r3
 800e47c:	f1b9 0f00 	cmp.w	r9, #0
 800e480:	dc35      	bgt.n	800e4ee <_printf_float+0x3ae>
 800e482:	f04f 0800 	mov.w	r8, #0
 800e486:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e48a:	f104 0a1a 	add.w	sl, r4, #26
 800e48e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e492:	1a9b      	subs	r3, r3, r2
 800e494:	eba3 0309 	sub.w	r3, r3, r9
 800e498:	4543      	cmp	r3, r8
 800e49a:	f77f af79 	ble.w	800e390 <_printf_float+0x250>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	4652      	mov	r2, sl
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b8      	blx	r7
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	f43f aeaa 	beq.w	800e202 <_printf_float+0xc2>
 800e4ae:	f108 0801 	add.w	r8, r8, #1
 800e4b2:	e7ec      	b.n	800e48e <_printf_float+0x34e>
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	4642      	mov	r2, r8
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	47b8      	blx	r7
 800e4be:	3001      	adds	r0, #1
 800e4c0:	d1c0      	bne.n	800e444 <_printf_float+0x304>
 800e4c2:	e69e      	b.n	800e202 <_printf_float+0xc2>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	9205      	str	r2, [sp, #20]
 800e4cc:	47b8      	blx	r7
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	f43f ae97 	beq.w	800e202 <_printf_float+0xc2>
 800e4d4:	9a05      	ldr	r2, [sp, #20]
 800e4d6:	f10b 0b01 	add.w	fp, fp, #1
 800e4da:	e7b9      	b.n	800e450 <_printf_float+0x310>
 800e4dc:	ee18 3a10 	vmov	r3, s16
 800e4e0:	4652      	mov	r2, sl
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	47b8      	blx	r7
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d1be      	bne.n	800e46a <_printf_float+0x32a>
 800e4ec:	e689      	b.n	800e202 <_printf_float+0xc2>
 800e4ee:	9a05      	ldr	r2, [sp, #20]
 800e4f0:	464b      	mov	r3, r9
 800e4f2:	4442      	add	r2, r8
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	d1c1      	bne.n	800e482 <_printf_float+0x342>
 800e4fe:	e680      	b.n	800e202 <_printf_float+0xc2>
 800e500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e502:	2a01      	cmp	r2, #1
 800e504:	dc01      	bgt.n	800e50a <_printf_float+0x3ca>
 800e506:	07db      	lsls	r3, r3, #31
 800e508:	d538      	bpl.n	800e57c <_printf_float+0x43c>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4642      	mov	r2, r8
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f ae74 	beq.w	800e202 <_printf_float+0xc2>
 800e51a:	ee18 3a10 	vmov	r3, s16
 800e51e:	4652      	mov	r2, sl
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	47b8      	blx	r7
 800e526:	3001      	adds	r0, #1
 800e528:	f43f ae6b 	beq.w	800e202 <_printf_float+0xc2>
 800e52c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e530:	2200      	movs	r2, #0
 800e532:	2300      	movs	r3, #0
 800e534:	f7f2 fad8 	bl	8000ae8 <__aeabi_dcmpeq>
 800e538:	b9d8      	cbnz	r0, 800e572 <_printf_float+0x432>
 800e53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e53c:	f108 0201 	add.w	r2, r8, #1
 800e540:	3b01      	subs	r3, #1
 800e542:	4631      	mov	r1, r6
 800e544:	4628      	mov	r0, r5
 800e546:	47b8      	blx	r7
 800e548:	3001      	adds	r0, #1
 800e54a:	d10e      	bne.n	800e56a <_printf_float+0x42a>
 800e54c:	e659      	b.n	800e202 <_printf_float+0xc2>
 800e54e:	2301      	movs	r3, #1
 800e550:	4652      	mov	r2, sl
 800e552:	4631      	mov	r1, r6
 800e554:	4628      	mov	r0, r5
 800e556:	47b8      	blx	r7
 800e558:	3001      	adds	r0, #1
 800e55a:	f43f ae52 	beq.w	800e202 <_printf_float+0xc2>
 800e55e:	f108 0801 	add.w	r8, r8, #1
 800e562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e564:	3b01      	subs	r3, #1
 800e566:	4543      	cmp	r3, r8
 800e568:	dcf1      	bgt.n	800e54e <_printf_float+0x40e>
 800e56a:	464b      	mov	r3, r9
 800e56c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e570:	e6dc      	b.n	800e32c <_printf_float+0x1ec>
 800e572:	f04f 0800 	mov.w	r8, #0
 800e576:	f104 0a1a 	add.w	sl, r4, #26
 800e57a:	e7f2      	b.n	800e562 <_printf_float+0x422>
 800e57c:	2301      	movs	r3, #1
 800e57e:	4642      	mov	r2, r8
 800e580:	e7df      	b.n	800e542 <_printf_float+0x402>
 800e582:	2301      	movs	r3, #1
 800e584:	464a      	mov	r2, r9
 800e586:	4631      	mov	r1, r6
 800e588:	4628      	mov	r0, r5
 800e58a:	47b8      	blx	r7
 800e58c:	3001      	adds	r0, #1
 800e58e:	f43f ae38 	beq.w	800e202 <_printf_float+0xc2>
 800e592:	f108 0801 	add.w	r8, r8, #1
 800e596:	68e3      	ldr	r3, [r4, #12]
 800e598:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e59a:	1a5b      	subs	r3, r3, r1
 800e59c:	4543      	cmp	r3, r8
 800e59e:	dcf0      	bgt.n	800e582 <_printf_float+0x442>
 800e5a0:	e6fa      	b.n	800e398 <_printf_float+0x258>
 800e5a2:	f04f 0800 	mov.w	r8, #0
 800e5a6:	f104 0919 	add.w	r9, r4, #25
 800e5aa:	e7f4      	b.n	800e596 <_printf_float+0x456>

0800e5ac <_printf_common>:
 800e5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b0:	4616      	mov	r6, r2
 800e5b2:	4699      	mov	r9, r3
 800e5b4:	688a      	ldr	r2, [r1, #8]
 800e5b6:	690b      	ldr	r3, [r1, #16]
 800e5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	bfb8      	it	lt
 800e5c0:	4613      	movlt	r3, r2
 800e5c2:	6033      	str	r3, [r6, #0]
 800e5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	b10a      	cbz	r2, 800e5d2 <_printf_common+0x26>
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	6033      	str	r3, [r6, #0]
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	0699      	lsls	r1, r3, #26
 800e5d6:	bf42      	ittt	mi
 800e5d8:	6833      	ldrmi	r3, [r6, #0]
 800e5da:	3302      	addmi	r3, #2
 800e5dc:	6033      	strmi	r3, [r6, #0]
 800e5de:	6825      	ldr	r5, [r4, #0]
 800e5e0:	f015 0506 	ands.w	r5, r5, #6
 800e5e4:	d106      	bne.n	800e5f4 <_printf_common+0x48>
 800e5e6:	f104 0a19 	add.w	sl, r4, #25
 800e5ea:	68e3      	ldr	r3, [r4, #12]
 800e5ec:	6832      	ldr	r2, [r6, #0]
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	42ab      	cmp	r3, r5
 800e5f2:	dc26      	bgt.n	800e642 <_printf_common+0x96>
 800e5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5f8:	1e13      	subs	r3, r2, #0
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	bf18      	it	ne
 800e5fe:	2301      	movne	r3, #1
 800e600:	0692      	lsls	r2, r2, #26
 800e602:	d42b      	bmi.n	800e65c <_printf_common+0xb0>
 800e604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e608:	4649      	mov	r1, r9
 800e60a:	4638      	mov	r0, r7
 800e60c:	47c0      	blx	r8
 800e60e:	3001      	adds	r0, #1
 800e610:	d01e      	beq.n	800e650 <_printf_common+0xa4>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	68e5      	ldr	r5, [r4, #12]
 800e616:	6832      	ldr	r2, [r6, #0]
 800e618:	f003 0306 	and.w	r3, r3, #6
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	bf08      	it	eq
 800e620:	1aad      	subeq	r5, r5, r2
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	6922      	ldr	r2, [r4, #16]
 800e626:	bf0c      	ite	eq
 800e628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e62c:	2500      	movne	r5, #0
 800e62e:	4293      	cmp	r3, r2
 800e630:	bfc4      	itt	gt
 800e632:	1a9b      	subgt	r3, r3, r2
 800e634:	18ed      	addgt	r5, r5, r3
 800e636:	2600      	movs	r6, #0
 800e638:	341a      	adds	r4, #26
 800e63a:	42b5      	cmp	r5, r6
 800e63c:	d11a      	bne.n	800e674 <_printf_common+0xc8>
 800e63e:	2000      	movs	r0, #0
 800e640:	e008      	b.n	800e654 <_printf_common+0xa8>
 800e642:	2301      	movs	r3, #1
 800e644:	4652      	mov	r2, sl
 800e646:	4649      	mov	r1, r9
 800e648:	4638      	mov	r0, r7
 800e64a:	47c0      	blx	r8
 800e64c:	3001      	adds	r0, #1
 800e64e:	d103      	bne.n	800e658 <_printf_common+0xac>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e658:	3501      	adds	r5, #1
 800e65a:	e7c6      	b.n	800e5ea <_printf_common+0x3e>
 800e65c:	18e1      	adds	r1, r4, r3
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	2030      	movs	r0, #48	; 0x30
 800e662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e666:	4422      	add	r2, r4
 800e668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e670:	3302      	adds	r3, #2
 800e672:	e7c7      	b.n	800e604 <_printf_common+0x58>
 800e674:	2301      	movs	r3, #1
 800e676:	4622      	mov	r2, r4
 800e678:	4649      	mov	r1, r9
 800e67a:	4638      	mov	r0, r7
 800e67c:	47c0      	blx	r8
 800e67e:	3001      	adds	r0, #1
 800e680:	d0e6      	beq.n	800e650 <_printf_common+0xa4>
 800e682:	3601      	adds	r6, #1
 800e684:	e7d9      	b.n	800e63a <_printf_common+0x8e>
	...

0800e688 <_printf_i>:
 800e688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e68c:	460c      	mov	r4, r1
 800e68e:	4691      	mov	r9, r2
 800e690:	7e27      	ldrb	r7, [r4, #24]
 800e692:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e694:	2f78      	cmp	r7, #120	; 0x78
 800e696:	4680      	mov	r8, r0
 800e698:	469a      	mov	sl, r3
 800e69a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e69e:	d807      	bhi.n	800e6b0 <_printf_i+0x28>
 800e6a0:	2f62      	cmp	r7, #98	; 0x62
 800e6a2:	d80a      	bhi.n	800e6ba <_printf_i+0x32>
 800e6a4:	2f00      	cmp	r7, #0
 800e6a6:	f000 80d8 	beq.w	800e85a <_printf_i+0x1d2>
 800e6aa:	2f58      	cmp	r7, #88	; 0x58
 800e6ac:	f000 80a3 	beq.w	800e7f6 <_printf_i+0x16e>
 800e6b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e6b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6b8:	e03a      	b.n	800e730 <_printf_i+0xa8>
 800e6ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6be:	2b15      	cmp	r3, #21
 800e6c0:	d8f6      	bhi.n	800e6b0 <_printf_i+0x28>
 800e6c2:	a001      	add	r0, pc, #4	; (adr r0, 800e6c8 <_printf_i+0x40>)
 800e6c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e6c8:	0800e721 	.word	0x0800e721
 800e6cc:	0800e735 	.word	0x0800e735
 800e6d0:	0800e6b1 	.word	0x0800e6b1
 800e6d4:	0800e6b1 	.word	0x0800e6b1
 800e6d8:	0800e6b1 	.word	0x0800e6b1
 800e6dc:	0800e6b1 	.word	0x0800e6b1
 800e6e0:	0800e735 	.word	0x0800e735
 800e6e4:	0800e6b1 	.word	0x0800e6b1
 800e6e8:	0800e6b1 	.word	0x0800e6b1
 800e6ec:	0800e6b1 	.word	0x0800e6b1
 800e6f0:	0800e6b1 	.word	0x0800e6b1
 800e6f4:	0800e841 	.word	0x0800e841
 800e6f8:	0800e765 	.word	0x0800e765
 800e6fc:	0800e823 	.word	0x0800e823
 800e700:	0800e6b1 	.word	0x0800e6b1
 800e704:	0800e6b1 	.word	0x0800e6b1
 800e708:	0800e863 	.word	0x0800e863
 800e70c:	0800e6b1 	.word	0x0800e6b1
 800e710:	0800e765 	.word	0x0800e765
 800e714:	0800e6b1 	.word	0x0800e6b1
 800e718:	0800e6b1 	.word	0x0800e6b1
 800e71c:	0800e82b 	.word	0x0800e82b
 800e720:	680b      	ldr	r3, [r1, #0]
 800e722:	1d1a      	adds	r2, r3, #4
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	600a      	str	r2, [r1, #0]
 800e728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e730:	2301      	movs	r3, #1
 800e732:	e0a3      	b.n	800e87c <_printf_i+0x1f4>
 800e734:	6825      	ldr	r5, [r4, #0]
 800e736:	6808      	ldr	r0, [r1, #0]
 800e738:	062e      	lsls	r6, r5, #24
 800e73a:	f100 0304 	add.w	r3, r0, #4
 800e73e:	d50a      	bpl.n	800e756 <_printf_i+0xce>
 800e740:	6805      	ldr	r5, [r0, #0]
 800e742:	600b      	str	r3, [r1, #0]
 800e744:	2d00      	cmp	r5, #0
 800e746:	da03      	bge.n	800e750 <_printf_i+0xc8>
 800e748:	232d      	movs	r3, #45	; 0x2d
 800e74a:	426d      	negs	r5, r5
 800e74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e750:	485e      	ldr	r0, [pc, #376]	; (800e8cc <_printf_i+0x244>)
 800e752:	230a      	movs	r3, #10
 800e754:	e019      	b.n	800e78a <_printf_i+0x102>
 800e756:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e75a:	6805      	ldr	r5, [r0, #0]
 800e75c:	600b      	str	r3, [r1, #0]
 800e75e:	bf18      	it	ne
 800e760:	b22d      	sxthne	r5, r5
 800e762:	e7ef      	b.n	800e744 <_printf_i+0xbc>
 800e764:	680b      	ldr	r3, [r1, #0]
 800e766:	6825      	ldr	r5, [r4, #0]
 800e768:	1d18      	adds	r0, r3, #4
 800e76a:	6008      	str	r0, [r1, #0]
 800e76c:	0628      	lsls	r0, r5, #24
 800e76e:	d501      	bpl.n	800e774 <_printf_i+0xec>
 800e770:	681d      	ldr	r5, [r3, #0]
 800e772:	e002      	b.n	800e77a <_printf_i+0xf2>
 800e774:	0669      	lsls	r1, r5, #25
 800e776:	d5fb      	bpl.n	800e770 <_printf_i+0xe8>
 800e778:	881d      	ldrh	r5, [r3, #0]
 800e77a:	4854      	ldr	r0, [pc, #336]	; (800e8cc <_printf_i+0x244>)
 800e77c:	2f6f      	cmp	r7, #111	; 0x6f
 800e77e:	bf0c      	ite	eq
 800e780:	2308      	moveq	r3, #8
 800e782:	230a      	movne	r3, #10
 800e784:	2100      	movs	r1, #0
 800e786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e78a:	6866      	ldr	r6, [r4, #4]
 800e78c:	60a6      	str	r6, [r4, #8]
 800e78e:	2e00      	cmp	r6, #0
 800e790:	bfa2      	ittt	ge
 800e792:	6821      	ldrge	r1, [r4, #0]
 800e794:	f021 0104 	bicge.w	r1, r1, #4
 800e798:	6021      	strge	r1, [r4, #0]
 800e79a:	b90d      	cbnz	r5, 800e7a0 <_printf_i+0x118>
 800e79c:	2e00      	cmp	r6, #0
 800e79e:	d04d      	beq.n	800e83c <_printf_i+0x1b4>
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7a6:	fb03 5711 	mls	r7, r3, r1, r5
 800e7aa:	5dc7      	ldrb	r7, [r0, r7]
 800e7ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7b0:	462f      	mov	r7, r5
 800e7b2:	42bb      	cmp	r3, r7
 800e7b4:	460d      	mov	r5, r1
 800e7b6:	d9f4      	bls.n	800e7a2 <_printf_i+0x11a>
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d10b      	bne.n	800e7d4 <_printf_i+0x14c>
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	07df      	lsls	r7, r3, #31
 800e7c0:	d508      	bpl.n	800e7d4 <_printf_i+0x14c>
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	6861      	ldr	r1, [r4, #4]
 800e7c6:	4299      	cmp	r1, r3
 800e7c8:	bfde      	ittt	le
 800e7ca:	2330      	movle	r3, #48	; 0x30
 800e7cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7d4:	1b92      	subs	r2, r2, r6
 800e7d6:	6122      	str	r2, [r4, #16]
 800e7d8:	f8cd a000 	str.w	sl, [sp]
 800e7dc:	464b      	mov	r3, r9
 800e7de:	aa03      	add	r2, sp, #12
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	f7ff fee2 	bl	800e5ac <_printf_common>
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	d14c      	bne.n	800e886 <_printf_i+0x1fe>
 800e7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f0:	b004      	add	sp, #16
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	4835      	ldr	r0, [pc, #212]	; (800e8cc <_printf_i+0x244>)
 800e7f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e7fc:	6823      	ldr	r3, [r4, #0]
 800e7fe:	680e      	ldr	r6, [r1, #0]
 800e800:	061f      	lsls	r7, r3, #24
 800e802:	f856 5b04 	ldr.w	r5, [r6], #4
 800e806:	600e      	str	r6, [r1, #0]
 800e808:	d514      	bpl.n	800e834 <_printf_i+0x1ac>
 800e80a:	07d9      	lsls	r1, r3, #31
 800e80c:	bf44      	itt	mi
 800e80e:	f043 0320 	orrmi.w	r3, r3, #32
 800e812:	6023      	strmi	r3, [r4, #0]
 800e814:	b91d      	cbnz	r5, 800e81e <_printf_i+0x196>
 800e816:	6823      	ldr	r3, [r4, #0]
 800e818:	f023 0320 	bic.w	r3, r3, #32
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	2310      	movs	r3, #16
 800e820:	e7b0      	b.n	800e784 <_printf_i+0xfc>
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	f043 0320 	orr.w	r3, r3, #32
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	2378      	movs	r3, #120	; 0x78
 800e82c:	4828      	ldr	r0, [pc, #160]	; (800e8d0 <_printf_i+0x248>)
 800e82e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e832:	e7e3      	b.n	800e7fc <_printf_i+0x174>
 800e834:	065e      	lsls	r6, r3, #25
 800e836:	bf48      	it	mi
 800e838:	b2ad      	uxthmi	r5, r5
 800e83a:	e7e6      	b.n	800e80a <_printf_i+0x182>
 800e83c:	4616      	mov	r6, r2
 800e83e:	e7bb      	b.n	800e7b8 <_printf_i+0x130>
 800e840:	680b      	ldr	r3, [r1, #0]
 800e842:	6826      	ldr	r6, [r4, #0]
 800e844:	6960      	ldr	r0, [r4, #20]
 800e846:	1d1d      	adds	r5, r3, #4
 800e848:	600d      	str	r5, [r1, #0]
 800e84a:	0635      	lsls	r5, r6, #24
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	d501      	bpl.n	800e854 <_printf_i+0x1cc>
 800e850:	6018      	str	r0, [r3, #0]
 800e852:	e002      	b.n	800e85a <_printf_i+0x1d2>
 800e854:	0671      	lsls	r1, r6, #25
 800e856:	d5fb      	bpl.n	800e850 <_printf_i+0x1c8>
 800e858:	8018      	strh	r0, [r3, #0]
 800e85a:	2300      	movs	r3, #0
 800e85c:	6123      	str	r3, [r4, #16]
 800e85e:	4616      	mov	r6, r2
 800e860:	e7ba      	b.n	800e7d8 <_printf_i+0x150>
 800e862:	680b      	ldr	r3, [r1, #0]
 800e864:	1d1a      	adds	r2, r3, #4
 800e866:	600a      	str	r2, [r1, #0]
 800e868:	681e      	ldr	r6, [r3, #0]
 800e86a:	6862      	ldr	r2, [r4, #4]
 800e86c:	2100      	movs	r1, #0
 800e86e:	4630      	mov	r0, r6
 800e870:	f7f1 fcc6 	bl	8000200 <memchr>
 800e874:	b108      	cbz	r0, 800e87a <_printf_i+0x1f2>
 800e876:	1b80      	subs	r0, r0, r6
 800e878:	6060      	str	r0, [r4, #4]
 800e87a:	6863      	ldr	r3, [r4, #4]
 800e87c:	6123      	str	r3, [r4, #16]
 800e87e:	2300      	movs	r3, #0
 800e880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e884:	e7a8      	b.n	800e7d8 <_printf_i+0x150>
 800e886:	6923      	ldr	r3, [r4, #16]
 800e888:	4632      	mov	r2, r6
 800e88a:	4649      	mov	r1, r9
 800e88c:	4640      	mov	r0, r8
 800e88e:	47d0      	blx	sl
 800e890:	3001      	adds	r0, #1
 800e892:	d0ab      	beq.n	800e7ec <_printf_i+0x164>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	079b      	lsls	r3, r3, #30
 800e898:	d413      	bmi.n	800e8c2 <_printf_i+0x23a>
 800e89a:	68e0      	ldr	r0, [r4, #12]
 800e89c:	9b03      	ldr	r3, [sp, #12]
 800e89e:	4298      	cmp	r0, r3
 800e8a0:	bfb8      	it	lt
 800e8a2:	4618      	movlt	r0, r3
 800e8a4:	e7a4      	b.n	800e7f0 <_printf_i+0x168>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	4649      	mov	r1, r9
 800e8ac:	4640      	mov	r0, r8
 800e8ae:	47d0      	blx	sl
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d09b      	beq.n	800e7ec <_printf_i+0x164>
 800e8b4:	3501      	adds	r5, #1
 800e8b6:	68e3      	ldr	r3, [r4, #12]
 800e8b8:	9903      	ldr	r1, [sp, #12]
 800e8ba:	1a5b      	subs	r3, r3, r1
 800e8bc:	42ab      	cmp	r3, r5
 800e8be:	dcf2      	bgt.n	800e8a6 <_printf_i+0x21e>
 800e8c0:	e7eb      	b.n	800e89a <_printf_i+0x212>
 800e8c2:	2500      	movs	r5, #0
 800e8c4:	f104 0619 	add.w	r6, r4, #25
 800e8c8:	e7f5      	b.n	800e8b6 <_printf_i+0x22e>
 800e8ca:	bf00      	nop
 800e8cc:	08012e7a 	.word	0x08012e7a
 800e8d0:	08012e8b 	.word	0x08012e8b

0800e8d4 <_scanf_float>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	b087      	sub	sp, #28
 800e8da:	4617      	mov	r7, r2
 800e8dc:	9303      	str	r3, [sp, #12]
 800e8de:	688b      	ldr	r3, [r1, #8]
 800e8e0:	1e5a      	subs	r2, r3, #1
 800e8e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e8e6:	bf83      	ittte	hi
 800e8e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e8ec:	195b      	addhi	r3, r3, r5
 800e8ee:	9302      	strhi	r3, [sp, #8]
 800e8f0:	2300      	movls	r3, #0
 800e8f2:	bf86      	itte	hi
 800e8f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e8f8:	608b      	strhi	r3, [r1, #8]
 800e8fa:	9302      	strls	r3, [sp, #8]
 800e8fc:	680b      	ldr	r3, [r1, #0]
 800e8fe:	468b      	mov	fp, r1
 800e900:	2500      	movs	r5, #0
 800e902:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e906:	f84b 3b1c 	str.w	r3, [fp], #28
 800e90a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e90e:	4680      	mov	r8, r0
 800e910:	460c      	mov	r4, r1
 800e912:	465e      	mov	r6, fp
 800e914:	46aa      	mov	sl, r5
 800e916:	46a9      	mov	r9, r5
 800e918:	9501      	str	r5, [sp, #4]
 800e91a:	68a2      	ldr	r2, [r4, #8]
 800e91c:	b152      	cbz	r2, 800e934 <_scanf_float+0x60>
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b4e      	cmp	r3, #78	; 0x4e
 800e924:	d864      	bhi.n	800e9f0 <_scanf_float+0x11c>
 800e926:	2b40      	cmp	r3, #64	; 0x40
 800e928:	d83c      	bhi.n	800e9a4 <_scanf_float+0xd0>
 800e92a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e92e:	b2c8      	uxtb	r0, r1
 800e930:	280e      	cmp	r0, #14
 800e932:	d93a      	bls.n	800e9aa <_scanf_float+0xd6>
 800e934:	f1b9 0f00 	cmp.w	r9, #0
 800e938:	d003      	beq.n	800e942 <_scanf_float+0x6e>
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e946:	f1ba 0f01 	cmp.w	sl, #1
 800e94a:	f200 8113 	bhi.w	800eb74 <_scanf_float+0x2a0>
 800e94e:	455e      	cmp	r6, fp
 800e950:	f200 8105 	bhi.w	800eb5e <_scanf_float+0x28a>
 800e954:	2501      	movs	r5, #1
 800e956:	4628      	mov	r0, r5
 800e958:	b007      	add	sp, #28
 800e95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e962:	2a0d      	cmp	r2, #13
 800e964:	d8e6      	bhi.n	800e934 <_scanf_float+0x60>
 800e966:	a101      	add	r1, pc, #4	; (adr r1, 800e96c <_scanf_float+0x98>)
 800e968:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e96c:	0800eaab 	.word	0x0800eaab
 800e970:	0800e935 	.word	0x0800e935
 800e974:	0800e935 	.word	0x0800e935
 800e978:	0800e935 	.word	0x0800e935
 800e97c:	0800eb0b 	.word	0x0800eb0b
 800e980:	0800eae3 	.word	0x0800eae3
 800e984:	0800e935 	.word	0x0800e935
 800e988:	0800e935 	.word	0x0800e935
 800e98c:	0800eab9 	.word	0x0800eab9
 800e990:	0800e935 	.word	0x0800e935
 800e994:	0800e935 	.word	0x0800e935
 800e998:	0800e935 	.word	0x0800e935
 800e99c:	0800e935 	.word	0x0800e935
 800e9a0:	0800ea71 	.word	0x0800ea71
 800e9a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e9a8:	e7db      	b.n	800e962 <_scanf_float+0x8e>
 800e9aa:	290e      	cmp	r1, #14
 800e9ac:	d8c2      	bhi.n	800e934 <_scanf_float+0x60>
 800e9ae:	a001      	add	r0, pc, #4	; (adr r0, 800e9b4 <_scanf_float+0xe0>)
 800e9b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e9b4:	0800ea63 	.word	0x0800ea63
 800e9b8:	0800e935 	.word	0x0800e935
 800e9bc:	0800ea63 	.word	0x0800ea63
 800e9c0:	0800eaf7 	.word	0x0800eaf7
 800e9c4:	0800e935 	.word	0x0800e935
 800e9c8:	0800ea11 	.word	0x0800ea11
 800e9cc:	0800ea4d 	.word	0x0800ea4d
 800e9d0:	0800ea4d 	.word	0x0800ea4d
 800e9d4:	0800ea4d 	.word	0x0800ea4d
 800e9d8:	0800ea4d 	.word	0x0800ea4d
 800e9dc:	0800ea4d 	.word	0x0800ea4d
 800e9e0:	0800ea4d 	.word	0x0800ea4d
 800e9e4:	0800ea4d 	.word	0x0800ea4d
 800e9e8:	0800ea4d 	.word	0x0800ea4d
 800e9ec:	0800ea4d 	.word	0x0800ea4d
 800e9f0:	2b6e      	cmp	r3, #110	; 0x6e
 800e9f2:	d809      	bhi.n	800ea08 <_scanf_float+0x134>
 800e9f4:	2b60      	cmp	r3, #96	; 0x60
 800e9f6:	d8b2      	bhi.n	800e95e <_scanf_float+0x8a>
 800e9f8:	2b54      	cmp	r3, #84	; 0x54
 800e9fa:	d077      	beq.n	800eaec <_scanf_float+0x218>
 800e9fc:	2b59      	cmp	r3, #89	; 0x59
 800e9fe:	d199      	bne.n	800e934 <_scanf_float+0x60>
 800ea00:	2d07      	cmp	r5, #7
 800ea02:	d197      	bne.n	800e934 <_scanf_float+0x60>
 800ea04:	2508      	movs	r5, #8
 800ea06:	e029      	b.n	800ea5c <_scanf_float+0x188>
 800ea08:	2b74      	cmp	r3, #116	; 0x74
 800ea0a:	d06f      	beq.n	800eaec <_scanf_float+0x218>
 800ea0c:	2b79      	cmp	r3, #121	; 0x79
 800ea0e:	e7f6      	b.n	800e9fe <_scanf_float+0x12a>
 800ea10:	6821      	ldr	r1, [r4, #0]
 800ea12:	05c8      	lsls	r0, r1, #23
 800ea14:	d51a      	bpl.n	800ea4c <_scanf_float+0x178>
 800ea16:	9b02      	ldr	r3, [sp, #8]
 800ea18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ea1c:	6021      	str	r1, [r4, #0]
 800ea1e:	f109 0901 	add.w	r9, r9, #1
 800ea22:	b11b      	cbz	r3, 800ea2c <_scanf_float+0x158>
 800ea24:	3b01      	subs	r3, #1
 800ea26:	3201      	adds	r2, #1
 800ea28:	9302      	str	r3, [sp, #8]
 800ea2a:	60a2      	str	r2, [r4, #8]
 800ea2c:	68a3      	ldr	r3, [r4, #8]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	60a3      	str	r3, [r4, #8]
 800ea32:	6923      	ldr	r3, [r4, #16]
 800ea34:	3301      	adds	r3, #1
 800ea36:	6123      	str	r3, [r4, #16]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	607b      	str	r3, [r7, #4]
 800ea40:	f340 8084 	ble.w	800eb4c <_scanf_float+0x278>
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	3301      	adds	r3, #1
 800ea48:	603b      	str	r3, [r7, #0]
 800ea4a:	e766      	b.n	800e91a <_scanf_float+0x46>
 800ea4c:	eb1a 0f05 	cmn.w	sl, r5
 800ea50:	f47f af70 	bne.w	800e934 <_scanf_float+0x60>
 800ea54:	6822      	ldr	r2, [r4, #0]
 800ea56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ea5a:	6022      	str	r2, [r4, #0]
 800ea5c:	f806 3b01 	strb.w	r3, [r6], #1
 800ea60:	e7e4      	b.n	800ea2c <_scanf_float+0x158>
 800ea62:	6822      	ldr	r2, [r4, #0]
 800ea64:	0610      	lsls	r0, r2, #24
 800ea66:	f57f af65 	bpl.w	800e934 <_scanf_float+0x60>
 800ea6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea6e:	e7f4      	b.n	800ea5a <_scanf_float+0x186>
 800ea70:	f1ba 0f00 	cmp.w	sl, #0
 800ea74:	d10e      	bne.n	800ea94 <_scanf_float+0x1c0>
 800ea76:	f1b9 0f00 	cmp.w	r9, #0
 800ea7a:	d10e      	bne.n	800ea9a <_scanf_float+0x1c6>
 800ea7c:	6822      	ldr	r2, [r4, #0]
 800ea7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ea82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ea86:	d108      	bne.n	800ea9a <_scanf_float+0x1c6>
 800ea88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ea8c:	6022      	str	r2, [r4, #0]
 800ea8e:	f04f 0a01 	mov.w	sl, #1
 800ea92:	e7e3      	b.n	800ea5c <_scanf_float+0x188>
 800ea94:	f1ba 0f02 	cmp.w	sl, #2
 800ea98:	d055      	beq.n	800eb46 <_scanf_float+0x272>
 800ea9a:	2d01      	cmp	r5, #1
 800ea9c:	d002      	beq.n	800eaa4 <_scanf_float+0x1d0>
 800ea9e:	2d04      	cmp	r5, #4
 800eaa0:	f47f af48 	bne.w	800e934 <_scanf_float+0x60>
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	b2ed      	uxtb	r5, r5
 800eaa8:	e7d8      	b.n	800ea5c <_scanf_float+0x188>
 800eaaa:	f1ba 0f01 	cmp.w	sl, #1
 800eaae:	f47f af41 	bne.w	800e934 <_scanf_float+0x60>
 800eab2:	f04f 0a02 	mov.w	sl, #2
 800eab6:	e7d1      	b.n	800ea5c <_scanf_float+0x188>
 800eab8:	b97d      	cbnz	r5, 800eada <_scanf_float+0x206>
 800eaba:	f1b9 0f00 	cmp.w	r9, #0
 800eabe:	f47f af3c 	bne.w	800e93a <_scanf_float+0x66>
 800eac2:	6822      	ldr	r2, [r4, #0]
 800eac4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eac8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eacc:	f47f af39 	bne.w	800e942 <_scanf_float+0x6e>
 800ead0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ead4:	6022      	str	r2, [r4, #0]
 800ead6:	2501      	movs	r5, #1
 800ead8:	e7c0      	b.n	800ea5c <_scanf_float+0x188>
 800eada:	2d03      	cmp	r5, #3
 800eadc:	d0e2      	beq.n	800eaa4 <_scanf_float+0x1d0>
 800eade:	2d05      	cmp	r5, #5
 800eae0:	e7de      	b.n	800eaa0 <_scanf_float+0x1cc>
 800eae2:	2d02      	cmp	r5, #2
 800eae4:	f47f af26 	bne.w	800e934 <_scanf_float+0x60>
 800eae8:	2503      	movs	r5, #3
 800eaea:	e7b7      	b.n	800ea5c <_scanf_float+0x188>
 800eaec:	2d06      	cmp	r5, #6
 800eaee:	f47f af21 	bne.w	800e934 <_scanf_float+0x60>
 800eaf2:	2507      	movs	r5, #7
 800eaf4:	e7b2      	b.n	800ea5c <_scanf_float+0x188>
 800eaf6:	6822      	ldr	r2, [r4, #0]
 800eaf8:	0591      	lsls	r1, r2, #22
 800eafa:	f57f af1b 	bpl.w	800e934 <_scanf_float+0x60>
 800eafe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800eb02:	6022      	str	r2, [r4, #0]
 800eb04:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb08:	e7a8      	b.n	800ea5c <_scanf_float+0x188>
 800eb0a:	6822      	ldr	r2, [r4, #0]
 800eb0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eb10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800eb14:	d006      	beq.n	800eb24 <_scanf_float+0x250>
 800eb16:	0550      	lsls	r0, r2, #21
 800eb18:	f57f af0c 	bpl.w	800e934 <_scanf_float+0x60>
 800eb1c:	f1b9 0f00 	cmp.w	r9, #0
 800eb20:	f43f af0f 	beq.w	800e942 <_scanf_float+0x6e>
 800eb24:	0591      	lsls	r1, r2, #22
 800eb26:	bf58      	it	pl
 800eb28:	9901      	ldrpl	r1, [sp, #4]
 800eb2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb2e:	bf58      	it	pl
 800eb30:	eba9 0101 	subpl.w	r1, r9, r1
 800eb34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800eb38:	bf58      	it	pl
 800eb3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb3e:	6022      	str	r2, [r4, #0]
 800eb40:	f04f 0900 	mov.w	r9, #0
 800eb44:	e78a      	b.n	800ea5c <_scanf_float+0x188>
 800eb46:	f04f 0a03 	mov.w	sl, #3
 800eb4a:	e787      	b.n	800ea5c <_scanf_float+0x188>
 800eb4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb50:	4639      	mov	r1, r7
 800eb52:	4640      	mov	r0, r8
 800eb54:	4798      	blx	r3
 800eb56:	2800      	cmp	r0, #0
 800eb58:	f43f aedf 	beq.w	800e91a <_scanf_float+0x46>
 800eb5c:	e6ea      	b.n	800e934 <_scanf_float+0x60>
 800eb5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb66:	463a      	mov	r2, r7
 800eb68:	4640      	mov	r0, r8
 800eb6a:	4798      	blx	r3
 800eb6c:	6923      	ldr	r3, [r4, #16]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	6123      	str	r3, [r4, #16]
 800eb72:	e6ec      	b.n	800e94e <_scanf_float+0x7a>
 800eb74:	1e6b      	subs	r3, r5, #1
 800eb76:	2b06      	cmp	r3, #6
 800eb78:	d825      	bhi.n	800ebc6 <_scanf_float+0x2f2>
 800eb7a:	2d02      	cmp	r5, #2
 800eb7c:	d836      	bhi.n	800ebec <_scanf_float+0x318>
 800eb7e:	455e      	cmp	r6, fp
 800eb80:	f67f aee8 	bls.w	800e954 <_scanf_float+0x80>
 800eb84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb8c:	463a      	mov	r2, r7
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4798      	blx	r3
 800eb92:	6923      	ldr	r3, [r4, #16]
 800eb94:	3b01      	subs	r3, #1
 800eb96:	6123      	str	r3, [r4, #16]
 800eb98:	e7f1      	b.n	800eb7e <_scanf_float+0x2aa>
 800eb9a:	9802      	ldr	r0, [sp, #8]
 800eb9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eba0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800eba4:	9002      	str	r0, [sp, #8]
 800eba6:	463a      	mov	r2, r7
 800eba8:	4640      	mov	r0, r8
 800ebaa:	4798      	blx	r3
 800ebac:	6923      	ldr	r3, [r4, #16]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebb6:	fa5f fa8a 	uxtb.w	sl, sl
 800ebba:	f1ba 0f02 	cmp.w	sl, #2
 800ebbe:	d1ec      	bne.n	800eb9a <_scanf_float+0x2c6>
 800ebc0:	3d03      	subs	r5, #3
 800ebc2:	b2ed      	uxtb	r5, r5
 800ebc4:	1b76      	subs	r6, r6, r5
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	05da      	lsls	r2, r3, #23
 800ebca:	d52f      	bpl.n	800ec2c <_scanf_float+0x358>
 800ebcc:	055b      	lsls	r3, r3, #21
 800ebce:	d510      	bpl.n	800ebf2 <_scanf_float+0x31e>
 800ebd0:	455e      	cmp	r6, fp
 800ebd2:	f67f aebf 	bls.w	800e954 <_scanf_float+0x80>
 800ebd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebde:	463a      	mov	r2, r7
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	4798      	blx	r3
 800ebe4:	6923      	ldr	r3, [r4, #16]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	6123      	str	r3, [r4, #16]
 800ebea:	e7f1      	b.n	800ebd0 <_scanf_float+0x2fc>
 800ebec:	46aa      	mov	sl, r5
 800ebee:	9602      	str	r6, [sp, #8]
 800ebf0:	e7df      	b.n	800ebb2 <_scanf_float+0x2de>
 800ebf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ebf6:	6923      	ldr	r3, [r4, #16]
 800ebf8:	2965      	cmp	r1, #101	; 0x65
 800ebfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebfe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec02:	6123      	str	r3, [r4, #16]
 800ec04:	d00c      	beq.n	800ec20 <_scanf_float+0x34c>
 800ec06:	2945      	cmp	r1, #69	; 0x45
 800ec08:	d00a      	beq.n	800ec20 <_scanf_float+0x34c>
 800ec0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec0e:	463a      	mov	r2, r7
 800ec10:	4640      	mov	r0, r8
 800ec12:	4798      	blx	r3
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	1eb5      	subs	r5, r6, #2
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec24:	463a      	mov	r2, r7
 800ec26:	4640      	mov	r0, r8
 800ec28:	4798      	blx	r3
 800ec2a:	462e      	mov	r6, r5
 800ec2c:	6825      	ldr	r5, [r4, #0]
 800ec2e:	f015 0510 	ands.w	r5, r5, #16
 800ec32:	d158      	bne.n	800ece6 <_scanf_float+0x412>
 800ec34:	7035      	strb	r5, [r6, #0]
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ec3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec40:	d11c      	bne.n	800ec7c <_scanf_float+0x3a8>
 800ec42:	9b01      	ldr	r3, [sp, #4]
 800ec44:	454b      	cmp	r3, r9
 800ec46:	eba3 0209 	sub.w	r2, r3, r9
 800ec4a:	d124      	bne.n	800ec96 <_scanf_float+0x3c2>
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4659      	mov	r1, fp
 800ec50:	4640      	mov	r0, r8
 800ec52:	f000 fec3 	bl	800f9dc <_strtod_r>
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	6821      	ldr	r1, [r4, #0]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f011 0f02 	tst.w	r1, #2
 800ec60:	ec57 6b10 	vmov	r6, r7, d0
 800ec64:	f103 0204 	add.w	r2, r3, #4
 800ec68:	d020      	beq.n	800ecac <_scanf_float+0x3d8>
 800ec6a:	9903      	ldr	r1, [sp, #12]
 800ec6c:	600a      	str	r2, [r1, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	e9c3 6700 	strd	r6, r7, [r3]
 800ec74:	68e3      	ldr	r3, [r4, #12]
 800ec76:	3301      	adds	r3, #1
 800ec78:	60e3      	str	r3, [r4, #12]
 800ec7a:	e66c      	b.n	800e956 <_scanf_float+0x82>
 800ec7c:	9b04      	ldr	r3, [sp, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d0e4      	beq.n	800ec4c <_scanf_float+0x378>
 800ec82:	9905      	ldr	r1, [sp, #20]
 800ec84:	230a      	movs	r3, #10
 800ec86:	462a      	mov	r2, r5
 800ec88:	3101      	adds	r1, #1
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f000 ff30 	bl	800faf0 <_strtol_r>
 800ec90:	9b04      	ldr	r3, [sp, #16]
 800ec92:	9e05      	ldr	r6, [sp, #20]
 800ec94:	1ac2      	subs	r2, r0, r3
 800ec96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ec9a:	429e      	cmp	r6, r3
 800ec9c:	bf28      	it	cs
 800ec9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eca2:	4912      	ldr	r1, [pc, #72]	; (800ecec <_scanf_float+0x418>)
 800eca4:	4630      	mov	r0, r6
 800eca6:	f000 f853 	bl	800ed50 <siprintf>
 800ecaa:	e7cf      	b.n	800ec4c <_scanf_float+0x378>
 800ecac:	f011 0f04 	tst.w	r1, #4
 800ecb0:	9903      	ldr	r1, [sp, #12]
 800ecb2:	600a      	str	r2, [r1, #0]
 800ecb4:	d1db      	bne.n	800ec6e <_scanf_float+0x39a>
 800ecb6:	f8d3 8000 	ldr.w	r8, [r3]
 800ecba:	ee10 2a10 	vmov	r2, s0
 800ecbe:	ee10 0a10 	vmov	r0, s0
 800ecc2:	463b      	mov	r3, r7
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	f7f1 ff41 	bl	8000b4c <__aeabi_dcmpun>
 800ecca:	b128      	cbz	r0, 800ecd8 <_scanf_float+0x404>
 800eccc:	4808      	ldr	r0, [pc, #32]	; (800ecf0 <_scanf_float+0x41c>)
 800ecce:	f000 f839 	bl	800ed44 <nanf>
 800ecd2:	ed88 0a00 	vstr	s0, [r8]
 800ecd6:	e7cd      	b.n	800ec74 <_scanf_float+0x3a0>
 800ecd8:	4630      	mov	r0, r6
 800ecda:	4639      	mov	r1, r7
 800ecdc:	f7f1 ff94 	bl	8000c08 <__aeabi_d2f>
 800ece0:	f8c8 0000 	str.w	r0, [r8]
 800ece4:	e7c6      	b.n	800ec74 <_scanf_float+0x3a0>
 800ece6:	2500      	movs	r5, #0
 800ece8:	e635      	b.n	800e956 <_scanf_float+0x82>
 800ecea:	bf00      	nop
 800ecec:	08012e9c 	.word	0x08012e9c
 800ecf0:	08013318 	.word	0x08013318

0800ecf4 <iprintf>:
 800ecf4:	b40f      	push	{r0, r1, r2, r3}
 800ecf6:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <iprintf+0x2c>)
 800ecf8:	b513      	push	{r0, r1, r4, lr}
 800ecfa:	681c      	ldr	r4, [r3, #0]
 800ecfc:	b124      	cbz	r4, 800ed08 <iprintf+0x14>
 800ecfe:	69a3      	ldr	r3, [r4, #24]
 800ed00:	b913      	cbnz	r3, 800ed08 <iprintf+0x14>
 800ed02:	4620      	mov	r0, r4
 800ed04:	f001 fdc8 	bl	8010898 <__sinit>
 800ed08:	ab05      	add	r3, sp, #20
 800ed0a:	9a04      	ldr	r2, [sp, #16]
 800ed0c:	68a1      	ldr	r1, [r4, #8]
 800ed0e:	9301      	str	r3, [sp, #4]
 800ed10:	4620      	mov	r0, r4
 800ed12:	f003 f851 	bl	8011db8 <_vfiprintf_r>
 800ed16:	b002      	add	sp, #8
 800ed18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed1c:	b004      	add	sp, #16
 800ed1e:	4770      	bx	lr
 800ed20:	20000190 	.word	0x20000190

0800ed24 <_sbrk_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4d06      	ldr	r5, [pc, #24]	; (800ed40 <_sbrk_r+0x1c>)
 800ed28:	2300      	movs	r3, #0
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	4608      	mov	r0, r1
 800ed2e:	602b      	str	r3, [r5, #0]
 800ed30:	f7f4 fb50 	bl	80033d4 <_sbrk>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	d102      	bne.n	800ed3e <_sbrk_r+0x1a>
 800ed38:	682b      	ldr	r3, [r5, #0]
 800ed3a:	b103      	cbz	r3, 800ed3e <_sbrk_r+0x1a>
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	bd38      	pop	{r3, r4, r5, pc}
 800ed40:	200020a4 	.word	0x200020a4

0800ed44 <nanf>:
 800ed44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ed4c <nanf+0x8>
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	7fc00000 	.word	0x7fc00000

0800ed50 <siprintf>:
 800ed50:	b40e      	push	{r1, r2, r3}
 800ed52:	b500      	push	{lr}
 800ed54:	b09c      	sub	sp, #112	; 0x70
 800ed56:	ab1d      	add	r3, sp, #116	; 0x74
 800ed58:	9002      	str	r0, [sp, #8]
 800ed5a:	9006      	str	r0, [sp, #24]
 800ed5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed60:	4809      	ldr	r0, [pc, #36]	; (800ed88 <siprintf+0x38>)
 800ed62:	9107      	str	r1, [sp, #28]
 800ed64:	9104      	str	r1, [sp, #16]
 800ed66:	4909      	ldr	r1, [pc, #36]	; (800ed8c <siprintf+0x3c>)
 800ed68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed6c:	9105      	str	r1, [sp, #20]
 800ed6e:	6800      	ldr	r0, [r0, #0]
 800ed70:	9301      	str	r3, [sp, #4]
 800ed72:	a902      	add	r1, sp, #8
 800ed74:	f002 fef6 	bl	8011b64 <_svfiprintf_r>
 800ed78:	9b02      	ldr	r3, [sp, #8]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	701a      	strb	r2, [r3, #0]
 800ed7e:	b01c      	add	sp, #112	; 0x70
 800ed80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed84:	b003      	add	sp, #12
 800ed86:	4770      	bx	lr
 800ed88:	20000190 	.word	0x20000190
 800ed8c:	ffff0208 	.word	0xffff0208

0800ed90 <sulp>:
 800ed90:	b570      	push	{r4, r5, r6, lr}
 800ed92:	4604      	mov	r4, r0
 800ed94:	460d      	mov	r5, r1
 800ed96:	ec45 4b10 	vmov	d0, r4, r5
 800ed9a:	4616      	mov	r6, r2
 800ed9c:	f002 fd28 	bl	80117f0 <__ulp>
 800eda0:	ec51 0b10 	vmov	r0, r1, d0
 800eda4:	b17e      	cbz	r6, 800edc6 <sulp+0x36>
 800eda6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800edaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800edae:	2b00      	cmp	r3, #0
 800edb0:	dd09      	ble.n	800edc6 <sulp+0x36>
 800edb2:	051b      	lsls	r3, r3, #20
 800edb4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800edb8:	2400      	movs	r4, #0
 800edba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800edbe:	4622      	mov	r2, r4
 800edc0:	462b      	mov	r3, r5
 800edc2:	f7f1 fc29 	bl	8000618 <__aeabi_dmul>
 800edc6:	bd70      	pop	{r4, r5, r6, pc}

0800edc8 <_strtod_l>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	b0a3      	sub	sp, #140	; 0x8c
 800edce:	461f      	mov	r7, r3
 800edd0:	2300      	movs	r3, #0
 800edd2:	931e      	str	r3, [sp, #120]	; 0x78
 800edd4:	4ba4      	ldr	r3, [pc, #656]	; (800f068 <_strtod_l+0x2a0>)
 800edd6:	9219      	str	r2, [sp, #100]	; 0x64
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	9307      	str	r3, [sp, #28]
 800eddc:	4604      	mov	r4, r0
 800edde:	4618      	mov	r0, r3
 800ede0:	4688      	mov	r8, r1
 800ede2:	f7f1 fa05 	bl	80001f0 <strlen>
 800ede6:	f04f 0a00 	mov.w	sl, #0
 800edea:	4605      	mov	r5, r0
 800edec:	f04f 0b00 	mov.w	fp, #0
 800edf0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800edf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800edf6:	781a      	ldrb	r2, [r3, #0]
 800edf8:	2a2b      	cmp	r2, #43	; 0x2b
 800edfa:	d04c      	beq.n	800ee96 <_strtod_l+0xce>
 800edfc:	d839      	bhi.n	800ee72 <_strtod_l+0xaa>
 800edfe:	2a0d      	cmp	r2, #13
 800ee00:	d832      	bhi.n	800ee68 <_strtod_l+0xa0>
 800ee02:	2a08      	cmp	r2, #8
 800ee04:	d832      	bhi.n	800ee6c <_strtod_l+0xa4>
 800ee06:	2a00      	cmp	r2, #0
 800ee08:	d03c      	beq.n	800ee84 <_strtod_l+0xbc>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ee0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ee10:	7833      	ldrb	r3, [r6, #0]
 800ee12:	2b30      	cmp	r3, #48	; 0x30
 800ee14:	f040 80b4 	bne.w	800ef80 <_strtod_l+0x1b8>
 800ee18:	7873      	ldrb	r3, [r6, #1]
 800ee1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ee1e:	2b58      	cmp	r3, #88	; 0x58
 800ee20:	d16c      	bne.n	800eefc <_strtod_l+0x134>
 800ee22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	ab1e      	add	r3, sp, #120	; 0x78
 800ee28:	9702      	str	r7, [sp, #8]
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4a8f      	ldr	r2, [pc, #572]	; (800f06c <_strtod_l+0x2a4>)
 800ee2e:	ab1f      	add	r3, sp, #124	; 0x7c
 800ee30:	a91d      	add	r1, sp, #116	; 0x74
 800ee32:	4620      	mov	r0, r4
 800ee34:	f001 fe34 	bl	8010aa0 <__gethex>
 800ee38:	f010 0707 	ands.w	r7, r0, #7
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	d005      	beq.n	800ee4c <_strtod_l+0x84>
 800ee40:	2f06      	cmp	r7, #6
 800ee42:	d12a      	bne.n	800ee9a <_strtod_l+0xd2>
 800ee44:	3601      	adds	r6, #1
 800ee46:	2300      	movs	r3, #0
 800ee48:	961d      	str	r6, [sp, #116]	; 0x74
 800ee4a:	930e      	str	r3, [sp, #56]	; 0x38
 800ee4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f040 8596 	bne.w	800f980 <_strtod_l+0xbb8>
 800ee54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee56:	b1db      	cbz	r3, 800ee90 <_strtod_l+0xc8>
 800ee58:	4652      	mov	r2, sl
 800ee5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ee5e:	ec43 2b10 	vmov	d0, r2, r3
 800ee62:	b023      	add	sp, #140	; 0x8c
 800ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee68:	2a20      	cmp	r2, #32
 800ee6a:	d1ce      	bne.n	800ee0a <_strtod_l+0x42>
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	931d      	str	r3, [sp, #116]	; 0x74
 800ee70:	e7c0      	b.n	800edf4 <_strtod_l+0x2c>
 800ee72:	2a2d      	cmp	r2, #45	; 0x2d
 800ee74:	d1c9      	bne.n	800ee0a <_strtod_l+0x42>
 800ee76:	2201      	movs	r2, #1
 800ee78:	920e      	str	r2, [sp, #56]	; 0x38
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	921d      	str	r2, [sp, #116]	; 0x74
 800ee7e:	785b      	ldrb	r3, [r3, #1]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1c4      	bne.n	800ee0e <_strtod_l+0x46>
 800ee84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ee86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	f040 8576 	bne.w	800f97c <_strtod_l+0xbb4>
 800ee90:	4652      	mov	r2, sl
 800ee92:	465b      	mov	r3, fp
 800ee94:	e7e3      	b.n	800ee5e <_strtod_l+0x96>
 800ee96:	2200      	movs	r2, #0
 800ee98:	e7ee      	b.n	800ee78 <_strtod_l+0xb0>
 800ee9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ee9c:	b13a      	cbz	r2, 800eeae <_strtod_l+0xe6>
 800ee9e:	2135      	movs	r1, #53	; 0x35
 800eea0:	a820      	add	r0, sp, #128	; 0x80
 800eea2:	f002 fdb0 	bl	8011a06 <__copybits>
 800eea6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f002 f975 	bl	8011198 <_Bfree>
 800eeae:	3f01      	subs	r7, #1
 800eeb0:	2f05      	cmp	r7, #5
 800eeb2:	d807      	bhi.n	800eec4 <_strtod_l+0xfc>
 800eeb4:	e8df f007 	tbb	[pc, r7]
 800eeb8:	1d180b0e 	.word	0x1d180b0e
 800eebc:	030e      	.short	0x030e
 800eebe:	f04f 0b00 	mov.w	fp, #0
 800eec2:	46da      	mov	sl, fp
 800eec4:	0728      	lsls	r0, r5, #28
 800eec6:	d5c1      	bpl.n	800ee4c <_strtod_l+0x84>
 800eec8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800eecc:	e7be      	b.n	800ee4c <_strtod_l+0x84>
 800eece:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800eed2:	e7f7      	b.n	800eec4 <_strtod_l+0xfc>
 800eed4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800eed8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eeda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800eede:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800eee2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eee6:	e7ed      	b.n	800eec4 <_strtod_l+0xfc>
 800eee8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f070 <_strtod_l+0x2a8>
 800eeec:	f04f 0a00 	mov.w	sl, #0
 800eef0:	e7e8      	b.n	800eec4 <_strtod_l+0xfc>
 800eef2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800eef6:	f04f 3aff 	mov.w	sl, #4294967295
 800eefa:	e7e3      	b.n	800eec4 <_strtod_l+0xfc>
 800eefc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	921d      	str	r2, [sp, #116]	; 0x74
 800ef02:	785b      	ldrb	r3, [r3, #1]
 800ef04:	2b30      	cmp	r3, #48	; 0x30
 800ef06:	d0f9      	beq.n	800eefc <_strtod_l+0x134>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d09f      	beq.n	800ee4c <_strtod_l+0x84>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	f04f 0900 	mov.w	r9, #0
 800ef12:	9304      	str	r3, [sp, #16]
 800ef14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef16:	930a      	str	r3, [sp, #40]	; 0x28
 800ef18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ef1c:	464f      	mov	r7, r9
 800ef1e:	220a      	movs	r2, #10
 800ef20:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ef22:	7806      	ldrb	r6, [r0, #0]
 800ef24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ef28:	b2d9      	uxtb	r1, r3
 800ef2a:	2909      	cmp	r1, #9
 800ef2c:	d92a      	bls.n	800ef84 <_strtod_l+0x1bc>
 800ef2e:	9907      	ldr	r1, [sp, #28]
 800ef30:	462a      	mov	r2, r5
 800ef32:	f003 f8bc 	bl	80120ae <strncmp>
 800ef36:	b398      	cbz	r0, 800efa0 <_strtod_l+0x1d8>
 800ef38:	2000      	movs	r0, #0
 800ef3a:	4633      	mov	r3, r6
 800ef3c:	463d      	mov	r5, r7
 800ef3e:	9007      	str	r0, [sp, #28]
 800ef40:	4602      	mov	r2, r0
 800ef42:	2b65      	cmp	r3, #101	; 0x65
 800ef44:	d001      	beq.n	800ef4a <_strtod_l+0x182>
 800ef46:	2b45      	cmp	r3, #69	; 0x45
 800ef48:	d118      	bne.n	800ef7c <_strtod_l+0x1b4>
 800ef4a:	b91d      	cbnz	r5, 800ef54 <_strtod_l+0x18c>
 800ef4c:	9b04      	ldr	r3, [sp, #16]
 800ef4e:	4303      	orrs	r3, r0
 800ef50:	d098      	beq.n	800ee84 <_strtod_l+0xbc>
 800ef52:	2500      	movs	r5, #0
 800ef54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ef58:	f108 0301 	add.w	r3, r8, #1
 800ef5c:	931d      	str	r3, [sp, #116]	; 0x74
 800ef5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ef62:	2b2b      	cmp	r3, #43	; 0x2b
 800ef64:	d075      	beq.n	800f052 <_strtod_l+0x28a>
 800ef66:	2b2d      	cmp	r3, #45	; 0x2d
 800ef68:	d07b      	beq.n	800f062 <_strtod_l+0x29a>
 800ef6a:	f04f 0c00 	mov.w	ip, #0
 800ef6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ef72:	2909      	cmp	r1, #9
 800ef74:	f240 8082 	bls.w	800f07c <_strtod_l+0x2b4>
 800ef78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ef7c:	2600      	movs	r6, #0
 800ef7e:	e09d      	b.n	800f0bc <_strtod_l+0x2f4>
 800ef80:	2300      	movs	r3, #0
 800ef82:	e7c4      	b.n	800ef0e <_strtod_l+0x146>
 800ef84:	2f08      	cmp	r7, #8
 800ef86:	bfd8      	it	le
 800ef88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ef8a:	f100 0001 	add.w	r0, r0, #1
 800ef8e:	bfda      	itte	le
 800ef90:	fb02 3301 	mlale	r3, r2, r1, r3
 800ef94:	9309      	strle	r3, [sp, #36]	; 0x24
 800ef96:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ef9a:	3701      	adds	r7, #1
 800ef9c:	901d      	str	r0, [sp, #116]	; 0x74
 800ef9e:	e7bf      	b.n	800ef20 <_strtod_l+0x158>
 800efa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efa2:	195a      	adds	r2, r3, r5
 800efa4:	921d      	str	r2, [sp, #116]	; 0x74
 800efa6:	5d5b      	ldrb	r3, [r3, r5]
 800efa8:	2f00      	cmp	r7, #0
 800efaa:	d037      	beq.n	800f01c <_strtod_l+0x254>
 800efac:	9007      	str	r0, [sp, #28]
 800efae:	463d      	mov	r5, r7
 800efb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800efb4:	2a09      	cmp	r2, #9
 800efb6:	d912      	bls.n	800efde <_strtod_l+0x216>
 800efb8:	2201      	movs	r2, #1
 800efba:	e7c2      	b.n	800ef42 <_strtod_l+0x17a>
 800efbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	921d      	str	r2, [sp, #116]	; 0x74
 800efc2:	785b      	ldrb	r3, [r3, #1]
 800efc4:	3001      	adds	r0, #1
 800efc6:	2b30      	cmp	r3, #48	; 0x30
 800efc8:	d0f8      	beq.n	800efbc <_strtod_l+0x1f4>
 800efca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800efce:	2a08      	cmp	r2, #8
 800efd0:	f200 84db 	bhi.w	800f98a <_strtod_l+0xbc2>
 800efd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800efd6:	9007      	str	r0, [sp, #28]
 800efd8:	2000      	movs	r0, #0
 800efda:	920a      	str	r2, [sp, #40]	; 0x28
 800efdc:	4605      	mov	r5, r0
 800efde:	3b30      	subs	r3, #48	; 0x30
 800efe0:	f100 0201 	add.w	r2, r0, #1
 800efe4:	d014      	beq.n	800f010 <_strtod_l+0x248>
 800efe6:	9907      	ldr	r1, [sp, #28]
 800efe8:	4411      	add	r1, r2
 800efea:	9107      	str	r1, [sp, #28]
 800efec:	462a      	mov	r2, r5
 800efee:	eb00 0e05 	add.w	lr, r0, r5
 800eff2:	210a      	movs	r1, #10
 800eff4:	4572      	cmp	r2, lr
 800eff6:	d113      	bne.n	800f020 <_strtod_l+0x258>
 800eff8:	182a      	adds	r2, r5, r0
 800effa:	2a08      	cmp	r2, #8
 800effc:	f105 0501 	add.w	r5, r5, #1
 800f000:	4405      	add	r5, r0
 800f002:	dc1c      	bgt.n	800f03e <_strtod_l+0x276>
 800f004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f006:	220a      	movs	r2, #10
 800f008:	fb02 3301 	mla	r3, r2, r1, r3
 800f00c:	9309      	str	r3, [sp, #36]	; 0x24
 800f00e:	2200      	movs	r2, #0
 800f010:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f012:	1c59      	adds	r1, r3, #1
 800f014:	911d      	str	r1, [sp, #116]	; 0x74
 800f016:	785b      	ldrb	r3, [r3, #1]
 800f018:	4610      	mov	r0, r2
 800f01a:	e7c9      	b.n	800efb0 <_strtod_l+0x1e8>
 800f01c:	4638      	mov	r0, r7
 800f01e:	e7d2      	b.n	800efc6 <_strtod_l+0x1fe>
 800f020:	2a08      	cmp	r2, #8
 800f022:	dc04      	bgt.n	800f02e <_strtod_l+0x266>
 800f024:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f026:	434e      	muls	r6, r1
 800f028:	9609      	str	r6, [sp, #36]	; 0x24
 800f02a:	3201      	adds	r2, #1
 800f02c:	e7e2      	b.n	800eff4 <_strtod_l+0x22c>
 800f02e:	f102 0c01 	add.w	ip, r2, #1
 800f032:	f1bc 0f10 	cmp.w	ip, #16
 800f036:	bfd8      	it	le
 800f038:	fb01 f909 	mulle.w	r9, r1, r9
 800f03c:	e7f5      	b.n	800f02a <_strtod_l+0x262>
 800f03e:	2d10      	cmp	r5, #16
 800f040:	bfdc      	itt	le
 800f042:	220a      	movle	r2, #10
 800f044:	fb02 3909 	mlale	r9, r2, r9, r3
 800f048:	e7e1      	b.n	800f00e <_strtod_l+0x246>
 800f04a:	2300      	movs	r3, #0
 800f04c:	9307      	str	r3, [sp, #28]
 800f04e:	2201      	movs	r2, #1
 800f050:	e77c      	b.n	800ef4c <_strtod_l+0x184>
 800f052:	f04f 0c00 	mov.w	ip, #0
 800f056:	f108 0302 	add.w	r3, r8, #2
 800f05a:	931d      	str	r3, [sp, #116]	; 0x74
 800f05c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f060:	e785      	b.n	800ef6e <_strtod_l+0x1a6>
 800f062:	f04f 0c01 	mov.w	ip, #1
 800f066:	e7f6      	b.n	800f056 <_strtod_l+0x28e>
 800f068:	0801315c 	.word	0x0801315c
 800f06c:	08012ea4 	.word	0x08012ea4
 800f070:	7ff00000 	.word	0x7ff00000
 800f074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f076:	1c59      	adds	r1, r3, #1
 800f078:	911d      	str	r1, [sp, #116]	; 0x74
 800f07a:	785b      	ldrb	r3, [r3, #1]
 800f07c:	2b30      	cmp	r3, #48	; 0x30
 800f07e:	d0f9      	beq.n	800f074 <_strtod_l+0x2ac>
 800f080:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f084:	2908      	cmp	r1, #8
 800f086:	f63f af79 	bhi.w	800ef7c <_strtod_l+0x1b4>
 800f08a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f08e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f090:	9308      	str	r3, [sp, #32]
 800f092:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f094:	1c59      	adds	r1, r3, #1
 800f096:	911d      	str	r1, [sp, #116]	; 0x74
 800f098:	785b      	ldrb	r3, [r3, #1]
 800f09a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f09e:	2e09      	cmp	r6, #9
 800f0a0:	d937      	bls.n	800f112 <_strtod_l+0x34a>
 800f0a2:	9e08      	ldr	r6, [sp, #32]
 800f0a4:	1b89      	subs	r1, r1, r6
 800f0a6:	2908      	cmp	r1, #8
 800f0a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f0ac:	dc02      	bgt.n	800f0b4 <_strtod_l+0x2ec>
 800f0ae:	4576      	cmp	r6, lr
 800f0b0:	bfa8      	it	ge
 800f0b2:	4676      	movge	r6, lr
 800f0b4:	f1bc 0f00 	cmp.w	ip, #0
 800f0b8:	d000      	beq.n	800f0bc <_strtod_l+0x2f4>
 800f0ba:	4276      	negs	r6, r6
 800f0bc:	2d00      	cmp	r5, #0
 800f0be:	d14f      	bne.n	800f160 <_strtod_l+0x398>
 800f0c0:	9904      	ldr	r1, [sp, #16]
 800f0c2:	4301      	orrs	r1, r0
 800f0c4:	f47f aec2 	bne.w	800ee4c <_strtod_l+0x84>
 800f0c8:	2a00      	cmp	r2, #0
 800f0ca:	f47f aedb 	bne.w	800ee84 <_strtod_l+0xbc>
 800f0ce:	2b69      	cmp	r3, #105	; 0x69
 800f0d0:	d027      	beq.n	800f122 <_strtod_l+0x35a>
 800f0d2:	dc24      	bgt.n	800f11e <_strtod_l+0x356>
 800f0d4:	2b49      	cmp	r3, #73	; 0x49
 800f0d6:	d024      	beq.n	800f122 <_strtod_l+0x35a>
 800f0d8:	2b4e      	cmp	r3, #78	; 0x4e
 800f0da:	f47f aed3 	bne.w	800ee84 <_strtod_l+0xbc>
 800f0de:	499e      	ldr	r1, [pc, #632]	; (800f358 <_strtod_l+0x590>)
 800f0e0:	a81d      	add	r0, sp, #116	; 0x74
 800f0e2:	f001 ff35 	bl	8010f50 <__match>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	f43f aecc 	beq.w	800ee84 <_strtod_l+0xbc>
 800f0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	2b28      	cmp	r3, #40	; 0x28
 800f0f2:	d12d      	bne.n	800f150 <_strtod_l+0x388>
 800f0f4:	4999      	ldr	r1, [pc, #612]	; (800f35c <_strtod_l+0x594>)
 800f0f6:	aa20      	add	r2, sp, #128	; 0x80
 800f0f8:	a81d      	add	r0, sp, #116	; 0x74
 800f0fa:	f001 ff3d 	bl	8010f78 <__hexnan>
 800f0fe:	2805      	cmp	r0, #5
 800f100:	d126      	bne.n	800f150 <_strtod_l+0x388>
 800f102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f104:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f108:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f10c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f110:	e69c      	b.n	800ee4c <_strtod_l+0x84>
 800f112:	210a      	movs	r1, #10
 800f114:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f118:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f11c:	e7b9      	b.n	800f092 <_strtod_l+0x2ca>
 800f11e:	2b6e      	cmp	r3, #110	; 0x6e
 800f120:	e7db      	b.n	800f0da <_strtod_l+0x312>
 800f122:	498f      	ldr	r1, [pc, #572]	; (800f360 <_strtod_l+0x598>)
 800f124:	a81d      	add	r0, sp, #116	; 0x74
 800f126:	f001 ff13 	bl	8010f50 <__match>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	f43f aeaa 	beq.w	800ee84 <_strtod_l+0xbc>
 800f130:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f132:	498c      	ldr	r1, [pc, #560]	; (800f364 <_strtod_l+0x59c>)
 800f134:	3b01      	subs	r3, #1
 800f136:	a81d      	add	r0, sp, #116	; 0x74
 800f138:	931d      	str	r3, [sp, #116]	; 0x74
 800f13a:	f001 ff09 	bl	8010f50 <__match>
 800f13e:	b910      	cbnz	r0, 800f146 <_strtod_l+0x37e>
 800f140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f142:	3301      	adds	r3, #1
 800f144:	931d      	str	r3, [sp, #116]	; 0x74
 800f146:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f374 <_strtod_l+0x5ac>
 800f14a:	f04f 0a00 	mov.w	sl, #0
 800f14e:	e67d      	b.n	800ee4c <_strtod_l+0x84>
 800f150:	4885      	ldr	r0, [pc, #532]	; (800f368 <_strtod_l+0x5a0>)
 800f152:	f002 ff61 	bl	8012018 <nan>
 800f156:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f15a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f15e:	e675      	b.n	800ee4c <_strtod_l+0x84>
 800f160:	9b07      	ldr	r3, [sp, #28]
 800f162:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f164:	1af3      	subs	r3, r6, r3
 800f166:	2f00      	cmp	r7, #0
 800f168:	bf08      	it	eq
 800f16a:	462f      	moveq	r7, r5
 800f16c:	2d10      	cmp	r5, #16
 800f16e:	9308      	str	r3, [sp, #32]
 800f170:	46a8      	mov	r8, r5
 800f172:	bfa8      	it	ge
 800f174:	f04f 0810 	movge.w	r8, #16
 800f178:	f7f1 f9d4 	bl	8000524 <__aeabi_ui2d>
 800f17c:	2d09      	cmp	r5, #9
 800f17e:	4682      	mov	sl, r0
 800f180:	468b      	mov	fp, r1
 800f182:	dd13      	ble.n	800f1ac <_strtod_l+0x3e4>
 800f184:	4b79      	ldr	r3, [pc, #484]	; (800f36c <_strtod_l+0x5a4>)
 800f186:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f18a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f18e:	f7f1 fa43 	bl	8000618 <__aeabi_dmul>
 800f192:	4682      	mov	sl, r0
 800f194:	4648      	mov	r0, r9
 800f196:	468b      	mov	fp, r1
 800f198:	f7f1 f9c4 	bl	8000524 <__aeabi_ui2d>
 800f19c:	4602      	mov	r2, r0
 800f19e:	460b      	mov	r3, r1
 800f1a0:	4650      	mov	r0, sl
 800f1a2:	4659      	mov	r1, fp
 800f1a4:	f7f1 f882 	bl	80002ac <__adddf3>
 800f1a8:	4682      	mov	sl, r0
 800f1aa:	468b      	mov	fp, r1
 800f1ac:	2d0f      	cmp	r5, #15
 800f1ae:	dc38      	bgt.n	800f222 <_strtod_l+0x45a>
 800f1b0:	9b08      	ldr	r3, [sp, #32]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f43f ae4a 	beq.w	800ee4c <_strtod_l+0x84>
 800f1b8:	dd24      	ble.n	800f204 <_strtod_l+0x43c>
 800f1ba:	2b16      	cmp	r3, #22
 800f1bc:	dc0b      	bgt.n	800f1d6 <_strtod_l+0x40e>
 800f1be:	4d6b      	ldr	r5, [pc, #428]	; (800f36c <_strtod_l+0x5a4>)
 800f1c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f1c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	f7f1 fa24 	bl	8000618 <__aeabi_dmul>
 800f1d0:	4682      	mov	sl, r0
 800f1d2:	468b      	mov	fp, r1
 800f1d4:	e63a      	b.n	800ee4c <_strtod_l+0x84>
 800f1d6:	9a08      	ldr	r2, [sp, #32]
 800f1d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	db20      	blt.n	800f222 <_strtod_l+0x45a>
 800f1e0:	4c62      	ldr	r4, [pc, #392]	; (800f36c <_strtod_l+0x5a4>)
 800f1e2:	f1c5 050f 	rsb	r5, r5, #15
 800f1e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f1ea:	4652      	mov	r2, sl
 800f1ec:	465b      	mov	r3, fp
 800f1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1f2:	f7f1 fa11 	bl	8000618 <__aeabi_dmul>
 800f1f6:	9b08      	ldr	r3, [sp, #32]
 800f1f8:	1b5d      	subs	r5, r3, r5
 800f1fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f1fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f202:	e7e3      	b.n	800f1cc <_strtod_l+0x404>
 800f204:	9b08      	ldr	r3, [sp, #32]
 800f206:	3316      	adds	r3, #22
 800f208:	db0b      	blt.n	800f222 <_strtod_l+0x45a>
 800f20a:	9b07      	ldr	r3, [sp, #28]
 800f20c:	4a57      	ldr	r2, [pc, #348]	; (800f36c <_strtod_l+0x5a4>)
 800f20e:	1b9e      	subs	r6, r3, r6
 800f210:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f214:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f218:	4650      	mov	r0, sl
 800f21a:	4659      	mov	r1, fp
 800f21c:	f7f1 fb26 	bl	800086c <__aeabi_ddiv>
 800f220:	e7d6      	b.n	800f1d0 <_strtod_l+0x408>
 800f222:	9b08      	ldr	r3, [sp, #32]
 800f224:	eba5 0808 	sub.w	r8, r5, r8
 800f228:	4498      	add	r8, r3
 800f22a:	f1b8 0f00 	cmp.w	r8, #0
 800f22e:	dd71      	ble.n	800f314 <_strtod_l+0x54c>
 800f230:	f018 030f 	ands.w	r3, r8, #15
 800f234:	d00a      	beq.n	800f24c <_strtod_l+0x484>
 800f236:	494d      	ldr	r1, [pc, #308]	; (800f36c <_strtod_l+0x5a4>)
 800f238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f23c:	4652      	mov	r2, sl
 800f23e:	465b      	mov	r3, fp
 800f240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f244:	f7f1 f9e8 	bl	8000618 <__aeabi_dmul>
 800f248:	4682      	mov	sl, r0
 800f24a:	468b      	mov	fp, r1
 800f24c:	f038 080f 	bics.w	r8, r8, #15
 800f250:	d04d      	beq.n	800f2ee <_strtod_l+0x526>
 800f252:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f256:	dd22      	ble.n	800f29e <_strtod_l+0x4d6>
 800f258:	2500      	movs	r5, #0
 800f25a:	462e      	mov	r6, r5
 800f25c:	9509      	str	r5, [sp, #36]	; 0x24
 800f25e:	9507      	str	r5, [sp, #28]
 800f260:	2322      	movs	r3, #34	; 0x22
 800f262:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f374 <_strtod_l+0x5ac>
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	f04f 0a00 	mov.w	sl, #0
 800f26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f43f adec 	beq.w	800ee4c <_strtod_l+0x84>
 800f274:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f276:	4620      	mov	r0, r4
 800f278:	f001 ff8e 	bl	8011198 <_Bfree>
 800f27c:	9907      	ldr	r1, [sp, #28]
 800f27e:	4620      	mov	r0, r4
 800f280:	f001 ff8a 	bl	8011198 <_Bfree>
 800f284:	4631      	mov	r1, r6
 800f286:	4620      	mov	r0, r4
 800f288:	f001 ff86 	bl	8011198 <_Bfree>
 800f28c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f28e:	4620      	mov	r0, r4
 800f290:	f001 ff82 	bl	8011198 <_Bfree>
 800f294:	4629      	mov	r1, r5
 800f296:	4620      	mov	r0, r4
 800f298:	f001 ff7e 	bl	8011198 <_Bfree>
 800f29c:	e5d6      	b.n	800ee4c <_strtod_l+0x84>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f2a4:	4650      	mov	r0, sl
 800f2a6:	4659      	mov	r1, fp
 800f2a8:	4699      	mov	r9, r3
 800f2aa:	f1b8 0f01 	cmp.w	r8, #1
 800f2ae:	dc21      	bgt.n	800f2f4 <_strtod_l+0x52c>
 800f2b0:	b10b      	cbz	r3, 800f2b6 <_strtod_l+0x4ee>
 800f2b2:	4682      	mov	sl, r0
 800f2b4:	468b      	mov	fp, r1
 800f2b6:	4b2e      	ldr	r3, [pc, #184]	; (800f370 <_strtod_l+0x5a8>)
 800f2b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f2bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f2c0:	4652      	mov	r2, sl
 800f2c2:	465b      	mov	r3, fp
 800f2c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f2c8:	f7f1 f9a6 	bl	8000618 <__aeabi_dmul>
 800f2cc:	4b29      	ldr	r3, [pc, #164]	; (800f374 <_strtod_l+0x5ac>)
 800f2ce:	460a      	mov	r2, r1
 800f2d0:	400b      	ands	r3, r1
 800f2d2:	4929      	ldr	r1, [pc, #164]	; (800f378 <_strtod_l+0x5b0>)
 800f2d4:	428b      	cmp	r3, r1
 800f2d6:	4682      	mov	sl, r0
 800f2d8:	d8be      	bhi.n	800f258 <_strtod_l+0x490>
 800f2da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f2de:	428b      	cmp	r3, r1
 800f2e0:	bf86      	itte	hi
 800f2e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f37c <_strtod_l+0x5b4>
 800f2e6:	f04f 3aff 	movhi.w	sl, #4294967295
 800f2ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	9304      	str	r3, [sp, #16]
 800f2f2:	e081      	b.n	800f3f8 <_strtod_l+0x630>
 800f2f4:	f018 0f01 	tst.w	r8, #1
 800f2f8:	d007      	beq.n	800f30a <_strtod_l+0x542>
 800f2fa:	4b1d      	ldr	r3, [pc, #116]	; (800f370 <_strtod_l+0x5a8>)
 800f2fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f304:	f7f1 f988 	bl	8000618 <__aeabi_dmul>
 800f308:	2301      	movs	r3, #1
 800f30a:	f109 0901 	add.w	r9, r9, #1
 800f30e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f312:	e7ca      	b.n	800f2aa <_strtod_l+0x4e2>
 800f314:	d0eb      	beq.n	800f2ee <_strtod_l+0x526>
 800f316:	f1c8 0800 	rsb	r8, r8, #0
 800f31a:	f018 020f 	ands.w	r2, r8, #15
 800f31e:	d00a      	beq.n	800f336 <_strtod_l+0x56e>
 800f320:	4b12      	ldr	r3, [pc, #72]	; (800f36c <_strtod_l+0x5a4>)
 800f322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f326:	4650      	mov	r0, sl
 800f328:	4659      	mov	r1, fp
 800f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32e:	f7f1 fa9d 	bl	800086c <__aeabi_ddiv>
 800f332:	4682      	mov	sl, r0
 800f334:	468b      	mov	fp, r1
 800f336:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f33a:	d0d8      	beq.n	800f2ee <_strtod_l+0x526>
 800f33c:	f1b8 0f1f 	cmp.w	r8, #31
 800f340:	dd1e      	ble.n	800f380 <_strtod_l+0x5b8>
 800f342:	2500      	movs	r5, #0
 800f344:	462e      	mov	r6, r5
 800f346:	9509      	str	r5, [sp, #36]	; 0x24
 800f348:	9507      	str	r5, [sp, #28]
 800f34a:	2322      	movs	r3, #34	; 0x22
 800f34c:	f04f 0a00 	mov.w	sl, #0
 800f350:	f04f 0b00 	mov.w	fp, #0
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	e789      	b.n	800f26c <_strtod_l+0x4a4>
 800f358:	08012e75 	.word	0x08012e75
 800f35c:	08012eb8 	.word	0x08012eb8
 800f360:	08012e6d 	.word	0x08012e6d
 800f364:	08012ffc 	.word	0x08012ffc
 800f368:	08013318 	.word	0x08013318
 800f36c:	080131f8 	.word	0x080131f8
 800f370:	080131d0 	.word	0x080131d0
 800f374:	7ff00000 	.word	0x7ff00000
 800f378:	7ca00000 	.word	0x7ca00000
 800f37c:	7fefffff 	.word	0x7fefffff
 800f380:	f018 0310 	ands.w	r3, r8, #16
 800f384:	bf18      	it	ne
 800f386:	236a      	movne	r3, #106	; 0x6a
 800f388:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f740 <_strtod_l+0x978>
 800f38c:	9304      	str	r3, [sp, #16]
 800f38e:	4650      	mov	r0, sl
 800f390:	4659      	mov	r1, fp
 800f392:	2300      	movs	r3, #0
 800f394:	f018 0f01 	tst.w	r8, #1
 800f398:	d004      	beq.n	800f3a4 <_strtod_l+0x5dc>
 800f39a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f39e:	f7f1 f93b 	bl	8000618 <__aeabi_dmul>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f3a8:	f109 0908 	add.w	r9, r9, #8
 800f3ac:	d1f2      	bne.n	800f394 <_strtod_l+0x5cc>
 800f3ae:	b10b      	cbz	r3, 800f3b4 <_strtod_l+0x5ec>
 800f3b0:	4682      	mov	sl, r0
 800f3b2:	468b      	mov	fp, r1
 800f3b4:	9b04      	ldr	r3, [sp, #16]
 800f3b6:	b1bb      	cbz	r3, 800f3e8 <_strtod_l+0x620>
 800f3b8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f3bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	4659      	mov	r1, fp
 800f3c4:	dd10      	ble.n	800f3e8 <_strtod_l+0x620>
 800f3c6:	2b1f      	cmp	r3, #31
 800f3c8:	f340 8128 	ble.w	800f61c <_strtod_l+0x854>
 800f3cc:	2b34      	cmp	r3, #52	; 0x34
 800f3ce:	bfde      	ittt	le
 800f3d0:	3b20      	suble	r3, #32
 800f3d2:	f04f 32ff 	movle.w	r2, #4294967295
 800f3d6:	fa02 f303 	lslle.w	r3, r2, r3
 800f3da:	f04f 0a00 	mov.w	sl, #0
 800f3de:	bfcc      	ite	gt
 800f3e0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f3e4:	ea03 0b01 	andle.w	fp, r3, r1
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	4650      	mov	r0, sl
 800f3ee:	4659      	mov	r1, fp
 800f3f0:	f7f1 fb7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d1a4      	bne.n	800f342 <_strtod_l+0x57a>
 800f3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f3fe:	462b      	mov	r3, r5
 800f400:	463a      	mov	r2, r7
 800f402:	4620      	mov	r0, r4
 800f404:	f001 ff34 	bl	8011270 <__s2b>
 800f408:	9009      	str	r0, [sp, #36]	; 0x24
 800f40a:	2800      	cmp	r0, #0
 800f40c:	f43f af24 	beq.w	800f258 <_strtod_l+0x490>
 800f410:	9b07      	ldr	r3, [sp, #28]
 800f412:	1b9e      	subs	r6, r3, r6
 800f414:	9b08      	ldr	r3, [sp, #32]
 800f416:	2b00      	cmp	r3, #0
 800f418:	bfb4      	ite	lt
 800f41a:	4633      	movlt	r3, r6
 800f41c:	2300      	movge	r3, #0
 800f41e:	9310      	str	r3, [sp, #64]	; 0x40
 800f420:	9b08      	ldr	r3, [sp, #32]
 800f422:	2500      	movs	r5, #0
 800f424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f428:	9318      	str	r3, [sp, #96]	; 0x60
 800f42a:	462e      	mov	r6, r5
 800f42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42e:	4620      	mov	r0, r4
 800f430:	6859      	ldr	r1, [r3, #4]
 800f432:	f001 fe71 	bl	8011118 <_Balloc>
 800f436:	9007      	str	r0, [sp, #28]
 800f438:	2800      	cmp	r0, #0
 800f43a:	f43f af11 	beq.w	800f260 <_strtod_l+0x498>
 800f43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f440:	691a      	ldr	r2, [r3, #16]
 800f442:	3202      	adds	r2, #2
 800f444:	f103 010c 	add.w	r1, r3, #12
 800f448:	0092      	lsls	r2, r2, #2
 800f44a:	300c      	adds	r0, #12
 800f44c:	f001 fe49 	bl	80110e2 <memcpy>
 800f450:	ec4b ab10 	vmov	d0, sl, fp
 800f454:	aa20      	add	r2, sp, #128	; 0x80
 800f456:	a91f      	add	r1, sp, #124	; 0x7c
 800f458:	4620      	mov	r0, r4
 800f45a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f45e:	f002 fa43 	bl	80118e8 <__d2b>
 800f462:	901e      	str	r0, [sp, #120]	; 0x78
 800f464:	2800      	cmp	r0, #0
 800f466:	f43f aefb 	beq.w	800f260 <_strtod_l+0x498>
 800f46a:	2101      	movs	r1, #1
 800f46c:	4620      	mov	r0, r4
 800f46e:	f001 ff99 	bl	80113a4 <__i2b>
 800f472:	4606      	mov	r6, r0
 800f474:	2800      	cmp	r0, #0
 800f476:	f43f aef3 	beq.w	800f260 <_strtod_l+0x498>
 800f47a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f47c:	9904      	ldr	r1, [sp, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	bfab      	itete	ge
 800f482:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f484:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f486:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f488:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f48c:	bfac      	ite	ge
 800f48e:	eb03 0902 	addge.w	r9, r3, r2
 800f492:	1ad7      	sublt	r7, r2, r3
 800f494:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f496:	eba3 0801 	sub.w	r8, r3, r1
 800f49a:	4490      	add	r8, r2
 800f49c:	4ba3      	ldr	r3, [pc, #652]	; (800f72c <_strtod_l+0x964>)
 800f49e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4a2:	4598      	cmp	r8, r3
 800f4a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f4a8:	f280 80cc 	bge.w	800f644 <_strtod_l+0x87c>
 800f4ac:	eba3 0308 	sub.w	r3, r3, r8
 800f4b0:	2b1f      	cmp	r3, #31
 800f4b2:	eba2 0203 	sub.w	r2, r2, r3
 800f4b6:	f04f 0101 	mov.w	r1, #1
 800f4ba:	f300 80b6 	bgt.w	800f62a <_strtod_l+0x862>
 800f4be:	fa01 f303 	lsl.w	r3, r1, r3
 800f4c2:	9311      	str	r3, [sp, #68]	; 0x44
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f4c8:	eb09 0802 	add.w	r8, r9, r2
 800f4cc:	9b04      	ldr	r3, [sp, #16]
 800f4ce:	45c1      	cmp	r9, r8
 800f4d0:	4417      	add	r7, r2
 800f4d2:	441f      	add	r7, r3
 800f4d4:	464b      	mov	r3, r9
 800f4d6:	bfa8      	it	ge
 800f4d8:	4643      	movge	r3, r8
 800f4da:	42bb      	cmp	r3, r7
 800f4dc:	bfa8      	it	ge
 800f4de:	463b      	movge	r3, r7
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	bfc2      	ittt	gt
 800f4e4:	eba8 0803 	subgt.w	r8, r8, r3
 800f4e8:	1aff      	subgt	r7, r7, r3
 800f4ea:	eba9 0903 	subgt.w	r9, r9, r3
 800f4ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dd17      	ble.n	800f524 <_strtod_l+0x75c>
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f002 f80f 	bl	801151c <__pow5mult>
 800f4fe:	4606      	mov	r6, r0
 800f500:	2800      	cmp	r0, #0
 800f502:	f43f aead 	beq.w	800f260 <_strtod_l+0x498>
 800f506:	4601      	mov	r1, r0
 800f508:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f50a:	4620      	mov	r0, r4
 800f50c:	f001 ff60 	bl	80113d0 <__multiply>
 800f510:	900f      	str	r0, [sp, #60]	; 0x3c
 800f512:	2800      	cmp	r0, #0
 800f514:	f43f aea4 	beq.w	800f260 <_strtod_l+0x498>
 800f518:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f51a:	4620      	mov	r0, r4
 800f51c:	f001 fe3c 	bl	8011198 <_Bfree>
 800f520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f522:	931e      	str	r3, [sp, #120]	; 0x78
 800f524:	f1b8 0f00 	cmp.w	r8, #0
 800f528:	f300 8091 	bgt.w	800f64e <_strtod_l+0x886>
 800f52c:	9b08      	ldr	r3, [sp, #32]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	dd08      	ble.n	800f544 <_strtod_l+0x77c>
 800f532:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f534:	9907      	ldr	r1, [sp, #28]
 800f536:	4620      	mov	r0, r4
 800f538:	f001 fff0 	bl	801151c <__pow5mult>
 800f53c:	9007      	str	r0, [sp, #28]
 800f53e:	2800      	cmp	r0, #0
 800f540:	f43f ae8e 	beq.w	800f260 <_strtod_l+0x498>
 800f544:	2f00      	cmp	r7, #0
 800f546:	dd08      	ble.n	800f55a <_strtod_l+0x792>
 800f548:	9907      	ldr	r1, [sp, #28]
 800f54a:	463a      	mov	r2, r7
 800f54c:	4620      	mov	r0, r4
 800f54e:	f002 f83f 	bl	80115d0 <__lshift>
 800f552:	9007      	str	r0, [sp, #28]
 800f554:	2800      	cmp	r0, #0
 800f556:	f43f ae83 	beq.w	800f260 <_strtod_l+0x498>
 800f55a:	f1b9 0f00 	cmp.w	r9, #0
 800f55e:	dd08      	ble.n	800f572 <_strtod_l+0x7aa>
 800f560:	4631      	mov	r1, r6
 800f562:	464a      	mov	r2, r9
 800f564:	4620      	mov	r0, r4
 800f566:	f002 f833 	bl	80115d0 <__lshift>
 800f56a:	4606      	mov	r6, r0
 800f56c:	2800      	cmp	r0, #0
 800f56e:	f43f ae77 	beq.w	800f260 <_strtod_l+0x498>
 800f572:	9a07      	ldr	r2, [sp, #28]
 800f574:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f576:	4620      	mov	r0, r4
 800f578:	f002 f8b2 	bl	80116e0 <__mdiff>
 800f57c:	4605      	mov	r5, r0
 800f57e:	2800      	cmp	r0, #0
 800f580:	f43f ae6e 	beq.w	800f260 <_strtod_l+0x498>
 800f584:	68c3      	ldr	r3, [r0, #12]
 800f586:	930f      	str	r3, [sp, #60]	; 0x3c
 800f588:	2300      	movs	r3, #0
 800f58a:	60c3      	str	r3, [r0, #12]
 800f58c:	4631      	mov	r1, r6
 800f58e:	f002 f88b 	bl	80116a8 <__mcmp>
 800f592:	2800      	cmp	r0, #0
 800f594:	da65      	bge.n	800f662 <_strtod_l+0x89a>
 800f596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f598:	ea53 030a 	orrs.w	r3, r3, sl
 800f59c:	f040 8087 	bne.w	800f6ae <_strtod_l+0x8e6>
 800f5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f040 8082 	bne.w	800f6ae <_strtod_l+0x8e6>
 800f5aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5ae:	0d1b      	lsrs	r3, r3, #20
 800f5b0:	051b      	lsls	r3, r3, #20
 800f5b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f5b6:	d97a      	bls.n	800f6ae <_strtod_l+0x8e6>
 800f5b8:	696b      	ldr	r3, [r5, #20]
 800f5ba:	b913      	cbnz	r3, 800f5c2 <_strtod_l+0x7fa>
 800f5bc:	692b      	ldr	r3, [r5, #16]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	dd75      	ble.n	800f6ae <_strtod_l+0x8e6>
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f002 f802 	bl	80115d0 <__lshift>
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	f002 f86a 	bl	80116a8 <__mcmp>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	dd6a      	ble.n	800f6ae <_strtod_l+0x8e6>
 800f5d8:	9904      	ldr	r1, [sp, #16]
 800f5da:	4a55      	ldr	r2, [pc, #340]	; (800f730 <_strtod_l+0x968>)
 800f5dc:	465b      	mov	r3, fp
 800f5de:	2900      	cmp	r1, #0
 800f5e0:	f000 8085 	beq.w	800f6ee <_strtod_l+0x926>
 800f5e4:	ea02 010b 	and.w	r1, r2, fp
 800f5e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f5ec:	dc7f      	bgt.n	800f6ee <_strtod_l+0x926>
 800f5ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f5f2:	f77f aeaa 	ble.w	800f34a <_strtod_l+0x582>
 800f5f6:	4a4f      	ldr	r2, [pc, #316]	; (800f734 <_strtod_l+0x96c>)
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f5fe:	4650      	mov	r0, sl
 800f600:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f604:	4659      	mov	r1, fp
 800f606:	f7f1 f807 	bl	8000618 <__aeabi_dmul>
 800f60a:	460b      	mov	r3, r1
 800f60c:	4303      	orrs	r3, r0
 800f60e:	bf08      	it	eq
 800f610:	2322      	moveq	r3, #34	; 0x22
 800f612:	4682      	mov	sl, r0
 800f614:	468b      	mov	fp, r1
 800f616:	bf08      	it	eq
 800f618:	6023      	streq	r3, [r4, #0]
 800f61a:	e62b      	b.n	800f274 <_strtod_l+0x4ac>
 800f61c:	f04f 32ff 	mov.w	r2, #4294967295
 800f620:	fa02 f303 	lsl.w	r3, r2, r3
 800f624:	ea03 0a0a 	and.w	sl, r3, sl
 800f628:	e6de      	b.n	800f3e8 <_strtod_l+0x620>
 800f62a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f62e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f632:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f636:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f63a:	fa01 f308 	lsl.w	r3, r1, r8
 800f63e:	930c      	str	r3, [sp, #48]	; 0x30
 800f640:	9111      	str	r1, [sp, #68]	; 0x44
 800f642:	e741      	b.n	800f4c8 <_strtod_l+0x700>
 800f644:	2300      	movs	r3, #0
 800f646:	930c      	str	r3, [sp, #48]	; 0x30
 800f648:	2301      	movs	r3, #1
 800f64a:	9311      	str	r3, [sp, #68]	; 0x44
 800f64c:	e73c      	b.n	800f4c8 <_strtod_l+0x700>
 800f64e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f650:	4642      	mov	r2, r8
 800f652:	4620      	mov	r0, r4
 800f654:	f001 ffbc 	bl	80115d0 <__lshift>
 800f658:	901e      	str	r0, [sp, #120]	; 0x78
 800f65a:	2800      	cmp	r0, #0
 800f65c:	f47f af66 	bne.w	800f52c <_strtod_l+0x764>
 800f660:	e5fe      	b.n	800f260 <_strtod_l+0x498>
 800f662:	465f      	mov	r7, fp
 800f664:	d16e      	bne.n	800f744 <_strtod_l+0x97c>
 800f666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f668:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f66c:	b342      	cbz	r2, 800f6c0 <_strtod_l+0x8f8>
 800f66e:	4a32      	ldr	r2, [pc, #200]	; (800f738 <_strtod_l+0x970>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d128      	bne.n	800f6c6 <_strtod_l+0x8fe>
 800f674:	9b04      	ldr	r3, [sp, #16]
 800f676:	4650      	mov	r0, sl
 800f678:	b1eb      	cbz	r3, 800f6b6 <_strtod_l+0x8ee>
 800f67a:	4a2d      	ldr	r2, [pc, #180]	; (800f730 <_strtod_l+0x968>)
 800f67c:	403a      	ands	r2, r7
 800f67e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f682:	f04f 31ff 	mov.w	r1, #4294967295
 800f686:	d819      	bhi.n	800f6bc <_strtod_l+0x8f4>
 800f688:	0d12      	lsrs	r2, r2, #20
 800f68a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f68e:	fa01 f303 	lsl.w	r3, r1, r3
 800f692:	4298      	cmp	r0, r3
 800f694:	d117      	bne.n	800f6c6 <_strtod_l+0x8fe>
 800f696:	4b29      	ldr	r3, [pc, #164]	; (800f73c <_strtod_l+0x974>)
 800f698:	429f      	cmp	r7, r3
 800f69a:	d102      	bne.n	800f6a2 <_strtod_l+0x8da>
 800f69c:	3001      	adds	r0, #1
 800f69e:	f43f addf 	beq.w	800f260 <_strtod_l+0x498>
 800f6a2:	4b23      	ldr	r3, [pc, #140]	; (800f730 <_strtod_l+0x968>)
 800f6a4:	403b      	ands	r3, r7
 800f6a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f6aa:	f04f 0a00 	mov.w	sl, #0
 800f6ae:	9b04      	ldr	r3, [sp, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1a0      	bne.n	800f5f6 <_strtod_l+0x82e>
 800f6b4:	e5de      	b.n	800f274 <_strtod_l+0x4ac>
 800f6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ba:	e7ea      	b.n	800f692 <_strtod_l+0x8ca>
 800f6bc:	460b      	mov	r3, r1
 800f6be:	e7e8      	b.n	800f692 <_strtod_l+0x8ca>
 800f6c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f6c4:	d088      	beq.n	800f5d8 <_strtod_l+0x810>
 800f6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6c8:	b1db      	cbz	r3, 800f702 <_strtod_l+0x93a>
 800f6ca:	423b      	tst	r3, r7
 800f6cc:	d0ef      	beq.n	800f6ae <_strtod_l+0x8e6>
 800f6ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6d0:	9a04      	ldr	r2, [sp, #16]
 800f6d2:	4650      	mov	r0, sl
 800f6d4:	4659      	mov	r1, fp
 800f6d6:	b1c3      	cbz	r3, 800f70a <_strtod_l+0x942>
 800f6d8:	f7ff fb5a 	bl	800ed90 <sulp>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	460b      	mov	r3, r1
 800f6e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f6e4:	f7f0 fde2 	bl	80002ac <__adddf3>
 800f6e8:	4682      	mov	sl, r0
 800f6ea:	468b      	mov	fp, r1
 800f6ec:	e7df      	b.n	800f6ae <_strtod_l+0x8e6>
 800f6ee:	4013      	ands	r3, r2
 800f6f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f6f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f6f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800f700:	e7d5      	b.n	800f6ae <_strtod_l+0x8e6>
 800f702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f704:	ea13 0f0a 	tst.w	r3, sl
 800f708:	e7e0      	b.n	800f6cc <_strtod_l+0x904>
 800f70a:	f7ff fb41 	bl	800ed90 <sulp>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f716:	f7f0 fdc7 	bl	80002a8 <__aeabi_dsub>
 800f71a:	2200      	movs	r2, #0
 800f71c:	2300      	movs	r3, #0
 800f71e:	4682      	mov	sl, r0
 800f720:	468b      	mov	fp, r1
 800f722:	f7f1 f9e1 	bl	8000ae8 <__aeabi_dcmpeq>
 800f726:	2800      	cmp	r0, #0
 800f728:	d0c1      	beq.n	800f6ae <_strtod_l+0x8e6>
 800f72a:	e60e      	b.n	800f34a <_strtod_l+0x582>
 800f72c:	fffffc02 	.word	0xfffffc02
 800f730:	7ff00000 	.word	0x7ff00000
 800f734:	39500000 	.word	0x39500000
 800f738:	000fffff 	.word	0x000fffff
 800f73c:	7fefffff 	.word	0x7fefffff
 800f740:	08012ed0 	.word	0x08012ed0
 800f744:	4631      	mov	r1, r6
 800f746:	4628      	mov	r0, r5
 800f748:	f002 f92a 	bl	80119a0 <__ratio>
 800f74c:	ec59 8b10 	vmov	r8, r9, d0
 800f750:	ee10 0a10 	vmov	r0, s0
 800f754:	2200      	movs	r2, #0
 800f756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f75a:	4649      	mov	r1, r9
 800f75c:	f7f1 f9d8 	bl	8000b10 <__aeabi_dcmple>
 800f760:	2800      	cmp	r0, #0
 800f762:	d07c      	beq.n	800f85e <_strtod_l+0xa96>
 800f764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f766:	2b00      	cmp	r3, #0
 800f768:	d04c      	beq.n	800f804 <_strtod_l+0xa3c>
 800f76a:	4b95      	ldr	r3, [pc, #596]	; (800f9c0 <_strtod_l+0xbf8>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f772:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f9c0 <_strtod_l+0xbf8>
 800f776:	f04f 0800 	mov.w	r8, #0
 800f77a:	4b92      	ldr	r3, [pc, #584]	; (800f9c4 <_strtod_l+0xbfc>)
 800f77c:	403b      	ands	r3, r7
 800f77e:	9311      	str	r3, [sp, #68]	; 0x44
 800f780:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f782:	4b91      	ldr	r3, [pc, #580]	; (800f9c8 <_strtod_l+0xc00>)
 800f784:	429a      	cmp	r2, r3
 800f786:	f040 80b2 	bne.w	800f8ee <_strtod_l+0xb26>
 800f78a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f78e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f792:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f796:	ec4b ab10 	vmov	d0, sl, fp
 800f79a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f79e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f7a2:	f002 f825 	bl	80117f0 <__ulp>
 800f7a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7aa:	ec53 2b10 	vmov	r2, r3, d0
 800f7ae:	f7f0 ff33 	bl	8000618 <__aeabi_dmul>
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	465b      	mov	r3, fp
 800f7b6:	f7f0 fd79 	bl	80002ac <__adddf3>
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4981      	ldr	r1, [pc, #516]	; (800f9c4 <_strtod_l+0xbfc>)
 800f7be:	4a83      	ldr	r2, [pc, #524]	; (800f9cc <_strtod_l+0xc04>)
 800f7c0:	4019      	ands	r1, r3
 800f7c2:	4291      	cmp	r1, r2
 800f7c4:	4682      	mov	sl, r0
 800f7c6:	d95e      	bls.n	800f886 <_strtod_l+0xabe>
 800f7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d103      	bne.n	800f7da <_strtod_l+0xa12>
 800f7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	f43f ad43 	beq.w	800f260 <_strtod_l+0x498>
 800f7da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f9d8 <_strtod_l+0xc10>
 800f7de:	f04f 3aff 	mov.w	sl, #4294967295
 800f7e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f001 fcd7 	bl	8011198 <_Bfree>
 800f7ea:	9907      	ldr	r1, [sp, #28]
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f001 fcd3 	bl	8011198 <_Bfree>
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f001 fccf 	bl	8011198 <_Bfree>
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f001 fccb 	bl	8011198 <_Bfree>
 800f802:	e613      	b.n	800f42c <_strtod_l+0x664>
 800f804:	f1ba 0f00 	cmp.w	sl, #0
 800f808:	d11b      	bne.n	800f842 <_strtod_l+0xa7a>
 800f80a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f80e:	b9f3      	cbnz	r3, 800f84e <_strtod_l+0xa86>
 800f810:	4b6b      	ldr	r3, [pc, #428]	; (800f9c0 <_strtod_l+0xbf8>)
 800f812:	2200      	movs	r2, #0
 800f814:	4640      	mov	r0, r8
 800f816:	4649      	mov	r1, r9
 800f818:	f7f1 f970 	bl	8000afc <__aeabi_dcmplt>
 800f81c:	b9d0      	cbnz	r0, 800f854 <_strtod_l+0xa8c>
 800f81e:	4640      	mov	r0, r8
 800f820:	4649      	mov	r1, r9
 800f822:	4b6b      	ldr	r3, [pc, #428]	; (800f9d0 <_strtod_l+0xc08>)
 800f824:	2200      	movs	r2, #0
 800f826:	f7f0 fef7 	bl	8000618 <__aeabi_dmul>
 800f82a:	4680      	mov	r8, r0
 800f82c:	4689      	mov	r9, r1
 800f82e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f832:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f836:	931b      	str	r3, [sp, #108]	; 0x6c
 800f838:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f83c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f840:	e79b      	b.n	800f77a <_strtod_l+0x9b2>
 800f842:	f1ba 0f01 	cmp.w	sl, #1
 800f846:	d102      	bne.n	800f84e <_strtod_l+0xa86>
 800f848:	2f00      	cmp	r7, #0
 800f84a:	f43f ad7e 	beq.w	800f34a <_strtod_l+0x582>
 800f84e:	4b61      	ldr	r3, [pc, #388]	; (800f9d4 <_strtod_l+0xc0c>)
 800f850:	2200      	movs	r2, #0
 800f852:	e78c      	b.n	800f76e <_strtod_l+0x9a6>
 800f854:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f9d0 <_strtod_l+0xc08>
 800f858:	f04f 0800 	mov.w	r8, #0
 800f85c:	e7e7      	b.n	800f82e <_strtod_l+0xa66>
 800f85e:	4b5c      	ldr	r3, [pc, #368]	; (800f9d0 <_strtod_l+0xc08>)
 800f860:	4640      	mov	r0, r8
 800f862:	4649      	mov	r1, r9
 800f864:	2200      	movs	r2, #0
 800f866:	f7f0 fed7 	bl	8000618 <__aeabi_dmul>
 800f86a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f86c:	4680      	mov	r8, r0
 800f86e:	4689      	mov	r9, r1
 800f870:	b933      	cbnz	r3, 800f880 <_strtod_l+0xab8>
 800f872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f876:	9012      	str	r0, [sp, #72]	; 0x48
 800f878:	9313      	str	r3, [sp, #76]	; 0x4c
 800f87a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f87e:	e7dd      	b.n	800f83c <_strtod_l+0xa74>
 800f880:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f884:	e7f9      	b.n	800f87a <_strtod_l+0xab2>
 800f886:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f88a:	9b04      	ldr	r3, [sp, #16]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1a8      	bne.n	800f7e2 <_strtod_l+0xa1a>
 800f890:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f894:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f896:	0d1b      	lsrs	r3, r3, #20
 800f898:	051b      	lsls	r3, r3, #20
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d1a1      	bne.n	800f7e2 <_strtod_l+0xa1a>
 800f89e:	4640      	mov	r0, r8
 800f8a0:	4649      	mov	r1, r9
 800f8a2:	f7f1 fa01 	bl	8000ca8 <__aeabi_d2lz>
 800f8a6:	f7f0 fe89 	bl	80005bc <__aeabi_l2d>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	4640      	mov	r0, r8
 800f8b0:	4649      	mov	r1, r9
 800f8b2:	f7f0 fcf9 	bl	80002a8 <__aeabi_dsub>
 800f8b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f8b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8bc:	ea43 030a 	orr.w	r3, r3, sl
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	4680      	mov	r8, r0
 800f8c4:	4689      	mov	r9, r1
 800f8c6:	d053      	beq.n	800f970 <_strtod_l+0xba8>
 800f8c8:	a335      	add	r3, pc, #212	; (adr r3, 800f9a0 <_strtod_l+0xbd8>)
 800f8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ce:	f7f1 f915 	bl	8000afc <__aeabi_dcmplt>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	f47f acce 	bne.w	800f274 <_strtod_l+0x4ac>
 800f8d8:	a333      	add	r3, pc, #204	; (adr r3, 800f9a8 <_strtod_l+0xbe0>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	4640      	mov	r0, r8
 800f8e0:	4649      	mov	r1, r9
 800f8e2:	f7f1 f929 	bl	8000b38 <__aeabi_dcmpgt>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	f43f af7b 	beq.w	800f7e2 <_strtod_l+0xa1a>
 800f8ec:	e4c2      	b.n	800f274 <_strtod_l+0x4ac>
 800f8ee:	9b04      	ldr	r3, [sp, #16]
 800f8f0:	b333      	cbz	r3, 800f940 <_strtod_l+0xb78>
 800f8f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f8f8:	d822      	bhi.n	800f940 <_strtod_l+0xb78>
 800f8fa:	a32d      	add	r3, pc, #180	; (adr r3, 800f9b0 <_strtod_l+0xbe8>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	4640      	mov	r0, r8
 800f902:	4649      	mov	r1, r9
 800f904:	f7f1 f904 	bl	8000b10 <__aeabi_dcmple>
 800f908:	b1a0      	cbz	r0, 800f934 <_strtod_l+0xb6c>
 800f90a:	4649      	mov	r1, r9
 800f90c:	4640      	mov	r0, r8
 800f90e:	f7f1 f95b 	bl	8000bc8 <__aeabi_d2uiz>
 800f912:	2801      	cmp	r0, #1
 800f914:	bf38      	it	cc
 800f916:	2001      	movcc	r0, #1
 800f918:	f7f0 fe04 	bl	8000524 <__aeabi_ui2d>
 800f91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91e:	4680      	mov	r8, r0
 800f920:	4689      	mov	r9, r1
 800f922:	bb13      	cbnz	r3, 800f96a <_strtod_l+0xba2>
 800f924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f928:	9014      	str	r0, [sp, #80]	; 0x50
 800f92a:	9315      	str	r3, [sp, #84]	; 0x54
 800f92c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f930:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f936:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f938:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f93c:	1a9b      	subs	r3, r3, r2
 800f93e:	930d      	str	r3, [sp, #52]	; 0x34
 800f940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f944:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f948:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f94c:	f001 ff50 	bl	80117f0 <__ulp>
 800f950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f954:	ec53 2b10 	vmov	r2, r3, d0
 800f958:	f7f0 fe5e 	bl	8000618 <__aeabi_dmul>
 800f95c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f960:	f7f0 fca4 	bl	80002ac <__adddf3>
 800f964:	4682      	mov	sl, r0
 800f966:	468b      	mov	fp, r1
 800f968:	e78f      	b.n	800f88a <_strtod_l+0xac2>
 800f96a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f96e:	e7dd      	b.n	800f92c <_strtod_l+0xb64>
 800f970:	a311      	add	r3, pc, #68	; (adr r3, 800f9b8 <_strtod_l+0xbf0>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	f7f1 f8c1 	bl	8000afc <__aeabi_dcmplt>
 800f97a:	e7b4      	b.n	800f8e6 <_strtod_l+0xb1e>
 800f97c:	2300      	movs	r3, #0
 800f97e:	930e      	str	r3, [sp, #56]	; 0x38
 800f980:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f984:	6013      	str	r3, [r2, #0]
 800f986:	f7ff ba65 	b.w	800ee54 <_strtod_l+0x8c>
 800f98a:	2b65      	cmp	r3, #101	; 0x65
 800f98c:	f43f ab5d 	beq.w	800f04a <_strtod_l+0x282>
 800f990:	2b45      	cmp	r3, #69	; 0x45
 800f992:	f43f ab5a 	beq.w	800f04a <_strtod_l+0x282>
 800f996:	2201      	movs	r2, #1
 800f998:	f7ff bb92 	b.w	800f0c0 <_strtod_l+0x2f8>
 800f99c:	f3af 8000 	nop.w
 800f9a0:	94a03595 	.word	0x94a03595
 800f9a4:	3fdfffff 	.word	0x3fdfffff
 800f9a8:	35afe535 	.word	0x35afe535
 800f9ac:	3fe00000 	.word	0x3fe00000
 800f9b0:	ffc00000 	.word	0xffc00000
 800f9b4:	41dfffff 	.word	0x41dfffff
 800f9b8:	94a03595 	.word	0x94a03595
 800f9bc:	3fcfffff 	.word	0x3fcfffff
 800f9c0:	3ff00000 	.word	0x3ff00000
 800f9c4:	7ff00000 	.word	0x7ff00000
 800f9c8:	7fe00000 	.word	0x7fe00000
 800f9cc:	7c9fffff 	.word	0x7c9fffff
 800f9d0:	3fe00000 	.word	0x3fe00000
 800f9d4:	bff00000 	.word	0xbff00000
 800f9d8:	7fefffff 	.word	0x7fefffff

0800f9dc <_strtod_r>:
 800f9dc:	4b01      	ldr	r3, [pc, #4]	; (800f9e4 <_strtod_r+0x8>)
 800f9de:	f7ff b9f3 	b.w	800edc8 <_strtod_l>
 800f9e2:	bf00      	nop
 800f9e4:	200001f8 	.word	0x200001f8

0800f9e8 <_strtol_l.isra.0>:
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ee:	d001      	beq.n	800f9f4 <_strtol_l.isra.0+0xc>
 800f9f0:	2b24      	cmp	r3, #36	; 0x24
 800f9f2:	d906      	bls.n	800fa02 <_strtol_l.isra.0+0x1a>
 800f9f4:	f7fe fa20 	bl	800de38 <__errno>
 800f9f8:	2316      	movs	r3, #22
 800f9fa:	6003      	str	r3, [r0, #0]
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa02:	4f3a      	ldr	r7, [pc, #232]	; (800faec <_strtol_l.isra.0+0x104>)
 800fa04:	468e      	mov	lr, r1
 800fa06:	4676      	mov	r6, lr
 800fa08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fa0c:	5de5      	ldrb	r5, [r4, r7]
 800fa0e:	f015 0508 	ands.w	r5, r5, #8
 800fa12:	d1f8      	bne.n	800fa06 <_strtol_l.isra.0+0x1e>
 800fa14:	2c2d      	cmp	r4, #45	; 0x2d
 800fa16:	d134      	bne.n	800fa82 <_strtol_l.isra.0+0x9a>
 800fa18:	f89e 4000 	ldrb.w	r4, [lr]
 800fa1c:	f04f 0801 	mov.w	r8, #1
 800fa20:	f106 0e02 	add.w	lr, r6, #2
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d05c      	beq.n	800fae2 <_strtol_l.isra.0+0xfa>
 800fa28:	2b10      	cmp	r3, #16
 800fa2a:	d10c      	bne.n	800fa46 <_strtol_l.isra.0+0x5e>
 800fa2c:	2c30      	cmp	r4, #48	; 0x30
 800fa2e:	d10a      	bne.n	800fa46 <_strtol_l.isra.0+0x5e>
 800fa30:	f89e 4000 	ldrb.w	r4, [lr]
 800fa34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fa38:	2c58      	cmp	r4, #88	; 0x58
 800fa3a:	d14d      	bne.n	800fad8 <_strtol_l.isra.0+0xf0>
 800fa3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800fa40:	2310      	movs	r3, #16
 800fa42:	f10e 0e02 	add.w	lr, lr, #2
 800fa46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800fa4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fa4e:	2600      	movs	r6, #0
 800fa50:	fbbc f9f3 	udiv	r9, ip, r3
 800fa54:	4635      	mov	r5, r6
 800fa56:	fb03 ca19 	mls	sl, r3, r9, ip
 800fa5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fa5e:	2f09      	cmp	r7, #9
 800fa60:	d818      	bhi.n	800fa94 <_strtol_l.isra.0+0xac>
 800fa62:	463c      	mov	r4, r7
 800fa64:	42a3      	cmp	r3, r4
 800fa66:	dd24      	ble.n	800fab2 <_strtol_l.isra.0+0xca>
 800fa68:	2e00      	cmp	r6, #0
 800fa6a:	db1f      	blt.n	800faac <_strtol_l.isra.0+0xc4>
 800fa6c:	45a9      	cmp	r9, r5
 800fa6e:	d31d      	bcc.n	800faac <_strtol_l.isra.0+0xc4>
 800fa70:	d101      	bne.n	800fa76 <_strtol_l.isra.0+0x8e>
 800fa72:	45a2      	cmp	sl, r4
 800fa74:	db1a      	blt.n	800faac <_strtol_l.isra.0+0xc4>
 800fa76:	fb05 4503 	mla	r5, r5, r3, r4
 800fa7a:	2601      	movs	r6, #1
 800fa7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fa80:	e7eb      	b.n	800fa5a <_strtol_l.isra.0+0x72>
 800fa82:	2c2b      	cmp	r4, #43	; 0x2b
 800fa84:	bf08      	it	eq
 800fa86:	f89e 4000 	ldrbeq.w	r4, [lr]
 800fa8a:	46a8      	mov	r8, r5
 800fa8c:	bf08      	it	eq
 800fa8e:	f106 0e02 	addeq.w	lr, r6, #2
 800fa92:	e7c7      	b.n	800fa24 <_strtol_l.isra.0+0x3c>
 800fa94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800fa98:	2f19      	cmp	r7, #25
 800fa9a:	d801      	bhi.n	800faa0 <_strtol_l.isra.0+0xb8>
 800fa9c:	3c37      	subs	r4, #55	; 0x37
 800fa9e:	e7e1      	b.n	800fa64 <_strtol_l.isra.0+0x7c>
 800faa0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800faa4:	2f19      	cmp	r7, #25
 800faa6:	d804      	bhi.n	800fab2 <_strtol_l.isra.0+0xca>
 800faa8:	3c57      	subs	r4, #87	; 0x57
 800faaa:	e7db      	b.n	800fa64 <_strtol_l.isra.0+0x7c>
 800faac:	f04f 36ff 	mov.w	r6, #4294967295
 800fab0:	e7e4      	b.n	800fa7c <_strtol_l.isra.0+0x94>
 800fab2:	2e00      	cmp	r6, #0
 800fab4:	da05      	bge.n	800fac2 <_strtol_l.isra.0+0xda>
 800fab6:	2322      	movs	r3, #34	; 0x22
 800fab8:	6003      	str	r3, [r0, #0]
 800faba:	4665      	mov	r5, ip
 800fabc:	b942      	cbnz	r2, 800fad0 <_strtol_l.isra.0+0xe8>
 800fabe:	4628      	mov	r0, r5
 800fac0:	e79d      	b.n	800f9fe <_strtol_l.isra.0+0x16>
 800fac2:	f1b8 0f00 	cmp.w	r8, #0
 800fac6:	d000      	beq.n	800faca <_strtol_l.isra.0+0xe2>
 800fac8:	426d      	negs	r5, r5
 800faca:	2a00      	cmp	r2, #0
 800facc:	d0f7      	beq.n	800fabe <_strtol_l.isra.0+0xd6>
 800face:	b10e      	cbz	r6, 800fad4 <_strtol_l.isra.0+0xec>
 800fad0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800fad4:	6011      	str	r1, [r2, #0]
 800fad6:	e7f2      	b.n	800fabe <_strtol_l.isra.0+0xd6>
 800fad8:	2430      	movs	r4, #48	; 0x30
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1b3      	bne.n	800fa46 <_strtol_l.isra.0+0x5e>
 800fade:	2308      	movs	r3, #8
 800fae0:	e7b1      	b.n	800fa46 <_strtol_l.isra.0+0x5e>
 800fae2:	2c30      	cmp	r4, #48	; 0x30
 800fae4:	d0a4      	beq.n	800fa30 <_strtol_l.isra.0+0x48>
 800fae6:	230a      	movs	r3, #10
 800fae8:	e7ad      	b.n	800fa46 <_strtol_l.isra.0+0x5e>
 800faea:	bf00      	nop
 800faec:	08012ef9 	.word	0x08012ef9

0800faf0 <_strtol_r>:
 800faf0:	f7ff bf7a 	b.w	800f9e8 <_strtol_l.isra.0>

0800faf4 <quorem>:
 800faf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf8:	6903      	ldr	r3, [r0, #16]
 800fafa:	690c      	ldr	r4, [r1, #16]
 800fafc:	42a3      	cmp	r3, r4
 800fafe:	4607      	mov	r7, r0
 800fb00:	f2c0 8081 	blt.w	800fc06 <quorem+0x112>
 800fb04:	3c01      	subs	r4, #1
 800fb06:	f101 0814 	add.w	r8, r1, #20
 800fb0a:	f100 0514 	add.w	r5, r0, #20
 800fb0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb12:	9301      	str	r3, [sp, #4]
 800fb14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb28:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb2c:	d331      	bcc.n	800fb92 <quorem+0x9e>
 800fb2e:	f04f 0e00 	mov.w	lr, #0
 800fb32:	4640      	mov	r0, r8
 800fb34:	46ac      	mov	ip, r5
 800fb36:	46f2      	mov	sl, lr
 800fb38:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb3c:	b293      	uxth	r3, r2
 800fb3e:	fb06 e303 	mla	r3, r6, r3, lr
 800fb42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	ebaa 0303 	sub.w	r3, sl, r3
 800fb4c:	0c12      	lsrs	r2, r2, #16
 800fb4e:	f8dc a000 	ldr.w	sl, [ip]
 800fb52:	fb06 e202 	mla	r2, r6, r2, lr
 800fb56:	fa13 f38a 	uxtah	r3, r3, sl
 800fb5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb5e:	fa1f fa82 	uxth.w	sl, r2
 800fb62:	f8dc 2000 	ldr.w	r2, [ip]
 800fb66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fb6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb74:	4581      	cmp	r9, r0
 800fb76:	f84c 3b04 	str.w	r3, [ip], #4
 800fb7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb7e:	d2db      	bcs.n	800fb38 <quorem+0x44>
 800fb80:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb84:	b92b      	cbnz	r3, 800fb92 <quorem+0x9e>
 800fb86:	9b01      	ldr	r3, [sp, #4]
 800fb88:	3b04      	subs	r3, #4
 800fb8a:	429d      	cmp	r5, r3
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	d32e      	bcc.n	800fbee <quorem+0xfa>
 800fb90:	613c      	str	r4, [r7, #16]
 800fb92:	4638      	mov	r0, r7
 800fb94:	f001 fd88 	bl	80116a8 <__mcmp>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	db24      	blt.n	800fbe6 <quorem+0xf2>
 800fb9c:	3601      	adds	r6, #1
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f04f 0c00 	mov.w	ip, #0
 800fba4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fba8:	f8d0 e000 	ldr.w	lr, [r0]
 800fbac:	b293      	uxth	r3, r2
 800fbae:	ebac 0303 	sub.w	r3, ip, r3
 800fbb2:	0c12      	lsrs	r2, r2, #16
 800fbb4:	fa13 f38e 	uxtah	r3, r3, lr
 800fbb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fbbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbc6:	45c1      	cmp	r9, r8
 800fbc8:	f840 3b04 	str.w	r3, [r0], #4
 800fbcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fbd0:	d2e8      	bcs.n	800fba4 <quorem+0xb0>
 800fbd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbda:	b922      	cbnz	r2, 800fbe6 <quorem+0xf2>
 800fbdc:	3b04      	subs	r3, #4
 800fbde:	429d      	cmp	r5, r3
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	d30a      	bcc.n	800fbfa <quorem+0x106>
 800fbe4:	613c      	str	r4, [r7, #16]
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	b003      	add	sp, #12
 800fbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbee:	6812      	ldr	r2, [r2, #0]
 800fbf0:	3b04      	subs	r3, #4
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	d1cc      	bne.n	800fb90 <quorem+0x9c>
 800fbf6:	3c01      	subs	r4, #1
 800fbf8:	e7c7      	b.n	800fb8a <quorem+0x96>
 800fbfa:	6812      	ldr	r2, [r2, #0]
 800fbfc:	3b04      	subs	r3, #4
 800fbfe:	2a00      	cmp	r2, #0
 800fc00:	d1f0      	bne.n	800fbe4 <quorem+0xf0>
 800fc02:	3c01      	subs	r4, #1
 800fc04:	e7eb      	b.n	800fbde <quorem+0xea>
 800fc06:	2000      	movs	r0, #0
 800fc08:	e7ee      	b.n	800fbe8 <quorem+0xf4>
 800fc0a:	0000      	movs	r0, r0
 800fc0c:	0000      	movs	r0, r0
	...

0800fc10 <_dtoa_r>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	ed2d 8b02 	vpush	{d8}
 800fc18:	ec57 6b10 	vmov	r6, r7, d0
 800fc1c:	b095      	sub	sp, #84	; 0x54
 800fc1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc24:	9105      	str	r1, [sp, #20]
 800fc26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	9209      	str	r2, [sp, #36]	; 0x24
 800fc2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc30:	b975      	cbnz	r5, 800fc50 <_dtoa_r+0x40>
 800fc32:	2010      	movs	r0, #16
 800fc34:	f7fe f92a 	bl	800de8c <malloc>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	6260      	str	r0, [r4, #36]	; 0x24
 800fc3c:	b920      	cbnz	r0, 800fc48 <_dtoa_r+0x38>
 800fc3e:	4bb2      	ldr	r3, [pc, #712]	; (800ff08 <_dtoa_r+0x2f8>)
 800fc40:	21ea      	movs	r1, #234	; 0xea
 800fc42:	48b2      	ldr	r0, [pc, #712]	; (800ff0c <_dtoa_r+0x2fc>)
 800fc44:	f002 fb26 	bl	8012294 <__assert_func>
 800fc48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc4c:	6005      	str	r5, [r0, #0]
 800fc4e:	60c5      	str	r5, [r0, #12]
 800fc50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc52:	6819      	ldr	r1, [r3, #0]
 800fc54:	b151      	cbz	r1, 800fc6c <_dtoa_r+0x5c>
 800fc56:	685a      	ldr	r2, [r3, #4]
 800fc58:	604a      	str	r2, [r1, #4]
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	4093      	lsls	r3, r2
 800fc5e:	608b      	str	r3, [r1, #8]
 800fc60:	4620      	mov	r0, r4
 800fc62:	f001 fa99 	bl	8011198 <_Bfree>
 800fc66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc68:	2200      	movs	r2, #0
 800fc6a:	601a      	str	r2, [r3, #0]
 800fc6c:	1e3b      	subs	r3, r7, #0
 800fc6e:	bfb9      	ittee	lt
 800fc70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fc74:	9303      	strlt	r3, [sp, #12]
 800fc76:	2300      	movge	r3, #0
 800fc78:	f8c8 3000 	strge.w	r3, [r8]
 800fc7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fc80:	4ba3      	ldr	r3, [pc, #652]	; (800ff10 <_dtoa_r+0x300>)
 800fc82:	bfbc      	itt	lt
 800fc84:	2201      	movlt	r2, #1
 800fc86:	f8c8 2000 	strlt.w	r2, [r8]
 800fc8a:	ea33 0309 	bics.w	r3, r3, r9
 800fc8e:	d11b      	bne.n	800fcc8 <_dtoa_r+0xb8>
 800fc90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc92:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc9c:	4333      	orrs	r3, r6
 800fc9e:	f000 857a 	beq.w	8010796 <_dtoa_r+0xb86>
 800fca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fca4:	b963      	cbnz	r3, 800fcc0 <_dtoa_r+0xb0>
 800fca6:	4b9b      	ldr	r3, [pc, #620]	; (800ff14 <_dtoa_r+0x304>)
 800fca8:	e024      	b.n	800fcf4 <_dtoa_r+0xe4>
 800fcaa:	4b9b      	ldr	r3, [pc, #620]	; (800ff18 <_dtoa_r+0x308>)
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	3308      	adds	r3, #8
 800fcb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcb2:	6013      	str	r3, [r2, #0]
 800fcb4:	9800      	ldr	r0, [sp, #0]
 800fcb6:	b015      	add	sp, #84	; 0x54
 800fcb8:	ecbd 8b02 	vpop	{d8}
 800fcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc0:	4b94      	ldr	r3, [pc, #592]	; (800ff14 <_dtoa_r+0x304>)
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	3303      	adds	r3, #3
 800fcc6:	e7f3      	b.n	800fcb0 <_dtoa_r+0xa0>
 800fcc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fccc:	2200      	movs	r2, #0
 800fcce:	ec51 0b17 	vmov	r0, r1, d7
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fcd8:	f7f0 ff06 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcdc:	4680      	mov	r8, r0
 800fcde:	b158      	cbz	r0, 800fcf8 <_dtoa_r+0xe8>
 800fce0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fce2:	2301      	movs	r3, #1
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 8551 	beq.w	8010790 <_dtoa_r+0xb80>
 800fcee:	488b      	ldr	r0, [pc, #556]	; (800ff1c <_dtoa_r+0x30c>)
 800fcf0:	6018      	str	r0, [r3, #0]
 800fcf2:	1e43      	subs	r3, r0, #1
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	e7dd      	b.n	800fcb4 <_dtoa_r+0xa4>
 800fcf8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fcfc:	aa12      	add	r2, sp, #72	; 0x48
 800fcfe:	a913      	add	r1, sp, #76	; 0x4c
 800fd00:	4620      	mov	r0, r4
 800fd02:	f001 fdf1 	bl	80118e8 <__d2b>
 800fd06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd0a:	4683      	mov	fp, r0
 800fd0c:	2d00      	cmp	r5, #0
 800fd0e:	d07c      	beq.n	800fe0a <_dtoa_r+0x1fa>
 800fd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fd16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fd1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fd22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fd26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd2a:	4b7d      	ldr	r3, [pc, #500]	; (800ff20 <_dtoa_r+0x310>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	4630      	mov	r0, r6
 800fd30:	4639      	mov	r1, r7
 800fd32:	f7f0 fab9 	bl	80002a8 <__aeabi_dsub>
 800fd36:	a36e      	add	r3, pc, #440	; (adr r3, 800fef0 <_dtoa_r+0x2e0>)
 800fd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3c:	f7f0 fc6c 	bl	8000618 <__aeabi_dmul>
 800fd40:	a36d      	add	r3, pc, #436	; (adr r3, 800fef8 <_dtoa_r+0x2e8>)
 800fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd46:	f7f0 fab1 	bl	80002ac <__adddf3>
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	460f      	mov	r7, r1
 800fd50:	f7f0 fbf8 	bl	8000544 <__aeabi_i2d>
 800fd54:	a36a      	add	r3, pc, #424	; (adr r3, 800ff00 <_dtoa_r+0x2f0>)
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	f7f0 fc5d 	bl	8000618 <__aeabi_dmul>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	460b      	mov	r3, r1
 800fd62:	4630      	mov	r0, r6
 800fd64:	4639      	mov	r1, r7
 800fd66:	f7f0 faa1 	bl	80002ac <__adddf3>
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	f7f0 ff03 	bl	8000b78 <__aeabi_d2iz>
 800fd72:	2200      	movs	r2, #0
 800fd74:	4682      	mov	sl, r0
 800fd76:	2300      	movs	r3, #0
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	f7f0 febe 	bl	8000afc <__aeabi_dcmplt>
 800fd80:	b148      	cbz	r0, 800fd96 <_dtoa_r+0x186>
 800fd82:	4650      	mov	r0, sl
 800fd84:	f7f0 fbde 	bl	8000544 <__aeabi_i2d>
 800fd88:	4632      	mov	r2, r6
 800fd8a:	463b      	mov	r3, r7
 800fd8c:	f7f0 feac 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd90:	b908      	cbnz	r0, 800fd96 <_dtoa_r+0x186>
 800fd92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd96:	f1ba 0f16 	cmp.w	sl, #22
 800fd9a:	d854      	bhi.n	800fe46 <_dtoa_r+0x236>
 800fd9c:	4b61      	ldr	r3, [pc, #388]	; (800ff24 <_dtoa_r+0x314>)
 800fd9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fdaa:	f7f0 fea7 	bl	8000afc <__aeabi_dcmplt>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d04b      	beq.n	800fe4a <_dtoa_r+0x23a>
 800fdb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	930e      	str	r3, [sp, #56]	; 0x38
 800fdba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fdbc:	1b5d      	subs	r5, r3, r5
 800fdbe:	1e6b      	subs	r3, r5, #1
 800fdc0:	9304      	str	r3, [sp, #16]
 800fdc2:	bf43      	ittte	mi
 800fdc4:	2300      	movmi	r3, #0
 800fdc6:	f1c5 0801 	rsbmi	r8, r5, #1
 800fdca:	9304      	strmi	r3, [sp, #16]
 800fdcc:	f04f 0800 	movpl.w	r8, #0
 800fdd0:	f1ba 0f00 	cmp.w	sl, #0
 800fdd4:	db3b      	blt.n	800fe4e <_dtoa_r+0x23e>
 800fdd6:	9b04      	ldr	r3, [sp, #16]
 800fdd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fddc:	4453      	add	r3, sl
 800fdde:	9304      	str	r3, [sp, #16]
 800fde0:	2300      	movs	r3, #0
 800fde2:	9306      	str	r3, [sp, #24]
 800fde4:	9b05      	ldr	r3, [sp, #20]
 800fde6:	2b09      	cmp	r3, #9
 800fde8:	d869      	bhi.n	800febe <_dtoa_r+0x2ae>
 800fdea:	2b05      	cmp	r3, #5
 800fdec:	bfc4      	itt	gt
 800fdee:	3b04      	subgt	r3, #4
 800fdf0:	9305      	strgt	r3, [sp, #20]
 800fdf2:	9b05      	ldr	r3, [sp, #20]
 800fdf4:	f1a3 0302 	sub.w	r3, r3, #2
 800fdf8:	bfcc      	ite	gt
 800fdfa:	2500      	movgt	r5, #0
 800fdfc:	2501      	movle	r5, #1
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d869      	bhi.n	800fed6 <_dtoa_r+0x2c6>
 800fe02:	e8df f003 	tbb	[pc, r3]
 800fe06:	4e2c      	.short	0x4e2c
 800fe08:	5a4c      	.short	0x5a4c
 800fe0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fe0e:	441d      	add	r5, r3
 800fe10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe14:	2b20      	cmp	r3, #32
 800fe16:	bfc1      	itttt	gt
 800fe18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fe20:	fa09 f303 	lslgt.w	r3, r9, r3
 800fe24:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fe28:	bfda      	itte	le
 800fe2a:	f1c3 0320 	rsble	r3, r3, #32
 800fe2e:	fa06 f003 	lslle.w	r0, r6, r3
 800fe32:	4318      	orrgt	r0, r3
 800fe34:	f7f0 fb76 	bl	8000524 <__aeabi_ui2d>
 800fe38:	2301      	movs	r3, #1
 800fe3a:	4606      	mov	r6, r0
 800fe3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe40:	3d01      	subs	r5, #1
 800fe42:	9310      	str	r3, [sp, #64]	; 0x40
 800fe44:	e771      	b.n	800fd2a <_dtoa_r+0x11a>
 800fe46:	2301      	movs	r3, #1
 800fe48:	e7b6      	b.n	800fdb8 <_dtoa_r+0x1a8>
 800fe4a:	900e      	str	r0, [sp, #56]	; 0x38
 800fe4c:	e7b5      	b.n	800fdba <_dtoa_r+0x1aa>
 800fe4e:	f1ca 0300 	rsb	r3, sl, #0
 800fe52:	9306      	str	r3, [sp, #24]
 800fe54:	2300      	movs	r3, #0
 800fe56:	eba8 080a 	sub.w	r8, r8, sl
 800fe5a:	930d      	str	r3, [sp, #52]	; 0x34
 800fe5c:	e7c2      	b.n	800fde4 <_dtoa_r+0x1d4>
 800fe5e:	2300      	movs	r3, #0
 800fe60:	9308      	str	r3, [sp, #32]
 800fe62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dc39      	bgt.n	800fedc <_dtoa_r+0x2cc>
 800fe68:	f04f 0901 	mov.w	r9, #1
 800fe6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe70:	464b      	mov	r3, r9
 800fe72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fe76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe78:	2200      	movs	r2, #0
 800fe7a:	6042      	str	r2, [r0, #4]
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	f102 0614 	add.w	r6, r2, #20
 800fe82:	429e      	cmp	r6, r3
 800fe84:	6841      	ldr	r1, [r0, #4]
 800fe86:	d92f      	bls.n	800fee8 <_dtoa_r+0x2d8>
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f001 f945 	bl	8011118 <_Balloc>
 800fe8e:	9000      	str	r0, [sp, #0]
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d14b      	bne.n	800ff2c <_dtoa_r+0x31c>
 800fe94:	4b24      	ldr	r3, [pc, #144]	; (800ff28 <_dtoa_r+0x318>)
 800fe96:	4602      	mov	r2, r0
 800fe98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe9c:	e6d1      	b.n	800fc42 <_dtoa_r+0x32>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e7de      	b.n	800fe60 <_dtoa_r+0x250>
 800fea2:	2300      	movs	r3, #0
 800fea4:	9308      	str	r3, [sp, #32]
 800fea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fea8:	eb0a 0903 	add.w	r9, sl, r3
 800feac:	f109 0301 	add.w	r3, r9, #1
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	9301      	str	r3, [sp, #4]
 800feb4:	bfb8      	it	lt
 800feb6:	2301      	movlt	r3, #1
 800feb8:	e7dd      	b.n	800fe76 <_dtoa_r+0x266>
 800feba:	2301      	movs	r3, #1
 800febc:	e7f2      	b.n	800fea4 <_dtoa_r+0x294>
 800febe:	2501      	movs	r5, #1
 800fec0:	2300      	movs	r3, #0
 800fec2:	9305      	str	r3, [sp, #20]
 800fec4:	9508      	str	r5, [sp, #32]
 800fec6:	f04f 39ff 	mov.w	r9, #4294967295
 800feca:	2200      	movs	r2, #0
 800fecc:	f8cd 9004 	str.w	r9, [sp, #4]
 800fed0:	2312      	movs	r3, #18
 800fed2:	9209      	str	r2, [sp, #36]	; 0x24
 800fed4:	e7cf      	b.n	800fe76 <_dtoa_r+0x266>
 800fed6:	2301      	movs	r3, #1
 800fed8:	9308      	str	r3, [sp, #32]
 800feda:	e7f4      	b.n	800fec6 <_dtoa_r+0x2b6>
 800fedc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fee0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fee4:	464b      	mov	r3, r9
 800fee6:	e7c6      	b.n	800fe76 <_dtoa_r+0x266>
 800fee8:	3101      	adds	r1, #1
 800feea:	6041      	str	r1, [r0, #4]
 800feec:	0052      	lsls	r2, r2, #1
 800feee:	e7c6      	b.n	800fe7e <_dtoa_r+0x26e>
 800fef0:	636f4361 	.word	0x636f4361
 800fef4:	3fd287a7 	.word	0x3fd287a7
 800fef8:	8b60c8b3 	.word	0x8b60c8b3
 800fefc:	3fc68a28 	.word	0x3fc68a28
 800ff00:	509f79fb 	.word	0x509f79fb
 800ff04:	3fd34413 	.word	0x3fd34413
 800ff08:	08013006 	.word	0x08013006
 800ff0c:	0801301d 	.word	0x0801301d
 800ff10:	7ff00000 	.word	0x7ff00000
 800ff14:	08013002 	.word	0x08013002
 800ff18:	08012ff9 	.word	0x08012ff9
 800ff1c:	08012e79 	.word	0x08012e79
 800ff20:	3ff80000 	.word	0x3ff80000
 800ff24:	080131f8 	.word	0x080131f8
 800ff28:	0801307c 	.word	0x0801307c
 800ff2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff2e:	9a00      	ldr	r2, [sp, #0]
 800ff30:	601a      	str	r2, [r3, #0]
 800ff32:	9b01      	ldr	r3, [sp, #4]
 800ff34:	2b0e      	cmp	r3, #14
 800ff36:	f200 80ad 	bhi.w	8010094 <_dtoa_r+0x484>
 800ff3a:	2d00      	cmp	r5, #0
 800ff3c:	f000 80aa 	beq.w	8010094 <_dtoa_r+0x484>
 800ff40:	f1ba 0f00 	cmp.w	sl, #0
 800ff44:	dd36      	ble.n	800ffb4 <_dtoa_r+0x3a4>
 800ff46:	4ac3      	ldr	r2, [pc, #780]	; (8010254 <_dtoa_r+0x644>)
 800ff48:	f00a 030f 	and.w	r3, sl, #15
 800ff4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff50:	ed93 7b00 	vldr	d7, [r3]
 800ff54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ff58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ff5c:	eeb0 8a47 	vmov.f32	s16, s14
 800ff60:	eef0 8a67 	vmov.f32	s17, s15
 800ff64:	d016      	beq.n	800ff94 <_dtoa_r+0x384>
 800ff66:	4bbc      	ldr	r3, [pc, #752]	; (8010258 <_dtoa_r+0x648>)
 800ff68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ff6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff70:	f7f0 fc7c 	bl	800086c <__aeabi_ddiv>
 800ff74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff78:	f007 070f 	and.w	r7, r7, #15
 800ff7c:	2503      	movs	r5, #3
 800ff7e:	4eb6      	ldr	r6, [pc, #728]	; (8010258 <_dtoa_r+0x648>)
 800ff80:	b957      	cbnz	r7, 800ff98 <_dtoa_r+0x388>
 800ff82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff86:	ec53 2b18 	vmov	r2, r3, d8
 800ff8a:	f7f0 fc6f 	bl	800086c <__aeabi_ddiv>
 800ff8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff92:	e029      	b.n	800ffe8 <_dtoa_r+0x3d8>
 800ff94:	2502      	movs	r5, #2
 800ff96:	e7f2      	b.n	800ff7e <_dtoa_r+0x36e>
 800ff98:	07f9      	lsls	r1, r7, #31
 800ff9a:	d508      	bpl.n	800ffae <_dtoa_r+0x39e>
 800ff9c:	ec51 0b18 	vmov	r0, r1, d8
 800ffa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ffa4:	f7f0 fb38 	bl	8000618 <__aeabi_dmul>
 800ffa8:	ec41 0b18 	vmov	d8, r0, r1
 800ffac:	3501      	adds	r5, #1
 800ffae:	107f      	asrs	r7, r7, #1
 800ffb0:	3608      	adds	r6, #8
 800ffb2:	e7e5      	b.n	800ff80 <_dtoa_r+0x370>
 800ffb4:	f000 80a6 	beq.w	8010104 <_dtoa_r+0x4f4>
 800ffb8:	f1ca 0600 	rsb	r6, sl, #0
 800ffbc:	4ba5      	ldr	r3, [pc, #660]	; (8010254 <_dtoa_r+0x644>)
 800ffbe:	4fa6      	ldr	r7, [pc, #664]	; (8010258 <_dtoa_r+0x648>)
 800ffc0:	f006 020f 	and.w	r2, r6, #15
 800ffc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ffd0:	f7f0 fb22 	bl	8000618 <__aeabi_dmul>
 800ffd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffd8:	1136      	asrs	r6, r6, #4
 800ffda:	2300      	movs	r3, #0
 800ffdc:	2502      	movs	r5, #2
 800ffde:	2e00      	cmp	r6, #0
 800ffe0:	f040 8085 	bne.w	80100ee <_dtoa_r+0x4de>
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1d2      	bne.n	800ff8e <_dtoa_r+0x37e>
 800ffe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f000 808c 	beq.w	8010108 <_dtoa_r+0x4f8>
 800fff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fff4:	4b99      	ldr	r3, [pc, #612]	; (801025c <_dtoa_r+0x64c>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	4630      	mov	r0, r6
 800fffa:	4639      	mov	r1, r7
 800fffc:	f7f0 fd7e 	bl	8000afc <__aeabi_dcmplt>
 8010000:	2800      	cmp	r0, #0
 8010002:	f000 8081 	beq.w	8010108 <_dtoa_r+0x4f8>
 8010006:	9b01      	ldr	r3, [sp, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d07d      	beq.n	8010108 <_dtoa_r+0x4f8>
 801000c:	f1b9 0f00 	cmp.w	r9, #0
 8010010:	dd3c      	ble.n	801008c <_dtoa_r+0x47c>
 8010012:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010016:	9307      	str	r3, [sp, #28]
 8010018:	2200      	movs	r2, #0
 801001a:	4b91      	ldr	r3, [pc, #580]	; (8010260 <_dtoa_r+0x650>)
 801001c:	4630      	mov	r0, r6
 801001e:	4639      	mov	r1, r7
 8010020:	f7f0 fafa 	bl	8000618 <__aeabi_dmul>
 8010024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010028:	3501      	adds	r5, #1
 801002a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801002e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010032:	4628      	mov	r0, r5
 8010034:	f7f0 fa86 	bl	8000544 <__aeabi_i2d>
 8010038:	4632      	mov	r2, r6
 801003a:	463b      	mov	r3, r7
 801003c:	f7f0 faec 	bl	8000618 <__aeabi_dmul>
 8010040:	4b88      	ldr	r3, [pc, #544]	; (8010264 <_dtoa_r+0x654>)
 8010042:	2200      	movs	r2, #0
 8010044:	f7f0 f932 	bl	80002ac <__adddf3>
 8010048:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801004c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010050:	9303      	str	r3, [sp, #12]
 8010052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010054:	2b00      	cmp	r3, #0
 8010056:	d15c      	bne.n	8010112 <_dtoa_r+0x502>
 8010058:	4b83      	ldr	r3, [pc, #524]	; (8010268 <_dtoa_r+0x658>)
 801005a:	2200      	movs	r2, #0
 801005c:	4630      	mov	r0, r6
 801005e:	4639      	mov	r1, r7
 8010060:	f7f0 f922 	bl	80002a8 <__aeabi_dsub>
 8010064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010068:	4606      	mov	r6, r0
 801006a:	460f      	mov	r7, r1
 801006c:	f7f0 fd64 	bl	8000b38 <__aeabi_dcmpgt>
 8010070:	2800      	cmp	r0, #0
 8010072:	f040 8296 	bne.w	80105a2 <_dtoa_r+0x992>
 8010076:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801007a:	4630      	mov	r0, r6
 801007c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010080:	4639      	mov	r1, r7
 8010082:	f7f0 fd3b 	bl	8000afc <__aeabi_dcmplt>
 8010086:	2800      	cmp	r0, #0
 8010088:	f040 8288 	bne.w	801059c <_dtoa_r+0x98c>
 801008c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010096:	2b00      	cmp	r3, #0
 8010098:	f2c0 8158 	blt.w	801034c <_dtoa_r+0x73c>
 801009c:	f1ba 0f0e 	cmp.w	sl, #14
 80100a0:	f300 8154 	bgt.w	801034c <_dtoa_r+0x73c>
 80100a4:	4b6b      	ldr	r3, [pc, #428]	; (8010254 <_dtoa_r+0x644>)
 80100a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80100aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f280 80e3 	bge.w	801027c <_dtoa_r+0x66c>
 80100b6:	9b01      	ldr	r3, [sp, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f300 80df 	bgt.w	801027c <_dtoa_r+0x66c>
 80100be:	f040 826d 	bne.w	801059c <_dtoa_r+0x98c>
 80100c2:	4b69      	ldr	r3, [pc, #420]	; (8010268 <_dtoa_r+0x658>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	4640      	mov	r0, r8
 80100c8:	4649      	mov	r1, r9
 80100ca:	f7f0 faa5 	bl	8000618 <__aeabi_dmul>
 80100ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100d2:	f7f0 fd27 	bl	8000b24 <__aeabi_dcmpge>
 80100d6:	9e01      	ldr	r6, [sp, #4]
 80100d8:	4637      	mov	r7, r6
 80100da:	2800      	cmp	r0, #0
 80100dc:	f040 8243 	bne.w	8010566 <_dtoa_r+0x956>
 80100e0:	9d00      	ldr	r5, [sp, #0]
 80100e2:	2331      	movs	r3, #49	; 0x31
 80100e4:	f805 3b01 	strb.w	r3, [r5], #1
 80100e8:	f10a 0a01 	add.w	sl, sl, #1
 80100ec:	e23f      	b.n	801056e <_dtoa_r+0x95e>
 80100ee:	07f2      	lsls	r2, r6, #31
 80100f0:	d505      	bpl.n	80100fe <_dtoa_r+0x4ee>
 80100f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100f6:	f7f0 fa8f 	bl	8000618 <__aeabi_dmul>
 80100fa:	3501      	adds	r5, #1
 80100fc:	2301      	movs	r3, #1
 80100fe:	1076      	asrs	r6, r6, #1
 8010100:	3708      	adds	r7, #8
 8010102:	e76c      	b.n	800ffde <_dtoa_r+0x3ce>
 8010104:	2502      	movs	r5, #2
 8010106:	e76f      	b.n	800ffe8 <_dtoa_r+0x3d8>
 8010108:	9b01      	ldr	r3, [sp, #4]
 801010a:	f8cd a01c 	str.w	sl, [sp, #28]
 801010e:	930c      	str	r3, [sp, #48]	; 0x30
 8010110:	e78d      	b.n	801002e <_dtoa_r+0x41e>
 8010112:	9900      	ldr	r1, [sp, #0]
 8010114:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010118:	4b4e      	ldr	r3, [pc, #312]	; (8010254 <_dtoa_r+0x644>)
 801011a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801011e:	4401      	add	r1, r0
 8010120:	9102      	str	r1, [sp, #8]
 8010122:	9908      	ldr	r1, [sp, #32]
 8010124:	eeb0 8a47 	vmov.f32	s16, s14
 8010128:	eef0 8a67 	vmov.f32	s17, s15
 801012c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010130:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010134:	2900      	cmp	r1, #0
 8010136:	d045      	beq.n	80101c4 <_dtoa_r+0x5b4>
 8010138:	494c      	ldr	r1, [pc, #304]	; (801026c <_dtoa_r+0x65c>)
 801013a:	2000      	movs	r0, #0
 801013c:	f7f0 fb96 	bl	800086c <__aeabi_ddiv>
 8010140:	ec53 2b18 	vmov	r2, r3, d8
 8010144:	f7f0 f8b0 	bl	80002a8 <__aeabi_dsub>
 8010148:	9d00      	ldr	r5, [sp, #0]
 801014a:	ec41 0b18 	vmov	d8, r0, r1
 801014e:	4639      	mov	r1, r7
 8010150:	4630      	mov	r0, r6
 8010152:	f7f0 fd11 	bl	8000b78 <__aeabi_d2iz>
 8010156:	900c      	str	r0, [sp, #48]	; 0x30
 8010158:	f7f0 f9f4 	bl	8000544 <__aeabi_i2d>
 801015c:	4602      	mov	r2, r0
 801015e:	460b      	mov	r3, r1
 8010160:	4630      	mov	r0, r6
 8010162:	4639      	mov	r1, r7
 8010164:	f7f0 f8a0 	bl	80002a8 <__aeabi_dsub>
 8010168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801016a:	3330      	adds	r3, #48	; 0x30
 801016c:	f805 3b01 	strb.w	r3, [r5], #1
 8010170:	ec53 2b18 	vmov	r2, r3, d8
 8010174:	4606      	mov	r6, r0
 8010176:	460f      	mov	r7, r1
 8010178:	f7f0 fcc0 	bl	8000afc <__aeabi_dcmplt>
 801017c:	2800      	cmp	r0, #0
 801017e:	d165      	bne.n	801024c <_dtoa_r+0x63c>
 8010180:	4632      	mov	r2, r6
 8010182:	463b      	mov	r3, r7
 8010184:	4935      	ldr	r1, [pc, #212]	; (801025c <_dtoa_r+0x64c>)
 8010186:	2000      	movs	r0, #0
 8010188:	f7f0 f88e 	bl	80002a8 <__aeabi_dsub>
 801018c:	ec53 2b18 	vmov	r2, r3, d8
 8010190:	f7f0 fcb4 	bl	8000afc <__aeabi_dcmplt>
 8010194:	2800      	cmp	r0, #0
 8010196:	f040 80b9 	bne.w	801030c <_dtoa_r+0x6fc>
 801019a:	9b02      	ldr	r3, [sp, #8]
 801019c:	429d      	cmp	r5, r3
 801019e:	f43f af75 	beq.w	801008c <_dtoa_r+0x47c>
 80101a2:	4b2f      	ldr	r3, [pc, #188]	; (8010260 <_dtoa_r+0x650>)
 80101a4:	ec51 0b18 	vmov	r0, r1, d8
 80101a8:	2200      	movs	r2, #0
 80101aa:	f7f0 fa35 	bl	8000618 <__aeabi_dmul>
 80101ae:	4b2c      	ldr	r3, [pc, #176]	; (8010260 <_dtoa_r+0x650>)
 80101b0:	ec41 0b18 	vmov	d8, r0, r1
 80101b4:	2200      	movs	r2, #0
 80101b6:	4630      	mov	r0, r6
 80101b8:	4639      	mov	r1, r7
 80101ba:	f7f0 fa2d 	bl	8000618 <__aeabi_dmul>
 80101be:	4606      	mov	r6, r0
 80101c0:	460f      	mov	r7, r1
 80101c2:	e7c4      	b.n	801014e <_dtoa_r+0x53e>
 80101c4:	ec51 0b17 	vmov	r0, r1, d7
 80101c8:	f7f0 fa26 	bl	8000618 <__aeabi_dmul>
 80101cc:	9b02      	ldr	r3, [sp, #8]
 80101ce:	9d00      	ldr	r5, [sp, #0]
 80101d0:	930c      	str	r3, [sp, #48]	; 0x30
 80101d2:	ec41 0b18 	vmov	d8, r0, r1
 80101d6:	4639      	mov	r1, r7
 80101d8:	4630      	mov	r0, r6
 80101da:	f7f0 fccd 	bl	8000b78 <__aeabi_d2iz>
 80101de:	9011      	str	r0, [sp, #68]	; 0x44
 80101e0:	f7f0 f9b0 	bl	8000544 <__aeabi_i2d>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	4630      	mov	r0, r6
 80101ea:	4639      	mov	r1, r7
 80101ec:	f7f0 f85c 	bl	80002a8 <__aeabi_dsub>
 80101f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101f2:	3330      	adds	r3, #48	; 0x30
 80101f4:	f805 3b01 	strb.w	r3, [r5], #1
 80101f8:	9b02      	ldr	r3, [sp, #8]
 80101fa:	429d      	cmp	r5, r3
 80101fc:	4606      	mov	r6, r0
 80101fe:	460f      	mov	r7, r1
 8010200:	f04f 0200 	mov.w	r2, #0
 8010204:	d134      	bne.n	8010270 <_dtoa_r+0x660>
 8010206:	4b19      	ldr	r3, [pc, #100]	; (801026c <_dtoa_r+0x65c>)
 8010208:	ec51 0b18 	vmov	r0, r1, d8
 801020c:	f7f0 f84e 	bl	80002ac <__adddf3>
 8010210:	4602      	mov	r2, r0
 8010212:	460b      	mov	r3, r1
 8010214:	4630      	mov	r0, r6
 8010216:	4639      	mov	r1, r7
 8010218:	f7f0 fc8e 	bl	8000b38 <__aeabi_dcmpgt>
 801021c:	2800      	cmp	r0, #0
 801021e:	d175      	bne.n	801030c <_dtoa_r+0x6fc>
 8010220:	ec53 2b18 	vmov	r2, r3, d8
 8010224:	4911      	ldr	r1, [pc, #68]	; (801026c <_dtoa_r+0x65c>)
 8010226:	2000      	movs	r0, #0
 8010228:	f7f0 f83e 	bl	80002a8 <__aeabi_dsub>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4630      	mov	r0, r6
 8010232:	4639      	mov	r1, r7
 8010234:	f7f0 fc62 	bl	8000afc <__aeabi_dcmplt>
 8010238:	2800      	cmp	r0, #0
 801023a:	f43f af27 	beq.w	801008c <_dtoa_r+0x47c>
 801023e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010240:	1e6b      	subs	r3, r5, #1
 8010242:	930c      	str	r3, [sp, #48]	; 0x30
 8010244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010248:	2b30      	cmp	r3, #48	; 0x30
 801024a:	d0f8      	beq.n	801023e <_dtoa_r+0x62e>
 801024c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010250:	e04a      	b.n	80102e8 <_dtoa_r+0x6d8>
 8010252:	bf00      	nop
 8010254:	080131f8 	.word	0x080131f8
 8010258:	080131d0 	.word	0x080131d0
 801025c:	3ff00000 	.word	0x3ff00000
 8010260:	40240000 	.word	0x40240000
 8010264:	401c0000 	.word	0x401c0000
 8010268:	40140000 	.word	0x40140000
 801026c:	3fe00000 	.word	0x3fe00000
 8010270:	4baf      	ldr	r3, [pc, #700]	; (8010530 <_dtoa_r+0x920>)
 8010272:	f7f0 f9d1 	bl	8000618 <__aeabi_dmul>
 8010276:	4606      	mov	r6, r0
 8010278:	460f      	mov	r7, r1
 801027a:	e7ac      	b.n	80101d6 <_dtoa_r+0x5c6>
 801027c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010280:	9d00      	ldr	r5, [sp, #0]
 8010282:	4642      	mov	r2, r8
 8010284:	464b      	mov	r3, r9
 8010286:	4630      	mov	r0, r6
 8010288:	4639      	mov	r1, r7
 801028a:	f7f0 faef 	bl	800086c <__aeabi_ddiv>
 801028e:	f7f0 fc73 	bl	8000b78 <__aeabi_d2iz>
 8010292:	9002      	str	r0, [sp, #8]
 8010294:	f7f0 f956 	bl	8000544 <__aeabi_i2d>
 8010298:	4642      	mov	r2, r8
 801029a:	464b      	mov	r3, r9
 801029c:	f7f0 f9bc 	bl	8000618 <__aeabi_dmul>
 80102a0:	4602      	mov	r2, r0
 80102a2:	460b      	mov	r3, r1
 80102a4:	4630      	mov	r0, r6
 80102a6:	4639      	mov	r1, r7
 80102a8:	f7ef fffe 	bl	80002a8 <__aeabi_dsub>
 80102ac:	9e02      	ldr	r6, [sp, #8]
 80102ae:	9f01      	ldr	r7, [sp, #4]
 80102b0:	3630      	adds	r6, #48	; 0x30
 80102b2:	f805 6b01 	strb.w	r6, [r5], #1
 80102b6:	9e00      	ldr	r6, [sp, #0]
 80102b8:	1bae      	subs	r6, r5, r6
 80102ba:	42b7      	cmp	r7, r6
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	d137      	bne.n	8010332 <_dtoa_r+0x722>
 80102c2:	f7ef fff3 	bl	80002ac <__adddf3>
 80102c6:	4642      	mov	r2, r8
 80102c8:	464b      	mov	r3, r9
 80102ca:	4606      	mov	r6, r0
 80102cc:	460f      	mov	r7, r1
 80102ce:	f7f0 fc33 	bl	8000b38 <__aeabi_dcmpgt>
 80102d2:	b9c8      	cbnz	r0, 8010308 <_dtoa_r+0x6f8>
 80102d4:	4642      	mov	r2, r8
 80102d6:	464b      	mov	r3, r9
 80102d8:	4630      	mov	r0, r6
 80102da:	4639      	mov	r1, r7
 80102dc:	f7f0 fc04 	bl	8000ae8 <__aeabi_dcmpeq>
 80102e0:	b110      	cbz	r0, 80102e8 <_dtoa_r+0x6d8>
 80102e2:	9b02      	ldr	r3, [sp, #8]
 80102e4:	07d9      	lsls	r1, r3, #31
 80102e6:	d40f      	bmi.n	8010308 <_dtoa_r+0x6f8>
 80102e8:	4620      	mov	r0, r4
 80102ea:	4659      	mov	r1, fp
 80102ec:	f000 ff54 	bl	8011198 <_Bfree>
 80102f0:	2300      	movs	r3, #0
 80102f2:	702b      	strb	r3, [r5, #0]
 80102f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102f6:	f10a 0001 	add.w	r0, sl, #1
 80102fa:	6018      	str	r0, [r3, #0]
 80102fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f43f acd8 	beq.w	800fcb4 <_dtoa_r+0xa4>
 8010304:	601d      	str	r5, [r3, #0]
 8010306:	e4d5      	b.n	800fcb4 <_dtoa_r+0xa4>
 8010308:	f8cd a01c 	str.w	sl, [sp, #28]
 801030c:	462b      	mov	r3, r5
 801030e:	461d      	mov	r5, r3
 8010310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010314:	2a39      	cmp	r2, #57	; 0x39
 8010316:	d108      	bne.n	801032a <_dtoa_r+0x71a>
 8010318:	9a00      	ldr	r2, [sp, #0]
 801031a:	429a      	cmp	r2, r3
 801031c:	d1f7      	bne.n	801030e <_dtoa_r+0x6fe>
 801031e:	9a07      	ldr	r2, [sp, #28]
 8010320:	9900      	ldr	r1, [sp, #0]
 8010322:	3201      	adds	r2, #1
 8010324:	9207      	str	r2, [sp, #28]
 8010326:	2230      	movs	r2, #48	; 0x30
 8010328:	700a      	strb	r2, [r1, #0]
 801032a:	781a      	ldrb	r2, [r3, #0]
 801032c:	3201      	adds	r2, #1
 801032e:	701a      	strb	r2, [r3, #0]
 8010330:	e78c      	b.n	801024c <_dtoa_r+0x63c>
 8010332:	4b7f      	ldr	r3, [pc, #508]	; (8010530 <_dtoa_r+0x920>)
 8010334:	2200      	movs	r2, #0
 8010336:	f7f0 f96f 	bl	8000618 <__aeabi_dmul>
 801033a:	2200      	movs	r2, #0
 801033c:	2300      	movs	r3, #0
 801033e:	4606      	mov	r6, r0
 8010340:	460f      	mov	r7, r1
 8010342:	f7f0 fbd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010346:	2800      	cmp	r0, #0
 8010348:	d09b      	beq.n	8010282 <_dtoa_r+0x672>
 801034a:	e7cd      	b.n	80102e8 <_dtoa_r+0x6d8>
 801034c:	9a08      	ldr	r2, [sp, #32]
 801034e:	2a00      	cmp	r2, #0
 8010350:	f000 80c4 	beq.w	80104dc <_dtoa_r+0x8cc>
 8010354:	9a05      	ldr	r2, [sp, #20]
 8010356:	2a01      	cmp	r2, #1
 8010358:	f300 80a8 	bgt.w	80104ac <_dtoa_r+0x89c>
 801035c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801035e:	2a00      	cmp	r2, #0
 8010360:	f000 80a0 	beq.w	80104a4 <_dtoa_r+0x894>
 8010364:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010368:	9e06      	ldr	r6, [sp, #24]
 801036a:	4645      	mov	r5, r8
 801036c:	9a04      	ldr	r2, [sp, #16]
 801036e:	2101      	movs	r1, #1
 8010370:	441a      	add	r2, r3
 8010372:	4620      	mov	r0, r4
 8010374:	4498      	add	r8, r3
 8010376:	9204      	str	r2, [sp, #16]
 8010378:	f001 f814 	bl	80113a4 <__i2b>
 801037c:	4607      	mov	r7, r0
 801037e:	2d00      	cmp	r5, #0
 8010380:	dd0b      	ble.n	801039a <_dtoa_r+0x78a>
 8010382:	9b04      	ldr	r3, [sp, #16]
 8010384:	2b00      	cmp	r3, #0
 8010386:	dd08      	ble.n	801039a <_dtoa_r+0x78a>
 8010388:	42ab      	cmp	r3, r5
 801038a:	9a04      	ldr	r2, [sp, #16]
 801038c:	bfa8      	it	ge
 801038e:	462b      	movge	r3, r5
 8010390:	eba8 0803 	sub.w	r8, r8, r3
 8010394:	1aed      	subs	r5, r5, r3
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	9304      	str	r3, [sp, #16]
 801039a:	9b06      	ldr	r3, [sp, #24]
 801039c:	b1fb      	cbz	r3, 80103de <_dtoa_r+0x7ce>
 801039e:	9b08      	ldr	r3, [sp, #32]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 809f 	beq.w	80104e4 <_dtoa_r+0x8d4>
 80103a6:	2e00      	cmp	r6, #0
 80103a8:	dd11      	ble.n	80103ce <_dtoa_r+0x7be>
 80103aa:	4639      	mov	r1, r7
 80103ac:	4632      	mov	r2, r6
 80103ae:	4620      	mov	r0, r4
 80103b0:	f001 f8b4 	bl	801151c <__pow5mult>
 80103b4:	465a      	mov	r2, fp
 80103b6:	4601      	mov	r1, r0
 80103b8:	4607      	mov	r7, r0
 80103ba:	4620      	mov	r0, r4
 80103bc:	f001 f808 	bl	80113d0 <__multiply>
 80103c0:	4659      	mov	r1, fp
 80103c2:	9007      	str	r0, [sp, #28]
 80103c4:	4620      	mov	r0, r4
 80103c6:	f000 fee7 	bl	8011198 <_Bfree>
 80103ca:	9b07      	ldr	r3, [sp, #28]
 80103cc:	469b      	mov	fp, r3
 80103ce:	9b06      	ldr	r3, [sp, #24]
 80103d0:	1b9a      	subs	r2, r3, r6
 80103d2:	d004      	beq.n	80103de <_dtoa_r+0x7ce>
 80103d4:	4659      	mov	r1, fp
 80103d6:	4620      	mov	r0, r4
 80103d8:	f001 f8a0 	bl	801151c <__pow5mult>
 80103dc:	4683      	mov	fp, r0
 80103de:	2101      	movs	r1, #1
 80103e0:	4620      	mov	r0, r4
 80103e2:	f000 ffdf 	bl	80113a4 <__i2b>
 80103e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	4606      	mov	r6, r0
 80103ec:	dd7c      	ble.n	80104e8 <_dtoa_r+0x8d8>
 80103ee:	461a      	mov	r2, r3
 80103f0:	4601      	mov	r1, r0
 80103f2:	4620      	mov	r0, r4
 80103f4:	f001 f892 	bl	801151c <__pow5mult>
 80103f8:	9b05      	ldr	r3, [sp, #20]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	4606      	mov	r6, r0
 80103fe:	dd76      	ble.n	80104ee <_dtoa_r+0x8de>
 8010400:	2300      	movs	r3, #0
 8010402:	9306      	str	r3, [sp, #24]
 8010404:	6933      	ldr	r3, [r6, #16]
 8010406:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801040a:	6918      	ldr	r0, [r3, #16]
 801040c:	f000 ff7a 	bl	8011304 <__hi0bits>
 8010410:	f1c0 0020 	rsb	r0, r0, #32
 8010414:	9b04      	ldr	r3, [sp, #16]
 8010416:	4418      	add	r0, r3
 8010418:	f010 001f 	ands.w	r0, r0, #31
 801041c:	f000 8086 	beq.w	801052c <_dtoa_r+0x91c>
 8010420:	f1c0 0320 	rsb	r3, r0, #32
 8010424:	2b04      	cmp	r3, #4
 8010426:	dd7f      	ble.n	8010528 <_dtoa_r+0x918>
 8010428:	f1c0 001c 	rsb	r0, r0, #28
 801042c:	9b04      	ldr	r3, [sp, #16]
 801042e:	4403      	add	r3, r0
 8010430:	4480      	add	r8, r0
 8010432:	4405      	add	r5, r0
 8010434:	9304      	str	r3, [sp, #16]
 8010436:	f1b8 0f00 	cmp.w	r8, #0
 801043a:	dd05      	ble.n	8010448 <_dtoa_r+0x838>
 801043c:	4659      	mov	r1, fp
 801043e:	4642      	mov	r2, r8
 8010440:	4620      	mov	r0, r4
 8010442:	f001 f8c5 	bl	80115d0 <__lshift>
 8010446:	4683      	mov	fp, r0
 8010448:	9b04      	ldr	r3, [sp, #16]
 801044a:	2b00      	cmp	r3, #0
 801044c:	dd05      	ble.n	801045a <_dtoa_r+0x84a>
 801044e:	4631      	mov	r1, r6
 8010450:	461a      	mov	r2, r3
 8010452:	4620      	mov	r0, r4
 8010454:	f001 f8bc 	bl	80115d0 <__lshift>
 8010458:	4606      	mov	r6, r0
 801045a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801045c:	2b00      	cmp	r3, #0
 801045e:	d069      	beq.n	8010534 <_dtoa_r+0x924>
 8010460:	4631      	mov	r1, r6
 8010462:	4658      	mov	r0, fp
 8010464:	f001 f920 	bl	80116a8 <__mcmp>
 8010468:	2800      	cmp	r0, #0
 801046a:	da63      	bge.n	8010534 <_dtoa_r+0x924>
 801046c:	2300      	movs	r3, #0
 801046e:	4659      	mov	r1, fp
 8010470:	220a      	movs	r2, #10
 8010472:	4620      	mov	r0, r4
 8010474:	f000 feb2 	bl	80111dc <__multadd>
 8010478:	9b08      	ldr	r3, [sp, #32]
 801047a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801047e:	4683      	mov	fp, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 818f 	beq.w	80107a4 <_dtoa_r+0xb94>
 8010486:	4639      	mov	r1, r7
 8010488:	2300      	movs	r3, #0
 801048a:	220a      	movs	r2, #10
 801048c:	4620      	mov	r0, r4
 801048e:	f000 fea5 	bl	80111dc <__multadd>
 8010492:	f1b9 0f00 	cmp.w	r9, #0
 8010496:	4607      	mov	r7, r0
 8010498:	f300 808e 	bgt.w	80105b8 <_dtoa_r+0x9a8>
 801049c:	9b05      	ldr	r3, [sp, #20]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	dc50      	bgt.n	8010544 <_dtoa_r+0x934>
 80104a2:	e089      	b.n	80105b8 <_dtoa_r+0x9a8>
 80104a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104aa:	e75d      	b.n	8010368 <_dtoa_r+0x758>
 80104ac:	9b01      	ldr	r3, [sp, #4]
 80104ae:	1e5e      	subs	r6, r3, #1
 80104b0:	9b06      	ldr	r3, [sp, #24]
 80104b2:	42b3      	cmp	r3, r6
 80104b4:	bfbf      	itttt	lt
 80104b6:	9b06      	ldrlt	r3, [sp, #24]
 80104b8:	9606      	strlt	r6, [sp, #24]
 80104ba:	1af2      	sublt	r2, r6, r3
 80104bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80104be:	bfb6      	itet	lt
 80104c0:	189b      	addlt	r3, r3, r2
 80104c2:	1b9e      	subge	r6, r3, r6
 80104c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80104c6:	9b01      	ldr	r3, [sp, #4]
 80104c8:	bfb8      	it	lt
 80104ca:	2600      	movlt	r6, #0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	bfb5      	itete	lt
 80104d0:	eba8 0503 	sublt.w	r5, r8, r3
 80104d4:	9b01      	ldrge	r3, [sp, #4]
 80104d6:	2300      	movlt	r3, #0
 80104d8:	4645      	movge	r5, r8
 80104da:	e747      	b.n	801036c <_dtoa_r+0x75c>
 80104dc:	9e06      	ldr	r6, [sp, #24]
 80104de:	9f08      	ldr	r7, [sp, #32]
 80104e0:	4645      	mov	r5, r8
 80104e2:	e74c      	b.n	801037e <_dtoa_r+0x76e>
 80104e4:	9a06      	ldr	r2, [sp, #24]
 80104e6:	e775      	b.n	80103d4 <_dtoa_r+0x7c4>
 80104e8:	9b05      	ldr	r3, [sp, #20]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	dc18      	bgt.n	8010520 <_dtoa_r+0x910>
 80104ee:	9b02      	ldr	r3, [sp, #8]
 80104f0:	b9b3      	cbnz	r3, 8010520 <_dtoa_r+0x910>
 80104f2:	9b03      	ldr	r3, [sp, #12]
 80104f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104f8:	b9a3      	cbnz	r3, 8010524 <_dtoa_r+0x914>
 80104fa:	9b03      	ldr	r3, [sp, #12]
 80104fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010500:	0d1b      	lsrs	r3, r3, #20
 8010502:	051b      	lsls	r3, r3, #20
 8010504:	b12b      	cbz	r3, 8010512 <_dtoa_r+0x902>
 8010506:	9b04      	ldr	r3, [sp, #16]
 8010508:	3301      	adds	r3, #1
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	f108 0801 	add.w	r8, r8, #1
 8010510:	2301      	movs	r3, #1
 8010512:	9306      	str	r3, [sp, #24]
 8010514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010516:	2b00      	cmp	r3, #0
 8010518:	f47f af74 	bne.w	8010404 <_dtoa_r+0x7f4>
 801051c:	2001      	movs	r0, #1
 801051e:	e779      	b.n	8010414 <_dtoa_r+0x804>
 8010520:	2300      	movs	r3, #0
 8010522:	e7f6      	b.n	8010512 <_dtoa_r+0x902>
 8010524:	9b02      	ldr	r3, [sp, #8]
 8010526:	e7f4      	b.n	8010512 <_dtoa_r+0x902>
 8010528:	d085      	beq.n	8010436 <_dtoa_r+0x826>
 801052a:	4618      	mov	r0, r3
 801052c:	301c      	adds	r0, #28
 801052e:	e77d      	b.n	801042c <_dtoa_r+0x81c>
 8010530:	40240000 	.word	0x40240000
 8010534:	9b01      	ldr	r3, [sp, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	dc38      	bgt.n	80105ac <_dtoa_r+0x99c>
 801053a:	9b05      	ldr	r3, [sp, #20]
 801053c:	2b02      	cmp	r3, #2
 801053e:	dd35      	ble.n	80105ac <_dtoa_r+0x99c>
 8010540:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010544:	f1b9 0f00 	cmp.w	r9, #0
 8010548:	d10d      	bne.n	8010566 <_dtoa_r+0x956>
 801054a:	4631      	mov	r1, r6
 801054c:	464b      	mov	r3, r9
 801054e:	2205      	movs	r2, #5
 8010550:	4620      	mov	r0, r4
 8010552:	f000 fe43 	bl	80111dc <__multadd>
 8010556:	4601      	mov	r1, r0
 8010558:	4606      	mov	r6, r0
 801055a:	4658      	mov	r0, fp
 801055c:	f001 f8a4 	bl	80116a8 <__mcmp>
 8010560:	2800      	cmp	r0, #0
 8010562:	f73f adbd 	bgt.w	80100e0 <_dtoa_r+0x4d0>
 8010566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010568:	9d00      	ldr	r5, [sp, #0]
 801056a:	ea6f 0a03 	mvn.w	sl, r3
 801056e:	f04f 0800 	mov.w	r8, #0
 8010572:	4631      	mov	r1, r6
 8010574:	4620      	mov	r0, r4
 8010576:	f000 fe0f 	bl	8011198 <_Bfree>
 801057a:	2f00      	cmp	r7, #0
 801057c:	f43f aeb4 	beq.w	80102e8 <_dtoa_r+0x6d8>
 8010580:	f1b8 0f00 	cmp.w	r8, #0
 8010584:	d005      	beq.n	8010592 <_dtoa_r+0x982>
 8010586:	45b8      	cmp	r8, r7
 8010588:	d003      	beq.n	8010592 <_dtoa_r+0x982>
 801058a:	4641      	mov	r1, r8
 801058c:	4620      	mov	r0, r4
 801058e:	f000 fe03 	bl	8011198 <_Bfree>
 8010592:	4639      	mov	r1, r7
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fdff 	bl	8011198 <_Bfree>
 801059a:	e6a5      	b.n	80102e8 <_dtoa_r+0x6d8>
 801059c:	2600      	movs	r6, #0
 801059e:	4637      	mov	r7, r6
 80105a0:	e7e1      	b.n	8010566 <_dtoa_r+0x956>
 80105a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80105a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80105a8:	4637      	mov	r7, r6
 80105aa:	e599      	b.n	80100e0 <_dtoa_r+0x4d0>
 80105ac:	9b08      	ldr	r3, [sp, #32]
 80105ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 80fd 	beq.w	80107b2 <_dtoa_r+0xba2>
 80105b8:	2d00      	cmp	r5, #0
 80105ba:	dd05      	ble.n	80105c8 <_dtoa_r+0x9b8>
 80105bc:	4639      	mov	r1, r7
 80105be:	462a      	mov	r2, r5
 80105c0:	4620      	mov	r0, r4
 80105c2:	f001 f805 	bl	80115d0 <__lshift>
 80105c6:	4607      	mov	r7, r0
 80105c8:	9b06      	ldr	r3, [sp, #24]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d05c      	beq.n	8010688 <_dtoa_r+0xa78>
 80105ce:	6879      	ldr	r1, [r7, #4]
 80105d0:	4620      	mov	r0, r4
 80105d2:	f000 fda1 	bl	8011118 <_Balloc>
 80105d6:	4605      	mov	r5, r0
 80105d8:	b928      	cbnz	r0, 80105e6 <_dtoa_r+0x9d6>
 80105da:	4b80      	ldr	r3, [pc, #512]	; (80107dc <_dtoa_r+0xbcc>)
 80105dc:	4602      	mov	r2, r0
 80105de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80105e2:	f7ff bb2e 	b.w	800fc42 <_dtoa_r+0x32>
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	3202      	adds	r2, #2
 80105ea:	0092      	lsls	r2, r2, #2
 80105ec:	f107 010c 	add.w	r1, r7, #12
 80105f0:	300c      	adds	r0, #12
 80105f2:	f000 fd76 	bl	80110e2 <memcpy>
 80105f6:	2201      	movs	r2, #1
 80105f8:	4629      	mov	r1, r5
 80105fa:	4620      	mov	r0, r4
 80105fc:	f000 ffe8 	bl	80115d0 <__lshift>
 8010600:	9b00      	ldr	r3, [sp, #0]
 8010602:	3301      	adds	r3, #1
 8010604:	9301      	str	r3, [sp, #4]
 8010606:	9b00      	ldr	r3, [sp, #0]
 8010608:	444b      	add	r3, r9
 801060a:	9307      	str	r3, [sp, #28]
 801060c:	9b02      	ldr	r3, [sp, #8]
 801060e:	f003 0301 	and.w	r3, r3, #1
 8010612:	46b8      	mov	r8, r7
 8010614:	9306      	str	r3, [sp, #24]
 8010616:	4607      	mov	r7, r0
 8010618:	9b01      	ldr	r3, [sp, #4]
 801061a:	4631      	mov	r1, r6
 801061c:	3b01      	subs	r3, #1
 801061e:	4658      	mov	r0, fp
 8010620:	9302      	str	r3, [sp, #8]
 8010622:	f7ff fa67 	bl	800faf4 <quorem>
 8010626:	4603      	mov	r3, r0
 8010628:	3330      	adds	r3, #48	; 0x30
 801062a:	9004      	str	r0, [sp, #16]
 801062c:	4641      	mov	r1, r8
 801062e:	4658      	mov	r0, fp
 8010630:	9308      	str	r3, [sp, #32]
 8010632:	f001 f839 	bl	80116a8 <__mcmp>
 8010636:	463a      	mov	r2, r7
 8010638:	4681      	mov	r9, r0
 801063a:	4631      	mov	r1, r6
 801063c:	4620      	mov	r0, r4
 801063e:	f001 f84f 	bl	80116e0 <__mdiff>
 8010642:	68c2      	ldr	r2, [r0, #12]
 8010644:	9b08      	ldr	r3, [sp, #32]
 8010646:	4605      	mov	r5, r0
 8010648:	bb02      	cbnz	r2, 801068c <_dtoa_r+0xa7c>
 801064a:	4601      	mov	r1, r0
 801064c:	4658      	mov	r0, fp
 801064e:	f001 f82b 	bl	80116a8 <__mcmp>
 8010652:	9b08      	ldr	r3, [sp, #32]
 8010654:	4602      	mov	r2, r0
 8010656:	4629      	mov	r1, r5
 8010658:	4620      	mov	r0, r4
 801065a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801065e:	f000 fd9b 	bl	8011198 <_Bfree>
 8010662:	9b05      	ldr	r3, [sp, #20]
 8010664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010666:	9d01      	ldr	r5, [sp, #4]
 8010668:	ea43 0102 	orr.w	r1, r3, r2
 801066c:	9b06      	ldr	r3, [sp, #24]
 801066e:	430b      	orrs	r3, r1
 8010670:	9b08      	ldr	r3, [sp, #32]
 8010672:	d10d      	bne.n	8010690 <_dtoa_r+0xa80>
 8010674:	2b39      	cmp	r3, #57	; 0x39
 8010676:	d029      	beq.n	80106cc <_dtoa_r+0xabc>
 8010678:	f1b9 0f00 	cmp.w	r9, #0
 801067c:	dd01      	ble.n	8010682 <_dtoa_r+0xa72>
 801067e:	9b04      	ldr	r3, [sp, #16]
 8010680:	3331      	adds	r3, #49	; 0x31
 8010682:	9a02      	ldr	r2, [sp, #8]
 8010684:	7013      	strb	r3, [r2, #0]
 8010686:	e774      	b.n	8010572 <_dtoa_r+0x962>
 8010688:	4638      	mov	r0, r7
 801068a:	e7b9      	b.n	8010600 <_dtoa_r+0x9f0>
 801068c:	2201      	movs	r2, #1
 801068e:	e7e2      	b.n	8010656 <_dtoa_r+0xa46>
 8010690:	f1b9 0f00 	cmp.w	r9, #0
 8010694:	db06      	blt.n	80106a4 <_dtoa_r+0xa94>
 8010696:	9905      	ldr	r1, [sp, #20]
 8010698:	ea41 0909 	orr.w	r9, r1, r9
 801069c:	9906      	ldr	r1, [sp, #24]
 801069e:	ea59 0101 	orrs.w	r1, r9, r1
 80106a2:	d120      	bne.n	80106e6 <_dtoa_r+0xad6>
 80106a4:	2a00      	cmp	r2, #0
 80106a6:	ddec      	ble.n	8010682 <_dtoa_r+0xa72>
 80106a8:	4659      	mov	r1, fp
 80106aa:	2201      	movs	r2, #1
 80106ac:	4620      	mov	r0, r4
 80106ae:	9301      	str	r3, [sp, #4]
 80106b0:	f000 ff8e 	bl	80115d0 <__lshift>
 80106b4:	4631      	mov	r1, r6
 80106b6:	4683      	mov	fp, r0
 80106b8:	f000 fff6 	bl	80116a8 <__mcmp>
 80106bc:	2800      	cmp	r0, #0
 80106be:	9b01      	ldr	r3, [sp, #4]
 80106c0:	dc02      	bgt.n	80106c8 <_dtoa_r+0xab8>
 80106c2:	d1de      	bne.n	8010682 <_dtoa_r+0xa72>
 80106c4:	07da      	lsls	r2, r3, #31
 80106c6:	d5dc      	bpl.n	8010682 <_dtoa_r+0xa72>
 80106c8:	2b39      	cmp	r3, #57	; 0x39
 80106ca:	d1d8      	bne.n	801067e <_dtoa_r+0xa6e>
 80106cc:	9a02      	ldr	r2, [sp, #8]
 80106ce:	2339      	movs	r3, #57	; 0x39
 80106d0:	7013      	strb	r3, [r2, #0]
 80106d2:	462b      	mov	r3, r5
 80106d4:	461d      	mov	r5, r3
 80106d6:	3b01      	subs	r3, #1
 80106d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80106dc:	2a39      	cmp	r2, #57	; 0x39
 80106de:	d050      	beq.n	8010782 <_dtoa_r+0xb72>
 80106e0:	3201      	adds	r2, #1
 80106e2:	701a      	strb	r2, [r3, #0]
 80106e4:	e745      	b.n	8010572 <_dtoa_r+0x962>
 80106e6:	2a00      	cmp	r2, #0
 80106e8:	dd03      	ble.n	80106f2 <_dtoa_r+0xae2>
 80106ea:	2b39      	cmp	r3, #57	; 0x39
 80106ec:	d0ee      	beq.n	80106cc <_dtoa_r+0xabc>
 80106ee:	3301      	adds	r3, #1
 80106f0:	e7c7      	b.n	8010682 <_dtoa_r+0xa72>
 80106f2:	9a01      	ldr	r2, [sp, #4]
 80106f4:	9907      	ldr	r1, [sp, #28]
 80106f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80106fa:	428a      	cmp	r2, r1
 80106fc:	d02a      	beq.n	8010754 <_dtoa_r+0xb44>
 80106fe:	4659      	mov	r1, fp
 8010700:	2300      	movs	r3, #0
 8010702:	220a      	movs	r2, #10
 8010704:	4620      	mov	r0, r4
 8010706:	f000 fd69 	bl	80111dc <__multadd>
 801070a:	45b8      	cmp	r8, r7
 801070c:	4683      	mov	fp, r0
 801070e:	f04f 0300 	mov.w	r3, #0
 8010712:	f04f 020a 	mov.w	r2, #10
 8010716:	4641      	mov	r1, r8
 8010718:	4620      	mov	r0, r4
 801071a:	d107      	bne.n	801072c <_dtoa_r+0xb1c>
 801071c:	f000 fd5e 	bl	80111dc <__multadd>
 8010720:	4680      	mov	r8, r0
 8010722:	4607      	mov	r7, r0
 8010724:	9b01      	ldr	r3, [sp, #4]
 8010726:	3301      	adds	r3, #1
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	e775      	b.n	8010618 <_dtoa_r+0xa08>
 801072c:	f000 fd56 	bl	80111dc <__multadd>
 8010730:	4639      	mov	r1, r7
 8010732:	4680      	mov	r8, r0
 8010734:	2300      	movs	r3, #0
 8010736:	220a      	movs	r2, #10
 8010738:	4620      	mov	r0, r4
 801073a:	f000 fd4f 	bl	80111dc <__multadd>
 801073e:	4607      	mov	r7, r0
 8010740:	e7f0      	b.n	8010724 <_dtoa_r+0xb14>
 8010742:	f1b9 0f00 	cmp.w	r9, #0
 8010746:	9a00      	ldr	r2, [sp, #0]
 8010748:	bfcc      	ite	gt
 801074a:	464d      	movgt	r5, r9
 801074c:	2501      	movle	r5, #1
 801074e:	4415      	add	r5, r2
 8010750:	f04f 0800 	mov.w	r8, #0
 8010754:	4659      	mov	r1, fp
 8010756:	2201      	movs	r2, #1
 8010758:	4620      	mov	r0, r4
 801075a:	9301      	str	r3, [sp, #4]
 801075c:	f000 ff38 	bl	80115d0 <__lshift>
 8010760:	4631      	mov	r1, r6
 8010762:	4683      	mov	fp, r0
 8010764:	f000 ffa0 	bl	80116a8 <__mcmp>
 8010768:	2800      	cmp	r0, #0
 801076a:	dcb2      	bgt.n	80106d2 <_dtoa_r+0xac2>
 801076c:	d102      	bne.n	8010774 <_dtoa_r+0xb64>
 801076e:	9b01      	ldr	r3, [sp, #4]
 8010770:	07db      	lsls	r3, r3, #31
 8010772:	d4ae      	bmi.n	80106d2 <_dtoa_r+0xac2>
 8010774:	462b      	mov	r3, r5
 8010776:	461d      	mov	r5, r3
 8010778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801077c:	2a30      	cmp	r2, #48	; 0x30
 801077e:	d0fa      	beq.n	8010776 <_dtoa_r+0xb66>
 8010780:	e6f7      	b.n	8010572 <_dtoa_r+0x962>
 8010782:	9a00      	ldr	r2, [sp, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d1a5      	bne.n	80106d4 <_dtoa_r+0xac4>
 8010788:	f10a 0a01 	add.w	sl, sl, #1
 801078c:	2331      	movs	r3, #49	; 0x31
 801078e:	e779      	b.n	8010684 <_dtoa_r+0xa74>
 8010790:	4b13      	ldr	r3, [pc, #76]	; (80107e0 <_dtoa_r+0xbd0>)
 8010792:	f7ff baaf 	b.w	800fcf4 <_dtoa_r+0xe4>
 8010796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010798:	2b00      	cmp	r3, #0
 801079a:	f47f aa86 	bne.w	800fcaa <_dtoa_r+0x9a>
 801079e:	4b11      	ldr	r3, [pc, #68]	; (80107e4 <_dtoa_r+0xbd4>)
 80107a0:	f7ff baa8 	b.w	800fcf4 <_dtoa_r+0xe4>
 80107a4:	f1b9 0f00 	cmp.w	r9, #0
 80107a8:	dc03      	bgt.n	80107b2 <_dtoa_r+0xba2>
 80107aa:	9b05      	ldr	r3, [sp, #20]
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	f73f aec9 	bgt.w	8010544 <_dtoa_r+0x934>
 80107b2:	9d00      	ldr	r5, [sp, #0]
 80107b4:	4631      	mov	r1, r6
 80107b6:	4658      	mov	r0, fp
 80107b8:	f7ff f99c 	bl	800faf4 <quorem>
 80107bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80107c0:	f805 3b01 	strb.w	r3, [r5], #1
 80107c4:	9a00      	ldr	r2, [sp, #0]
 80107c6:	1aaa      	subs	r2, r5, r2
 80107c8:	4591      	cmp	r9, r2
 80107ca:	ddba      	ble.n	8010742 <_dtoa_r+0xb32>
 80107cc:	4659      	mov	r1, fp
 80107ce:	2300      	movs	r3, #0
 80107d0:	220a      	movs	r2, #10
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 fd02 	bl	80111dc <__multadd>
 80107d8:	4683      	mov	fp, r0
 80107da:	e7eb      	b.n	80107b4 <_dtoa_r+0xba4>
 80107dc:	0801307c 	.word	0x0801307c
 80107e0:	08012e78 	.word	0x08012e78
 80107e4:	08012ff9 	.word	0x08012ff9

080107e8 <std>:
 80107e8:	2300      	movs	r3, #0
 80107ea:	b510      	push	{r4, lr}
 80107ec:	4604      	mov	r4, r0
 80107ee:	e9c0 3300 	strd	r3, r3, [r0]
 80107f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107f6:	6083      	str	r3, [r0, #8]
 80107f8:	8181      	strh	r1, [r0, #12]
 80107fa:	6643      	str	r3, [r0, #100]	; 0x64
 80107fc:	81c2      	strh	r2, [r0, #14]
 80107fe:	6183      	str	r3, [r0, #24]
 8010800:	4619      	mov	r1, r3
 8010802:	2208      	movs	r2, #8
 8010804:	305c      	adds	r0, #92	; 0x5c
 8010806:	f7fd fb49 	bl	800de9c <memset>
 801080a:	4b05      	ldr	r3, [pc, #20]	; (8010820 <std+0x38>)
 801080c:	6263      	str	r3, [r4, #36]	; 0x24
 801080e:	4b05      	ldr	r3, [pc, #20]	; (8010824 <std+0x3c>)
 8010810:	62a3      	str	r3, [r4, #40]	; 0x28
 8010812:	4b05      	ldr	r3, [pc, #20]	; (8010828 <std+0x40>)
 8010814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010816:	4b05      	ldr	r3, [pc, #20]	; (801082c <std+0x44>)
 8010818:	6224      	str	r4, [r4, #32]
 801081a:	6323      	str	r3, [r4, #48]	; 0x30
 801081c:	bd10      	pop	{r4, pc}
 801081e:	bf00      	nop
 8010820:	08012029 	.word	0x08012029
 8010824:	0801204b 	.word	0x0801204b
 8010828:	08012083 	.word	0x08012083
 801082c:	080120a7 	.word	0x080120a7

08010830 <_cleanup_r>:
 8010830:	4901      	ldr	r1, [pc, #4]	; (8010838 <_cleanup_r+0x8>)
 8010832:	f000 b8af 	b.w	8010994 <_fwalk_reent>
 8010836:	bf00      	nop
 8010838:	080123fd 	.word	0x080123fd

0801083c <__sfmoreglue>:
 801083c:	b570      	push	{r4, r5, r6, lr}
 801083e:	1e4a      	subs	r2, r1, #1
 8010840:	2568      	movs	r5, #104	; 0x68
 8010842:	4355      	muls	r5, r2
 8010844:	460e      	mov	r6, r1
 8010846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801084a:	f7fd fb7f 	bl	800df4c <_malloc_r>
 801084e:	4604      	mov	r4, r0
 8010850:	b140      	cbz	r0, 8010864 <__sfmoreglue+0x28>
 8010852:	2100      	movs	r1, #0
 8010854:	e9c0 1600 	strd	r1, r6, [r0]
 8010858:	300c      	adds	r0, #12
 801085a:	60a0      	str	r0, [r4, #8]
 801085c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010860:	f7fd fb1c 	bl	800de9c <memset>
 8010864:	4620      	mov	r0, r4
 8010866:	bd70      	pop	{r4, r5, r6, pc}

08010868 <__sfp_lock_acquire>:
 8010868:	4801      	ldr	r0, [pc, #4]	; (8010870 <__sfp_lock_acquire+0x8>)
 801086a:	f000 bc26 	b.w	80110ba <__retarget_lock_acquire_recursive>
 801086e:	bf00      	nop
 8010870:	200020a0 	.word	0x200020a0

08010874 <__sfp_lock_release>:
 8010874:	4801      	ldr	r0, [pc, #4]	; (801087c <__sfp_lock_release+0x8>)
 8010876:	f000 bc21 	b.w	80110bc <__retarget_lock_release_recursive>
 801087a:	bf00      	nop
 801087c:	200020a0 	.word	0x200020a0

08010880 <__sinit_lock_acquire>:
 8010880:	4801      	ldr	r0, [pc, #4]	; (8010888 <__sinit_lock_acquire+0x8>)
 8010882:	f000 bc1a 	b.w	80110ba <__retarget_lock_acquire_recursive>
 8010886:	bf00      	nop
 8010888:	2000209b 	.word	0x2000209b

0801088c <__sinit_lock_release>:
 801088c:	4801      	ldr	r0, [pc, #4]	; (8010894 <__sinit_lock_release+0x8>)
 801088e:	f000 bc15 	b.w	80110bc <__retarget_lock_release_recursive>
 8010892:	bf00      	nop
 8010894:	2000209b 	.word	0x2000209b

08010898 <__sinit>:
 8010898:	b510      	push	{r4, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	f7ff fff0 	bl	8010880 <__sinit_lock_acquire>
 80108a0:	69a3      	ldr	r3, [r4, #24]
 80108a2:	b11b      	cbz	r3, 80108ac <__sinit+0x14>
 80108a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108a8:	f7ff bff0 	b.w	801088c <__sinit_lock_release>
 80108ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80108b0:	6523      	str	r3, [r4, #80]	; 0x50
 80108b2:	4b13      	ldr	r3, [pc, #76]	; (8010900 <__sinit+0x68>)
 80108b4:	4a13      	ldr	r2, [pc, #76]	; (8010904 <__sinit+0x6c>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80108ba:	42a3      	cmp	r3, r4
 80108bc:	bf04      	itt	eq
 80108be:	2301      	moveq	r3, #1
 80108c0:	61a3      	streq	r3, [r4, #24]
 80108c2:	4620      	mov	r0, r4
 80108c4:	f000 f820 	bl	8010908 <__sfp>
 80108c8:	6060      	str	r0, [r4, #4]
 80108ca:	4620      	mov	r0, r4
 80108cc:	f000 f81c 	bl	8010908 <__sfp>
 80108d0:	60a0      	str	r0, [r4, #8]
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 f818 	bl	8010908 <__sfp>
 80108d8:	2200      	movs	r2, #0
 80108da:	60e0      	str	r0, [r4, #12]
 80108dc:	2104      	movs	r1, #4
 80108de:	6860      	ldr	r0, [r4, #4]
 80108e0:	f7ff ff82 	bl	80107e8 <std>
 80108e4:	68a0      	ldr	r0, [r4, #8]
 80108e6:	2201      	movs	r2, #1
 80108e8:	2109      	movs	r1, #9
 80108ea:	f7ff ff7d 	bl	80107e8 <std>
 80108ee:	68e0      	ldr	r0, [r4, #12]
 80108f0:	2202      	movs	r2, #2
 80108f2:	2112      	movs	r1, #18
 80108f4:	f7ff ff78 	bl	80107e8 <std>
 80108f8:	2301      	movs	r3, #1
 80108fa:	61a3      	str	r3, [r4, #24]
 80108fc:	e7d2      	b.n	80108a4 <__sinit+0xc>
 80108fe:	bf00      	nop
 8010900:	08012e64 	.word	0x08012e64
 8010904:	08010831 	.word	0x08010831

08010908 <__sfp>:
 8010908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090a:	4607      	mov	r7, r0
 801090c:	f7ff ffac 	bl	8010868 <__sfp_lock_acquire>
 8010910:	4b1e      	ldr	r3, [pc, #120]	; (801098c <__sfp+0x84>)
 8010912:	681e      	ldr	r6, [r3, #0]
 8010914:	69b3      	ldr	r3, [r6, #24]
 8010916:	b913      	cbnz	r3, 801091e <__sfp+0x16>
 8010918:	4630      	mov	r0, r6
 801091a:	f7ff ffbd 	bl	8010898 <__sinit>
 801091e:	3648      	adds	r6, #72	; 0x48
 8010920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010924:	3b01      	subs	r3, #1
 8010926:	d503      	bpl.n	8010930 <__sfp+0x28>
 8010928:	6833      	ldr	r3, [r6, #0]
 801092a:	b30b      	cbz	r3, 8010970 <__sfp+0x68>
 801092c:	6836      	ldr	r6, [r6, #0]
 801092e:	e7f7      	b.n	8010920 <__sfp+0x18>
 8010930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010934:	b9d5      	cbnz	r5, 801096c <__sfp+0x64>
 8010936:	4b16      	ldr	r3, [pc, #88]	; (8010990 <__sfp+0x88>)
 8010938:	60e3      	str	r3, [r4, #12]
 801093a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801093e:	6665      	str	r5, [r4, #100]	; 0x64
 8010940:	f000 fbba 	bl	80110b8 <__retarget_lock_init_recursive>
 8010944:	f7ff ff96 	bl	8010874 <__sfp_lock_release>
 8010948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801094c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010950:	6025      	str	r5, [r4, #0]
 8010952:	61a5      	str	r5, [r4, #24]
 8010954:	2208      	movs	r2, #8
 8010956:	4629      	mov	r1, r5
 8010958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801095c:	f7fd fa9e 	bl	800de9c <memset>
 8010960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010968:	4620      	mov	r0, r4
 801096a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801096c:	3468      	adds	r4, #104	; 0x68
 801096e:	e7d9      	b.n	8010924 <__sfp+0x1c>
 8010970:	2104      	movs	r1, #4
 8010972:	4638      	mov	r0, r7
 8010974:	f7ff ff62 	bl	801083c <__sfmoreglue>
 8010978:	4604      	mov	r4, r0
 801097a:	6030      	str	r0, [r6, #0]
 801097c:	2800      	cmp	r0, #0
 801097e:	d1d5      	bne.n	801092c <__sfp+0x24>
 8010980:	f7ff ff78 	bl	8010874 <__sfp_lock_release>
 8010984:	230c      	movs	r3, #12
 8010986:	603b      	str	r3, [r7, #0]
 8010988:	e7ee      	b.n	8010968 <__sfp+0x60>
 801098a:	bf00      	nop
 801098c:	08012e64 	.word	0x08012e64
 8010990:	ffff0001 	.word	0xffff0001

08010994 <_fwalk_reent>:
 8010994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010998:	4606      	mov	r6, r0
 801099a:	4688      	mov	r8, r1
 801099c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109a0:	2700      	movs	r7, #0
 80109a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109a6:	f1b9 0901 	subs.w	r9, r9, #1
 80109aa:	d505      	bpl.n	80109b8 <_fwalk_reent+0x24>
 80109ac:	6824      	ldr	r4, [r4, #0]
 80109ae:	2c00      	cmp	r4, #0
 80109b0:	d1f7      	bne.n	80109a2 <_fwalk_reent+0xe>
 80109b2:	4638      	mov	r0, r7
 80109b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109b8:	89ab      	ldrh	r3, [r5, #12]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d907      	bls.n	80109ce <_fwalk_reent+0x3a>
 80109be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109c2:	3301      	adds	r3, #1
 80109c4:	d003      	beq.n	80109ce <_fwalk_reent+0x3a>
 80109c6:	4629      	mov	r1, r5
 80109c8:	4630      	mov	r0, r6
 80109ca:	47c0      	blx	r8
 80109cc:	4307      	orrs	r7, r0
 80109ce:	3568      	adds	r5, #104	; 0x68
 80109d0:	e7e9      	b.n	80109a6 <_fwalk_reent+0x12>

080109d2 <rshift>:
 80109d2:	6903      	ldr	r3, [r0, #16]
 80109d4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109dc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109e0:	f100 0414 	add.w	r4, r0, #20
 80109e4:	dd45      	ble.n	8010a72 <rshift+0xa0>
 80109e6:	f011 011f 	ands.w	r1, r1, #31
 80109ea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109f2:	d10c      	bne.n	8010a0e <rshift+0x3c>
 80109f4:	f100 0710 	add.w	r7, r0, #16
 80109f8:	4629      	mov	r1, r5
 80109fa:	42b1      	cmp	r1, r6
 80109fc:	d334      	bcc.n	8010a68 <rshift+0x96>
 80109fe:	1a9b      	subs	r3, r3, r2
 8010a00:	009b      	lsls	r3, r3, #2
 8010a02:	1eea      	subs	r2, r5, #3
 8010a04:	4296      	cmp	r6, r2
 8010a06:	bf38      	it	cc
 8010a08:	2300      	movcc	r3, #0
 8010a0a:	4423      	add	r3, r4
 8010a0c:	e015      	b.n	8010a3a <rshift+0x68>
 8010a0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a12:	f1c1 0820 	rsb	r8, r1, #32
 8010a16:	40cf      	lsrs	r7, r1
 8010a18:	f105 0e04 	add.w	lr, r5, #4
 8010a1c:	46a1      	mov	r9, r4
 8010a1e:	4576      	cmp	r6, lr
 8010a20:	46f4      	mov	ip, lr
 8010a22:	d815      	bhi.n	8010a50 <rshift+0x7e>
 8010a24:	1a9b      	subs	r3, r3, r2
 8010a26:	009a      	lsls	r2, r3, #2
 8010a28:	3a04      	subs	r2, #4
 8010a2a:	3501      	adds	r5, #1
 8010a2c:	42ae      	cmp	r6, r5
 8010a2e:	bf38      	it	cc
 8010a30:	2200      	movcc	r2, #0
 8010a32:	18a3      	adds	r3, r4, r2
 8010a34:	50a7      	str	r7, [r4, r2]
 8010a36:	b107      	cbz	r7, 8010a3a <rshift+0x68>
 8010a38:	3304      	adds	r3, #4
 8010a3a:	1b1a      	subs	r2, r3, r4
 8010a3c:	42a3      	cmp	r3, r4
 8010a3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a42:	bf08      	it	eq
 8010a44:	2300      	moveq	r3, #0
 8010a46:	6102      	str	r2, [r0, #16]
 8010a48:	bf08      	it	eq
 8010a4a:	6143      	streq	r3, [r0, #20]
 8010a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a50:	f8dc c000 	ldr.w	ip, [ip]
 8010a54:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a58:	ea4c 0707 	orr.w	r7, ip, r7
 8010a5c:	f849 7b04 	str.w	r7, [r9], #4
 8010a60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a64:	40cf      	lsrs	r7, r1
 8010a66:	e7da      	b.n	8010a1e <rshift+0x4c>
 8010a68:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a70:	e7c3      	b.n	80109fa <rshift+0x28>
 8010a72:	4623      	mov	r3, r4
 8010a74:	e7e1      	b.n	8010a3a <rshift+0x68>

08010a76 <__hexdig_fun>:
 8010a76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a7a:	2b09      	cmp	r3, #9
 8010a7c:	d802      	bhi.n	8010a84 <__hexdig_fun+0xe>
 8010a7e:	3820      	subs	r0, #32
 8010a80:	b2c0      	uxtb	r0, r0
 8010a82:	4770      	bx	lr
 8010a84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a88:	2b05      	cmp	r3, #5
 8010a8a:	d801      	bhi.n	8010a90 <__hexdig_fun+0x1a>
 8010a8c:	3847      	subs	r0, #71	; 0x47
 8010a8e:	e7f7      	b.n	8010a80 <__hexdig_fun+0xa>
 8010a90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a94:	2b05      	cmp	r3, #5
 8010a96:	d801      	bhi.n	8010a9c <__hexdig_fun+0x26>
 8010a98:	3827      	subs	r0, #39	; 0x27
 8010a9a:	e7f1      	b.n	8010a80 <__hexdig_fun+0xa>
 8010a9c:	2000      	movs	r0, #0
 8010a9e:	4770      	bx	lr

08010aa0 <__gethex>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	ed2d 8b02 	vpush	{d8}
 8010aa8:	b089      	sub	sp, #36	; 0x24
 8010aaa:	ee08 0a10 	vmov	s16, r0
 8010aae:	9304      	str	r3, [sp, #16]
 8010ab0:	4bbc      	ldr	r3, [pc, #752]	; (8010da4 <__gethex+0x304>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	9301      	str	r3, [sp, #4]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	468b      	mov	fp, r1
 8010aba:	4690      	mov	r8, r2
 8010abc:	f7ef fb98 	bl	80001f0 <strlen>
 8010ac0:	9b01      	ldr	r3, [sp, #4]
 8010ac2:	f8db 2000 	ldr.w	r2, [fp]
 8010ac6:	4403      	add	r3, r0
 8010ac8:	4682      	mov	sl, r0
 8010aca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010ace:	9305      	str	r3, [sp, #20]
 8010ad0:	1c93      	adds	r3, r2, #2
 8010ad2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010ad6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010ada:	32fe      	adds	r2, #254	; 0xfe
 8010adc:	18d1      	adds	r1, r2, r3
 8010ade:	461f      	mov	r7, r3
 8010ae0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ae4:	9100      	str	r1, [sp, #0]
 8010ae6:	2830      	cmp	r0, #48	; 0x30
 8010ae8:	d0f8      	beq.n	8010adc <__gethex+0x3c>
 8010aea:	f7ff ffc4 	bl	8010a76 <__hexdig_fun>
 8010aee:	4604      	mov	r4, r0
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d13a      	bne.n	8010b6a <__gethex+0xca>
 8010af4:	9901      	ldr	r1, [sp, #4]
 8010af6:	4652      	mov	r2, sl
 8010af8:	4638      	mov	r0, r7
 8010afa:	f001 fad8 	bl	80120ae <strncmp>
 8010afe:	4605      	mov	r5, r0
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d168      	bne.n	8010bd6 <__gethex+0x136>
 8010b04:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b08:	eb07 060a 	add.w	r6, r7, sl
 8010b0c:	f7ff ffb3 	bl	8010a76 <__hexdig_fun>
 8010b10:	2800      	cmp	r0, #0
 8010b12:	d062      	beq.n	8010bda <__gethex+0x13a>
 8010b14:	4633      	mov	r3, r6
 8010b16:	7818      	ldrb	r0, [r3, #0]
 8010b18:	2830      	cmp	r0, #48	; 0x30
 8010b1a:	461f      	mov	r7, r3
 8010b1c:	f103 0301 	add.w	r3, r3, #1
 8010b20:	d0f9      	beq.n	8010b16 <__gethex+0x76>
 8010b22:	f7ff ffa8 	bl	8010a76 <__hexdig_fun>
 8010b26:	2301      	movs	r3, #1
 8010b28:	fab0 f480 	clz	r4, r0
 8010b2c:	0964      	lsrs	r4, r4, #5
 8010b2e:	4635      	mov	r5, r6
 8010b30:	9300      	str	r3, [sp, #0]
 8010b32:	463a      	mov	r2, r7
 8010b34:	4616      	mov	r6, r2
 8010b36:	3201      	adds	r2, #1
 8010b38:	7830      	ldrb	r0, [r6, #0]
 8010b3a:	f7ff ff9c 	bl	8010a76 <__hexdig_fun>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d1f8      	bne.n	8010b34 <__gethex+0x94>
 8010b42:	9901      	ldr	r1, [sp, #4]
 8010b44:	4652      	mov	r2, sl
 8010b46:	4630      	mov	r0, r6
 8010b48:	f001 fab1 	bl	80120ae <strncmp>
 8010b4c:	b980      	cbnz	r0, 8010b70 <__gethex+0xd0>
 8010b4e:	b94d      	cbnz	r5, 8010b64 <__gethex+0xc4>
 8010b50:	eb06 050a 	add.w	r5, r6, sl
 8010b54:	462a      	mov	r2, r5
 8010b56:	4616      	mov	r6, r2
 8010b58:	3201      	adds	r2, #1
 8010b5a:	7830      	ldrb	r0, [r6, #0]
 8010b5c:	f7ff ff8b 	bl	8010a76 <__hexdig_fun>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d1f8      	bne.n	8010b56 <__gethex+0xb6>
 8010b64:	1bad      	subs	r5, r5, r6
 8010b66:	00ad      	lsls	r5, r5, #2
 8010b68:	e004      	b.n	8010b74 <__gethex+0xd4>
 8010b6a:	2400      	movs	r4, #0
 8010b6c:	4625      	mov	r5, r4
 8010b6e:	e7e0      	b.n	8010b32 <__gethex+0x92>
 8010b70:	2d00      	cmp	r5, #0
 8010b72:	d1f7      	bne.n	8010b64 <__gethex+0xc4>
 8010b74:	7833      	ldrb	r3, [r6, #0]
 8010b76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b7a:	2b50      	cmp	r3, #80	; 0x50
 8010b7c:	d13b      	bne.n	8010bf6 <__gethex+0x156>
 8010b7e:	7873      	ldrb	r3, [r6, #1]
 8010b80:	2b2b      	cmp	r3, #43	; 0x2b
 8010b82:	d02c      	beq.n	8010bde <__gethex+0x13e>
 8010b84:	2b2d      	cmp	r3, #45	; 0x2d
 8010b86:	d02e      	beq.n	8010be6 <__gethex+0x146>
 8010b88:	1c71      	adds	r1, r6, #1
 8010b8a:	f04f 0900 	mov.w	r9, #0
 8010b8e:	7808      	ldrb	r0, [r1, #0]
 8010b90:	f7ff ff71 	bl	8010a76 <__hexdig_fun>
 8010b94:	1e43      	subs	r3, r0, #1
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	2b18      	cmp	r3, #24
 8010b9a:	d82c      	bhi.n	8010bf6 <__gethex+0x156>
 8010b9c:	f1a0 0210 	sub.w	r2, r0, #16
 8010ba0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010ba4:	f7ff ff67 	bl	8010a76 <__hexdig_fun>
 8010ba8:	1e43      	subs	r3, r0, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b18      	cmp	r3, #24
 8010bae:	d91d      	bls.n	8010bec <__gethex+0x14c>
 8010bb0:	f1b9 0f00 	cmp.w	r9, #0
 8010bb4:	d000      	beq.n	8010bb8 <__gethex+0x118>
 8010bb6:	4252      	negs	r2, r2
 8010bb8:	4415      	add	r5, r2
 8010bba:	f8cb 1000 	str.w	r1, [fp]
 8010bbe:	b1e4      	cbz	r4, 8010bfa <__gethex+0x15a>
 8010bc0:	9b00      	ldr	r3, [sp, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	bf14      	ite	ne
 8010bc6:	2700      	movne	r7, #0
 8010bc8:	2706      	moveq	r7, #6
 8010bca:	4638      	mov	r0, r7
 8010bcc:	b009      	add	sp, #36	; 0x24
 8010bce:	ecbd 8b02 	vpop	{d8}
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	463e      	mov	r6, r7
 8010bd8:	4625      	mov	r5, r4
 8010bda:	2401      	movs	r4, #1
 8010bdc:	e7ca      	b.n	8010b74 <__gethex+0xd4>
 8010bde:	f04f 0900 	mov.w	r9, #0
 8010be2:	1cb1      	adds	r1, r6, #2
 8010be4:	e7d3      	b.n	8010b8e <__gethex+0xee>
 8010be6:	f04f 0901 	mov.w	r9, #1
 8010bea:	e7fa      	b.n	8010be2 <__gethex+0x142>
 8010bec:	230a      	movs	r3, #10
 8010bee:	fb03 0202 	mla	r2, r3, r2, r0
 8010bf2:	3a10      	subs	r2, #16
 8010bf4:	e7d4      	b.n	8010ba0 <__gethex+0x100>
 8010bf6:	4631      	mov	r1, r6
 8010bf8:	e7df      	b.n	8010bba <__gethex+0x11a>
 8010bfa:	1bf3      	subs	r3, r6, r7
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	4621      	mov	r1, r4
 8010c00:	2b07      	cmp	r3, #7
 8010c02:	dc0b      	bgt.n	8010c1c <__gethex+0x17c>
 8010c04:	ee18 0a10 	vmov	r0, s16
 8010c08:	f000 fa86 	bl	8011118 <_Balloc>
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	b940      	cbnz	r0, 8010c22 <__gethex+0x182>
 8010c10:	4b65      	ldr	r3, [pc, #404]	; (8010da8 <__gethex+0x308>)
 8010c12:	4602      	mov	r2, r0
 8010c14:	21de      	movs	r1, #222	; 0xde
 8010c16:	4865      	ldr	r0, [pc, #404]	; (8010dac <__gethex+0x30c>)
 8010c18:	f001 fb3c 	bl	8012294 <__assert_func>
 8010c1c:	3101      	adds	r1, #1
 8010c1e:	105b      	asrs	r3, r3, #1
 8010c20:	e7ee      	b.n	8010c00 <__gethex+0x160>
 8010c22:	f100 0914 	add.w	r9, r0, #20
 8010c26:	f04f 0b00 	mov.w	fp, #0
 8010c2a:	f1ca 0301 	rsb	r3, sl, #1
 8010c2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c32:	f8cd b000 	str.w	fp, [sp]
 8010c36:	9306      	str	r3, [sp, #24]
 8010c38:	42b7      	cmp	r7, r6
 8010c3a:	d340      	bcc.n	8010cbe <__gethex+0x21e>
 8010c3c:	9802      	ldr	r0, [sp, #8]
 8010c3e:	9b00      	ldr	r3, [sp, #0]
 8010c40:	f840 3b04 	str.w	r3, [r0], #4
 8010c44:	eba0 0009 	sub.w	r0, r0, r9
 8010c48:	1080      	asrs	r0, r0, #2
 8010c4a:	0146      	lsls	r6, r0, #5
 8010c4c:	6120      	str	r0, [r4, #16]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f000 fb58 	bl	8011304 <__hi0bits>
 8010c54:	1a30      	subs	r0, r6, r0
 8010c56:	f8d8 6000 	ldr.w	r6, [r8]
 8010c5a:	42b0      	cmp	r0, r6
 8010c5c:	dd63      	ble.n	8010d26 <__gethex+0x286>
 8010c5e:	1b87      	subs	r7, r0, r6
 8010c60:	4639      	mov	r1, r7
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 fef2 	bl	8011a4c <__any_on>
 8010c68:	4682      	mov	sl, r0
 8010c6a:	b1a8      	cbz	r0, 8010c98 <__gethex+0x1f8>
 8010c6c:	1e7b      	subs	r3, r7, #1
 8010c6e:	1159      	asrs	r1, r3, #5
 8010c70:	f003 021f 	and.w	r2, r3, #31
 8010c74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010c78:	f04f 0a01 	mov.w	sl, #1
 8010c7c:	fa0a f202 	lsl.w	r2, sl, r2
 8010c80:	420a      	tst	r2, r1
 8010c82:	d009      	beq.n	8010c98 <__gethex+0x1f8>
 8010c84:	4553      	cmp	r3, sl
 8010c86:	dd05      	ble.n	8010c94 <__gethex+0x1f4>
 8010c88:	1eb9      	subs	r1, r7, #2
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 fede 	bl	8011a4c <__any_on>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	d145      	bne.n	8010d20 <__gethex+0x280>
 8010c94:	f04f 0a02 	mov.w	sl, #2
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f7ff fe99 	bl	80109d2 <rshift>
 8010ca0:	443d      	add	r5, r7
 8010ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ca6:	42ab      	cmp	r3, r5
 8010ca8:	da4c      	bge.n	8010d44 <__gethex+0x2a4>
 8010caa:	ee18 0a10 	vmov	r0, s16
 8010cae:	4621      	mov	r1, r4
 8010cb0:	f000 fa72 	bl	8011198 <_Bfree>
 8010cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	6013      	str	r3, [r2, #0]
 8010cba:	27a3      	movs	r7, #163	; 0xa3
 8010cbc:	e785      	b.n	8010bca <__gethex+0x12a>
 8010cbe:	1e73      	subs	r3, r6, #1
 8010cc0:	9a05      	ldr	r2, [sp, #20]
 8010cc2:	9303      	str	r3, [sp, #12]
 8010cc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d019      	beq.n	8010d00 <__gethex+0x260>
 8010ccc:	f1bb 0f20 	cmp.w	fp, #32
 8010cd0:	d107      	bne.n	8010ce2 <__gethex+0x242>
 8010cd2:	9b02      	ldr	r3, [sp, #8]
 8010cd4:	9a00      	ldr	r2, [sp, #0]
 8010cd6:	f843 2b04 	str.w	r2, [r3], #4
 8010cda:	9302      	str	r3, [sp, #8]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	469b      	mov	fp, r3
 8010ce2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010ce6:	f7ff fec6 	bl	8010a76 <__hexdig_fun>
 8010cea:	9b00      	ldr	r3, [sp, #0]
 8010cec:	f000 000f 	and.w	r0, r0, #15
 8010cf0:	fa00 f00b 	lsl.w	r0, r0, fp
 8010cf4:	4303      	orrs	r3, r0
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	f10b 0b04 	add.w	fp, fp, #4
 8010cfc:	9b03      	ldr	r3, [sp, #12]
 8010cfe:	e00d      	b.n	8010d1c <__gethex+0x27c>
 8010d00:	9b03      	ldr	r3, [sp, #12]
 8010d02:	9a06      	ldr	r2, [sp, #24]
 8010d04:	4413      	add	r3, r2
 8010d06:	42bb      	cmp	r3, r7
 8010d08:	d3e0      	bcc.n	8010ccc <__gethex+0x22c>
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	9901      	ldr	r1, [sp, #4]
 8010d0e:	9307      	str	r3, [sp, #28]
 8010d10:	4652      	mov	r2, sl
 8010d12:	f001 f9cc 	bl	80120ae <strncmp>
 8010d16:	9b07      	ldr	r3, [sp, #28]
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d1d7      	bne.n	8010ccc <__gethex+0x22c>
 8010d1c:	461e      	mov	r6, r3
 8010d1e:	e78b      	b.n	8010c38 <__gethex+0x198>
 8010d20:	f04f 0a03 	mov.w	sl, #3
 8010d24:	e7b8      	b.n	8010c98 <__gethex+0x1f8>
 8010d26:	da0a      	bge.n	8010d3e <__gethex+0x29e>
 8010d28:	1a37      	subs	r7, r6, r0
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	ee18 0a10 	vmov	r0, s16
 8010d30:	463a      	mov	r2, r7
 8010d32:	f000 fc4d 	bl	80115d0 <__lshift>
 8010d36:	1bed      	subs	r5, r5, r7
 8010d38:	4604      	mov	r4, r0
 8010d3a:	f100 0914 	add.w	r9, r0, #20
 8010d3e:	f04f 0a00 	mov.w	sl, #0
 8010d42:	e7ae      	b.n	8010ca2 <__gethex+0x202>
 8010d44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d48:	42a8      	cmp	r0, r5
 8010d4a:	dd72      	ble.n	8010e32 <__gethex+0x392>
 8010d4c:	1b45      	subs	r5, r0, r5
 8010d4e:	42ae      	cmp	r6, r5
 8010d50:	dc36      	bgt.n	8010dc0 <__gethex+0x320>
 8010d52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d02a      	beq.n	8010db0 <__gethex+0x310>
 8010d5a:	2b03      	cmp	r3, #3
 8010d5c:	d02c      	beq.n	8010db8 <__gethex+0x318>
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d115      	bne.n	8010d8e <__gethex+0x2ee>
 8010d62:	42ae      	cmp	r6, r5
 8010d64:	d113      	bne.n	8010d8e <__gethex+0x2ee>
 8010d66:	2e01      	cmp	r6, #1
 8010d68:	d10b      	bne.n	8010d82 <__gethex+0x2e2>
 8010d6a:	9a04      	ldr	r2, [sp, #16]
 8010d6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d70:	6013      	str	r3, [r2, #0]
 8010d72:	2301      	movs	r3, #1
 8010d74:	6123      	str	r3, [r4, #16]
 8010d76:	f8c9 3000 	str.w	r3, [r9]
 8010d7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d7c:	2762      	movs	r7, #98	; 0x62
 8010d7e:	601c      	str	r4, [r3, #0]
 8010d80:	e723      	b.n	8010bca <__gethex+0x12a>
 8010d82:	1e71      	subs	r1, r6, #1
 8010d84:	4620      	mov	r0, r4
 8010d86:	f000 fe61 	bl	8011a4c <__any_on>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d1ed      	bne.n	8010d6a <__gethex+0x2ca>
 8010d8e:	ee18 0a10 	vmov	r0, s16
 8010d92:	4621      	mov	r1, r4
 8010d94:	f000 fa00 	bl	8011198 <_Bfree>
 8010d98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	6013      	str	r3, [r2, #0]
 8010d9e:	2750      	movs	r7, #80	; 0x50
 8010da0:	e713      	b.n	8010bca <__gethex+0x12a>
 8010da2:	bf00      	nop
 8010da4:	0801315c 	.word	0x0801315c
 8010da8:	0801307c 	.word	0x0801307c
 8010dac:	080130f0 	.word	0x080130f0
 8010db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1eb      	bne.n	8010d8e <__gethex+0x2ee>
 8010db6:	e7d8      	b.n	8010d6a <__gethex+0x2ca>
 8010db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1d5      	bne.n	8010d6a <__gethex+0x2ca>
 8010dbe:	e7e6      	b.n	8010d8e <__gethex+0x2ee>
 8010dc0:	1e6f      	subs	r7, r5, #1
 8010dc2:	f1ba 0f00 	cmp.w	sl, #0
 8010dc6:	d131      	bne.n	8010e2c <__gethex+0x38c>
 8010dc8:	b127      	cbz	r7, 8010dd4 <__gethex+0x334>
 8010dca:	4639      	mov	r1, r7
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f000 fe3d 	bl	8011a4c <__any_on>
 8010dd2:	4682      	mov	sl, r0
 8010dd4:	117b      	asrs	r3, r7, #5
 8010dd6:	2101      	movs	r1, #1
 8010dd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010ddc:	f007 071f 	and.w	r7, r7, #31
 8010de0:	fa01 f707 	lsl.w	r7, r1, r7
 8010de4:	421f      	tst	r7, r3
 8010de6:	4629      	mov	r1, r5
 8010de8:	4620      	mov	r0, r4
 8010dea:	bf18      	it	ne
 8010dec:	f04a 0a02 	orrne.w	sl, sl, #2
 8010df0:	1b76      	subs	r6, r6, r5
 8010df2:	f7ff fdee 	bl	80109d2 <rshift>
 8010df6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010dfa:	2702      	movs	r7, #2
 8010dfc:	f1ba 0f00 	cmp.w	sl, #0
 8010e00:	d048      	beq.n	8010e94 <__gethex+0x3f4>
 8010e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d015      	beq.n	8010e36 <__gethex+0x396>
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d017      	beq.n	8010e3e <__gethex+0x39e>
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d109      	bne.n	8010e26 <__gethex+0x386>
 8010e12:	f01a 0f02 	tst.w	sl, #2
 8010e16:	d006      	beq.n	8010e26 <__gethex+0x386>
 8010e18:	f8d9 0000 	ldr.w	r0, [r9]
 8010e1c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e20:	f01a 0f01 	tst.w	sl, #1
 8010e24:	d10e      	bne.n	8010e44 <__gethex+0x3a4>
 8010e26:	f047 0710 	orr.w	r7, r7, #16
 8010e2a:	e033      	b.n	8010e94 <__gethex+0x3f4>
 8010e2c:	f04f 0a01 	mov.w	sl, #1
 8010e30:	e7d0      	b.n	8010dd4 <__gethex+0x334>
 8010e32:	2701      	movs	r7, #1
 8010e34:	e7e2      	b.n	8010dfc <__gethex+0x35c>
 8010e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e38:	f1c3 0301 	rsb	r3, r3, #1
 8010e3c:	9315      	str	r3, [sp, #84]	; 0x54
 8010e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d0f0      	beq.n	8010e26 <__gethex+0x386>
 8010e44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e48:	f104 0314 	add.w	r3, r4, #20
 8010e4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e54:	f04f 0c00 	mov.w	ip, #0
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e62:	d01c      	beq.n	8010e9e <__gethex+0x3fe>
 8010e64:	3201      	adds	r2, #1
 8010e66:	6002      	str	r2, [r0, #0]
 8010e68:	2f02      	cmp	r7, #2
 8010e6a:	f104 0314 	add.w	r3, r4, #20
 8010e6e:	d13f      	bne.n	8010ef0 <__gethex+0x450>
 8010e70:	f8d8 2000 	ldr.w	r2, [r8]
 8010e74:	3a01      	subs	r2, #1
 8010e76:	42b2      	cmp	r2, r6
 8010e78:	d10a      	bne.n	8010e90 <__gethex+0x3f0>
 8010e7a:	1171      	asrs	r1, r6, #5
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e82:	f006 061f 	and.w	r6, r6, #31
 8010e86:	fa02 f606 	lsl.w	r6, r2, r6
 8010e8a:	421e      	tst	r6, r3
 8010e8c:	bf18      	it	ne
 8010e8e:	4617      	movne	r7, r2
 8010e90:	f047 0720 	orr.w	r7, r7, #32
 8010e94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e96:	601c      	str	r4, [r3, #0]
 8010e98:	9b04      	ldr	r3, [sp, #16]
 8010e9a:	601d      	str	r5, [r3, #0]
 8010e9c:	e695      	b.n	8010bca <__gethex+0x12a>
 8010e9e:	4299      	cmp	r1, r3
 8010ea0:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ea4:	d8d8      	bhi.n	8010e58 <__gethex+0x3b8>
 8010ea6:	68a3      	ldr	r3, [r4, #8]
 8010ea8:	459b      	cmp	fp, r3
 8010eaa:	db19      	blt.n	8010ee0 <__gethex+0x440>
 8010eac:	6861      	ldr	r1, [r4, #4]
 8010eae:	ee18 0a10 	vmov	r0, s16
 8010eb2:	3101      	adds	r1, #1
 8010eb4:	f000 f930 	bl	8011118 <_Balloc>
 8010eb8:	4681      	mov	r9, r0
 8010eba:	b918      	cbnz	r0, 8010ec4 <__gethex+0x424>
 8010ebc:	4b1a      	ldr	r3, [pc, #104]	; (8010f28 <__gethex+0x488>)
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	2184      	movs	r1, #132	; 0x84
 8010ec2:	e6a8      	b.n	8010c16 <__gethex+0x176>
 8010ec4:	6922      	ldr	r2, [r4, #16]
 8010ec6:	3202      	adds	r2, #2
 8010ec8:	f104 010c 	add.w	r1, r4, #12
 8010ecc:	0092      	lsls	r2, r2, #2
 8010ece:	300c      	adds	r0, #12
 8010ed0:	f000 f907 	bl	80110e2 <memcpy>
 8010ed4:	4621      	mov	r1, r4
 8010ed6:	ee18 0a10 	vmov	r0, s16
 8010eda:	f000 f95d 	bl	8011198 <_Bfree>
 8010ede:	464c      	mov	r4, r9
 8010ee0:	6923      	ldr	r3, [r4, #16]
 8010ee2:	1c5a      	adds	r2, r3, #1
 8010ee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ee8:	6122      	str	r2, [r4, #16]
 8010eea:	2201      	movs	r2, #1
 8010eec:	615a      	str	r2, [r3, #20]
 8010eee:	e7bb      	b.n	8010e68 <__gethex+0x3c8>
 8010ef0:	6922      	ldr	r2, [r4, #16]
 8010ef2:	455a      	cmp	r2, fp
 8010ef4:	dd0b      	ble.n	8010f0e <__gethex+0x46e>
 8010ef6:	2101      	movs	r1, #1
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f7ff fd6a 	bl	80109d2 <rshift>
 8010efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f02:	3501      	adds	r5, #1
 8010f04:	42ab      	cmp	r3, r5
 8010f06:	f6ff aed0 	blt.w	8010caa <__gethex+0x20a>
 8010f0a:	2701      	movs	r7, #1
 8010f0c:	e7c0      	b.n	8010e90 <__gethex+0x3f0>
 8010f0e:	f016 061f 	ands.w	r6, r6, #31
 8010f12:	d0fa      	beq.n	8010f0a <__gethex+0x46a>
 8010f14:	449a      	add	sl, r3
 8010f16:	f1c6 0620 	rsb	r6, r6, #32
 8010f1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010f1e:	f000 f9f1 	bl	8011304 <__hi0bits>
 8010f22:	42b0      	cmp	r0, r6
 8010f24:	dbe7      	blt.n	8010ef6 <__gethex+0x456>
 8010f26:	e7f0      	b.n	8010f0a <__gethex+0x46a>
 8010f28:	0801307c 	.word	0x0801307c

08010f2c <L_shift>:
 8010f2c:	f1c2 0208 	rsb	r2, r2, #8
 8010f30:	0092      	lsls	r2, r2, #2
 8010f32:	b570      	push	{r4, r5, r6, lr}
 8010f34:	f1c2 0620 	rsb	r6, r2, #32
 8010f38:	6843      	ldr	r3, [r0, #4]
 8010f3a:	6804      	ldr	r4, [r0, #0]
 8010f3c:	fa03 f506 	lsl.w	r5, r3, r6
 8010f40:	432c      	orrs	r4, r5
 8010f42:	40d3      	lsrs	r3, r2
 8010f44:	6004      	str	r4, [r0, #0]
 8010f46:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f4a:	4288      	cmp	r0, r1
 8010f4c:	d3f4      	bcc.n	8010f38 <L_shift+0xc>
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}

08010f50 <__match>:
 8010f50:	b530      	push	{r4, r5, lr}
 8010f52:	6803      	ldr	r3, [r0, #0]
 8010f54:	3301      	adds	r3, #1
 8010f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f5a:	b914      	cbnz	r4, 8010f62 <__match+0x12>
 8010f5c:	6003      	str	r3, [r0, #0]
 8010f5e:	2001      	movs	r0, #1
 8010f60:	bd30      	pop	{r4, r5, pc}
 8010f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f6a:	2d19      	cmp	r5, #25
 8010f6c:	bf98      	it	ls
 8010f6e:	3220      	addls	r2, #32
 8010f70:	42a2      	cmp	r2, r4
 8010f72:	d0f0      	beq.n	8010f56 <__match+0x6>
 8010f74:	2000      	movs	r0, #0
 8010f76:	e7f3      	b.n	8010f60 <__match+0x10>

08010f78 <__hexnan>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	680b      	ldr	r3, [r1, #0]
 8010f7e:	6801      	ldr	r1, [r0, #0]
 8010f80:	115e      	asrs	r6, r3, #5
 8010f82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f86:	f013 031f 	ands.w	r3, r3, #31
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	bf18      	it	ne
 8010f8e:	3604      	addne	r6, #4
 8010f90:	2500      	movs	r5, #0
 8010f92:	1f37      	subs	r7, r6, #4
 8010f94:	4682      	mov	sl, r0
 8010f96:	4690      	mov	r8, r2
 8010f98:	9301      	str	r3, [sp, #4]
 8010f9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f9e:	46b9      	mov	r9, r7
 8010fa0:	463c      	mov	r4, r7
 8010fa2:	9502      	str	r5, [sp, #8]
 8010fa4:	46ab      	mov	fp, r5
 8010fa6:	784a      	ldrb	r2, [r1, #1]
 8010fa8:	1c4b      	adds	r3, r1, #1
 8010faa:	9303      	str	r3, [sp, #12]
 8010fac:	b342      	cbz	r2, 8011000 <__hexnan+0x88>
 8010fae:	4610      	mov	r0, r2
 8010fb0:	9105      	str	r1, [sp, #20]
 8010fb2:	9204      	str	r2, [sp, #16]
 8010fb4:	f7ff fd5f 	bl	8010a76 <__hexdig_fun>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d14f      	bne.n	801105c <__hexnan+0xe4>
 8010fbc:	9a04      	ldr	r2, [sp, #16]
 8010fbe:	9905      	ldr	r1, [sp, #20]
 8010fc0:	2a20      	cmp	r2, #32
 8010fc2:	d818      	bhi.n	8010ff6 <__hexnan+0x7e>
 8010fc4:	9b02      	ldr	r3, [sp, #8]
 8010fc6:	459b      	cmp	fp, r3
 8010fc8:	dd13      	ble.n	8010ff2 <__hexnan+0x7a>
 8010fca:	454c      	cmp	r4, r9
 8010fcc:	d206      	bcs.n	8010fdc <__hexnan+0x64>
 8010fce:	2d07      	cmp	r5, #7
 8010fd0:	dc04      	bgt.n	8010fdc <__hexnan+0x64>
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f7ff ffa8 	bl	8010f2c <L_shift>
 8010fdc:	4544      	cmp	r4, r8
 8010fde:	d950      	bls.n	8011082 <__hexnan+0x10a>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f1a4 0904 	sub.w	r9, r4, #4
 8010fe6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fea:	f8cd b008 	str.w	fp, [sp, #8]
 8010fee:	464c      	mov	r4, r9
 8010ff0:	461d      	mov	r5, r3
 8010ff2:	9903      	ldr	r1, [sp, #12]
 8010ff4:	e7d7      	b.n	8010fa6 <__hexnan+0x2e>
 8010ff6:	2a29      	cmp	r2, #41	; 0x29
 8010ff8:	d156      	bne.n	80110a8 <__hexnan+0x130>
 8010ffa:	3102      	adds	r1, #2
 8010ffc:	f8ca 1000 	str.w	r1, [sl]
 8011000:	f1bb 0f00 	cmp.w	fp, #0
 8011004:	d050      	beq.n	80110a8 <__hexnan+0x130>
 8011006:	454c      	cmp	r4, r9
 8011008:	d206      	bcs.n	8011018 <__hexnan+0xa0>
 801100a:	2d07      	cmp	r5, #7
 801100c:	dc04      	bgt.n	8011018 <__hexnan+0xa0>
 801100e:	462a      	mov	r2, r5
 8011010:	4649      	mov	r1, r9
 8011012:	4620      	mov	r0, r4
 8011014:	f7ff ff8a 	bl	8010f2c <L_shift>
 8011018:	4544      	cmp	r4, r8
 801101a:	d934      	bls.n	8011086 <__hexnan+0x10e>
 801101c:	f1a8 0204 	sub.w	r2, r8, #4
 8011020:	4623      	mov	r3, r4
 8011022:	f853 1b04 	ldr.w	r1, [r3], #4
 8011026:	f842 1f04 	str.w	r1, [r2, #4]!
 801102a:	429f      	cmp	r7, r3
 801102c:	d2f9      	bcs.n	8011022 <__hexnan+0xaa>
 801102e:	1b3b      	subs	r3, r7, r4
 8011030:	f023 0303 	bic.w	r3, r3, #3
 8011034:	3304      	adds	r3, #4
 8011036:	3401      	adds	r4, #1
 8011038:	3e03      	subs	r6, #3
 801103a:	42b4      	cmp	r4, r6
 801103c:	bf88      	it	hi
 801103e:	2304      	movhi	r3, #4
 8011040:	4443      	add	r3, r8
 8011042:	2200      	movs	r2, #0
 8011044:	f843 2b04 	str.w	r2, [r3], #4
 8011048:	429f      	cmp	r7, r3
 801104a:	d2fb      	bcs.n	8011044 <__hexnan+0xcc>
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	b91b      	cbnz	r3, 8011058 <__hexnan+0xe0>
 8011050:	4547      	cmp	r7, r8
 8011052:	d127      	bne.n	80110a4 <__hexnan+0x12c>
 8011054:	2301      	movs	r3, #1
 8011056:	603b      	str	r3, [r7, #0]
 8011058:	2005      	movs	r0, #5
 801105a:	e026      	b.n	80110aa <__hexnan+0x132>
 801105c:	3501      	adds	r5, #1
 801105e:	2d08      	cmp	r5, #8
 8011060:	f10b 0b01 	add.w	fp, fp, #1
 8011064:	dd06      	ble.n	8011074 <__hexnan+0xfc>
 8011066:	4544      	cmp	r4, r8
 8011068:	d9c3      	bls.n	8010ff2 <__hexnan+0x7a>
 801106a:	2300      	movs	r3, #0
 801106c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011070:	2501      	movs	r5, #1
 8011072:	3c04      	subs	r4, #4
 8011074:	6822      	ldr	r2, [r4, #0]
 8011076:	f000 000f 	and.w	r0, r0, #15
 801107a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801107e:	6022      	str	r2, [r4, #0]
 8011080:	e7b7      	b.n	8010ff2 <__hexnan+0x7a>
 8011082:	2508      	movs	r5, #8
 8011084:	e7b5      	b.n	8010ff2 <__hexnan+0x7a>
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d0df      	beq.n	801104c <__hexnan+0xd4>
 801108c:	f04f 32ff 	mov.w	r2, #4294967295
 8011090:	f1c3 0320 	rsb	r3, r3, #32
 8011094:	fa22 f303 	lsr.w	r3, r2, r3
 8011098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801109c:	401a      	ands	r2, r3
 801109e:	f846 2c04 	str.w	r2, [r6, #-4]
 80110a2:	e7d3      	b.n	801104c <__hexnan+0xd4>
 80110a4:	3f04      	subs	r7, #4
 80110a6:	e7d1      	b.n	801104c <__hexnan+0xd4>
 80110a8:	2004      	movs	r0, #4
 80110aa:	b007      	add	sp, #28
 80110ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110b0 <_localeconv_r>:
 80110b0:	4800      	ldr	r0, [pc, #0]	; (80110b4 <_localeconv_r+0x4>)
 80110b2:	4770      	bx	lr
 80110b4:	200002e8 	.word	0x200002e8

080110b8 <__retarget_lock_init_recursive>:
 80110b8:	4770      	bx	lr

080110ba <__retarget_lock_acquire_recursive>:
 80110ba:	4770      	bx	lr

080110bc <__retarget_lock_release_recursive>:
 80110bc:	4770      	bx	lr

080110be <__ascii_mbtowc>:
 80110be:	b082      	sub	sp, #8
 80110c0:	b901      	cbnz	r1, 80110c4 <__ascii_mbtowc+0x6>
 80110c2:	a901      	add	r1, sp, #4
 80110c4:	b142      	cbz	r2, 80110d8 <__ascii_mbtowc+0x1a>
 80110c6:	b14b      	cbz	r3, 80110dc <__ascii_mbtowc+0x1e>
 80110c8:	7813      	ldrb	r3, [r2, #0]
 80110ca:	600b      	str	r3, [r1, #0]
 80110cc:	7812      	ldrb	r2, [r2, #0]
 80110ce:	1e10      	subs	r0, r2, #0
 80110d0:	bf18      	it	ne
 80110d2:	2001      	movne	r0, #1
 80110d4:	b002      	add	sp, #8
 80110d6:	4770      	bx	lr
 80110d8:	4610      	mov	r0, r2
 80110da:	e7fb      	b.n	80110d4 <__ascii_mbtowc+0x16>
 80110dc:	f06f 0001 	mvn.w	r0, #1
 80110e0:	e7f8      	b.n	80110d4 <__ascii_mbtowc+0x16>

080110e2 <memcpy>:
 80110e2:	440a      	add	r2, r1
 80110e4:	4291      	cmp	r1, r2
 80110e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80110ea:	d100      	bne.n	80110ee <memcpy+0xc>
 80110ec:	4770      	bx	lr
 80110ee:	b510      	push	{r4, lr}
 80110f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110f8:	4291      	cmp	r1, r2
 80110fa:	d1f9      	bne.n	80110f0 <memcpy+0xe>
 80110fc:	bd10      	pop	{r4, pc}
	...

08011100 <__malloc_lock>:
 8011100:	4801      	ldr	r0, [pc, #4]	; (8011108 <__malloc_lock+0x8>)
 8011102:	f7ff bfda 	b.w	80110ba <__retarget_lock_acquire_recursive>
 8011106:	bf00      	nop
 8011108:	2000209c 	.word	0x2000209c

0801110c <__malloc_unlock>:
 801110c:	4801      	ldr	r0, [pc, #4]	; (8011114 <__malloc_unlock+0x8>)
 801110e:	f7ff bfd5 	b.w	80110bc <__retarget_lock_release_recursive>
 8011112:	bf00      	nop
 8011114:	2000209c 	.word	0x2000209c

08011118 <_Balloc>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801111c:	4604      	mov	r4, r0
 801111e:	460d      	mov	r5, r1
 8011120:	b976      	cbnz	r6, 8011140 <_Balloc+0x28>
 8011122:	2010      	movs	r0, #16
 8011124:	f7fc feb2 	bl	800de8c <malloc>
 8011128:	4602      	mov	r2, r0
 801112a:	6260      	str	r0, [r4, #36]	; 0x24
 801112c:	b920      	cbnz	r0, 8011138 <_Balloc+0x20>
 801112e:	4b18      	ldr	r3, [pc, #96]	; (8011190 <_Balloc+0x78>)
 8011130:	4818      	ldr	r0, [pc, #96]	; (8011194 <_Balloc+0x7c>)
 8011132:	2166      	movs	r1, #102	; 0x66
 8011134:	f001 f8ae 	bl	8012294 <__assert_func>
 8011138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801113c:	6006      	str	r6, [r0, #0]
 801113e:	60c6      	str	r6, [r0, #12]
 8011140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011142:	68f3      	ldr	r3, [r6, #12]
 8011144:	b183      	cbz	r3, 8011168 <_Balloc+0x50>
 8011146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801114e:	b9b8      	cbnz	r0, 8011180 <_Balloc+0x68>
 8011150:	2101      	movs	r1, #1
 8011152:	fa01 f605 	lsl.w	r6, r1, r5
 8011156:	1d72      	adds	r2, r6, #5
 8011158:	0092      	lsls	r2, r2, #2
 801115a:	4620      	mov	r0, r4
 801115c:	f000 fc97 	bl	8011a8e <_calloc_r>
 8011160:	b160      	cbz	r0, 801117c <_Balloc+0x64>
 8011162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011166:	e00e      	b.n	8011186 <_Balloc+0x6e>
 8011168:	2221      	movs	r2, #33	; 0x21
 801116a:	2104      	movs	r1, #4
 801116c:	4620      	mov	r0, r4
 801116e:	f000 fc8e 	bl	8011a8e <_calloc_r>
 8011172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011174:	60f0      	str	r0, [r6, #12]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1e4      	bne.n	8011146 <_Balloc+0x2e>
 801117c:	2000      	movs	r0, #0
 801117e:	bd70      	pop	{r4, r5, r6, pc}
 8011180:	6802      	ldr	r2, [r0, #0]
 8011182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011186:	2300      	movs	r3, #0
 8011188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801118c:	e7f7      	b.n	801117e <_Balloc+0x66>
 801118e:	bf00      	nop
 8011190:	08013006 	.word	0x08013006
 8011194:	08013170 	.word	0x08013170

08011198 <_Bfree>:
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801119c:	4605      	mov	r5, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	b976      	cbnz	r6, 80111c0 <_Bfree+0x28>
 80111a2:	2010      	movs	r0, #16
 80111a4:	f7fc fe72 	bl	800de8c <malloc>
 80111a8:	4602      	mov	r2, r0
 80111aa:	6268      	str	r0, [r5, #36]	; 0x24
 80111ac:	b920      	cbnz	r0, 80111b8 <_Bfree+0x20>
 80111ae:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <_Bfree+0x3c>)
 80111b0:	4809      	ldr	r0, [pc, #36]	; (80111d8 <_Bfree+0x40>)
 80111b2:	218a      	movs	r1, #138	; 0x8a
 80111b4:	f001 f86e 	bl	8012294 <__assert_func>
 80111b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111bc:	6006      	str	r6, [r0, #0]
 80111be:	60c6      	str	r6, [r0, #12]
 80111c0:	b13c      	cbz	r4, 80111d2 <_Bfree+0x3a>
 80111c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111c4:	6862      	ldr	r2, [r4, #4]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111cc:	6021      	str	r1, [r4, #0]
 80111ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	08013006 	.word	0x08013006
 80111d8:	08013170 	.word	0x08013170

080111dc <__multadd>:
 80111dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e0:	690e      	ldr	r6, [r1, #16]
 80111e2:	4607      	mov	r7, r0
 80111e4:	4698      	mov	r8, r3
 80111e6:	460c      	mov	r4, r1
 80111e8:	f101 0014 	add.w	r0, r1, #20
 80111ec:	2300      	movs	r3, #0
 80111ee:	6805      	ldr	r5, [r0, #0]
 80111f0:	b2a9      	uxth	r1, r5
 80111f2:	fb02 8101 	mla	r1, r2, r1, r8
 80111f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80111fa:	0c2d      	lsrs	r5, r5, #16
 80111fc:	fb02 c505 	mla	r5, r2, r5, ip
 8011200:	b289      	uxth	r1, r1
 8011202:	3301      	adds	r3, #1
 8011204:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011208:	429e      	cmp	r6, r3
 801120a:	f840 1b04 	str.w	r1, [r0], #4
 801120e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011212:	dcec      	bgt.n	80111ee <__multadd+0x12>
 8011214:	f1b8 0f00 	cmp.w	r8, #0
 8011218:	d022      	beq.n	8011260 <__multadd+0x84>
 801121a:	68a3      	ldr	r3, [r4, #8]
 801121c:	42b3      	cmp	r3, r6
 801121e:	dc19      	bgt.n	8011254 <__multadd+0x78>
 8011220:	6861      	ldr	r1, [r4, #4]
 8011222:	4638      	mov	r0, r7
 8011224:	3101      	adds	r1, #1
 8011226:	f7ff ff77 	bl	8011118 <_Balloc>
 801122a:	4605      	mov	r5, r0
 801122c:	b928      	cbnz	r0, 801123a <__multadd+0x5e>
 801122e:	4602      	mov	r2, r0
 8011230:	4b0d      	ldr	r3, [pc, #52]	; (8011268 <__multadd+0x8c>)
 8011232:	480e      	ldr	r0, [pc, #56]	; (801126c <__multadd+0x90>)
 8011234:	21b5      	movs	r1, #181	; 0xb5
 8011236:	f001 f82d 	bl	8012294 <__assert_func>
 801123a:	6922      	ldr	r2, [r4, #16]
 801123c:	3202      	adds	r2, #2
 801123e:	f104 010c 	add.w	r1, r4, #12
 8011242:	0092      	lsls	r2, r2, #2
 8011244:	300c      	adds	r0, #12
 8011246:	f7ff ff4c 	bl	80110e2 <memcpy>
 801124a:	4621      	mov	r1, r4
 801124c:	4638      	mov	r0, r7
 801124e:	f7ff ffa3 	bl	8011198 <_Bfree>
 8011252:	462c      	mov	r4, r5
 8011254:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011258:	3601      	adds	r6, #1
 801125a:	f8c3 8014 	str.w	r8, [r3, #20]
 801125e:	6126      	str	r6, [r4, #16]
 8011260:	4620      	mov	r0, r4
 8011262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011266:	bf00      	nop
 8011268:	0801307c 	.word	0x0801307c
 801126c:	08013170 	.word	0x08013170

08011270 <__s2b>:
 8011270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011274:	460c      	mov	r4, r1
 8011276:	4615      	mov	r5, r2
 8011278:	461f      	mov	r7, r3
 801127a:	2209      	movs	r2, #9
 801127c:	3308      	adds	r3, #8
 801127e:	4606      	mov	r6, r0
 8011280:	fb93 f3f2 	sdiv	r3, r3, r2
 8011284:	2100      	movs	r1, #0
 8011286:	2201      	movs	r2, #1
 8011288:	429a      	cmp	r2, r3
 801128a:	db09      	blt.n	80112a0 <__s2b+0x30>
 801128c:	4630      	mov	r0, r6
 801128e:	f7ff ff43 	bl	8011118 <_Balloc>
 8011292:	b940      	cbnz	r0, 80112a6 <__s2b+0x36>
 8011294:	4602      	mov	r2, r0
 8011296:	4b19      	ldr	r3, [pc, #100]	; (80112fc <__s2b+0x8c>)
 8011298:	4819      	ldr	r0, [pc, #100]	; (8011300 <__s2b+0x90>)
 801129a:	21ce      	movs	r1, #206	; 0xce
 801129c:	f000 fffa 	bl	8012294 <__assert_func>
 80112a0:	0052      	lsls	r2, r2, #1
 80112a2:	3101      	adds	r1, #1
 80112a4:	e7f0      	b.n	8011288 <__s2b+0x18>
 80112a6:	9b08      	ldr	r3, [sp, #32]
 80112a8:	6143      	str	r3, [r0, #20]
 80112aa:	2d09      	cmp	r5, #9
 80112ac:	f04f 0301 	mov.w	r3, #1
 80112b0:	6103      	str	r3, [r0, #16]
 80112b2:	dd16      	ble.n	80112e2 <__s2b+0x72>
 80112b4:	f104 0909 	add.w	r9, r4, #9
 80112b8:	46c8      	mov	r8, r9
 80112ba:	442c      	add	r4, r5
 80112bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112c0:	4601      	mov	r1, r0
 80112c2:	3b30      	subs	r3, #48	; 0x30
 80112c4:	220a      	movs	r2, #10
 80112c6:	4630      	mov	r0, r6
 80112c8:	f7ff ff88 	bl	80111dc <__multadd>
 80112cc:	45a0      	cmp	r8, r4
 80112ce:	d1f5      	bne.n	80112bc <__s2b+0x4c>
 80112d0:	f1a5 0408 	sub.w	r4, r5, #8
 80112d4:	444c      	add	r4, r9
 80112d6:	1b2d      	subs	r5, r5, r4
 80112d8:	1963      	adds	r3, r4, r5
 80112da:	42bb      	cmp	r3, r7
 80112dc:	db04      	blt.n	80112e8 <__s2b+0x78>
 80112de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112e2:	340a      	adds	r4, #10
 80112e4:	2509      	movs	r5, #9
 80112e6:	e7f6      	b.n	80112d6 <__s2b+0x66>
 80112e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80112ec:	4601      	mov	r1, r0
 80112ee:	3b30      	subs	r3, #48	; 0x30
 80112f0:	220a      	movs	r2, #10
 80112f2:	4630      	mov	r0, r6
 80112f4:	f7ff ff72 	bl	80111dc <__multadd>
 80112f8:	e7ee      	b.n	80112d8 <__s2b+0x68>
 80112fa:	bf00      	nop
 80112fc:	0801307c 	.word	0x0801307c
 8011300:	08013170 	.word	0x08013170

08011304 <__hi0bits>:
 8011304:	0c03      	lsrs	r3, r0, #16
 8011306:	041b      	lsls	r3, r3, #16
 8011308:	b9d3      	cbnz	r3, 8011340 <__hi0bits+0x3c>
 801130a:	0400      	lsls	r0, r0, #16
 801130c:	2310      	movs	r3, #16
 801130e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011312:	bf04      	itt	eq
 8011314:	0200      	lsleq	r0, r0, #8
 8011316:	3308      	addeq	r3, #8
 8011318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801131c:	bf04      	itt	eq
 801131e:	0100      	lsleq	r0, r0, #4
 8011320:	3304      	addeq	r3, #4
 8011322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011326:	bf04      	itt	eq
 8011328:	0080      	lsleq	r0, r0, #2
 801132a:	3302      	addeq	r3, #2
 801132c:	2800      	cmp	r0, #0
 801132e:	db05      	blt.n	801133c <__hi0bits+0x38>
 8011330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011334:	f103 0301 	add.w	r3, r3, #1
 8011338:	bf08      	it	eq
 801133a:	2320      	moveq	r3, #32
 801133c:	4618      	mov	r0, r3
 801133e:	4770      	bx	lr
 8011340:	2300      	movs	r3, #0
 8011342:	e7e4      	b.n	801130e <__hi0bits+0xa>

08011344 <__lo0bits>:
 8011344:	6803      	ldr	r3, [r0, #0]
 8011346:	f013 0207 	ands.w	r2, r3, #7
 801134a:	4601      	mov	r1, r0
 801134c:	d00b      	beq.n	8011366 <__lo0bits+0x22>
 801134e:	07da      	lsls	r2, r3, #31
 8011350:	d424      	bmi.n	801139c <__lo0bits+0x58>
 8011352:	0798      	lsls	r0, r3, #30
 8011354:	bf49      	itett	mi
 8011356:	085b      	lsrmi	r3, r3, #1
 8011358:	089b      	lsrpl	r3, r3, #2
 801135a:	2001      	movmi	r0, #1
 801135c:	600b      	strmi	r3, [r1, #0]
 801135e:	bf5c      	itt	pl
 8011360:	600b      	strpl	r3, [r1, #0]
 8011362:	2002      	movpl	r0, #2
 8011364:	4770      	bx	lr
 8011366:	b298      	uxth	r0, r3
 8011368:	b9b0      	cbnz	r0, 8011398 <__lo0bits+0x54>
 801136a:	0c1b      	lsrs	r3, r3, #16
 801136c:	2010      	movs	r0, #16
 801136e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011372:	bf04      	itt	eq
 8011374:	0a1b      	lsreq	r3, r3, #8
 8011376:	3008      	addeq	r0, #8
 8011378:	071a      	lsls	r2, r3, #28
 801137a:	bf04      	itt	eq
 801137c:	091b      	lsreq	r3, r3, #4
 801137e:	3004      	addeq	r0, #4
 8011380:	079a      	lsls	r2, r3, #30
 8011382:	bf04      	itt	eq
 8011384:	089b      	lsreq	r3, r3, #2
 8011386:	3002      	addeq	r0, #2
 8011388:	07da      	lsls	r2, r3, #31
 801138a:	d403      	bmi.n	8011394 <__lo0bits+0x50>
 801138c:	085b      	lsrs	r3, r3, #1
 801138e:	f100 0001 	add.w	r0, r0, #1
 8011392:	d005      	beq.n	80113a0 <__lo0bits+0x5c>
 8011394:	600b      	str	r3, [r1, #0]
 8011396:	4770      	bx	lr
 8011398:	4610      	mov	r0, r2
 801139a:	e7e8      	b.n	801136e <__lo0bits+0x2a>
 801139c:	2000      	movs	r0, #0
 801139e:	4770      	bx	lr
 80113a0:	2020      	movs	r0, #32
 80113a2:	4770      	bx	lr

080113a4 <__i2b>:
 80113a4:	b510      	push	{r4, lr}
 80113a6:	460c      	mov	r4, r1
 80113a8:	2101      	movs	r1, #1
 80113aa:	f7ff feb5 	bl	8011118 <_Balloc>
 80113ae:	4602      	mov	r2, r0
 80113b0:	b928      	cbnz	r0, 80113be <__i2b+0x1a>
 80113b2:	4b05      	ldr	r3, [pc, #20]	; (80113c8 <__i2b+0x24>)
 80113b4:	4805      	ldr	r0, [pc, #20]	; (80113cc <__i2b+0x28>)
 80113b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113ba:	f000 ff6b 	bl	8012294 <__assert_func>
 80113be:	2301      	movs	r3, #1
 80113c0:	6144      	str	r4, [r0, #20]
 80113c2:	6103      	str	r3, [r0, #16]
 80113c4:	bd10      	pop	{r4, pc}
 80113c6:	bf00      	nop
 80113c8:	0801307c 	.word	0x0801307c
 80113cc:	08013170 	.word	0x08013170

080113d0 <__multiply>:
 80113d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d4:	4614      	mov	r4, r2
 80113d6:	690a      	ldr	r2, [r1, #16]
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	429a      	cmp	r2, r3
 80113dc:	bfb8      	it	lt
 80113de:	460b      	movlt	r3, r1
 80113e0:	460d      	mov	r5, r1
 80113e2:	bfbc      	itt	lt
 80113e4:	4625      	movlt	r5, r4
 80113e6:	461c      	movlt	r4, r3
 80113e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80113ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80113f0:	68ab      	ldr	r3, [r5, #8]
 80113f2:	6869      	ldr	r1, [r5, #4]
 80113f4:	eb0a 0709 	add.w	r7, sl, r9
 80113f8:	42bb      	cmp	r3, r7
 80113fa:	b085      	sub	sp, #20
 80113fc:	bfb8      	it	lt
 80113fe:	3101      	addlt	r1, #1
 8011400:	f7ff fe8a 	bl	8011118 <_Balloc>
 8011404:	b930      	cbnz	r0, 8011414 <__multiply+0x44>
 8011406:	4602      	mov	r2, r0
 8011408:	4b42      	ldr	r3, [pc, #264]	; (8011514 <__multiply+0x144>)
 801140a:	4843      	ldr	r0, [pc, #268]	; (8011518 <__multiply+0x148>)
 801140c:	f240 115d 	movw	r1, #349	; 0x15d
 8011410:	f000 ff40 	bl	8012294 <__assert_func>
 8011414:	f100 0614 	add.w	r6, r0, #20
 8011418:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801141c:	4633      	mov	r3, r6
 801141e:	2200      	movs	r2, #0
 8011420:	4543      	cmp	r3, r8
 8011422:	d31e      	bcc.n	8011462 <__multiply+0x92>
 8011424:	f105 0c14 	add.w	ip, r5, #20
 8011428:	f104 0314 	add.w	r3, r4, #20
 801142c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011430:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011434:	9202      	str	r2, [sp, #8]
 8011436:	ebac 0205 	sub.w	r2, ip, r5
 801143a:	3a15      	subs	r2, #21
 801143c:	f022 0203 	bic.w	r2, r2, #3
 8011440:	3204      	adds	r2, #4
 8011442:	f105 0115 	add.w	r1, r5, #21
 8011446:	458c      	cmp	ip, r1
 8011448:	bf38      	it	cc
 801144a:	2204      	movcc	r2, #4
 801144c:	9201      	str	r2, [sp, #4]
 801144e:	9a02      	ldr	r2, [sp, #8]
 8011450:	9303      	str	r3, [sp, #12]
 8011452:	429a      	cmp	r2, r3
 8011454:	d808      	bhi.n	8011468 <__multiply+0x98>
 8011456:	2f00      	cmp	r7, #0
 8011458:	dc55      	bgt.n	8011506 <__multiply+0x136>
 801145a:	6107      	str	r7, [r0, #16]
 801145c:	b005      	add	sp, #20
 801145e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011462:	f843 2b04 	str.w	r2, [r3], #4
 8011466:	e7db      	b.n	8011420 <__multiply+0x50>
 8011468:	f8b3 a000 	ldrh.w	sl, [r3]
 801146c:	f1ba 0f00 	cmp.w	sl, #0
 8011470:	d020      	beq.n	80114b4 <__multiply+0xe4>
 8011472:	f105 0e14 	add.w	lr, r5, #20
 8011476:	46b1      	mov	r9, r6
 8011478:	2200      	movs	r2, #0
 801147a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801147e:	f8d9 b000 	ldr.w	fp, [r9]
 8011482:	b2a1      	uxth	r1, r4
 8011484:	fa1f fb8b 	uxth.w	fp, fp
 8011488:	fb0a b101 	mla	r1, sl, r1, fp
 801148c:	4411      	add	r1, r2
 801148e:	f8d9 2000 	ldr.w	r2, [r9]
 8011492:	0c24      	lsrs	r4, r4, #16
 8011494:	0c12      	lsrs	r2, r2, #16
 8011496:	fb0a 2404 	mla	r4, sl, r4, r2
 801149a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801149e:	b289      	uxth	r1, r1
 80114a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80114a4:	45f4      	cmp	ip, lr
 80114a6:	f849 1b04 	str.w	r1, [r9], #4
 80114aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80114ae:	d8e4      	bhi.n	801147a <__multiply+0xaa>
 80114b0:	9901      	ldr	r1, [sp, #4]
 80114b2:	5072      	str	r2, [r6, r1]
 80114b4:	9a03      	ldr	r2, [sp, #12]
 80114b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114ba:	3304      	adds	r3, #4
 80114bc:	f1b9 0f00 	cmp.w	r9, #0
 80114c0:	d01f      	beq.n	8011502 <__multiply+0x132>
 80114c2:	6834      	ldr	r4, [r6, #0]
 80114c4:	f105 0114 	add.w	r1, r5, #20
 80114c8:	46b6      	mov	lr, r6
 80114ca:	f04f 0a00 	mov.w	sl, #0
 80114ce:	880a      	ldrh	r2, [r1, #0]
 80114d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80114d4:	fb09 b202 	mla	r2, r9, r2, fp
 80114d8:	4492      	add	sl, r2
 80114da:	b2a4      	uxth	r4, r4
 80114dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80114e0:	f84e 4b04 	str.w	r4, [lr], #4
 80114e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80114e8:	f8be 2000 	ldrh.w	r2, [lr]
 80114ec:	0c24      	lsrs	r4, r4, #16
 80114ee:	fb09 2404 	mla	r4, r9, r4, r2
 80114f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80114f6:	458c      	cmp	ip, r1
 80114f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80114fc:	d8e7      	bhi.n	80114ce <__multiply+0xfe>
 80114fe:	9a01      	ldr	r2, [sp, #4]
 8011500:	50b4      	str	r4, [r6, r2]
 8011502:	3604      	adds	r6, #4
 8011504:	e7a3      	b.n	801144e <__multiply+0x7e>
 8011506:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1a5      	bne.n	801145a <__multiply+0x8a>
 801150e:	3f01      	subs	r7, #1
 8011510:	e7a1      	b.n	8011456 <__multiply+0x86>
 8011512:	bf00      	nop
 8011514:	0801307c 	.word	0x0801307c
 8011518:	08013170 	.word	0x08013170

0801151c <__pow5mult>:
 801151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011520:	4615      	mov	r5, r2
 8011522:	f012 0203 	ands.w	r2, r2, #3
 8011526:	4606      	mov	r6, r0
 8011528:	460f      	mov	r7, r1
 801152a:	d007      	beq.n	801153c <__pow5mult+0x20>
 801152c:	4c25      	ldr	r4, [pc, #148]	; (80115c4 <__pow5mult+0xa8>)
 801152e:	3a01      	subs	r2, #1
 8011530:	2300      	movs	r3, #0
 8011532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011536:	f7ff fe51 	bl	80111dc <__multadd>
 801153a:	4607      	mov	r7, r0
 801153c:	10ad      	asrs	r5, r5, #2
 801153e:	d03d      	beq.n	80115bc <__pow5mult+0xa0>
 8011540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011542:	b97c      	cbnz	r4, 8011564 <__pow5mult+0x48>
 8011544:	2010      	movs	r0, #16
 8011546:	f7fc fca1 	bl	800de8c <malloc>
 801154a:	4602      	mov	r2, r0
 801154c:	6270      	str	r0, [r6, #36]	; 0x24
 801154e:	b928      	cbnz	r0, 801155c <__pow5mult+0x40>
 8011550:	4b1d      	ldr	r3, [pc, #116]	; (80115c8 <__pow5mult+0xac>)
 8011552:	481e      	ldr	r0, [pc, #120]	; (80115cc <__pow5mult+0xb0>)
 8011554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011558:	f000 fe9c 	bl	8012294 <__assert_func>
 801155c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011560:	6004      	str	r4, [r0, #0]
 8011562:	60c4      	str	r4, [r0, #12]
 8011564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801156c:	b94c      	cbnz	r4, 8011582 <__pow5mult+0x66>
 801156e:	f240 2171 	movw	r1, #625	; 0x271
 8011572:	4630      	mov	r0, r6
 8011574:	f7ff ff16 	bl	80113a4 <__i2b>
 8011578:	2300      	movs	r3, #0
 801157a:	f8c8 0008 	str.w	r0, [r8, #8]
 801157e:	4604      	mov	r4, r0
 8011580:	6003      	str	r3, [r0, #0]
 8011582:	f04f 0900 	mov.w	r9, #0
 8011586:	07eb      	lsls	r3, r5, #31
 8011588:	d50a      	bpl.n	80115a0 <__pow5mult+0x84>
 801158a:	4639      	mov	r1, r7
 801158c:	4622      	mov	r2, r4
 801158e:	4630      	mov	r0, r6
 8011590:	f7ff ff1e 	bl	80113d0 <__multiply>
 8011594:	4639      	mov	r1, r7
 8011596:	4680      	mov	r8, r0
 8011598:	4630      	mov	r0, r6
 801159a:	f7ff fdfd 	bl	8011198 <_Bfree>
 801159e:	4647      	mov	r7, r8
 80115a0:	106d      	asrs	r5, r5, #1
 80115a2:	d00b      	beq.n	80115bc <__pow5mult+0xa0>
 80115a4:	6820      	ldr	r0, [r4, #0]
 80115a6:	b938      	cbnz	r0, 80115b8 <__pow5mult+0x9c>
 80115a8:	4622      	mov	r2, r4
 80115aa:	4621      	mov	r1, r4
 80115ac:	4630      	mov	r0, r6
 80115ae:	f7ff ff0f 	bl	80113d0 <__multiply>
 80115b2:	6020      	str	r0, [r4, #0]
 80115b4:	f8c0 9000 	str.w	r9, [r0]
 80115b8:	4604      	mov	r4, r0
 80115ba:	e7e4      	b.n	8011586 <__pow5mult+0x6a>
 80115bc:	4638      	mov	r0, r7
 80115be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115c2:	bf00      	nop
 80115c4:	080132c0 	.word	0x080132c0
 80115c8:	08013006 	.word	0x08013006
 80115cc:	08013170 	.word	0x08013170

080115d0 <__lshift>:
 80115d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d4:	460c      	mov	r4, r1
 80115d6:	6849      	ldr	r1, [r1, #4]
 80115d8:	6923      	ldr	r3, [r4, #16]
 80115da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115de:	68a3      	ldr	r3, [r4, #8]
 80115e0:	4607      	mov	r7, r0
 80115e2:	4691      	mov	r9, r2
 80115e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115e8:	f108 0601 	add.w	r6, r8, #1
 80115ec:	42b3      	cmp	r3, r6
 80115ee:	db0b      	blt.n	8011608 <__lshift+0x38>
 80115f0:	4638      	mov	r0, r7
 80115f2:	f7ff fd91 	bl	8011118 <_Balloc>
 80115f6:	4605      	mov	r5, r0
 80115f8:	b948      	cbnz	r0, 801160e <__lshift+0x3e>
 80115fa:	4602      	mov	r2, r0
 80115fc:	4b28      	ldr	r3, [pc, #160]	; (80116a0 <__lshift+0xd0>)
 80115fe:	4829      	ldr	r0, [pc, #164]	; (80116a4 <__lshift+0xd4>)
 8011600:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011604:	f000 fe46 	bl	8012294 <__assert_func>
 8011608:	3101      	adds	r1, #1
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	e7ee      	b.n	80115ec <__lshift+0x1c>
 801160e:	2300      	movs	r3, #0
 8011610:	f100 0114 	add.w	r1, r0, #20
 8011614:	f100 0210 	add.w	r2, r0, #16
 8011618:	4618      	mov	r0, r3
 801161a:	4553      	cmp	r3, sl
 801161c:	db33      	blt.n	8011686 <__lshift+0xb6>
 801161e:	6920      	ldr	r0, [r4, #16]
 8011620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011624:	f104 0314 	add.w	r3, r4, #20
 8011628:	f019 091f 	ands.w	r9, r9, #31
 801162c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011630:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011634:	d02b      	beq.n	801168e <__lshift+0xbe>
 8011636:	f1c9 0e20 	rsb	lr, r9, #32
 801163a:	468a      	mov	sl, r1
 801163c:	2200      	movs	r2, #0
 801163e:	6818      	ldr	r0, [r3, #0]
 8011640:	fa00 f009 	lsl.w	r0, r0, r9
 8011644:	4302      	orrs	r2, r0
 8011646:	f84a 2b04 	str.w	r2, [sl], #4
 801164a:	f853 2b04 	ldr.w	r2, [r3], #4
 801164e:	459c      	cmp	ip, r3
 8011650:	fa22 f20e 	lsr.w	r2, r2, lr
 8011654:	d8f3      	bhi.n	801163e <__lshift+0x6e>
 8011656:	ebac 0304 	sub.w	r3, ip, r4
 801165a:	3b15      	subs	r3, #21
 801165c:	f023 0303 	bic.w	r3, r3, #3
 8011660:	3304      	adds	r3, #4
 8011662:	f104 0015 	add.w	r0, r4, #21
 8011666:	4584      	cmp	ip, r0
 8011668:	bf38      	it	cc
 801166a:	2304      	movcc	r3, #4
 801166c:	50ca      	str	r2, [r1, r3]
 801166e:	b10a      	cbz	r2, 8011674 <__lshift+0xa4>
 8011670:	f108 0602 	add.w	r6, r8, #2
 8011674:	3e01      	subs	r6, #1
 8011676:	4638      	mov	r0, r7
 8011678:	612e      	str	r6, [r5, #16]
 801167a:	4621      	mov	r1, r4
 801167c:	f7ff fd8c 	bl	8011198 <_Bfree>
 8011680:	4628      	mov	r0, r5
 8011682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011686:	f842 0f04 	str.w	r0, [r2, #4]!
 801168a:	3301      	adds	r3, #1
 801168c:	e7c5      	b.n	801161a <__lshift+0x4a>
 801168e:	3904      	subs	r1, #4
 8011690:	f853 2b04 	ldr.w	r2, [r3], #4
 8011694:	f841 2f04 	str.w	r2, [r1, #4]!
 8011698:	459c      	cmp	ip, r3
 801169a:	d8f9      	bhi.n	8011690 <__lshift+0xc0>
 801169c:	e7ea      	b.n	8011674 <__lshift+0xa4>
 801169e:	bf00      	nop
 80116a0:	0801307c 	.word	0x0801307c
 80116a4:	08013170 	.word	0x08013170

080116a8 <__mcmp>:
 80116a8:	b530      	push	{r4, r5, lr}
 80116aa:	6902      	ldr	r2, [r0, #16]
 80116ac:	690c      	ldr	r4, [r1, #16]
 80116ae:	1b12      	subs	r2, r2, r4
 80116b0:	d10e      	bne.n	80116d0 <__mcmp+0x28>
 80116b2:	f100 0314 	add.w	r3, r0, #20
 80116b6:	3114      	adds	r1, #20
 80116b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116c8:	42a5      	cmp	r5, r4
 80116ca:	d003      	beq.n	80116d4 <__mcmp+0x2c>
 80116cc:	d305      	bcc.n	80116da <__mcmp+0x32>
 80116ce:	2201      	movs	r2, #1
 80116d0:	4610      	mov	r0, r2
 80116d2:	bd30      	pop	{r4, r5, pc}
 80116d4:	4283      	cmp	r3, r0
 80116d6:	d3f3      	bcc.n	80116c0 <__mcmp+0x18>
 80116d8:	e7fa      	b.n	80116d0 <__mcmp+0x28>
 80116da:	f04f 32ff 	mov.w	r2, #4294967295
 80116de:	e7f7      	b.n	80116d0 <__mcmp+0x28>

080116e0 <__mdiff>:
 80116e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	460c      	mov	r4, r1
 80116e6:	4606      	mov	r6, r0
 80116e8:	4611      	mov	r1, r2
 80116ea:	4620      	mov	r0, r4
 80116ec:	4617      	mov	r7, r2
 80116ee:	f7ff ffdb 	bl	80116a8 <__mcmp>
 80116f2:	1e05      	subs	r5, r0, #0
 80116f4:	d110      	bne.n	8011718 <__mdiff+0x38>
 80116f6:	4629      	mov	r1, r5
 80116f8:	4630      	mov	r0, r6
 80116fa:	f7ff fd0d 	bl	8011118 <_Balloc>
 80116fe:	b930      	cbnz	r0, 801170e <__mdiff+0x2e>
 8011700:	4b39      	ldr	r3, [pc, #228]	; (80117e8 <__mdiff+0x108>)
 8011702:	4602      	mov	r2, r0
 8011704:	f240 2132 	movw	r1, #562	; 0x232
 8011708:	4838      	ldr	r0, [pc, #224]	; (80117ec <__mdiff+0x10c>)
 801170a:	f000 fdc3 	bl	8012294 <__assert_func>
 801170e:	2301      	movs	r3, #1
 8011710:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011718:	bfa4      	itt	ge
 801171a:	463b      	movge	r3, r7
 801171c:	4627      	movge	r7, r4
 801171e:	4630      	mov	r0, r6
 8011720:	6879      	ldr	r1, [r7, #4]
 8011722:	bfa6      	itte	ge
 8011724:	461c      	movge	r4, r3
 8011726:	2500      	movge	r5, #0
 8011728:	2501      	movlt	r5, #1
 801172a:	f7ff fcf5 	bl	8011118 <_Balloc>
 801172e:	b920      	cbnz	r0, 801173a <__mdiff+0x5a>
 8011730:	4b2d      	ldr	r3, [pc, #180]	; (80117e8 <__mdiff+0x108>)
 8011732:	4602      	mov	r2, r0
 8011734:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011738:	e7e6      	b.n	8011708 <__mdiff+0x28>
 801173a:	693e      	ldr	r6, [r7, #16]
 801173c:	60c5      	str	r5, [r0, #12]
 801173e:	6925      	ldr	r5, [r4, #16]
 8011740:	f107 0114 	add.w	r1, r7, #20
 8011744:	f104 0914 	add.w	r9, r4, #20
 8011748:	f100 0e14 	add.w	lr, r0, #20
 801174c:	f107 0210 	add.w	r2, r7, #16
 8011750:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011754:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011758:	46f2      	mov	sl, lr
 801175a:	2700      	movs	r7, #0
 801175c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011764:	fa1f f883 	uxth.w	r8, r3
 8011768:	fa17 f78b 	uxtah	r7, r7, fp
 801176c:	0c1b      	lsrs	r3, r3, #16
 801176e:	eba7 0808 	sub.w	r8, r7, r8
 8011772:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011776:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801177a:	fa1f f888 	uxth.w	r8, r8
 801177e:	141f      	asrs	r7, r3, #16
 8011780:	454d      	cmp	r5, r9
 8011782:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011786:	f84a 3b04 	str.w	r3, [sl], #4
 801178a:	d8e7      	bhi.n	801175c <__mdiff+0x7c>
 801178c:	1b2b      	subs	r3, r5, r4
 801178e:	3b15      	subs	r3, #21
 8011790:	f023 0303 	bic.w	r3, r3, #3
 8011794:	3304      	adds	r3, #4
 8011796:	3415      	adds	r4, #21
 8011798:	42a5      	cmp	r5, r4
 801179a:	bf38      	it	cc
 801179c:	2304      	movcc	r3, #4
 801179e:	4419      	add	r1, r3
 80117a0:	4473      	add	r3, lr
 80117a2:	469e      	mov	lr, r3
 80117a4:	460d      	mov	r5, r1
 80117a6:	4565      	cmp	r5, ip
 80117a8:	d30e      	bcc.n	80117c8 <__mdiff+0xe8>
 80117aa:	f10c 0203 	add.w	r2, ip, #3
 80117ae:	1a52      	subs	r2, r2, r1
 80117b0:	f022 0203 	bic.w	r2, r2, #3
 80117b4:	3903      	subs	r1, #3
 80117b6:	458c      	cmp	ip, r1
 80117b8:	bf38      	it	cc
 80117ba:	2200      	movcc	r2, #0
 80117bc:	441a      	add	r2, r3
 80117be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117c2:	b17b      	cbz	r3, 80117e4 <__mdiff+0x104>
 80117c4:	6106      	str	r6, [r0, #16]
 80117c6:	e7a5      	b.n	8011714 <__mdiff+0x34>
 80117c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80117cc:	fa17 f488 	uxtah	r4, r7, r8
 80117d0:	1422      	asrs	r2, r4, #16
 80117d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80117d6:	b2a4      	uxth	r4, r4
 80117d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80117dc:	f84e 4b04 	str.w	r4, [lr], #4
 80117e0:	1417      	asrs	r7, r2, #16
 80117e2:	e7e0      	b.n	80117a6 <__mdiff+0xc6>
 80117e4:	3e01      	subs	r6, #1
 80117e6:	e7ea      	b.n	80117be <__mdiff+0xde>
 80117e8:	0801307c 	.word	0x0801307c
 80117ec:	08013170 	.word	0x08013170

080117f0 <__ulp>:
 80117f0:	b082      	sub	sp, #8
 80117f2:	ed8d 0b00 	vstr	d0, [sp]
 80117f6:	9b01      	ldr	r3, [sp, #4]
 80117f8:	4912      	ldr	r1, [pc, #72]	; (8011844 <__ulp+0x54>)
 80117fa:	4019      	ands	r1, r3
 80117fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011800:	2900      	cmp	r1, #0
 8011802:	dd05      	ble.n	8011810 <__ulp+0x20>
 8011804:	2200      	movs	r2, #0
 8011806:	460b      	mov	r3, r1
 8011808:	ec43 2b10 	vmov	d0, r2, r3
 801180c:	b002      	add	sp, #8
 801180e:	4770      	bx	lr
 8011810:	4249      	negs	r1, r1
 8011812:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011816:	ea4f 5021 	mov.w	r0, r1, asr #20
 801181a:	f04f 0200 	mov.w	r2, #0
 801181e:	f04f 0300 	mov.w	r3, #0
 8011822:	da04      	bge.n	801182e <__ulp+0x3e>
 8011824:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011828:	fa41 f300 	asr.w	r3, r1, r0
 801182c:	e7ec      	b.n	8011808 <__ulp+0x18>
 801182e:	f1a0 0114 	sub.w	r1, r0, #20
 8011832:	291e      	cmp	r1, #30
 8011834:	bfda      	itte	le
 8011836:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801183a:	fa20 f101 	lsrle.w	r1, r0, r1
 801183e:	2101      	movgt	r1, #1
 8011840:	460a      	mov	r2, r1
 8011842:	e7e1      	b.n	8011808 <__ulp+0x18>
 8011844:	7ff00000 	.word	0x7ff00000

08011848 <__b2d>:
 8011848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801184a:	6905      	ldr	r5, [r0, #16]
 801184c:	f100 0714 	add.w	r7, r0, #20
 8011850:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011854:	1f2e      	subs	r6, r5, #4
 8011856:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801185a:	4620      	mov	r0, r4
 801185c:	f7ff fd52 	bl	8011304 <__hi0bits>
 8011860:	f1c0 0320 	rsb	r3, r0, #32
 8011864:	280a      	cmp	r0, #10
 8011866:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80118e4 <__b2d+0x9c>
 801186a:	600b      	str	r3, [r1, #0]
 801186c:	dc14      	bgt.n	8011898 <__b2d+0x50>
 801186e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011872:	fa24 f10e 	lsr.w	r1, r4, lr
 8011876:	42b7      	cmp	r7, r6
 8011878:	ea41 030c 	orr.w	r3, r1, ip
 801187c:	bf34      	ite	cc
 801187e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011882:	2100      	movcs	r1, #0
 8011884:	3015      	adds	r0, #21
 8011886:	fa04 f000 	lsl.w	r0, r4, r0
 801188a:	fa21 f10e 	lsr.w	r1, r1, lr
 801188e:	ea40 0201 	orr.w	r2, r0, r1
 8011892:	ec43 2b10 	vmov	d0, r2, r3
 8011896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011898:	42b7      	cmp	r7, r6
 801189a:	bf3a      	itte	cc
 801189c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80118a4:	2100      	movcs	r1, #0
 80118a6:	380b      	subs	r0, #11
 80118a8:	d017      	beq.n	80118da <__b2d+0x92>
 80118aa:	f1c0 0c20 	rsb	ip, r0, #32
 80118ae:	fa04 f500 	lsl.w	r5, r4, r0
 80118b2:	42be      	cmp	r6, r7
 80118b4:	fa21 f40c 	lsr.w	r4, r1, ip
 80118b8:	ea45 0504 	orr.w	r5, r5, r4
 80118bc:	bf8c      	ite	hi
 80118be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118c2:	2400      	movls	r4, #0
 80118c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118c8:	fa01 f000 	lsl.w	r0, r1, r0
 80118cc:	fa24 f40c 	lsr.w	r4, r4, ip
 80118d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118d4:	ea40 0204 	orr.w	r2, r0, r4
 80118d8:	e7db      	b.n	8011892 <__b2d+0x4a>
 80118da:	ea44 030c 	orr.w	r3, r4, ip
 80118de:	460a      	mov	r2, r1
 80118e0:	e7d7      	b.n	8011892 <__b2d+0x4a>
 80118e2:	bf00      	nop
 80118e4:	3ff00000 	.word	0x3ff00000

080118e8 <__d2b>:
 80118e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118ec:	4689      	mov	r9, r1
 80118ee:	2101      	movs	r1, #1
 80118f0:	ec57 6b10 	vmov	r6, r7, d0
 80118f4:	4690      	mov	r8, r2
 80118f6:	f7ff fc0f 	bl	8011118 <_Balloc>
 80118fa:	4604      	mov	r4, r0
 80118fc:	b930      	cbnz	r0, 801190c <__d2b+0x24>
 80118fe:	4602      	mov	r2, r0
 8011900:	4b25      	ldr	r3, [pc, #148]	; (8011998 <__d2b+0xb0>)
 8011902:	4826      	ldr	r0, [pc, #152]	; (801199c <__d2b+0xb4>)
 8011904:	f240 310a 	movw	r1, #778	; 0x30a
 8011908:	f000 fcc4 	bl	8012294 <__assert_func>
 801190c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011914:	bb35      	cbnz	r5, 8011964 <__d2b+0x7c>
 8011916:	2e00      	cmp	r6, #0
 8011918:	9301      	str	r3, [sp, #4]
 801191a:	d028      	beq.n	801196e <__d2b+0x86>
 801191c:	4668      	mov	r0, sp
 801191e:	9600      	str	r6, [sp, #0]
 8011920:	f7ff fd10 	bl	8011344 <__lo0bits>
 8011924:	9900      	ldr	r1, [sp, #0]
 8011926:	b300      	cbz	r0, 801196a <__d2b+0x82>
 8011928:	9a01      	ldr	r2, [sp, #4]
 801192a:	f1c0 0320 	rsb	r3, r0, #32
 801192e:	fa02 f303 	lsl.w	r3, r2, r3
 8011932:	430b      	orrs	r3, r1
 8011934:	40c2      	lsrs	r2, r0
 8011936:	6163      	str	r3, [r4, #20]
 8011938:	9201      	str	r2, [sp, #4]
 801193a:	9b01      	ldr	r3, [sp, #4]
 801193c:	61a3      	str	r3, [r4, #24]
 801193e:	2b00      	cmp	r3, #0
 8011940:	bf14      	ite	ne
 8011942:	2202      	movne	r2, #2
 8011944:	2201      	moveq	r2, #1
 8011946:	6122      	str	r2, [r4, #16]
 8011948:	b1d5      	cbz	r5, 8011980 <__d2b+0x98>
 801194a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801194e:	4405      	add	r5, r0
 8011950:	f8c9 5000 	str.w	r5, [r9]
 8011954:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011958:	f8c8 0000 	str.w	r0, [r8]
 801195c:	4620      	mov	r0, r4
 801195e:	b003      	add	sp, #12
 8011960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011968:	e7d5      	b.n	8011916 <__d2b+0x2e>
 801196a:	6161      	str	r1, [r4, #20]
 801196c:	e7e5      	b.n	801193a <__d2b+0x52>
 801196e:	a801      	add	r0, sp, #4
 8011970:	f7ff fce8 	bl	8011344 <__lo0bits>
 8011974:	9b01      	ldr	r3, [sp, #4]
 8011976:	6163      	str	r3, [r4, #20]
 8011978:	2201      	movs	r2, #1
 801197a:	6122      	str	r2, [r4, #16]
 801197c:	3020      	adds	r0, #32
 801197e:	e7e3      	b.n	8011948 <__d2b+0x60>
 8011980:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011984:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011988:	f8c9 0000 	str.w	r0, [r9]
 801198c:	6918      	ldr	r0, [r3, #16]
 801198e:	f7ff fcb9 	bl	8011304 <__hi0bits>
 8011992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011996:	e7df      	b.n	8011958 <__d2b+0x70>
 8011998:	0801307c 	.word	0x0801307c
 801199c:	08013170 	.word	0x08013170

080119a0 <__ratio>:
 80119a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	4688      	mov	r8, r1
 80119a6:	4669      	mov	r1, sp
 80119a8:	4681      	mov	r9, r0
 80119aa:	f7ff ff4d 	bl	8011848 <__b2d>
 80119ae:	a901      	add	r1, sp, #4
 80119b0:	4640      	mov	r0, r8
 80119b2:	ec55 4b10 	vmov	r4, r5, d0
 80119b6:	f7ff ff47 	bl	8011848 <__b2d>
 80119ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119c2:	eba3 0c02 	sub.w	ip, r3, r2
 80119c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119ca:	1a9b      	subs	r3, r3, r2
 80119cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119d0:	ec51 0b10 	vmov	r0, r1, d0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	bfd6      	itet	le
 80119d8:	460a      	movle	r2, r1
 80119da:	462a      	movgt	r2, r5
 80119dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119e0:	468b      	mov	fp, r1
 80119e2:	462f      	mov	r7, r5
 80119e4:	bfd4      	ite	le
 80119e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80119ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80119ee:	4620      	mov	r0, r4
 80119f0:	ee10 2a10 	vmov	r2, s0
 80119f4:	465b      	mov	r3, fp
 80119f6:	4639      	mov	r1, r7
 80119f8:	f7ee ff38 	bl	800086c <__aeabi_ddiv>
 80119fc:	ec41 0b10 	vmov	d0, r0, r1
 8011a00:	b003      	add	sp, #12
 8011a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a06 <__copybits>:
 8011a06:	3901      	subs	r1, #1
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	1149      	asrs	r1, r1, #5
 8011a0c:	6914      	ldr	r4, [r2, #16]
 8011a0e:	3101      	adds	r1, #1
 8011a10:	f102 0314 	add.w	r3, r2, #20
 8011a14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a1c:	1f05      	subs	r5, r0, #4
 8011a1e:	42a3      	cmp	r3, r4
 8011a20:	d30c      	bcc.n	8011a3c <__copybits+0x36>
 8011a22:	1aa3      	subs	r3, r4, r2
 8011a24:	3b11      	subs	r3, #17
 8011a26:	f023 0303 	bic.w	r3, r3, #3
 8011a2a:	3211      	adds	r2, #17
 8011a2c:	42a2      	cmp	r2, r4
 8011a2e:	bf88      	it	hi
 8011a30:	2300      	movhi	r3, #0
 8011a32:	4418      	add	r0, r3
 8011a34:	2300      	movs	r3, #0
 8011a36:	4288      	cmp	r0, r1
 8011a38:	d305      	bcc.n	8011a46 <__copybits+0x40>
 8011a3a:	bd70      	pop	{r4, r5, r6, pc}
 8011a3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a40:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a44:	e7eb      	b.n	8011a1e <__copybits+0x18>
 8011a46:	f840 3b04 	str.w	r3, [r0], #4
 8011a4a:	e7f4      	b.n	8011a36 <__copybits+0x30>

08011a4c <__any_on>:
 8011a4c:	f100 0214 	add.w	r2, r0, #20
 8011a50:	6900      	ldr	r0, [r0, #16]
 8011a52:	114b      	asrs	r3, r1, #5
 8011a54:	4298      	cmp	r0, r3
 8011a56:	b510      	push	{r4, lr}
 8011a58:	db11      	blt.n	8011a7e <__any_on+0x32>
 8011a5a:	dd0a      	ble.n	8011a72 <__any_on+0x26>
 8011a5c:	f011 011f 	ands.w	r1, r1, #31
 8011a60:	d007      	beq.n	8011a72 <__any_on+0x26>
 8011a62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a66:	fa24 f001 	lsr.w	r0, r4, r1
 8011a6a:	fa00 f101 	lsl.w	r1, r0, r1
 8011a6e:	428c      	cmp	r4, r1
 8011a70:	d10b      	bne.n	8011a8a <__any_on+0x3e>
 8011a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d803      	bhi.n	8011a82 <__any_on+0x36>
 8011a7a:	2000      	movs	r0, #0
 8011a7c:	bd10      	pop	{r4, pc}
 8011a7e:	4603      	mov	r3, r0
 8011a80:	e7f7      	b.n	8011a72 <__any_on+0x26>
 8011a82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a86:	2900      	cmp	r1, #0
 8011a88:	d0f5      	beq.n	8011a76 <__any_on+0x2a>
 8011a8a:	2001      	movs	r0, #1
 8011a8c:	e7f6      	b.n	8011a7c <__any_on+0x30>

08011a8e <_calloc_r>:
 8011a8e:	b513      	push	{r0, r1, r4, lr}
 8011a90:	434a      	muls	r2, r1
 8011a92:	4611      	mov	r1, r2
 8011a94:	9201      	str	r2, [sp, #4]
 8011a96:	f7fc fa59 	bl	800df4c <_malloc_r>
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	b118      	cbz	r0, 8011aa6 <_calloc_r+0x18>
 8011a9e:	9a01      	ldr	r2, [sp, #4]
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	f7fc f9fb 	bl	800de9c <memset>
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	b002      	add	sp, #8
 8011aaa:	bd10      	pop	{r4, pc}

08011aac <__ssputs_r>:
 8011aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ab0:	688e      	ldr	r6, [r1, #8]
 8011ab2:	429e      	cmp	r6, r3
 8011ab4:	4682      	mov	sl, r0
 8011ab6:	460c      	mov	r4, r1
 8011ab8:	4690      	mov	r8, r2
 8011aba:	461f      	mov	r7, r3
 8011abc:	d838      	bhi.n	8011b30 <__ssputs_r+0x84>
 8011abe:	898a      	ldrh	r2, [r1, #12]
 8011ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ac4:	d032      	beq.n	8011b2c <__ssputs_r+0x80>
 8011ac6:	6825      	ldr	r5, [r4, #0]
 8011ac8:	6909      	ldr	r1, [r1, #16]
 8011aca:	eba5 0901 	sub.w	r9, r5, r1
 8011ace:	6965      	ldr	r5, [r4, #20]
 8011ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ad8:	3301      	adds	r3, #1
 8011ada:	444b      	add	r3, r9
 8011adc:	106d      	asrs	r5, r5, #1
 8011ade:	429d      	cmp	r5, r3
 8011ae0:	bf38      	it	cc
 8011ae2:	461d      	movcc	r5, r3
 8011ae4:	0553      	lsls	r3, r2, #21
 8011ae6:	d531      	bpl.n	8011b4c <__ssputs_r+0xa0>
 8011ae8:	4629      	mov	r1, r5
 8011aea:	f7fc fa2f 	bl	800df4c <_malloc_r>
 8011aee:	4606      	mov	r6, r0
 8011af0:	b950      	cbnz	r0, 8011b08 <__ssputs_r+0x5c>
 8011af2:	230c      	movs	r3, #12
 8011af4:	f8ca 3000 	str.w	r3, [sl]
 8011af8:	89a3      	ldrh	r3, [r4, #12]
 8011afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011afe:	81a3      	strh	r3, [r4, #12]
 8011b00:	f04f 30ff 	mov.w	r0, #4294967295
 8011b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b08:	6921      	ldr	r1, [r4, #16]
 8011b0a:	464a      	mov	r2, r9
 8011b0c:	f7ff fae9 	bl	80110e2 <memcpy>
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	6126      	str	r6, [r4, #16]
 8011b1e:	6165      	str	r5, [r4, #20]
 8011b20:	444e      	add	r6, r9
 8011b22:	eba5 0509 	sub.w	r5, r5, r9
 8011b26:	6026      	str	r6, [r4, #0]
 8011b28:	60a5      	str	r5, [r4, #8]
 8011b2a:	463e      	mov	r6, r7
 8011b2c:	42be      	cmp	r6, r7
 8011b2e:	d900      	bls.n	8011b32 <__ssputs_r+0x86>
 8011b30:	463e      	mov	r6, r7
 8011b32:	4632      	mov	r2, r6
 8011b34:	6820      	ldr	r0, [r4, #0]
 8011b36:	4641      	mov	r1, r8
 8011b38:	f000 fd24 	bl	8012584 <memmove>
 8011b3c:	68a3      	ldr	r3, [r4, #8]
 8011b3e:	6822      	ldr	r2, [r4, #0]
 8011b40:	1b9b      	subs	r3, r3, r6
 8011b42:	4432      	add	r2, r6
 8011b44:	60a3      	str	r3, [r4, #8]
 8011b46:	6022      	str	r2, [r4, #0]
 8011b48:	2000      	movs	r0, #0
 8011b4a:	e7db      	b.n	8011b04 <__ssputs_r+0x58>
 8011b4c:	462a      	mov	r2, r5
 8011b4e:	f000 fd33 	bl	80125b8 <_realloc_r>
 8011b52:	4606      	mov	r6, r0
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d1e1      	bne.n	8011b1c <__ssputs_r+0x70>
 8011b58:	6921      	ldr	r1, [r4, #16]
 8011b5a:	4650      	mov	r0, sl
 8011b5c:	f7fc f9a6 	bl	800deac <_free_r>
 8011b60:	e7c7      	b.n	8011af2 <__ssputs_r+0x46>
	...

08011b64 <_svfiprintf_r>:
 8011b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b68:	4698      	mov	r8, r3
 8011b6a:	898b      	ldrh	r3, [r1, #12]
 8011b6c:	061b      	lsls	r3, r3, #24
 8011b6e:	b09d      	sub	sp, #116	; 0x74
 8011b70:	4607      	mov	r7, r0
 8011b72:	460d      	mov	r5, r1
 8011b74:	4614      	mov	r4, r2
 8011b76:	d50e      	bpl.n	8011b96 <_svfiprintf_r+0x32>
 8011b78:	690b      	ldr	r3, [r1, #16]
 8011b7a:	b963      	cbnz	r3, 8011b96 <_svfiprintf_r+0x32>
 8011b7c:	2140      	movs	r1, #64	; 0x40
 8011b7e:	f7fc f9e5 	bl	800df4c <_malloc_r>
 8011b82:	6028      	str	r0, [r5, #0]
 8011b84:	6128      	str	r0, [r5, #16]
 8011b86:	b920      	cbnz	r0, 8011b92 <_svfiprintf_r+0x2e>
 8011b88:	230c      	movs	r3, #12
 8011b8a:	603b      	str	r3, [r7, #0]
 8011b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b90:	e0d1      	b.n	8011d36 <_svfiprintf_r+0x1d2>
 8011b92:	2340      	movs	r3, #64	; 0x40
 8011b94:	616b      	str	r3, [r5, #20]
 8011b96:	2300      	movs	r3, #0
 8011b98:	9309      	str	r3, [sp, #36]	; 0x24
 8011b9a:	2320      	movs	r3, #32
 8011b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ba4:	2330      	movs	r3, #48	; 0x30
 8011ba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d50 <_svfiprintf_r+0x1ec>
 8011baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bae:	f04f 0901 	mov.w	r9, #1
 8011bb2:	4623      	mov	r3, r4
 8011bb4:	469a      	mov	sl, r3
 8011bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bba:	b10a      	cbz	r2, 8011bc0 <_svfiprintf_r+0x5c>
 8011bbc:	2a25      	cmp	r2, #37	; 0x25
 8011bbe:	d1f9      	bne.n	8011bb4 <_svfiprintf_r+0x50>
 8011bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8011bc4:	d00b      	beq.n	8011bde <_svfiprintf_r+0x7a>
 8011bc6:	465b      	mov	r3, fp
 8011bc8:	4622      	mov	r2, r4
 8011bca:	4629      	mov	r1, r5
 8011bcc:	4638      	mov	r0, r7
 8011bce:	f7ff ff6d 	bl	8011aac <__ssputs_r>
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	f000 80aa 	beq.w	8011d2c <_svfiprintf_r+0x1c8>
 8011bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bda:	445a      	add	r2, fp
 8011bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8011bde:	f89a 3000 	ldrb.w	r3, [sl]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f000 80a2 	beq.w	8011d2c <_svfiprintf_r+0x1c8>
 8011be8:	2300      	movs	r3, #0
 8011bea:	f04f 32ff 	mov.w	r2, #4294967295
 8011bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bf2:	f10a 0a01 	add.w	sl, sl, #1
 8011bf6:	9304      	str	r3, [sp, #16]
 8011bf8:	9307      	str	r3, [sp, #28]
 8011bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8011c00:	4654      	mov	r4, sl
 8011c02:	2205      	movs	r2, #5
 8011c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c08:	4851      	ldr	r0, [pc, #324]	; (8011d50 <_svfiprintf_r+0x1ec>)
 8011c0a:	f7ee faf9 	bl	8000200 <memchr>
 8011c0e:	9a04      	ldr	r2, [sp, #16]
 8011c10:	b9d8      	cbnz	r0, 8011c4a <_svfiprintf_r+0xe6>
 8011c12:	06d0      	lsls	r0, r2, #27
 8011c14:	bf44      	itt	mi
 8011c16:	2320      	movmi	r3, #32
 8011c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c1c:	0711      	lsls	r1, r2, #28
 8011c1e:	bf44      	itt	mi
 8011c20:	232b      	movmi	r3, #43	; 0x2b
 8011c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c26:	f89a 3000 	ldrb.w	r3, [sl]
 8011c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c2c:	d015      	beq.n	8011c5a <_svfiprintf_r+0xf6>
 8011c2e:	9a07      	ldr	r2, [sp, #28]
 8011c30:	4654      	mov	r4, sl
 8011c32:	2000      	movs	r0, #0
 8011c34:	f04f 0c0a 	mov.w	ip, #10
 8011c38:	4621      	mov	r1, r4
 8011c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c3e:	3b30      	subs	r3, #48	; 0x30
 8011c40:	2b09      	cmp	r3, #9
 8011c42:	d94e      	bls.n	8011ce2 <_svfiprintf_r+0x17e>
 8011c44:	b1b0      	cbz	r0, 8011c74 <_svfiprintf_r+0x110>
 8011c46:	9207      	str	r2, [sp, #28]
 8011c48:	e014      	b.n	8011c74 <_svfiprintf_r+0x110>
 8011c4a:	eba0 0308 	sub.w	r3, r0, r8
 8011c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c52:	4313      	orrs	r3, r2
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	46a2      	mov	sl, r4
 8011c58:	e7d2      	b.n	8011c00 <_svfiprintf_r+0x9c>
 8011c5a:	9b03      	ldr	r3, [sp, #12]
 8011c5c:	1d19      	adds	r1, r3, #4
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	9103      	str	r1, [sp, #12]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	bfbb      	ittet	lt
 8011c66:	425b      	neglt	r3, r3
 8011c68:	f042 0202 	orrlt.w	r2, r2, #2
 8011c6c:	9307      	strge	r3, [sp, #28]
 8011c6e:	9307      	strlt	r3, [sp, #28]
 8011c70:	bfb8      	it	lt
 8011c72:	9204      	strlt	r2, [sp, #16]
 8011c74:	7823      	ldrb	r3, [r4, #0]
 8011c76:	2b2e      	cmp	r3, #46	; 0x2e
 8011c78:	d10c      	bne.n	8011c94 <_svfiprintf_r+0x130>
 8011c7a:	7863      	ldrb	r3, [r4, #1]
 8011c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c7e:	d135      	bne.n	8011cec <_svfiprintf_r+0x188>
 8011c80:	9b03      	ldr	r3, [sp, #12]
 8011c82:	1d1a      	adds	r2, r3, #4
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	9203      	str	r2, [sp, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	bfb8      	it	lt
 8011c8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c90:	3402      	adds	r4, #2
 8011c92:	9305      	str	r3, [sp, #20]
 8011c94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d60 <_svfiprintf_r+0x1fc>
 8011c98:	7821      	ldrb	r1, [r4, #0]
 8011c9a:	2203      	movs	r2, #3
 8011c9c:	4650      	mov	r0, sl
 8011c9e:	f7ee faaf 	bl	8000200 <memchr>
 8011ca2:	b140      	cbz	r0, 8011cb6 <_svfiprintf_r+0x152>
 8011ca4:	2340      	movs	r3, #64	; 0x40
 8011ca6:	eba0 000a 	sub.w	r0, r0, sl
 8011caa:	fa03 f000 	lsl.w	r0, r3, r0
 8011cae:	9b04      	ldr	r3, [sp, #16]
 8011cb0:	4303      	orrs	r3, r0
 8011cb2:	3401      	adds	r4, #1
 8011cb4:	9304      	str	r3, [sp, #16]
 8011cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cba:	4826      	ldr	r0, [pc, #152]	; (8011d54 <_svfiprintf_r+0x1f0>)
 8011cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cc0:	2206      	movs	r2, #6
 8011cc2:	f7ee fa9d 	bl	8000200 <memchr>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	d038      	beq.n	8011d3c <_svfiprintf_r+0x1d8>
 8011cca:	4b23      	ldr	r3, [pc, #140]	; (8011d58 <_svfiprintf_r+0x1f4>)
 8011ccc:	bb1b      	cbnz	r3, 8011d16 <_svfiprintf_r+0x1b2>
 8011cce:	9b03      	ldr	r3, [sp, #12]
 8011cd0:	3307      	adds	r3, #7
 8011cd2:	f023 0307 	bic.w	r3, r3, #7
 8011cd6:	3308      	adds	r3, #8
 8011cd8:	9303      	str	r3, [sp, #12]
 8011cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cdc:	4433      	add	r3, r6
 8011cde:	9309      	str	r3, [sp, #36]	; 0x24
 8011ce0:	e767      	b.n	8011bb2 <_svfiprintf_r+0x4e>
 8011ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ce6:	460c      	mov	r4, r1
 8011ce8:	2001      	movs	r0, #1
 8011cea:	e7a5      	b.n	8011c38 <_svfiprintf_r+0xd4>
 8011cec:	2300      	movs	r3, #0
 8011cee:	3401      	adds	r4, #1
 8011cf0:	9305      	str	r3, [sp, #20]
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	f04f 0c0a 	mov.w	ip, #10
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cfe:	3a30      	subs	r2, #48	; 0x30
 8011d00:	2a09      	cmp	r2, #9
 8011d02:	d903      	bls.n	8011d0c <_svfiprintf_r+0x1a8>
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d0c5      	beq.n	8011c94 <_svfiprintf_r+0x130>
 8011d08:	9105      	str	r1, [sp, #20]
 8011d0a:	e7c3      	b.n	8011c94 <_svfiprintf_r+0x130>
 8011d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d10:	4604      	mov	r4, r0
 8011d12:	2301      	movs	r3, #1
 8011d14:	e7f0      	b.n	8011cf8 <_svfiprintf_r+0x194>
 8011d16:	ab03      	add	r3, sp, #12
 8011d18:	9300      	str	r3, [sp, #0]
 8011d1a:	462a      	mov	r2, r5
 8011d1c:	4b0f      	ldr	r3, [pc, #60]	; (8011d5c <_svfiprintf_r+0x1f8>)
 8011d1e:	a904      	add	r1, sp, #16
 8011d20:	4638      	mov	r0, r7
 8011d22:	f7fc fa0d 	bl	800e140 <_printf_float>
 8011d26:	1c42      	adds	r2, r0, #1
 8011d28:	4606      	mov	r6, r0
 8011d2a:	d1d6      	bne.n	8011cda <_svfiprintf_r+0x176>
 8011d2c:	89ab      	ldrh	r3, [r5, #12]
 8011d2e:	065b      	lsls	r3, r3, #25
 8011d30:	f53f af2c 	bmi.w	8011b8c <_svfiprintf_r+0x28>
 8011d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d36:	b01d      	add	sp, #116	; 0x74
 8011d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d3c:	ab03      	add	r3, sp, #12
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	462a      	mov	r2, r5
 8011d42:	4b06      	ldr	r3, [pc, #24]	; (8011d5c <_svfiprintf_r+0x1f8>)
 8011d44:	a904      	add	r1, sp, #16
 8011d46:	4638      	mov	r0, r7
 8011d48:	f7fc fc9e 	bl	800e688 <_printf_i>
 8011d4c:	e7eb      	b.n	8011d26 <_svfiprintf_r+0x1c2>
 8011d4e:	bf00      	nop
 8011d50:	080132cc 	.word	0x080132cc
 8011d54:	080132d6 	.word	0x080132d6
 8011d58:	0800e141 	.word	0x0800e141
 8011d5c:	08011aad 	.word	0x08011aad
 8011d60:	080132d2 	.word	0x080132d2

08011d64 <__sfputc_r>:
 8011d64:	6893      	ldr	r3, [r2, #8]
 8011d66:	3b01      	subs	r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	b410      	push	{r4}
 8011d6c:	6093      	str	r3, [r2, #8]
 8011d6e:	da08      	bge.n	8011d82 <__sfputc_r+0x1e>
 8011d70:	6994      	ldr	r4, [r2, #24]
 8011d72:	42a3      	cmp	r3, r4
 8011d74:	db01      	blt.n	8011d7a <__sfputc_r+0x16>
 8011d76:	290a      	cmp	r1, #10
 8011d78:	d103      	bne.n	8011d82 <__sfputc_r+0x1e>
 8011d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d7e:	f000 b9a9 	b.w	80120d4 <__swbuf_r>
 8011d82:	6813      	ldr	r3, [r2, #0]
 8011d84:	1c58      	adds	r0, r3, #1
 8011d86:	6010      	str	r0, [r2, #0]
 8011d88:	7019      	strb	r1, [r3, #0]
 8011d8a:	4608      	mov	r0, r1
 8011d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <__sfputs_r>:
 8011d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d94:	4606      	mov	r6, r0
 8011d96:	460f      	mov	r7, r1
 8011d98:	4614      	mov	r4, r2
 8011d9a:	18d5      	adds	r5, r2, r3
 8011d9c:	42ac      	cmp	r4, r5
 8011d9e:	d101      	bne.n	8011da4 <__sfputs_r+0x12>
 8011da0:	2000      	movs	r0, #0
 8011da2:	e007      	b.n	8011db4 <__sfputs_r+0x22>
 8011da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011da8:	463a      	mov	r2, r7
 8011daa:	4630      	mov	r0, r6
 8011dac:	f7ff ffda 	bl	8011d64 <__sfputc_r>
 8011db0:	1c43      	adds	r3, r0, #1
 8011db2:	d1f3      	bne.n	8011d9c <__sfputs_r+0xa>
 8011db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011db8 <_vfiprintf_r>:
 8011db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dbc:	460d      	mov	r5, r1
 8011dbe:	b09d      	sub	sp, #116	; 0x74
 8011dc0:	4614      	mov	r4, r2
 8011dc2:	4698      	mov	r8, r3
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	b118      	cbz	r0, 8011dd0 <_vfiprintf_r+0x18>
 8011dc8:	6983      	ldr	r3, [r0, #24]
 8011dca:	b90b      	cbnz	r3, 8011dd0 <_vfiprintf_r+0x18>
 8011dcc:	f7fe fd64 	bl	8010898 <__sinit>
 8011dd0:	4b89      	ldr	r3, [pc, #548]	; (8011ff8 <_vfiprintf_r+0x240>)
 8011dd2:	429d      	cmp	r5, r3
 8011dd4:	d11b      	bne.n	8011e0e <_vfiprintf_r+0x56>
 8011dd6:	6875      	ldr	r5, [r6, #4]
 8011dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011dda:	07d9      	lsls	r1, r3, #31
 8011ddc:	d405      	bmi.n	8011dea <_vfiprintf_r+0x32>
 8011dde:	89ab      	ldrh	r3, [r5, #12]
 8011de0:	059a      	lsls	r2, r3, #22
 8011de2:	d402      	bmi.n	8011dea <_vfiprintf_r+0x32>
 8011de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011de6:	f7ff f968 	bl	80110ba <__retarget_lock_acquire_recursive>
 8011dea:	89ab      	ldrh	r3, [r5, #12]
 8011dec:	071b      	lsls	r3, r3, #28
 8011dee:	d501      	bpl.n	8011df4 <_vfiprintf_r+0x3c>
 8011df0:	692b      	ldr	r3, [r5, #16]
 8011df2:	b9eb      	cbnz	r3, 8011e30 <_vfiprintf_r+0x78>
 8011df4:	4629      	mov	r1, r5
 8011df6:	4630      	mov	r0, r6
 8011df8:	f000 f9de 	bl	80121b8 <__swsetup_r>
 8011dfc:	b1c0      	cbz	r0, 8011e30 <_vfiprintf_r+0x78>
 8011dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e00:	07dc      	lsls	r4, r3, #31
 8011e02:	d50e      	bpl.n	8011e22 <_vfiprintf_r+0x6a>
 8011e04:	f04f 30ff 	mov.w	r0, #4294967295
 8011e08:	b01d      	add	sp, #116	; 0x74
 8011e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0e:	4b7b      	ldr	r3, [pc, #492]	; (8011ffc <_vfiprintf_r+0x244>)
 8011e10:	429d      	cmp	r5, r3
 8011e12:	d101      	bne.n	8011e18 <_vfiprintf_r+0x60>
 8011e14:	68b5      	ldr	r5, [r6, #8]
 8011e16:	e7df      	b.n	8011dd8 <_vfiprintf_r+0x20>
 8011e18:	4b79      	ldr	r3, [pc, #484]	; (8012000 <_vfiprintf_r+0x248>)
 8011e1a:	429d      	cmp	r5, r3
 8011e1c:	bf08      	it	eq
 8011e1e:	68f5      	ldreq	r5, [r6, #12]
 8011e20:	e7da      	b.n	8011dd8 <_vfiprintf_r+0x20>
 8011e22:	89ab      	ldrh	r3, [r5, #12]
 8011e24:	0598      	lsls	r0, r3, #22
 8011e26:	d4ed      	bmi.n	8011e04 <_vfiprintf_r+0x4c>
 8011e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e2a:	f7ff f947 	bl	80110bc <__retarget_lock_release_recursive>
 8011e2e:	e7e9      	b.n	8011e04 <_vfiprintf_r+0x4c>
 8011e30:	2300      	movs	r3, #0
 8011e32:	9309      	str	r3, [sp, #36]	; 0x24
 8011e34:	2320      	movs	r3, #32
 8011e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e3e:	2330      	movs	r3, #48	; 0x30
 8011e40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012004 <_vfiprintf_r+0x24c>
 8011e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e48:	f04f 0901 	mov.w	r9, #1
 8011e4c:	4623      	mov	r3, r4
 8011e4e:	469a      	mov	sl, r3
 8011e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e54:	b10a      	cbz	r2, 8011e5a <_vfiprintf_r+0xa2>
 8011e56:	2a25      	cmp	r2, #37	; 0x25
 8011e58:	d1f9      	bne.n	8011e4e <_vfiprintf_r+0x96>
 8011e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e5e:	d00b      	beq.n	8011e78 <_vfiprintf_r+0xc0>
 8011e60:	465b      	mov	r3, fp
 8011e62:	4622      	mov	r2, r4
 8011e64:	4629      	mov	r1, r5
 8011e66:	4630      	mov	r0, r6
 8011e68:	f7ff ff93 	bl	8011d92 <__sfputs_r>
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	f000 80aa 	beq.w	8011fc6 <_vfiprintf_r+0x20e>
 8011e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e74:	445a      	add	r2, fp
 8011e76:	9209      	str	r2, [sp, #36]	; 0x24
 8011e78:	f89a 3000 	ldrb.w	r3, [sl]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f000 80a2 	beq.w	8011fc6 <_vfiprintf_r+0x20e>
 8011e82:	2300      	movs	r3, #0
 8011e84:	f04f 32ff 	mov.w	r2, #4294967295
 8011e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e8c:	f10a 0a01 	add.w	sl, sl, #1
 8011e90:	9304      	str	r3, [sp, #16]
 8011e92:	9307      	str	r3, [sp, #28]
 8011e94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e98:	931a      	str	r3, [sp, #104]	; 0x68
 8011e9a:	4654      	mov	r4, sl
 8011e9c:	2205      	movs	r2, #5
 8011e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ea2:	4858      	ldr	r0, [pc, #352]	; (8012004 <_vfiprintf_r+0x24c>)
 8011ea4:	f7ee f9ac 	bl	8000200 <memchr>
 8011ea8:	9a04      	ldr	r2, [sp, #16]
 8011eaa:	b9d8      	cbnz	r0, 8011ee4 <_vfiprintf_r+0x12c>
 8011eac:	06d1      	lsls	r1, r2, #27
 8011eae:	bf44      	itt	mi
 8011eb0:	2320      	movmi	r3, #32
 8011eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011eb6:	0713      	lsls	r3, r2, #28
 8011eb8:	bf44      	itt	mi
 8011eba:	232b      	movmi	r3, #43	; 0x2b
 8011ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ec6:	d015      	beq.n	8011ef4 <_vfiprintf_r+0x13c>
 8011ec8:	9a07      	ldr	r2, [sp, #28]
 8011eca:	4654      	mov	r4, sl
 8011ecc:	2000      	movs	r0, #0
 8011ece:	f04f 0c0a 	mov.w	ip, #10
 8011ed2:	4621      	mov	r1, r4
 8011ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ed8:	3b30      	subs	r3, #48	; 0x30
 8011eda:	2b09      	cmp	r3, #9
 8011edc:	d94e      	bls.n	8011f7c <_vfiprintf_r+0x1c4>
 8011ede:	b1b0      	cbz	r0, 8011f0e <_vfiprintf_r+0x156>
 8011ee0:	9207      	str	r2, [sp, #28]
 8011ee2:	e014      	b.n	8011f0e <_vfiprintf_r+0x156>
 8011ee4:	eba0 0308 	sub.w	r3, r0, r8
 8011ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8011eec:	4313      	orrs	r3, r2
 8011eee:	9304      	str	r3, [sp, #16]
 8011ef0:	46a2      	mov	sl, r4
 8011ef2:	e7d2      	b.n	8011e9a <_vfiprintf_r+0xe2>
 8011ef4:	9b03      	ldr	r3, [sp, #12]
 8011ef6:	1d19      	adds	r1, r3, #4
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	9103      	str	r1, [sp, #12]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	bfbb      	ittet	lt
 8011f00:	425b      	neglt	r3, r3
 8011f02:	f042 0202 	orrlt.w	r2, r2, #2
 8011f06:	9307      	strge	r3, [sp, #28]
 8011f08:	9307      	strlt	r3, [sp, #28]
 8011f0a:	bfb8      	it	lt
 8011f0c:	9204      	strlt	r2, [sp, #16]
 8011f0e:	7823      	ldrb	r3, [r4, #0]
 8011f10:	2b2e      	cmp	r3, #46	; 0x2e
 8011f12:	d10c      	bne.n	8011f2e <_vfiprintf_r+0x176>
 8011f14:	7863      	ldrb	r3, [r4, #1]
 8011f16:	2b2a      	cmp	r3, #42	; 0x2a
 8011f18:	d135      	bne.n	8011f86 <_vfiprintf_r+0x1ce>
 8011f1a:	9b03      	ldr	r3, [sp, #12]
 8011f1c:	1d1a      	adds	r2, r3, #4
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	9203      	str	r2, [sp, #12]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	bfb8      	it	lt
 8011f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f2a:	3402      	adds	r4, #2
 8011f2c:	9305      	str	r3, [sp, #20]
 8011f2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012014 <_vfiprintf_r+0x25c>
 8011f32:	7821      	ldrb	r1, [r4, #0]
 8011f34:	2203      	movs	r2, #3
 8011f36:	4650      	mov	r0, sl
 8011f38:	f7ee f962 	bl	8000200 <memchr>
 8011f3c:	b140      	cbz	r0, 8011f50 <_vfiprintf_r+0x198>
 8011f3e:	2340      	movs	r3, #64	; 0x40
 8011f40:	eba0 000a 	sub.w	r0, r0, sl
 8011f44:	fa03 f000 	lsl.w	r0, r3, r0
 8011f48:	9b04      	ldr	r3, [sp, #16]
 8011f4a:	4303      	orrs	r3, r0
 8011f4c:	3401      	adds	r4, #1
 8011f4e:	9304      	str	r3, [sp, #16]
 8011f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f54:	482c      	ldr	r0, [pc, #176]	; (8012008 <_vfiprintf_r+0x250>)
 8011f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f5a:	2206      	movs	r2, #6
 8011f5c:	f7ee f950 	bl	8000200 <memchr>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	d03f      	beq.n	8011fe4 <_vfiprintf_r+0x22c>
 8011f64:	4b29      	ldr	r3, [pc, #164]	; (801200c <_vfiprintf_r+0x254>)
 8011f66:	bb1b      	cbnz	r3, 8011fb0 <_vfiprintf_r+0x1f8>
 8011f68:	9b03      	ldr	r3, [sp, #12]
 8011f6a:	3307      	adds	r3, #7
 8011f6c:	f023 0307 	bic.w	r3, r3, #7
 8011f70:	3308      	adds	r3, #8
 8011f72:	9303      	str	r3, [sp, #12]
 8011f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f76:	443b      	add	r3, r7
 8011f78:	9309      	str	r3, [sp, #36]	; 0x24
 8011f7a:	e767      	b.n	8011e4c <_vfiprintf_r+0x94>
 8011f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f80:	460c      	mov	r4, r1
 8011f82:	2001      	movs	r0, #1
 8011f84:	e7a5      	b.n	8011ed2 <_vfiprintf_r+0x11a>
 8011f86:	2300      	movs	r3, #0
 8011f88:	3401      	adds	r4, #1
 8011f8a:	9305      	str	r3, [sp, #20]
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	f04f 0c0a 	mov.w	ip, #10
 8011f92:	4620      	mov	r0, r4
 8011f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f98:	3a30      	subs	r2, #48	; 0x30
 8011f9a:	2a09      	cmp	r2, #9
 8011f9c:	d903      	bls.n	8011fa6 <_vfiprintf_r+0x1ee>
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d0c5      	beq.n	8011f2e <_vfiprintf_r+0x176>
 8011fa2:	9105      	str	r1, [sp, #20]
 8011fa4:	e7c3      	b.n	8011f2e <_vfiprintf_r+0x176>
 8011fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011faa:	4604      	mov	r4, r0
 8011fac:	2301      	movs	r3, #1
 8011fae:	e7f0      	b.n	8011f92 <_vfiprintf_r+0x1da>
 8011fb0:	ab03      	add	r3, sp, #12
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	462a      	mov	r2, r5
 8011fb6:	4b16      	ldr	r3, [pc, #88]	; (8012010 <_vfiprintf_r+0x258>)
 8011fb8:	a904      	add	r1, sp, #16
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f7fc f8c0 	bl	800e140 <_printf_float>
 8011fc0:	4607      	mov	r7, r0
 8011fc2:	1c78      	adds	r0, r7, #1
 8011fc4:	d1d6      	bne.n	8011f74 <_vfiprintf_r+0x1bc>
 8011fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fc8:	07d9      	lsls	r1, r3, #31
 8011fca:	d405      	bmi.n	8011fd8 <_vfiprintf_r+0x220>
 8011fcc:	89ab      	ldrh	r3, [r5, #12]
 8011fce:	059a      	lsls	r2, r3, #22
 8011fd0:	d402      	bmi.n	8011fd8 <_vfiprintf_r+0x220>
 8011fd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fd4:	f7ff f872 	bl	80110bc <__retarget_lock_release_recursive>
 8011fd8:	89ab      	ldrh	r3, [r5, #12]
 8011fda:	065b      	lsls	r3, r3, #25
 8011fdc:	f53f af12 	bmi.w	8011e04 <_vfiprintf_r+0x4c>
 8011fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fe2:	e711      	b.n	8011e08 <_vfiprintf_r+0x50>
 8011fe4:	ab03      	add	r3, sp, #12
 8011fe6:	9300      	str	r3, [sp, #0]
 8011fe8:	462a      	mov	r2, r5
 8011fea:	4b09      	ldr	r3, [pc, #36]	; (8012010 <_vfiprintf_r+0x258>)
 8011fec:	a904      	add	r1, sp, #16
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f7fc fb4a 	bl	800e688 <_printf_i>
 8011ff4:	e7e4      	b.n	8011fc0 <_vfiprintf_r+0x208>
 8011ff6:	bf00      	nop
 8011ff8:	080130b0 	.word	0x080130b0
 8011ffc:	080130d0 	.word	0x080130d0
 8012000:	08013090 	.word	0x08013090
 8012004:	080132cc 	.word	0x080132cc
 8012008:	080132d6 	.word	0x080132d6
 801200c:	0800e141 	.word	0x0800e141
 8012010:	08011d93 	.word	0x08011d93
 8012014:	080132d2 	.word	0x080132d2

08012018 <nan>:
 8012018:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012020 <nan+0x8>
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop
 8012020:	00000000 	.word	0x00000000
 8012024:	7ff80000 	.word	0x7ff80000

08012028 <__sread>:
 8012028:	b510      	push	{r4, lr}
 801202a:	460c      	mov	r4, r1
 801202c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012030:	f000 fae8 	bl	8012604 <_read_r>
 8012034:	2800      	cmp	r0, #0
 8012036:	bfab      	itete	ge
 8012038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801203a:	89a3      	ldrhlt	r3, [r4, #12]
 801203c:	181b      	addge	r3, r3, r0
 801203e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012042:	bfac      	ite	ge
 8012044:	6563      	strge	r3, [r4, #84]	; 0x54
 8012046:	81a3      	strhlt	r3, [r4, #12]
 8012048:	bd10      	pop	{r4, pc}

0801204a <__swrite>:
 801204a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204e:	461f      	mov	r7, r3
 8012050:	898b      	ldrh	r3, [r1, #12]
 8012052:	05db      	lsls	r3, r3, #23
 8012054:	4605      	mov	r5, r0
 8012056:	460c      	mov	r4, r1
 8012058:	4616      	mov	r6, r2
 801205a:	d505      	bpl.n	8012068 <__swrite+0x1e>
 801205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012060:	2302      	movs	r3, #2
 8012062:	2200      	movs	r2, #0
 8012064:	f000 fa18 	bl	8012498 <_lseek_r>
 8012068:	89a3      	ldrh	r3, [r4, #12]
 801206a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801206e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012072:	81a3      	strh	r3, [r4, #12]
 8012074:	4632      	mov	r2, r6
 8012076:	463b      	mov	r3, r7
 8012078:	4628      	mov	r0, r5
 801207a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801207e:	f000 b889 	b.w	8012194 <_write_r>

08012082 <__sseek>:
 8012082:	b510      	push	{r4, lr}
 8012084:	460c      	mov	r4, r1
 8012086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801208a:	f000 fa05 	bl	8012498 <_lseek_r>
 801208e:	1c43      	adds	r3, r0, #1
 8012090:	89a3      	ldrh	r3, [r4, #12]
 8012092:	bf15      	itete	ne
 8012094:	6560      	strne	r0, [r4, #84]	; 0x54
 8012096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801209a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801209e:	81a3      	strheq	r3, [r4, #12]
 80120a0:	bf18      	it	ne
 80120a2:	81a3      	strhne	r3, [r4, #12]
 80120a4:	bd10      	pop	{r4, pc}

080120a6 <__sclose>:
 80120a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120aa:	f000 b911 	b.w	80122d0 <_close_r>

080120ae <strncmp>:
 80120ae:	b510      	push	{r4, lr}
 80120b0:	b16a      	cbz	r2, 80120ce <strncmp+0x20>
 80120b2:	3901      	subs	r1, #1
 80120b4:	1884      	adds	r4, r0, r2
 80120b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80120ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80120be:	4293      	cmp	r3, r2
 80120c0:	d103      	bne.n	80120ca <strncmp+0x1c>
 80120c2:	42a0      	cmp	r0, r4
 80120c4:	d001      	beq.n	80120ca <strncmp+0x1c>
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1f5      	bne.n	80120b6 <strncmp+0x8>
 80120ca:	1a98      	subs	r0, r3, r2
 80120cc:	bd10      	pop	{r4, pc}
 80120ce:	4610      	mov	r0, r2
 80120d0:	e7fc      	b.n	80120cc <strncmp+0x1e>
	...

080120d4 <__swbuf_r>:
 80120d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d6:	460e      	mov	r6, r1
 80120d8:	4614      	mov	r4, r2
 80120da:	4605      	mov	r5, r0
 80120dc:	b118      	cbz	r0, 80120e6 <__swbuf_r+0x12>
 80120de:	6983      	ldr	r3, [r0, #24]
 80120e0:	b90b      	cbnz	r3, 80120e6 <__swbuf_r+0x12>
 80120e2:	f7fe fbd9 	bl	8010898 <__sinit>
 80120e6:	4b21      	ldr	r3, [pc, #132]	; (801216c <__swbuf_r+0x98>)
 80120e8:	429c      	cmp	r4, r3
 80120ea:	d12b      	bne.n	8012144 <__swbuf_r+0x70>
 80120ec:	686c      	ldr	r4, [r5, #4]
 80120ee:	69a3      	ldr	r3, [r4, #24]
 80120f0:	60a3      	str	r3, [r4, #8]
 80120f2:	89a3      	ldrh	r3, [r4, #12]
 80120f4:	071a      	lsls	r2, r3, #28
 80120f6:	d52f      	bpl.n	8012158 <__swbuf_r+0x84>
 80120f8:	6923      	ldr	r3, [r4, #16]
 80120fa:	b36b      	cbz	r3, 8012158 <__swbuf_r+0x84>
 80120fc:	6923      	ldr	r3, [r4, #16]
 80120fe:	6820      	ldr	r0, [r4, #0]
 8012100:	1ac0      	subs	r0, r0, r3
 8012102:	6963      	ldr	r3, [r4, #20]
 8012104:	b2f6      	uxtb	r6, r6
 8012106:	4283      	cmp	r3, r0
 8012108:	4637      	mov	r7, r6
 801210a:	dc04      	bgt.n	8012116 <__swbuf_r+0x42>
 801210c:	4621      	mov	r1, r4
 801210e:	4628      	mov	r0, r5
 8012110:	f000 f974 	bl	80123fc <_fflush_r>
 8012114:	bb30      	cbnz	r0, 8012164 <__swbuf_r+0x90>
 8012116:	68a3      	ldr	r3, [r4, #8]
 8012118:	3b01      	subs	r3, #1
 801211a:	60a3      	str	r3, [r4, #8]
 801211c:	6823      	ldr	r3, [r4, #0]
 801211e:	1c5a      	adds	r2, r3, #1
 8012120:	6022      	str	r2, [r4, #0]
 8012122:	701e      	strb	r6, [r3, #0]
 8012124:	6963      	ldr	r3, [r4, #20]
 8012126:	3001      	adds	r0, #1
 8012128:	4283      	cmp	r3, r0
 801212a:	d004      	beq.n	8012136 <__swbuf_r+0x62>
 801212c:	89a3      	ldrh	r3, [r4, #12]
 801212e:	07db      	lsls	r3, r3, #31
 8012130:	d506      	bpl.n	8012140 <__swbuf_r+0x6c>
 8012132:	2e0a      	cmp	r6, #10
 8012134:	d104      	bne.n	8012140 <__swbuf_r+0x6c>
 8012136:	4621      	mov	r1, r4
 8012138:	4628      	mov	r0, r5
 801213a:	f000 f95f 	bl	80123fc <_fflush_r>
 801213e:	b988      	cbnz	r0, 8012164 <__swbuf_r+0x90>
 8012140:	4638      	mov	r0, r7
 8012142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012144:	4b0a      	ldr	r3, [pc, #40]	; (8012170 <__swbuf_r+0x9c>)
 8012146:	429c      	cmp	r4, r3
 8012148:	d101      	bne.n	801214e <__swbuf_r+0x7a>
 801214a:	68ac      	ldr	r4, [r5, #8]
 801214c:	e7cf      	b.n	80120ee <__swbuf_r+0x1a>
 801214e:	4b09      	ldr	r3, [pc, #36]	; (8012174 <__swbuf_r+0xa0>)
 8012150:	429c      	cmp	r4, r3
 8012152:	bf08      	it	eq
 8012154:	68ec      	ldreq	r4, [r5, #12]
 8012156:	e7ca      	b.n	80120ee <__swbuf_r+0x1a>
 8012158:	4621      	mov	r1, r4
 801215a:	4628      	mov	r0, r5
 801215c:	f000 f82c 	bl	80121b8 <__swsetup_r>
 8012160:	2800      	cmp	r0, #0
 8012162:	d0cb      	beq.n	80120fc <__swbuf_r+0x28>
 8012164:	f04f 37ff 	mov.w	r7, #4294967295
 8012168:	e7ea      	b.n	8012140 <__swbuf_r+0x6c>
 801216a:	bf00      	nop
 801216c:	080130b0 	.word	0x080130b0
 8012170:	080130d0 	.word	0x080130d0
 8012174:	08013090 	.word	0x08013090

08012178 <__ascii_wctomb>:
 8012178:	b149      	cbz	r1, 801218e <__ascii_wctomb+0x16>
 801217a:	2aff      	cmp	r2, #255	; 0xff
 801217c:	bf85      	ittet	hi
 801217e:	238a      	movhi	r3, #138	; 0x8a
 8012180:	6003      	strhi	r3, [r0, #0]
 8012182:	700a      	strbls	r2, [r1, #0]
 8012184:	f04f 30ff 	movhi.w	r0, #4294967295
 8012188:	bf98      	it	ls
 801218a:	2001      	movls	r0, #1
 801218c:	4770      	bx	lr
 801218e:	4608      	mov	r0, r1
 8012190:	4770      	bx	lr
	...

08012194 <_write_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d07      	ldr	r5, [pc, #28]	; (80121b4 <_write_r+0x20>)
 8012198:	4604      	mov	r4, r0
 801219a:	4608      	mov	r0, r1
 801219c:	4611      	mov	r1, r2
 801219e:	2200      	movs	r2, #0
 80121a0:	602a      	str	r2, [r5, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	f7f1 f8c5 	bl	8003332 <_write>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d102      	bne.n	80121b2 <_write_r+0x1e>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	b103      	cbz	r3, 80121b2 <_write_r+0x1e>
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	200020a4 	.word	0x200020a4

080121b8 <__swsetup_r>:
 80121b8:	4b32      	ldr	r3, [pc, #200]	; (8012284 <__swsetup_r+0xcc>)
 80121ba:	b570      	push	{r4, r5, r6, lr}
 80121bc:	681d      	ldr	r5, [r3, #0]
 80121be:	4606      	mov	r6, r0
 80121c0:	460c      	mov	r4, r1
 80121c2:	b125      	cbz	r5, 80121ce <__swsetup_r+0x16>
 80121c4:	69ab      	ldr	r3, [r5, #24]
 80121c6:	b913      	cbnz	r3, 80121ce <__swsetup_r+0x16>
 80121c8:	4628      	mov	r0, r5
 80121ca:	f7fe fb65 	bl	8010898 <__sinit>
 80121ce:	4b2e      	ldr	r3, [pc, #184]	; (8012288 <__swsetup_r+0xd0>)
 80121d0:	429c      	cmp	r4, r3
 80121d2:	d10f      	bne.n	80121f4 <__swsetup_r+0x3c>
 80121d4:	686c      	ldr	r4, [r5, #4]
 80121d6:	89a3      	ldrh	r3, [r4, #12]
 80121d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121dc:	0719      	lsls	r1, r3, #28
 80121de:	d42c      	bmi.n	801223a <__swsetup_r+0x82>
 80121e0:	06dd      	lsls	r5, r3, #27
 80121e2:	d411      	bmi.n	8012208 <__swsetup_r+0x50>
 80121e4:	2309      	movs	r3, #9
 80121e6:	6033      	str	r3, [r6, #0]
 80121e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121ec:	81a3      	strh	r3, [r4, #12]
 80121ee:	f04f 30ff 	mov.w	r0, #4294967295
 80121f2:	e03e      	b.n	8012272 <__swsetup_r+0xba>
 80121f4:	4b25      	ldr	r3, [pc, #148]	; (801228c <__swsetup_r+0xd4>)
 80121f6:	429c      	cmp	r4, r3
 80121f8:	d101      	bne.n	80121fe <__swsetup_r+0x46>
 80121fa:	68ac      	ldr	r4, [r5, #8]
 80121fc:	e7eb      	b.n	80121d6 <__swsetup_r+0x1e>
 80121fe:	4b24      	ldr	r3, [pc, #144]	; (8012290 <__swsetup_r+0xd8>)
 8012200:	429c      	cmp	r4, r3
 8012202:	bf08      	it	eq
 8012204:	68ec      	ldreq	r4, [r5, #12]
 8012206:	e7e6      	b.n	80121d6 <__swsetup_r+0x1e>
 8012208:	0758      	lsls	r0, r3, #29
 801220a:	d512      	bpl.n	8012232 <__swsetup_r+0x7a>
 801220c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801220e:	b141      	cbz	r1, 8012222 <__swsetup_r+0x6a>
 8012210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012214:	4299      	cmp	r1, r3
 8012216:	d002      	beq.n	801221e <__swsetup_r+0x66>
 8012218:	4630      	mov	r0, r6
 801221a:	f7fb fe47 	bl	800deac <_free_r>
 801221e:	2300      	movs	r3, #0
 8012220:	6363      	str	r3, [r4, #52]	; 0x34
 8012222:	89a3      	ldrh	r3, [r4, #12]
 8012224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012228:	81a3      	strh	r3, [r4, #12]
 801222a:	2300      	movs	r3, #0
 801222c:	6063      	str	r3, [r4, #4]
 801222e:	6923      	ldr	r3, [r4, #16]
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	89a3      	ldrh	r3, [r4, #12]
 8012234:	f043 0308 	orr.w	r3, r3, #8
 8012238:	81a3      	strh	r3, [r4, #12]
 801223a:	6923      	ldr	r3, [r4, #16]
 801223c:	b94b      	cbnz	r3, 8012252 <__swsetup_r+0x9a>
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012248:	d003      	beq.n	8012252 <__swsetup_r+0x9a>
 801224a:	4621      	mov	r1, r4
 801224c:	4630      	mov	r0, r6
 801224e:	f000 f959 	bl	8012504 <__smakebuf_r>
 8012252:	89a0      	ldrh	r0, [r4, #12]
 8012254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012258:	f010 0301 	ands.w	r3, r0, #1
 801225c:	d00a      	beq.n	8012274 <__swsetup_r+0xbc>
 801225e:	2300      	movs	r3, #0
 8012260:	60a3      	str	r3, [r4, #8]
 8012262:	6963      	ldr	r3, [r4, #20]
 8012264:	425b      	negs	r3, r3
 8012266:	61a3      	str	r3, [r4, #24]
 8012268:	6923      	ldr	r3, [r4, #16]
 801226a:	b943      	cbnz	r3, 801227e <__swsetup_r+0xc6>
 801226c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012270:	d1ba      	bne.n	80121e8 <__swsetup_r+0x30>
 8012272:	bd70      	pop	{r4, r5, r6, pc}
 8012274:	0781      	lsls	r1, r0, #30
 8012276:	bf58      	it	pl
 8012278:	6963      	ldrpl	r3, [r4, #20]
 801227a:	60a3      	str	r3, [r4, #8]
 801227c:	e7f4      	b.n	8012268 <__swsetup_r+0xb0>
 801227e:	2000      	movs	r0, #0
 8012280:	e7f7      	b.n	8012272 <__swsetup_r+0xba>
 8012282:	bf00      	nop
 8012284:	20000190 	.word	0x20000190
 8012288:	080130b0 	.word	0x080130b0
 801228c:	080130d0 	.word	0x080130d0
 8012290:	08013090 	.word	0x08013090

08012294 <__assert_func>:
 8012294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012296:	4614      	mov	r4, r2
 8012298:	461a      	mov	r2, r3
 801229a:	4b09      	ldr	r3, [pc, #36]	; (80122c0 <__assert_func+0x2c>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4605      	mov	r5, r0
 80122a0:	68d8      	ldr	r0, [r3, #12]
 80122a2:	b14c      	cbz	r4, 80122b8 <__assert_func+0x24>
 80122a4:	4b07      	ldr	r3, [pc, #28]	; (80122c4 <__assert_func+0x30>)
 80122a6:	9100      	str	r1, [sp, #0]
 80122a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122ac:	4906      	ldr	r1, [pc, #24]	; (80122c8 <__assert_func+0x34>)
 80122ae:	462b      	mov	r3, r5
 80122b0:	f000 f8e0 	bl	8012474 <fiprintf>
 80122b4:	f000 f9b8 	bl	8012628 <abort>
 80122b8:	4b04      	ldr	r3, [pc, #16]	; (80122cc <__assert_func+0x38>)
 80122ba:	461c      	mov	r4, r3
 80122bc:	e7f3      	b.n	80122a6 <__assert_func+0x12>
 80122be:	bf00      	nop
 80122c0:	20000190 	.word	0x20000190
 80122c4:	080132dd 	.word	0x080132dd
 80122c8:	080132ea 	.word	0x080132ea
 80122cc:	08013318 	.word	0x08013318

080122d0 <_close_r>:
 80122d0:	b538      	push	{r3, r4, r5, lr}
 80122d2:	4d06      	ldr	r5, [pc, #24]	; (80122ec <_close_r+0x1c>)
 80122d4:	2300      	movs	r3, #0
 80122d6:	4604      	mov	r4, r0
 80122d8:	4608      	mov	r0, r1
 80122da:	602b      	str	r3, [r5, #0]
 80122dc:	f7f1 f845 	bl	800336a <_close>
 80122e0:	1c43      	adds	r3, r0, #1
 80122e2:	d102      	bne.n	80122ea <_close_r+0x1a>
 80122e4:	682b      	ldr	r3, [r5, #0]
 80122e6:	b103      	cbz	r3, 80122ea <_close_r+0x1a>
 80122e8:	6023      	str	r3, [r4, #0]
 80122ea:	bd38      	pop	{r3, r4, r5, pc}
 80122ec:	200020a4 	.word	0x200020a4

080122f0 <__sflush_r>:
 80122f0:	898a      	ldrh	r2, [r1, #12]
 80122f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f6:	4605      	mov	r5, r0
 80122f8:	0710      	lsls	r0, r2, #28
 80122fa:	460c      	mov	r4, r1
 80122fc:	d458      	bmi.n	80123b0 <__sflush_r+0xc0>
 80122fe:	684b      	ldr	r3, [r1, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	dc05      	bgt.n	8012310 <__sflush_r+0x20>
 8012304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012306:	2b00      	cmp	r3, #0
 8012308:	dc02      	bgt.n	8012310 <__sflush_r+0x20>
 801230a:	2000      	movs	r0, #0
 801230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012312:	2e00      	cmp	r6, #0
 8012314:	d0f9      	beq.n	801230a <__sflush_r+0x1a>
 8012316:	2300      	movs	r3, #0
 8012318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801231c:	682f      	ldr	r7, [r5, #0]
 801231e:	602b      	str	r3, [r5, #0]
 8012320:	d032      	beq.n	8012388 <__sflush_r+0x98>
 8012322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012324:	89a3      	ldrh	r3, [r4, #12]
 8012326:	075a      	lsls	r2, r3, #29
 8012328:	d505      	bpl.n	8012336 <__sflush_r+0x46>
 801232a:	6863      	ldr	r3, [r4, #4]
 801232c:	1ac0      	subs	r0, r0, r3
 801232e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012330:	b10b      	cbz	r3, 8012336 <__sflush_r+0x46>
 8012332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012334:	1ac0      	subs	r0, r0, r3
 8012336:	2300      	movs	r3, #0
 8012338:	4602      	mov	r2, r0
 801233a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801233c:	6a21      	ldr	r1, [r4, #32]
 801233e:	4628      	mov	r0, r5
 8012340:	47b0      	blx	r6
 8012342:	1c43      	adds	r3, r0, #1
 8012344:	89a3      	ldrh	r3, [r4, #12]
 8012346:	d106      	bne.n	8012356 <__sflush_r+0x66>
 8012348:	6829      	ldr	r1, [r5, #0]
 801234a:	291d      	cmp	r1, #29
 801234c:	d82c      	bhi.n	80123a8 <__sflush_r+0xb8>
 801234e:	4a2a      	ldr	r2, [pc, #168]	; (80123f8 <__sflush_r+0x108>)
 8012350:	40ca      	lsrs	r2, r1
 8012352:	07d6      	lsls	r6, r2, #31
 8012354:	d528      	bpl.n	80123a8 <__sflush_r+0xb8>
 8012356:	2200      	movs	r2, #0
 8012358:	6062      	str	r2, [r4, #4]
 801235a:	04d9      	lsls	r1, r3, #19
 801235c:	6922      	ldr	r2, [r4, #16]
 801235e:	6022      	str	r2, [r4, #0]
 8012360:	d504      	bpl.n	801236c <__sflush_r+0x7c>
 8012362:	1c42      	adds	r2, r0, #1
 8012364:	d101      	bne.n	801236a <__sflush_r+0x7a>
 8012366:	682b      	ldr	r3, [r5, #0]
 8012368:	b903      	cbnz	r3, 801236c <__sflush_r+0x7c>
 801236a:	6560      	str	r0, [r4, #84]	; 0x54
 801236c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801236e:	602f      	str	r7, [r5, #0]
 8012370:	2900      	cmp	r1, #0
 8012372:	d0ca      	beq.n	801230a <__sflush_r+0x1a>
 8012374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012378:	4299      	cmp	r1, r3
 801237a:	d002      	beq.n	8012382 <__sflush_r+0x92>
 801237c:	4628      	mov	r0, r5
 801237e:	f7fb fd95 	bl	800deac <_free_r>
 8012382:	2000      	movs	r0, #0
 8012384:	6360      	str	r0, [r4, #52]	; 0x34
 8012386:	e7c1      	b.n	801230c <__sflush_r+0x1c>
 8012388:	6a21      	ldr	r1, [r4, #32]
 801238a:	2301      	movs	r3, #1
 801238c:	4628      	mov	r0, r5
 801238e:	47b0      	blx	r6
 8012390:	1c41      	adds	r1, r0, #1
 8012392:	d1c7      	bne.n	8012324 <__sflush_r+0x34>
 8012394:	682b      	ldr	r3, [r5, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d0c4      	beq.n	8012324 <__sflush_r+0x34>
 801239a:	2b1d      	cmp	r3, #29
 801239c:	d001      	beq.n	80123a2 <__sflush_r+0xb2>
 801239e:	2b16      	cmp	r3, #22
 80123a0:	d101      	bne.n	80123a6 <__sflush_r+0xb6>
 80123a2:	602f      	str	r7, [r5, #0]
 80123a4:	e7b1      	b.n	801230a <__sflush_r+0x1a>
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123ac:	81a3      	strh	r3, [r4, #12]
 80123ae:	e7ad      	b.n	801230c <__sflush_r+0x1c>
 80123b0:	690f      	ldr	r7, [r1, #16]
 80123b2:	2f00      	cmp	r7, #0
 80123b4:	d0a9      	beq.n	801230a <__sflush_r+0x1a>
 80123b6:	0793      	lsls	r3, r2, #30
 80123b8:	680e      	ldr	r6, [r1, #0]
 80123ba:	bf08      	it	eq
 80123bc:	694b      	ldreq	r3, [r1, #20]
 80123be:	600f      	str	r7, [r1, #0]
 80123c0:	bf18      	it	ne
 80123c2:	2300      	movne	r3, #0
 80123c4:	eba6 0807 	sub.w	r8, r6, r7
 80123c8:	608b      	str	r3, [r1, #8]
 80123ca:	f1b8 0f00 	cmp.w	r8, #0
 80123ce:	dd9c      	ble.n	801230a <__sflush_r+0x1a>
 80123d0:	6a21      	ldr	r1, [r4, #32]
 80123d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123d4:	4643      	mov	r3, r8
 80123d6:	463a      	mov	r2, r7
 80123d8:	4628      	mov	r0, r5
 80123da:	47b0      	blx	r6
 80123dc:	2800      	cmp	r0, #0
 80123de:	dc06      	bgt.n	80123ee <__sflush_r+0xfe>
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123e6:	81a3      	strh	r3, [r4, #12]
 80123e8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ec:	e78e      	b.n	801230c <__sflush_r+0x1c>
 80123ee:	4407      	add	r7, r0
 80123f0:	eba8 0800 	sub.w	r8, r8, r0
 80123f4:	e7e9      	b.n	80123ca <__sflush_r+0xda>
 80123f6:	bf00      	nop
 80123f8:	20400001 	.word	0x20400001

080123fc <_fflush_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	690b      	ldr	r3, [r1, #16]
 8012400:	4605      	mov	r5, r0
 8012402:	460c      	mov	r4, r1
 8012404:	b913      	cbnz	r3, 801240c <_fflush_r+0x10>
 8012406:	2500      	movs	r5, #0
 8012408:	4628      	mov	r0, r5
 801240a:	bd38      	pop	{r3, r4, r5, pc}
 801240c:	b118      	cbz	r0, 8012416 <_fflush_r+0x1a>
 801240e:	6983      	ldr	r3, [r0, #24]
 8012410:	b90b      	cbnz	r3, 8012416 <_fflush_r+0x1a>
 8012412:	f7fe fa41 	bl	8010898 <__sinit>
 8012416:	4b14      	ldr	r3, [pc, #80]	; (8012468 <_fflush_r+0x6c>)
 8012418:	429c      	cmp	r4, r3
 801241a:	d11b      	bne.n	8012454 <_fflush_r+0x58>
 801241c:	686c      	ldr	r4, [r5, #4]
 801241e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d0ef      	beq.n	8012406 <_fflush_r+0xa>
 8012426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012428:	07d0      	lsls	r0, r2, #31
 801242a:	d404      	bmi.n	8012436 <_fflush_r+0x3a>
 801242c:	0599      	lsls	r1, r3, #22
 801242e:	d402      	bmi.n	8012436 <_fflush_r+0x3a>
 8012430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012432:	f7fe fe42 	bl	80110ba <__retarget_lock_acquire_recursive>
 8012436:	4628      	mov	r0, r5
 8012438:	4621      	mov	r1, r4
 801243a:	f7ff ff59 	bl	80122f0 <__sflush_r>
 801243e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012440:	07da      	lsls	r2, r3, #31
 8012442:	4605      	mov	r5, r0
 8012444:	d4e0      	bmi.n	8012408 <_fflush_r+0xc>
 8012446:	89a3      	ldrh	r3, [r4, #12]
 8012448:	059b      	lsls	r3, r3, #22
 801244a:	d4dd      	bmi.n	8012408 <_fflush_r+0xc>
 801244c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801244e:	f7fe fe35 	bl	80110bc <__retarget_lock_release_recursive>
 8012452:	e7d9      	b.n	8012408 <_fflush_r+0xc>
 8012454:	4b05      	ldr	r3, [pc, #20]	; (801246c <_fflush_r+0x70>)
 8012456:	429c      	cmp	r4, r3
 8012458:	d101      	bne.n	801245e <_fflush_r+0x62>
 801245a:	68ac      	ldr	r4, [r5, #8]
 801245c:	e7df      	b.n	801241e <_fflush_r+0x22>
 801245e:	4b04      	ldr	r3, [pc, #16]	; (8012470 <_fflush_r+0x74>)
 8012460:	429c      	cmp	r4, r3
 8012462:	bf08      	it	eq
 8012464:	68ec      	ldreq	r4, [r5, #12]
 8012466:	e7da      	b.n	801241e <_fflush_r+0x22>
 8012468:	080130b0 	.word	0x080130b0
 801246c:	080130d0 	.word	0x080130d0
 8012470:	08013090 	.word	0x08013090

08012474 <fiprintf>:
 8012474:	b40e      	push	{r1, r2, r3}
 8012476:	b503      	push	{r0, r1, lr}
 8012478:	4601      	mov	r1, r0
 801247a:	ab03      	add	r3, sp, #12
 801247c:	4805      	ldr	r0, [pc, #20]	; (8012494 <fiprintf+0x20>)
 801247e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012482:	6800      	ldr	r0, [r0, #0]
 8012484:	9301      	str	r3, [sp, #4]
 8012486:	f7ff fc97 	bl	8011db8 <_vfiprintf_r>
 801248a:	b002      	add	sp, #8
 801248c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012490:	b003      	add	sp, #12
 8012492:	4770      	bx	lr
 8012494:	20000190 	.word	0x20000190

08012498 <_lseek_r>:
 8012498:	b538      	push	{r3, r4, r5, lr}
 801249a:	4d07      	ldr	r5, [pc, #28]	; (80124b8 <_lseek_r+0x20>)
 801249c:	4604      	mov	r4, r0
 801249e:	4608      	mov	r0, r1
 80124a0:	4611      	mov	r1, r2
 80124a2:	2200      	movs	r2, #0
 80124a4:	602a      	str	r2, [r5, #0]
 80124a6:	461a      	mov	r2, r3
 80124a8:	f7f0 ff86 	bl	80033b8 <_lseek>
 80124ac:	1c43      	adds	r3, r0, #1
 80124ae:	d102      	bne.n	80124b6 <_lseek_r+0x1e>
 80124b0:	682b      	ldr	r3, [r5, #0]
 80124b2:	b103      	cbz	r3, 80124b6 <_lseek_r+0x1e>
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	bd38      	pop	{r3, r4, r5, pc}
 80124b8:	200020a4 	.word	0x200020a4

080124bc <__swhatbuf_r>:
 80124bc:	b570      	push	{r4, r5, r6, lr}
 80124be:	460e      	mov	r6, r1
 80124c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124c4:	2900      	cmp	r1, #0
 80124c6:	b096      	sub	sp, #88	; 0x58
 80124c8:	4614      	mov	r4, r2
 80124ca:	461d      	mov	r5, r3
 80124cc:	da07      	bge.n	80124de <__swhatbuf_r+0x22>
 80124ce:	2300      	movs	r3, #0
 80124d0:	602b      	str	r3, [r5, #0]
 80124d2:	89b3      	ldrh	r3, [r6, #12]
 80124d4:	061a      	lsls	r2, r3, #24
 80124d6:	d410      	bmi.n	80124fa <__swhatbuf_r+0x3e>
 80124d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124dc:	e00e      	b.n	80124fc <__swhatbuf_r+0x40>
 80124de:	466a      	mov	r2, sp
 80124e0:	f000 f8aa 	bl	8012638 <_fstat_r>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	dbf2      	blt.n	80124ce <__swhatbuf_r+0x12>
 80124e8:	9a01      	ldr	r2, [sp, #4]
 80124ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124f2:	425a      	negs	r2, r3
 80124f4:	415a      	adcs	r2, r3
 80124f6:	602a      	str	r2, [r5, #0]
 80124f8:	e7ee      	b.n	80124d8 <__swhatbuf_r+0x1c>
 80124fa:	2340      	movs	r3, #64	; 0x40
 80124fc:	2000      	movs	r0, #0
 80124fe:	6023      	str	r3, [r4, #0]
 8012500:	b016      	add	sp, #88	; 0x58
 8012502:	bd70      	pop	{r4, r5, r6, pc}

08012504 <__smakebuf_r>:
 8012504:	898b      	ldrh	r3, [r1, #12]
 8012506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012508:	079d      	lsls	r5, r3, #30
 801250a:	4606      	mov	r6, r0
 801250c:	460c      	mov	r4, r1
 801250e:	d507      	bpl.n	8012520 <__smakebuf_r+0x1c>
 8012510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	6123      	str	r3, [r4, #16]
 8012518:	2301      	movs	r3, #1
 801251a:	6163      	str	r3, [r4, #20]
 801251c:	b002      	add	sp, #8
 801251e:	bd70      	pop	{r4, r5, r6, pc}
 8012520:	ab01      	add	r3, sp, #4
 8012522:	466a      	mov	r2, sp
 8012524:	f7ff ffca 	bl	80124bc <__swhatbuf_r>
 8012528:	9900      	ldr	r1, [sp, #0]
 801252a:	4605      	mov	r5, r0
 801252c:	4630      	mov	r0, r6
 801252e:	f7fb fd0d 	bl	800df4c <_malloc_r>
 8012532:	b948      	cbnz	r0, 8012548 <__smakebuf_r+0x44>
 8012534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012538:	059a      	lsls	r2, r3, #22
 801253a:	d4ef      	bmi.n	801251c <__smakebuf_r+0x18>
 801253c:	f023 0303 	bic.w	r3, r3, #3
 8012540:	f043 0302 	orr.w	r3, r3, #2
 8012544:	81a3      	strh	r3, [r4, #12]
 8012546:	e7e3      	b.n	8012510 <__smakebuf_r+0xc>
 8012548:	4b0d      	ldr	r3, [pc, #52]	; (8012580 <__smakebuf_r+0x7c>)
 801254a:	62b3      	str	r3, [r6, #40]	; 0x28
 801254c:	89a3      	ldrh	r3, [r4, #12]
 801254e:	6020      	str	r0, [r4, #0]
 8012550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012554:	81a3      	strh	r3, [r4, #12]
 8012556:	9b00      	ldr	r3, [sp, #0]
 8012558:	6163      	str	r3, [r4, #20]
 801255a:	9b01      	ldr	r3, [sp, #4]
 801255c:	6120      	str	r0, [r4, #16]
 801255e:	b15b      	cbz	r3, 8012578 <__smakebuf_r+0x74>
 8012560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012564:	4630      	mov	r0, r6
 8012566:	f000 f879 	bl	801265c <_isatty_r>
 801256a:	b128      	cbz	r0, 8012578 <__smakebuf_r+0x74>
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	f023 0303 	bic.w	r3, r3, #3
 8012572:	f043 0301 	orr.w	r3, r3, #1
 8012576:	81a3      	strh	r3, [r4, #12]
 8012578:	89a0      	ldrh	r0, [r4, #12]
 801257a:	4305      	orrs	r5, r0
 801257c:	81a5      	strh	r5, [r4, #12]
 801257e:	e7cd      	b.n	801251c <__smakebuf_r+0x18>
 8012580:	08010831 	.word	0x08010831

08012584 <memmove>:
 8012584:	4288      	cmp	r0, r1
 8012586:	b510      	push	{r4, lr}
 8012588:	eb01 0402 	add.w	r4, r1, r2
 801258c:	d902      	bls.n	8012594 <memmove+0x10>
 801258e:	4284      	cmp	r4, r0
 8012590:	4623      	mov	r3, r4
 8012592:	d807      	bhi.n	80125a4 <memmove+0x20>
 8012594:	1e43      	subs	r3, r0, #1
 8012596:	42a1      	cmp	r1, r4
 8012598:	d008      	beq.n	80125ac <memmove+0x28>
 801259a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801259e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125a2:	e7f8      	b.n	8012596 <memmove+0x12>
 80125a4:	4402      	add	r2, r0
 80125a6:	4601      	mov	r1, r0
 80125a8:	428a      	cmp	r2, r1
 80125aa:	d100      	bne.n	80125ae <memmove+0x2a>
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125b6:	e7f7      	b.n	80125a8 <memmove+0x24>

080125b8 <_realloc_r>:
 80125b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ba:	4607      	mov	r7, r0
 80125bc:	4614      	mov	r4, r2
 80125be:	460e      	mov	r6, r1
 80125c0:	b921      	cbnz	r1, 80125cc <_realloc_r+0x14>
 80125c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80125c6:	4611      	mov	r1, r2
 80125c8:	f7fb bcc0 	b.w	800df4c <_malloc_r>
 80125cc:	b922      	cbnz	r2, 80125d8 <_realloc_r+0x20>
 80125ce:	f7fb fc6d 	bl	800deac <_free_r>
 80125d2:	4625      	mov	r5, r4
 80125d4:	4628      	mov	r0, r5
 80125d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125d8:	f000 f850 	bl	801267c <_malloc_usable_size_r>
 80125dc:	42a0      	cmp	r0, r4
 80125de:	d20f      	bcs.n	8012600 <_realloc_r+0x48>
 80125e0:	4621      	mov	r1, r4
 80125e2:	4638      	mov	r0, r7
 80125e4:	f7fb fcb2 	bl	800df4c <_malloc_r>
 80125e8:	4605      	mov	r5, r0
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d0f2      	beq.n	80125d4 <_realloc_r+0x1c>
 80125ee:	4631      	mov	r1, r6
 80125f0:	4622      	mov	r2, r4
 80125f2:	f7fe fd76 	bl	80110e2 <memcpy>
 80125f6:	4631      	mov	r1, r6
 80125f8:	4638      	mov	r0, r7
 80125fa:	f7fb fc57 	bl	800deac <_free_r>
 80125fe:	e7e9      	b.n	80125d4 <_realloc_r+0x1c>
 8012600:	4635      	mov	r5, r6
 8012602:	e7e7      	b.n	80125d4 <_realloc_r+0x1c>

08012604 <_read_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d07      	ldr	r5, [pc, #28]	; (8012624 <_read_r+0x20>)
 8012608:	4604      	mov	r4, r0
 801260a:	4608      	mov	r0, r1
 801260c:	4611      	mov	r1, r2
 801260e:	2200      	movs	r2, #0
 8012610:	602a      	str	r2, [r5, #0]
 8012612:	461a      	mov	r2, r3
 8012614:	f7f0 fe70 	bl	80032f8 <_read>
 8012618:	1c43      	adds	r3, r0, #1
 801261a:	d102      	bne.n	8012622 <_read_r+0x1e>
 801261c:	682b      	ldr	r3, [r5, #0]
 801261e:	b103      	cbz	r3, 8012622 <_read_r+0x1e>
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	bd38      	pop	{r3, r4, r5, pc}
 8012624:	200020a4 	.word	0x200020a4

08012628 <abort>:
 8012628:	b508      	push	{r3, lr}
 801262a:	2006      	movs	r0, #6
 801262c:	f000 f856 	bl	80126dc <raise>
 8012630:	2001      	movs	r0, #1
 8012632:	f7f0 fe57 	bl	80032e4 <_exit>
	...

08012638 <_fstat_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4d07      	ldr	r5, [pc, #28]	; (8012658 <_fstat_r+0x20>)
 801263c:	2300      	movs	r3, #0
 801263e:	4604      	mov	r4, r0
 8012640:	4608      	mov	r0, r1
 8012642:	4611      	mov	r1, r2
 8012644:	602b      	str	r3, [r5, #0]
 8012646:	f7f0 fe9c 	bl	8003382 <_fstat>
 801264a:	1c43      	adds	r3, r0, #1
 801264c:	d102      	bne.n	8012654 <_fstat_r+0x1c>
 801264e:	682b      	ldr	r3, [r5, #0]
 8012650:	b103      	cbz	r3, 8012654 <_fstat_r+0x1c>
 8012652:	6023      	str	r3, [r4, #0]
 8012654:	bd38      	pop	{r3, r4, r5, pc}
 8012656:	bf00      	nop
 8012658:	200020a4 	.word	0x200020a4

0801265c <_isatty_r>:
 801265c:	b538      	push	{r3, r4, r5, lr}
 801265e:	4d06      	ldr	r5, [pc, #24]	; (8012678 <_isatty_r+0x1c>)
 8012660:	2300      	movs	r3, #0
 8012662:	4604      	mov	r4, r0
 8012664:	4608      	mov	r0, r1
 8012666:	602b      	str	r3, [r5, #0]
 8012668:	f7f0 fe9b 	bl	80033a2 <_isatty>
 801266c:	1c43      	adds	r3, r0, #1
 801266e:	d102      	bne.n	8012676 <_isatty_r+0x1a>
 8012670:	682b      	ldr	r3, [r5, #0]
 8012672:	b103      	cbz	r3, 8012676 <_isatty_r+0x1a>
 8012674:	6023      	str	r3, [r4, #0]
 8012676:	bd38      	pop	{r3, r4, r5, pc}
 8012678:	200020a4 	.word	0x200020a4

0801267c <_malloc_usable_size_r>:
 801267c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012680:	1f18      	subs	r0, r3, #4
 8012682:	2b00      	cmp	r3, #0
 8012684:	bfbc      	itt	lt
 8012686:	580b      	ldrlt	r3, [r1, r0]
 8012688:	18c0      	addlt	r0, r0, r3
 801268a:	4770      	bx	lr

0801268c <_raise_r>:
 801268c:	291f      	cmp	r1, #31
 801268e:	b538      	push	{r3, r4, r5, lr}
 8012690:	4604      	mov	r4, r0
 8012692:	460d      	mov	r5, r1
 8012694:	d904      	bls.n	80126a0 <_raise_r+0x14>
 8012696:	2316      	movs	r3, #22
 8012698:	6003      	str	r3, [r0, #0]
 801269a:	f04f 30ff 	mov.w	r0, #4294967295
 801269e:	bd38      	pop	{r3, r4, r5, pc}
 80126a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126a2:	b112      	cbz	r2, 80126aa <_raise_r+0x1e>
 80126a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126a8:	b94b      	cbnz	r3, 80126be <_raise_r+0x32>
 80126aa:	4620      	mov	r0, r4
 80126ac:	f000 f830 	bl	8012710 <_getpid_r>
 80126b0:	462a      	mov	r2, r5
 80126b2:	4601      	mov	r1, r0
 80126b4:	4620      	mov	r0, r4
 80126b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ba:	f000 b817 	b.w	80126ec <_kill_r>
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d00a      	beq.n	80126d8 <_raise_r+0x4c>
 80126c2:	1c59      	adds	r1, r3, #1
 80126c4:	d103      	bne.n	80126ce <_raise_r+0x42>
 80126c6:	2316      	movs	r3, #22
 80126c8:	6003      	str	r3, [r0, #0]
 80126ca:	2001      	movs	r0, #1
 80126cc:	e7e7      	b.n	801269e <_raise_r+0x12>
 80126ce:	2400      	movs	r4, #0
 80126d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126d4:	4628      	mov	r0, r5
 80126d6:	4798      	blx	r3
 80126d8:	2000      	movs	r0, #0
 80126da:	e7e0      	b.n	801269e <_raise_r+0x12>

080126dc <raise>:
 80126dc:	4b02      	ldr	r3, [pc, #8]	; (80126e8 <raise+0xc>)
 80126de:	4601      	mov	r1, r0
 80126e0:	6818      	ldr	r0, [r3, #0]
 80126e2:	f7ff bfd3 	b.w	801268c <_raise_r>
 80126e6:	bf00      	nop
 80126e8:	20000190 	.word	0x20000190

080126ec <_kill_r>:
 80126ec:	b538      	push	{r3, r4, r5, lr}
 80126ee:	4d07      	ldr	r5, [pc, #28]	; (801270c <_kill_r+0x20>)
 80126f0:	2300      	movs	r3, #0
 80126f2:	4604      	mov	r4, r0
 80126f4:	4608      	mov	r0, r1
 80126f6:	4611      	mov	r1, r2
 80126f8:	602b      	str	r3, [r5, #0]
 80126fa:	f7f0 fde3 	bl	80032c4 <_kill>
 80126fe:	1c43      	adds	r3, r0, #1
 8012700:	d102      	bne.n	8012708 <_kill_r+0x1c>
 8012702:	682b      	ldr	r3, [r5, #0]
 8012704:	b103      	cbz	r3, 8012708 <_kill_r+0x1c>
 8012706:	6023      	str	r3, [r4, #0]
 8012708:	bd38      	pop	{r3, r4, r5, pc}
 801270a:	bf00      	nop
 801270c:	200020a4 	.word	0x200020a4

08012710 <_getpid_r>:
 8012710:	f7f0 bdd0 	b.w	80032b4 <_getpid>

08012714 <_init>:
 8012714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012716:	bf00      	nop
 8012718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801271a:	bc08      	pop	{r3}
 801271c:	469e      	mov	lr, r3
 801271e:	4770      	bx	lr

08012720 <_fini>:
 8012720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012722:	bf00      	nop
 8012724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012726:	bc08      	pop	{r3}
 8012728:	469e      	mov	lr, r3
 801272a:	4770      	bx	lr
