
POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  080118a0  080118a0  000218a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801246c  0801246c  00030364  2**0
                  CONTENTS
  4 .ARM          00000000  0801246c  0801246c  00030364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801246c  0801246c  00030364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801246c  0801246c  0002246c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012470  08012470  00022470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  08012474  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  20000364  080127d8  00030364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002020  080127d8  00032020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028604  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053d2  00000000  00000000  00058998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0005dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  0005f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003094c  00000000  00000000  00060d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021eee  00000000  00000000  000916d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111bf6  00000000  00000000  000b35c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c51b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ccc  00000000  00000000  001c520c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000364 	.word	0x20000364
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011884 	.word	0x08011884

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000368 	.word	0x20000368
 80001ec:	08011884 	.word	0x08011884

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4623      	mov	r3, r4
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	4603      	mov	r3, r0
 8000d28:	80bb      	strh	r3, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d36:	2b7f      	cmp	r3, #127	; 0x7f
 8000d38:	f300 8100 	bgt.w	8000f3c <GFX_draw_char+0x228>
 8000d3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d40:	2b3f      	cmp	r3, #63	; 0x3f
 8000d42:	f300 80fb 	bgt.w	8000f3c <GFX_draw_char+0x228>
 8000d46:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	440b      	add	r3, r1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f340 80ef 	ble.w	8000f3c <GFX_draw_char+0x228>
 8000d5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f340 80e6 	ble.w	8000f3c <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e0aa      	b.n	8000ecc <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	441a      	add	r2, r3
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a6f      	ldr	r2, [pc, #444]	; (8000f44 <GFX_draw_char+0x230>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	73bb      	strb	r3, [r7, #14]
 8000d8e:	e092      	b.n	8000eb6 <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d040      	beq.n	8000e1c <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d116      	bne.n	8000dd0 <GFX_draw_char+0xbc>
 8000da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d112      	bne.n	8000dd0 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4413      	add	r3, r2
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b218      	sxth	r0, r3
 8000db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	883a      	ldrh	r2, [r7, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f000 f9f7 	bl	80011bc <SSD1306_draw_pixel>
 8000dce:	e069      	b.n	8000ea4 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	fb12 f303 	smulbb	r3, r2, r3
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4413      	add	r3, r2
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b218      	sxth	r0, r3
 8000dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	fb12 f303 	smulbb	r3, r2, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b219      	sxth	r1, r3
 8000e04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e0e:	b21c      	sxth	r4, r3
 8000e10:	883b      	ldrh	r3, [r7, #0]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4623      	mov	r3, r4
 8000e16:	f000 f8d0 	bl	8000fba <GFX_draw_fill_rect>
 8000e1a:	e043      	b.n	8000ea4 <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 8000e1c:	8c3a      	ldrh	r2, [r7, #32]
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d03f      	beq.n	8000ea4 <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 8000e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d116      	bne.n	8000e5a <GFX_draw_char+0x146>
 8000e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d112      	bne.n	8000e5a <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b218      	sxth	r0, r3
 8000e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	8c3a      	ldrh	r2, [r7, #32]
 8000e52:	4619      	mov	r1, r3
 8000e54:	f000 f9b2 	bl	80011bc <SSD1306_draw_pixel>
 8000e58:	e024      	b.n	8000ea4 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	fb12 f303 	smulbb	r3, r2, r3
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b218      	sxth	r0, r3
 8000e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	fb12 f303 	smulbb	r3, r2, r3
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b219      	sxth	r1, r3
 8000e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e98:	b21c      	sxth	r4, r3
 8000e9a:	8c3b      	ldrh	r3, [r7, #32]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	f000 f88b 	bl	8000fba <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 8000ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73bb      	strb	r3, [r7, #14]
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	085b      	lsrs	r3, r3, #1
 8000eb4:	737b      	strb	r3, [r7, #13]
 8000eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f6bf af68 	bge.w	8000d90 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	f77f af50 	ble.w	8000d76 <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 8000ed6:	8c3a      	ldrh	r2, [r7, #32]
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d02f      	beq.n	8000f3e <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d10e      	bne.n	8000f04 <GFX_draw_char+0x1f0>
 8000ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10a      	bne.n	8000f04 <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b218      	sxth	r0, r3
 8000ef6:	8c3b      	ldrh	r3, [r7, #32]
 8000ef8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000efc:	2208      	movs	r2, #8
 8000efe:	f000 fad7 	bl	80014b0 <SSD1306_draw_fast_vline>
 8000f02:	e01c      	b.n	8000f3e <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8000f04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	4413      	add	r3, r2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b218      	sxth	r0, r3
 8000f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b21c      	sxth	r4, r3
 8000f2c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f30:	8c3b      	ldrh	r3, [r7, #32]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4623      	mov	r3, r4
 8000f36:	f000 f840 	bl	8000fba <GFX_draw_fill_rect>
 8000f3a:	e000      	b.n	8000f3e <GFX_draw_char+0x22a>
		return;
 8000f3c:	bf00      	nop
		}
	}
}
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	08011a64 	.word	0x08011a64

08000f48 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	60ba      	str	r2, [r7, #8]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	460b      	mov	r3, r1
 8000f58:	81bb      	strh	r3, [r7, #12]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
	while(*c)
 8000f62:	e021      	b.n	8000fa8 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b218      	sxth	r0, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	88fc      	ldrh	r4, [r7, #6]
 8000f76:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	f7ff fec2 	bl	8000d14 <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000f90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f94:	461a      	mov	r2, r3
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	75fb      	strb	r3, [r7, #23]
		c++;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1d9      	bne.n	8000f64 <GFX_draw_string+0x1c>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}

08000fba <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fba:	b590      	push	{r4, r7, lr}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4623      	mov	r3, r4
 8000fca:	80fb      	strh	r3, [r7, #6]
 8000fcc:	4603      	mov	r3, r0
 8000fce:	80bb      	strh	r3, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	e00e      	b.n	8000ffc <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000fde:	8c3b      	ldrh	r3, [r7, #32]
 8000fe0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fe4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fe8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000fec:	f000 fa60 	bl	80014b0 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	81fb      	strh	r3, [r7, #14]
 8000ffc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001000:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001004:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001008:	440b      	add	r3, r1
 800100a:	429a      	cmp	r2, r3
 800100c:	dbe7      	blt.n	8000fde <GFX_draw_fill_rect+0x24>
	}
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}

08001018 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af04      	add	r7, sp, #16
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	b29a      	uxth	r2, r3
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	2178      	movs	r1, #120	; 0x78
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <platform_write+0x34>)
 800103e:	f003 ff05 	bl	8004e4c <HAL_I2C_Mem_Write>
	return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000069c 	.word	0x2000069c

08001050 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af02      	add	r7, sp, #8
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	b29a      	uxth	r2, r3
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2178      	movs	r1, #120	; 0x78
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <platform_write_dma+0x30>)
 8001072:	f004 f919 	bl	80052a8 <HAL_I2C_Mem_Write_DMA>
	return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000069c 	.word	0x2000069c

08001084 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	2201      	movs	r2, #1
 8001092:	4619      	mov	r1, r3
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ffbf 	bl	8001018 <platform_write>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <SSD1306_init>:

bool SSD1306_init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 80010aa:	2302      	movs	r3, #2
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	238f      	movs	r3, #143	; 0x8f
 80010b0:	71bb      	strb	r3, [r7, #6]
 80010b2:	2302      	movs	r3, #2
 80010b4:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <SSD1306_init+0x114>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10d      	bne.n	80010da <SSD1306_init+0x36>
 80010be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010c2:	f00b ff9b 	bl	800cffc <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <SSD1306_init+0x114>)
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <SSD1306_init+0x114>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <SSD1306_init+0x36>
  {
    return false;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e06a      	b.n	80011b0 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 80010da:	f000 f949 	bl	8001370 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 80010de:	20ae      	movs	r0, #174	; 0xae
 80010e0:	f7ff ffd0 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 80010e4:	20d5      	movs	r0, #213	; 0xd5
 80010e6:	f7ff ffcd 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80010ea:	20e0      	movs	r0, #224	; 0xe0
 80010ec:	f7ff ffca 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80010f0:	20a8      	movs	r0, #168	; 0xa8
 80010f2:	f7ff ffc7 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80010f6:	203f      	movs	r0, #63	; 0x3f
 80010f8:	f7ff ffc4 	bl	8001084 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80010fc:	20d3      	movs	r0, #211	; 0xd3
 80010fe:	f7ff ffc1 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ffbe 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 8001108:	2040      	movs	r0, #64	; 0x40
 800110a:	f7ff ffbb 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 800110e:	208d      	movs	r0, #141	; 0x8d
 8001110:	f7ff ffb8 	bl	8001084 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <SSD1306_init+0x7a>
 800111a:	2310      	movs	r3, #16
 800111c:	e000      	b.n	8001120 <SSD1306_init+0x7c>
 800111e:	2314      	movs	r3, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffaf 	bl	8001084 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 8001126:	2020      	movs	r0, #32
 8001128:	f7ff ffac 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ffa9 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 8001132:	20b0      	movs	r0, #176	; 0xb0
 8001134:	f7ff ffa6 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 8001138:	20c8      	movs	r0, #200	; 0xc8
 800113a:	f7ff ffa3 	bl	8001084 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 800113e:	2312      	movs	r3, #18
 8001140:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <SSD1306_init+0xa8>
 8001148:	239f      	movs	r3, #159	; 0x9f
 800114a:	e000      	b.n	800114e <SSD1306_init+0xaa>
 800114c:	23cf      	movs	r3, #207	; 0xcf
 800114e:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8001150:	20da      	movs	r0, #218	; 0xda
 8001152:	f7ff ff97 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff93 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 800115e:	2081      	movs	r0, #129	; 0x81
 8001160:	f7ff ff90 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff8c 	bl	8001084 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 800116c:	20d9      	movs	r0, #217	; 0xd9
 800116e:	f7ff ff89 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <SSD1306_init+0xd8>
 8001178:	2322      	movs	r3, #34	; 0x22
 800117a:	e000      	b.n	800117e <SSD1306_init+0xda>
 800117c:	23f1      	movs	r3, #241	; 0xf1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff80 	bl	8001084 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8001184:	20db      	movs	r0, #219	; 0xdb
 8001186:	f7ff ff7d 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 800118a:	2040      	movs	r0, #64	; 0x40
 800118c:	f7ff ff7a 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8001190:	20a4      	movs	r0, #164	; 0xa4
 8001192:	f7ff ff77 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8001196:	20a6      	movs	r0, #166	; 0xa6
 8001198:	f7ff ff74 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 800119c:	202e      	movs	r0, #46	; 0x2e
 800119e:	f7ff ff71 	bl	8001084 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 80011a2:	20af      	movs	r0, #175	; 0xaf
 80011a4:	f7ff ff6e 	bl	8001084 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 80011a8:	2002      	movs	r0, #2
 80011aa:	f000 fb19 	bl	80017e0 <SSD1306_set_rotation>
  return true;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000380 	.word	0x20000380

080011bc <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	460b      	mov	r3, r1
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 80011ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f2c0 80c4 	blt.w	8001360 <SSD1306_draw_pixel+0x1a4>
 80011d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011dc:	2b7f      	cmp	r3, #127	; 0x7f
 80011de:	f300 80bf 	bgt.w	8001360 <SSD1306_draw_pixel+0x1a4>
 80011e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f2c0 80ba 	blt.w	8001360 <SSD1306_draw_pixel+0x1a4>
 80011ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011f0:	2b3f      	cmp	r3, #63	; 0x3f
 80011f2:	f300 80b5 	bgt.w	8001360 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80011f6:	f000 fb03 	bl	8001800 <SSD1306_get_rotation>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d023      	beq.n	8001248 <SSD1306_draw_pixel+0x8c>
 8001200:	2b03      	cmp	r3, #3
 8001202:	dc33      	bgt.n	800126c <SSD1306_draw_pixel+0xb0>
 8001204:	2b01      	cmp	r3, #1
 8001206:	d002      	beq.n	800120e <SSD1306_draw_pixel+0x52>
 8001208:	2b02      	cmp	r3, #2
 800120a:	d012      	beq.n	8001232 <SSD1306_draw_pixel+0x76>
 800120c:	e02e      	b.n	800126c <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 800120e:	88fa      	ldrh	r2, [r7, #6]
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	4053      	eors	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
 8001216:	88ba      	ldrh	r2, [r7, #4]
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4053      	eors	r3, r2
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	4053      	eors	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800122c:	b29b      	uxth	r3, r3
 800122e:	80fb      	strh	r3, [r7, #6]
				break;
 8001230:	e01c      	b.n	800126c <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001242:	b29b      	uxth	r3, r3
 8001244:	80bb      	strh	r3, [r7, #4]
				break;
 8001246:	e011      	b.n	800126c <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	4053      	eors	r3, r2
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	4053      	eors	r3, r2
 8001256:	80bb      	strh	r3, [r7, #4]
 8001258:	88fa      	ldrh	r2, [r7, #6]
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	4053      	eors	r3, r2
 800125e:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
				break;
 800126a:	bf00      	nop
		}

		switch (color)
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d051      	beq.n	8001316 <SSD1306_draw_pixel+0x15a>
 8001272:	2b02      	cmp	r3, #2
 8001274:	dc75      	bgt.n	8001362 <SSD1306_draw_pixel+0x1a6>
 8001276:	2b00      	cmp	r3, #0
 8001278:	d026      	beq.n	80012c8 <SSD1306_draw_pixel+0x10c>
 800127a:	2b01      	cmp	r3, #1
 800127c:	d171      	bne.n	8001362 <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <SSD1306_draw_pixel+0x1b0>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001286:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da00      	bge.n	8001290 <SSD1306_draw_pixel+0xd4>
 800128e:	3307      	adds	r3, #7
 8001290:	10db      	asrs	r3, r3, #3
 8001292:	b218      	sxth	r0, r3
 8001294:	4603      	mov	r3, r0
 8001296:	01db      	lsls	r3, r3, #7
 8001298:	440b      	add	r3, r1
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b25c      	sxtb	r4, r3
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <SSD1306_draw_pixel+0x1b0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012ba:	4602      	mov	r2, r0
 80012bc:	01d2      	lsls	r2, r2, #7
 80012be:	440a      	add	r2, r1
 80012c0:	4413      	add	r3, r2
 80012c2:	b2e2      	uxtb	r2, r4
 80012c4:	701a      	strb	r2, [r3, #0]
				break;
 80012c6:	e04c      	b.n	8001362 <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <SSD1306_draw_pixel+0x1b0>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da00      	bge.n	80012da <SSD1306_draw_pixel+0x11e>
 80012d8:	3307      	adds	r3, #7
 80012da:	10db      	asrs	r3, r3, #3
 80012dc:	b218      	sxth	r0, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	01db      	lsls	r3, r3, #7
 80012e2:	440b      	add	r3, r1
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	2101      	movs	r1, #1
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	b25c      	sxtb	r4, r3
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <SSD1306_draw_pixel+0x1b0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001308:	4602      	mov	r2, r0
 800130a:	01d2      	lsls	r2, r2, #7
 800130c:	440a      	add	r2, r1
 800130e:	4413      	add	r3, r2
 8001310:	b2e2      	uxtb	r2, r4
 8001312:	701a      	strb	r2, [r3, #0]
				break;
 8001314:	e025      	b.n	8001362 <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <SSD1306_draw_pixel+0x1b0>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800131e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	da00      	bge.n	8001328 <SSD1306_draw_pixel+0x16c>
 8001326:	3307      	adds	r3, #7
 8001328:	10db      	asrs	r3, r3, #3
 800132a:	b218      	sxth	r0, r3
 800132c:	4603      	mov	r3, r0
 800132e:	01db      	lsls	r3, r3, #7
 8001330:	440b      	add	r3, r1
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25a      	sxtb	r2, r3
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4053      	eors	r3, r2
 8001348:	b25c      	sxtb	r4, r3
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <SSD1306_draw_pixel+0x1b0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001352:	4602      	mov	r2, r0
 8001354:	01d2      	lsls	r2, r2, #7
 8001356:	440a      	add	r2, r1
 8001358:	4413      	add	r3, r2
 800135a:	b2e2      	uxtb	r2, r4
 800135c:	701a      	strb	r2, [r3, #0]
				break;
 800135e:	e000      	b.n	8001362 <SSD1306_draw_pixel+0x1a6>
		}
	}
 8001360:	bf00      	nop
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	20000380 	.word	0x20000380

08001370 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SSD1306_display_clear+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f00b fe44 	bl	800d00c <memset>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000380 	.word	0x20000380

0800138c <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800138c:	b490      	push	{r4, r7}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4603      	mov	r3, r0
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
 80013a6:	4613      	mov	r3, r2
 80013a8:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 80013aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db75      	blt.n	800149e <SSD1306_draw_fast_hline_internal+0x112>
 80013b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b6:	2b3f      	cmp	r3, #63	; 0x3f
 80013b8:	dc71      	bgt.n	800149e <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da06      	bge.n	80013d0 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4413      	add	r3, r2
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	807b      	strh	r3, [r7, #2]
			x = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 80013d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d8:	4413      	add	r3, r2
 80013da:	2b80      	cmp	r3, #128	; 0x80
 80013dc:	dd04      	ble.n	80013e8 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 80013e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd56      	ble.n	800149e <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <SSD1306_draw_fast_hline_internal+0x120>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da00      	bge.n	80013fe <SSD1306_draw_fast_hline_internal+0x72>
 80013fc:	3307      	adds	r3, #7
 80013fe:	10db      	asrs	r3, r3, #3
 8001400:	b21b      	sxth	r3, r3
 8001402:	01d9      	lsls	r1, r3, #7
 8001404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001408:	440b      	add	r3, r1
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	2201      	movs	r2, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	72fb      	strb	r3, [r7, #11]
			switch (color)
 800141c:	883b      	ldrh	r3, [r7, #0]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d034      	beq.n	800148c <SSD1306_draw_fast_hline_internal+0x100>
 8001422:	2b02      	cmp	r3, #2
 8001424:	dc3c      	bgt.n	80014a0 <SSD1306_draw_fast_hline_internal+0x114>
 8001426:	2b00      	cmp	r3, #0
 8001428:	d013      	beq.n	8001452 <SSD1306_draw_fast_hline_internal+0xc6>
 800142a:	2b01      	cmp	r3, #1
 800142c:	d138      	bne.n	80014a0 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 800142e:	e007      	b.n	8001440 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60fa      	str	r2, [r7, #12]
 8001436:	7819      	ldrb	r1, [r3, #0]
 8001438:	7afa      	ldrb	r2, [r7, #11]
 800143a:	430a      	orrs	r2, r1
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001440:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001444:	b29a      	uxth	r2, r3
 8001446:	3a01      	subs	r2, #1
 8001448:	b292      	uxth	r2, r2
 800144a:	807a      	strh	r2, [r7, #2]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ef      	bne.n	8001430 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8001450:	e026      	b.n	80014a0 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8001452:	7afb      	ldrb	r3, [r7, #11]
 8001454:	43db      	mvns	r3, r3
 8001456:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8001458:	e007      	b.n	800146a <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	60fa      	str	r2, [r7, #12]
 8001460:	7819      	ldrb	r1, [r3, #0]
 8001462:	7afa      	ldrb	r2, [r7, #11]
 8001464:	400a      	ands	r2, r1
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]
					while (w--)
 800146a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800146e:	b29a      	uxth	r2, r3
 8001470:	3a01      	subs	r2, #1
 8001472:	b292      	uxth	r2, r2
 8001474:	807a      	strh	r2, [r7, #2]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ef      	bne.n	800145a <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 800147a:	e011      	b.n	80014a0 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60fa      	str	r2, [r7, #12]
 8001482:	7819      	ldrb	r1, [r3, #0]
 8001484:	7afa      	ldrb	r2, [r7, #11]
 8001486:	404a      	eors	r2, r1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
					while (w--)
 800148c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001490:	b29a      	uxth	r2, r3
 8001492:	3a01      	subs	r2, #1
 8001494:	b292      	uxth	r2, r2
 8001496:	807a      	strh	r2, [r7, #2]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ef      	bne.n	800147c <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 800149c:	e000      	b.n	80014a0 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 800149e:	bf00      	nop
	}
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc90      	pop	{r4, r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000380 	.word	0x20000380

080014b0 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	80fb      	strh	r3, [r7, #6]
 80014c2:	4603      	mov	r3, r0
 80014c4:	80bb      	strh	r3, [r7, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	807b      	strh	r3, [r7, #2]
 80014ca:	4613      	mov	r3, r2
 80014cc:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 80014d2:	f000 f995 	bl	8001800 <SSD1306_get_rotation>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d033      	beq.n	8001544 <SSD1306_draw_fast_vline+0x94>
 80014dc:	2b03      	cmp	r3, #3
 80014de:	dc45      	bgt.n	800156c <SSD1306_draw_fast_vline+0xbc>
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d002      	beq.n	80014ea <SSD1306_draw_fast_vline+0x3a>
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d01b      	beq.n	8001520 <SSD1306_draw_fast_vline+0x70>
 80014e8:	e040      	b.n	800156c <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 80014ee:	88fa      	ldrh	r2, [r7, #6]
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	4053      	eors	r3, r2
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	88ba      	ldrh	r2, [r7, #4]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4053      	eors	r3, r2
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	4053      	eors	r3, r2
 8001504:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800150c:	b29b      	uxth	r3, r3
 800150e:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	3301      	adds	r3, #1
 800151a:	b29b      	uxth	r3, r3
 800151c:	80fb      	strh	r3, [r7, #6]
  			break;
 800151e:	e025      	b.n	800156c <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001526:	b29b      	uxth	r3, r3
 8001528:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001530:	b29b      	uxth	r3, r3
 8001532:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8001534:	88ba      	ldrh	r2, [r7, #4]
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	3301      	adds	r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001542:	e013      	b.n	800156c <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	88bb      	ldrh	r3, [r7, #4]
 800154c:	4053      	eors	r3, r2
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4053      	eors	r3, r2
 8001556:	80bb      	strh	r3, [r7, #4]
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	4053      	eors	r3, r2
 800155e:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001566:	b29b      	uxth	r3, r3
 8001568:	80bb      	strh	r3, [r7, #4]
  	    	break;
 800156a:	bf00      	nop
	}

	if (bSwap)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001578:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800157c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001580:	f7ff ff04 	bl	800138c <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8001584:	e008      	b.n	8001598 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8001586:	883b      	ldrh	r3, [r7, #0]
 8001588:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800158c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001590:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001594:	f000 f804 	bl	80015a0 <SSD1306_draw_fast_vline_internal>
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}

080015a0 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80015a0:	b490      	push	{r4, r7}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	4603      	mov	r3, r0
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 80015be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f2c0 80da 	blt.w	800177c <SSD1306_draw_fast_vline_internal+0x1dc>
 80015c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015cc:	2b7f      	cmp	r3, #127	; 0x7f
 80015ce:	f300 80d5 	bgt.w	800177c <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da06      	bge.n	80015e8 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	807b      	strh	r3, [r7, #2]
			__y = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 80015e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015f0:	4413      	add	r3, r2
 80015f2:	2b40      	cmp	r3, #64	; 0x40
 80015f4:	dd04      	ble.n	8001600 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8001600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f340 80b9 	ble.w	800177c <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	737b      	strb	r3, [r7, #13]
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8001612:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7b7a      	ldrb	r2, [r7, #13]
 8001618:	08d2      	lsrs	r2, r2, #3
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	01d1      	lsls	r1, r2, #7
 800161e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001622:	440a      	add	r2, r1
 8001624:	4413      	add	r3, r2
 8001626:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d040      	beq.n	80016b8 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	f1c3 0308 	rsb	r3, r3, #8
 800163c:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8001646:	7dfa      	ldrb	r2, [r7, #23]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	429a      	cmp	r2, r3
 800164c:	d20b      	bcs.n	8001666 <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	22ff      	movs	r2, #255	; 0xff
 8001656:	fa42 f303 	asr.w	r3, r2, r3
 800165a:	b25a      	sxtb	r2, r3
 800165c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001660:	4013      	ands	r3, r2
 8001662:	b25b      	sxtb	r3, r3
 8001664:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8001666:	883b      	ldrh	r3, [r7, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d01a      	beq.n	80016a2 <SSD1306_draw_fast_vline_internal+0x102>
 800166c:	2b02      	cmp	r3, #2
 800166e:	dc20      	bgt.n	80016b2 <SSD1306_draw_fast_vline_internal+0x112>
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <SSD1306_draw_fast_vline_internal+0xe8>
 8001674:	2b01      	cmp	r3, #1
 8001676:	d11c      	bne.n	80016b2 <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	4313      	orrs	r3, r2
 8001680:	b2da      	uxtb	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	701a      	strb	r2, [r3, #0]
						break;
 8001686:	e014      	b.n	80016b2 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001692:	43db      	mvns	r3, r3
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4013      	ands	r3, r2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	b2da      	uxtb	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	701a      	strb	r2, [r3, #0]
						break;
 80016a0:	e007      	b.n	80016b2 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	4053      	eors	r3, r2
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	701a      	strb	r2, [r3, #0]
						break;
 80016b0:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	3380      	adds	r3, #128	; 0x80
 80016b6:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 80016b8:	7dfa      	ldrb	r2, [r7, #23]
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d35d      	bcc.n	800177c <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 80016c0:	7dfa      	ldrb	r2, [r7, #23]
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b07      	cmp	r3, #7
 80016cc:	d925      	bls.n	800171a <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d10f      	bne.n	80016f4 <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	43db      	mvns	r3, r3
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3380      	adds	r3, #128	; 0x80
 80016e4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	3b08      	subs	r3, #8
 80016ea:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d8f0      	bhi.n	80016d4 <SSD1306_draw_fast_vline_internal+0x134>
 80016f2:	e012      	b.n	800171a <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 80016f4:	883b      	ldrh	r3, [r7, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SSD1306_draw_fast_vline_internal+0x15e>
 80016fa:	23ff      	movs	r3, #255	; 0xff
 80016fc:	e000      	b.n	8001700 <SSD1306_draw_fast_vline_internal+0x160>
 80016fe:	2300      	movs	r3, #0
 8001700:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	7b3a      	ldrb	r2, [r7, #12]
 8001706:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	3380      	adds	r3, #128	; 0x80
 800170c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	3b08      	subs	r3, #8
 8001712:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b07      	cmp	r3, #7
 8001718:	d8f3      	bhi.n	8001702 <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02d      	beq.n	800177c <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4a19      	ldr	r2, [pc, #100]	; (8001790 <SSD1306_draw_fast_vline_internal+0x1f0>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8001730:	883b      	ldrh	r3, [r7, #0]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d01a      	beq.n	800176c <SSD1306_draw_fast_vline_internal+0x1cc>
 8001736:	2b02      	cmp	r3, #2
 8001738:	dc21      	bgt.n	800177e <SSD1306_draw_fast_vline_internal+0x1de>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <SSD1306_draw_fast_vline_internal+0x1b2>
 800173e:	2b01      	cmp	r3, #1
 8001740:	d11d      	bne.n	800177e <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	4313      	orrs	r3, r2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	701a      	strb	r2, [r3, #0]
							break;
 8001750:	e015      	b.n	800177e <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800175c:	43db      	mvns	r3, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	4013      	ands	r3, r2
 8001762:	b25b      	sxtb	r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	701a      	strb	r2, [r3, #0]
							break;
 800176a:	e008      	b.n	800177e <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	4053      	eors	r3, r2
 8001774:	b2da      	uxtb	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	701a      	strb	r2, [r3, #0]
							break;
 800177a:	e000      	b.n	800177e <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 800177c:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bc90      	pop	{r4, r7}
 8001786:	4770      	bx	lr
 8001788:	20000380 	.word	0x20000380
 800178c:	08011f64 	.word	0x08011f64
 8001790:	08011f6c 	.word	0x08011f6c

08001794 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 80017a0:	2022      	movs	r0, #34	; 0x22
 80017a2:	f7ff fc6f 	bl	8001084 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fc6c 	bl	8001084 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80017ac:	20ff      	movs	r0, #255	; 0xff
 80017ae:	f7ff fc69 	bl	8001084 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 80017b2:	2021      	movs	r0, #33	; 0x21
 80017b4:	f7ff fc66 	bl	8001084 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff fc63 	bl	8001084 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 80017be:	207f      	movs	r0, #127	; 0x7f
 80017c0:	f7ff fc60 	bl	8001084 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SSD1306_display_repaint+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	4619      	mov	r1, r3
 80017cc:	2040      	movs	r0, #64	; 0x40
 80017ce:	f7ff fc3f 	bl	8001050 <platform_write_dma>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000380 	.word	0x20000380

080017e0 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <SSD1306_set_rotation+0x1c>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	7013      	strb	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	20000384 	.word	0x20000384

08001800 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return rotation;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <SSD1306_get_rotation+0x14>)
 8001806:	781b      	ldrb	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000384 	.word	0x20000384

08001818 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800183c:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <MX_ADC1_Init+0xe4>)
 800183e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800185a:	2204      	movs	r2, #4
 800185c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001860:	2200      	movs	r2, #0
 8001862:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001866:	2200      	movs	r2, #0
 8001868:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800186c:	2201      	movs	r2, #1
 800186e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001880:	2200      	movs	r2, #0
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_ADC1_Init+0xe0>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189a:	4817      	ldr	r0, [pc, #92]	; (80018f8 <MX_ADC1_Init+0xe0>)
 800189c:	f001 ff08 	bl	80036b0 <HAL_ADC_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80018a6:	f001 fb38 	bl	8002f1a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <MX_ADC1_Init+0xe0>)
 80018b6:	f002 fc87 	bl	80041c8 <HAL_ADCEx_MultiModeConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018c0:	f001 fb2b 	bl	8002f1a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_ADC1_Init+0xe8>)
 80018c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c8:	2306      	movs	r3, #6
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d0:	237f      	movs	r3, #127	; 0x7f
 80018d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d4:	2304      	movs	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_ADC1_Init+0xe0>)
 80018e2:	f002 f83f 	bl	8003964 <HAL_ADC_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80018ec:	f001 fb15 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200005b8 	.word	0x200005b8
 80018fc:	50040000 	.word	0x50040000
 8001900:	c7520000 	.word	0xc7520000

08001904 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_ADC_MspInit+0x38>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_ADC_MspInit+0x3c>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_ADC_MspInit+0x3c>)
 800191c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_ADC_MspInit+0x3c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	50040000 	.word	0x50040000
 8001940:	40021000 	.word	0x40021000

08001944 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	4613      	mov	r3, r2
 8001954:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fc92 	bl	8002280 <null_ptr_check>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8001960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11c      	bne.n	80019a2 <bmp280_get_regs+0x5e>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	789b      	ldrb	r3, [r3, #2]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d103      	bne.n	800197e <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197c:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685c      	ldr	r4, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7858      	ldrb	r0, [r3, #1]
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	b29b      	uxth	r3, r3
 800198a:	7bf9      	ldrb	r1, [r7, #15]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	47a0      	blx	r4
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 800199c:	23fc      	movs	r3, #252	; 0xfc
 800199e:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 80019a0:	e001      	b.n	80019a6 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80019a2:	23ff      	movs	r3, #255	; 0xff
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80019a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}

080019b2 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80019b2:	b590      	push	{r4, r7, lr}
 80019b4:	b089      	sub	sp, #36	; 0x24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d901      	bls.n	80019cc <bmp280_set_regs+0x1a>
    {
        len = 4;
 80019c8:	2304      	movs	r3, #4
 80019ca:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 80019cc:	6838      	ldr	r0, [r7, #0]
 80019ce:	f000 fc57 	bl	8002280 <null_ptr_check>
 80019d2:	4603      	mov	r3, r0
 80019d4:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80019d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d14d      	bne.n	8001a7a <bmp280_set_regs+0xc8>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d04a      	beq.n	8001a7a <bmp280_set_regs+0xc8>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d047      	beq.n	8001a7a <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d041      	beq.n	8001a74 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	789b      	ldrb	r3, [r3, #2]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d114      	bne.n	8001a28 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	76fb      	strb	r3, [r7, #27]
 8001a02:	e00d      	b.n	8001a20 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001a04:	7efb      	ldrb	r3, [r7, #27]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	7efb      	ldrb	r3, [r7, #27]
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	440b      	add	r3, r1
 8001a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001a1a:	7efb      	ldrb	r3, [r7, #27]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	76fb      	strb	r3, [r7, #27]
 8001a20:	7efa      	ldrb	r2, [r7, #27]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3ed      	bcc.n	8001a04 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d90d      	bls.n	8001a4a <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f107 0110 	add.w	r1, r7, #16
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fc42 	bl	80022c0 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	83bb      	strh	r3, [r7, #28]
 8001a48:	e001      	b.n	8001a4e <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689c      	ldr	r4, [r3, #8]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	7858      	ldrb	r0, [r3, #1]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	7819      	ldrb	r1, [r3, #0]
 8001a5a:	8bbb      	ldrh	r3, [r7, #28]
 8001a5c:	f107 0210 	add.w	r2, r7, #16
 8001a60:	47a0      	blx	r4
 8001a62:	4603      	mov	r3, r0
 8001a64:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001a66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8001a6e:	23fc      	movs	r3, #252	; 0xfc
 8001a70:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001a72:	e005      	b.n	8001a80 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001a74:	23fd      	movs	r3, #253	; 0xfd
 8001a76:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001a78:	e002      	b.n	8001a80 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001a7a:	23ff      	movs	r3, #255	; 0xff
 8001a7c:	77fb      	strb	r3, [r7, #31]
 8001a7e:	e000      	b.n	8001a82 <bmp280_set_regs+0xd0>
        if (len != 0)
 8001a80:	bf00      	nop
    }

    return rslt;
 8001a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}

08001a8e <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001a96:	23e0      	movs	r3, #224	; 0xe0
 8001a98:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001a9a:	23b6      	movs	r3, #182	; 0xb6
 8001a9c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fbee 	bl	8002280 <null_ptr_check>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001ab0:	f107 010d 	add.w	r1, r7, #13
 8001ab4:	f107 000e 	add.w	r0, r7, #14
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f7ff ff79 	bl	80019b2 <bmp280_set_regs>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2002      	movs	r0, #2
 8001aca:	4798      	blx	r3
    }

    return rslt;
 8001acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fbcb 	bl	8002280 <null_ptr_check>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d150      	bne.n	8001b98 <bmp280_init+0xc0>
    {
        while (try_count)
 8001af6:	e02d      	b.n	8001b54 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	20d0      	movs	r0, #208	; 0xd0
 8001b00:	f7ff ff20 	bl	8001944 <bmp280_get_regs>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11a      	bne.n	8001b46 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8001b14:	2b56      	cmp	r3, #86	; 0x56
 8001b16:	d007      	beq.n	8001b28 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b57      	cmp	r3, #87	; 0x57
 8001b1e:	d003      	beq.n	8001b28 <bmp280_init+0x50>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b58      	cmp	r3, #88	; 0x58
 8001b26:	d10e      	bne.n	8001b46 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffb0 	bl	8001a8e <bmp280_soft_reset>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d110      	bne.n	8001b5c <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fbec 	bl	8002318 <get_calib_param>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001b44:	e00a      	b.n	8001b5c <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	4798      	blx	r3
            --try_count;
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ce      	bne.n	8001af8 <bmp280_init+0x20>
 8001b5a:	e000      	b.n	8001b5e <bmp280_init+0x86>
                break;
 8001b5c:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8001b5e:	7bbb      	ldrb	r3, [r7, #14]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001b64:	23fe      	movs	r3, #254	; 0xfe
 8001b66:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d113      	bne.n	8001b98 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001bae:	2300      	movs	r3, #0
 8001bb0:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8001bb2:	6838      	ldr	r0, [r7, #0]
 8001bb4:	f000 fb64 	bl	8002280 <null_ptr_check>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d137      	bne.n	8001c34 <bmp280_get_config+0x90>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d034      	beq.n	8001c34 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001bca:	f107 010c 	add.w	r1, r7, #12
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	20f4      	movs	r0, #244	; 0xf4
 8001bd4:	f7ff feb6 	bl	8001944 <bmp280_get_regs>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d129      	bne.n	8001c38 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001be4:	7b3b      	ldrb	r3, [r7, #12]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001bee:	7b3b      	ldrb	r3, [r7, #12]
 8001bf0:	109b      	asrs	r3, r3, #2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001bfe:	7b7b      	ldrb	r3, [r7, #13]
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	109b      	asrs	r3, r3, #2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	332c      	adds	r3, #44	; 0x2c
 8001c2a:	6810      	ldr	r0, [r2, #0]
 8001c2c:	6018      	str	r0, [r3, #0]
 8001c2e:	7912      	ldrb	r2, [r2, #4]
 8001c30:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001c32:	e001      	b.n	8001c38 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001c34:	23ff      	movs	r3, #255	; 0xff
 8001c36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 fbfe 	bl	8002454 <conf_sensor>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	6039      	str	r1, [r7, #0]
 8001c6c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f000 fb06 	bl	8002280 <null_ptr_check>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fbe2 	bl	8002454 <conf_sensor>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f000 fae4 	bl	8002280 <null_ptr_check>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d133      	bne.n	8001d2c <bmp280_get_uncomp_data+0x8c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d030      	beq.n	8001d2c <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001cca:	f107 0108 	add.w	r1, r7, #8
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2206      	movs	r2, #6
 8001cd2:	20f7      	movs	r0, #247	; 0xf7
 8001cd4:	f7ff fe36 	bl	8001944 <bmp280_get_regs>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d120      	bne.n	8001d26 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8001ce4:	7a3b      	ldrb	r3, [r7, #8]
 8001ce6:	031a      	lsls	r2, r3, #12
 8001ce8:	7a7b      	ldrb	r3, [r7, #9]
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4313      	orrs	r3, r2
 8001cee:	7aba      	ldrb	r2, [r7, #10]
 8001cf0:	0912      	lsrs	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	031a      	lsls	r2, r3, #12
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4313      	orrs	r3, r2
 8001d04:	7b7a      	ldrb	r2, [r7, #13]
 8001d06:	0912      	lsrs	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 fc50 	bl	80025c0 <st_check_boundaries>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001d24:	e004      	b.n	8001d30 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8001d26:	23f3      	movs	r3, #243	; 0xf3
 8001d28:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001d2a:	e001      	b.n	8001d30 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001d2c:	23ff      	movs	r3, #255	; 0xff
 8001d2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001d3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d40:	b08a      	sub	sp, #40	; 0x28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa98 	bl	8002280 <null_ptr_check>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001d56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80ac 	bne.w	8001eb8 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001d60:	68b8      	ldr	r0, [r7, #8]
 8001d62:	f7fe fbef 	bl	8000544 <__aeabi_i2d>
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <bmp280_get_comp_temp_double+0x1a0>)
 8001d6c:	f7fe fd7e 	bl	800086c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	461d      	mov	r5, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8a1b      	ldrh	r3, [r3, #16]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbd1 	bl	8000524 <__aeabi_ui2d>
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b56      	ldr	r3, [pc, #344]	; (8001ee0 <bmp280_get_comp_temp_double+0x1a4>)
 8001d88:	f7fe fd70 	bl	800086c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fa88 	bl	80002a8 <__aeabi_dsub>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	461d      	mov	r5, r3
               ((double) dev->calib_param.dig_t2);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbcc 	bl	8000544 <__aeabi_i2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fc30 	bl	8000618 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f7fe fbbf 	bl	8000544 <__aeabi_i2d>
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001dce:	f7fe fd4d 	bl	800086c <__aeabi_ddiv>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8a1b      	ldrh	r3, [r3, #16]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fba0 	bl	8000524 <__aeabi_ui2d>
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <bmp280_get_comp_temp_double+0x1a8>)
 8001dea:	f7fe fd3f 	bl	800086c <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4620      	mov	r0, r4
 8001df4:	4629      	mov	r1, r5
 8001df6:	f7fe fa57 	bl	80002a8 <__aeabi_dsub>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	461d      	mov	r5, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7fe fb9e 	bl	8000544 <__aeabi_i2d>
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e10:	f7fe fd2c 	bl	800086c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4690      	mov	r8, r2
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8a1b      	ldrh	r3, [r3, #16]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb7f 	bl	8000524 <__aeabi_ui2d>
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <bmp280_get_comp_temp_double+0x1a8>)
 8001e2c:	f7fe fd1e 	bl	800086c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4640      	mov	r0, r8
 8001e36:	4649      	mov	r1, r9
 8001e38:	f7fe fa36 	bl	80002a8 <__aeabi_dsub>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fbe8 	bl	8000618 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4614      	mov	r4, r2
 8001e4e:	461d      	mov	r5, r3
            ((double) dev->calib_param.dig_t3);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb74 	bl	8000544 <__aeabi_i2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
        var2 =
 8001e60:	4620      	mov	r0, r4
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7fe fbd8 	bl	8000618 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001e70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e78:	f7fe fa18 	bl	80002ac <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7fe fe78 	bl	8000b78 <__aeabi_d2iz>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001e8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e96:	f7fe fa09 	bl	80002ac <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <bmp280_get_comp_temp_double+0x1ac>)
 8001ea8:	f7fe fce0 	bl	800086c <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
 8001eb6:	e009      	b.n	8001ecc <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001ec6:	23ef      	movs	r3, #239	; 0xef
 8001ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001ecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eda:	bf00      	nop
 8001edc:	40d00000 	.word	0x40d00000
 8001ee0:	40900000 	.word	0x40900000
 8001ee4:	40c00000 	.word	0x40c00000
 8001ee8:	40b40000 	.word	0x40b40000
 8001eec:	00000000 	.word	0x00000000

08001ef0 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8001ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ef4:	b08a      	sub	sp, #40	; 0x28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f9be 	bl	8002280 <null_ptr_check>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001f0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 8197 	bne.w	8002242 <bmp280_get_comp_pres_double+0x352>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb13 	bl	8000544 <__aeabi_i2d>
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f26:	f7fe fca1 	bl	800086c <__aeabi_ddiv>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4bc8      	ldr	r3, [pc, #800]	; (8002258 <bmp280_get_comp_pres_double+0x368>)
 8001f38:	f7fe f9b6 	bl	80002a8 <__aeabi_dsub>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f4c:	f7fe fb64 	bl	8000618 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe faf0 	bl	8000544 <__aeabi_i2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe fb54 	bl	8000618 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4bb7      	ldr	r3, [pc, #732]	; (800225c <bmp280_get_comp_pres_double+0x36c>)
 8001f7e:	f7fe fc75 	bl	800086c <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fad7 	bl	8000544 <__aeabi_i2d>
 8001f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9a:	f7fe fb3d 	bl	8000618 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	f7fe f97f 	bl	80002ac <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fb6:	f7fe f979 	bl	80002ac <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4ba6      	ldr	r3, [pc, #664]	; (8002260 <bmp280_get_comp_pres_double+0x370>)
 8001fc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fcc:	f7fe fc4e 	bl	800086c <__aeabi_ddiv>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fab0 	bl	8000544 <__aeabi_i2d>
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b9e      	ldr	r3, [pc, #632]	; (8002264 <bmp280_get_comp_pres_double+0x374>)
 8001fea:	f7fe fb15 	bl	8000618 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f7fe f959 	bl	80002ac <__adddf3>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa9b 	bl	8000544 <__aeabi_i2d>
 800200e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002012:	f7fe fb01 	bl	8000618 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002022:	f7fe faf9 	bl	8000618 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <bmp280_get_comp_pres_double+0x378>)
 8002034:	f7fe fc1a 	bl	800086c <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4614      	mov	r4, r2
 800203e:	461d      	mov	r5, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa7c 	bl	8000544 <__aeabi_i2d>
 800204c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002050:	f7fe fae2 	bl	8000618 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe f926 	bl	80002ac <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <bmp280_get_comp_pres_double+0x378>)
 800206e:	f7fe fbfd 	bl	800086c <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	e9c7 2306 	strd	r2, r3, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b77      	ldr	r3, [pc, #476]	; (800225c <bmp280_get_comp_pres_double+0x36c>)
 8002080:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002084:	f7fe fbf2 	bl	800086c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <bmp280_get_comp_pres_double+0x37c>)
 8002096:	f7fe f909 	bl	80002ac <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8adb      	ldrh	r3, [r3, #22]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa3c 	bl	8000524 <__aeabi_ui2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe fab0 	bl	8000618 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 2306 	strd	r2, r3, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 80020c0:	68b8      	ldr	r0, [r7, #8]
 80020c2:	f7fe fa2f 	bl	8000524 <__aeabi_ui2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	4968      	ldr	r1, [pc, #416]	; (8002270 <bmp280_get_comp_pres_double+0x380>)
 80020d0:	f7fe f8ea 	bl	80002a8 <__aeabi_dsub>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
        if (var1 < 0 || var1 > 0)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ea:	f7fe fd07 	bl	8000afc <__aeabi_dcmplt>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <bmp280_get_comp_pres_double+0x21c>
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002100:	f7fe fd1a 	bl	8000b38 <__aeabi_dcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8091 	beq.w	800222e <bmp280_get_comp_pres_double+0x33e>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b57      	ldr	r3, [pc, #348]	; (8002274 <bmp280_get_comp_pres_double+0x384>)
 8002118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800211c:	f7fe fba6 	bl	800086c <__aeabi_ddiv>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4620      	mov	r0, r4
 8002126:	4629      	mov	r1, r5
 8002128:	f7fe f8be 	bl	80002a8 <__aeabi_dsub>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	a346      	add	r3, pc, #280	; (adr r3, 8002250 <bmp280_get_comp_pres_double+0x360>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe fa6d 	bl	8000618 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214a:	f7fe fb8f 	bl	800086c <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	e9c1 2300 	strd	r2, r3, [r1]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9f0 	bl	8000544 <__aeabi_i2d>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe fa55 	bl	8000618 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa4c 	bl	8000618 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <bmp280_get_comp_pres_double+0x388>)
 800218e:	f7fe fb6d 	bl	800086c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	e9c7 2306 	strd	r2, r3, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9cc 	bl	8000544 <__aeabi_i2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4620      	mov	r0, r4
 80021b2:	4629      	mov	r1, r5
 80021b4:	f7fe fa30 	bl	8000618 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <bmp280_get_comp_pres_double+0x36c>)
 80021c6:	f7fe fb51 	bl	800086c <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021e0:	f7fe f864 	bl	80002ac <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4690      	mov	r8, r2
 80021ea:	4699      	mov	r9, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9a6 	bl	8000544 <__aeabi_i2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4640      	mov	r0, r8
 80021fe:	4649      	mov	r1, r9
 8002200:	f7fe f854 	bl	80002ac <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <bmp280_get_comp_pres_double+0x38c>)
 8002212:	f7fe fb2b 	bl	800086c <__aeabi_ddiv>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f7fe f845 	bl	80002ac <__adddf3>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	e9c1 2300 	strd	r2, r3, [r1]
 800222c:	e009      	b.n	8002242 <bmp280_get_comp_pres_double+0x352>
        }
        else
        {
            *pressure = 0;
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	e9c1 2300 	strd	r2, r3, [r1]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 800223c:	23ee      	movs	r3, #238	; 0xee
 800223e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8002242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002246:	4618      	mov	r0, r3
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002250:	00000000 	.word	0x00000000
 8002254:	40b86a00 	.word	0x40b86a00
 8002258:	40ef4000 	.word	0x40ef4000
 800225c:	40e00000 	.word	0x40e00000
 8002260:	40100000 	.word	0x40100000
 8002264:	40f00000 	.word	0x40f00000
 8002268:	41200000 	.word	0x41200000
 800226c:	3ff00000 	.word	0x3ff00000
 8002270:	41300000 	.word	0x41300000
 8002274:	40b00000 	.word	0x40b00000
 8002278:	41e00000 	.word	0x41e00000
 800227c:	40300000 	.word	0x40300000

08002280 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <null_ptr_check+0x26>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <null_ptr_check+0x26>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <null_ptr_check+0x26>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80022a6:	23ff      	movs	r3, #255	; 0xff
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e001      	b.n	80022b0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
 80022d2:	e016      	b.n	8002302 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	441a      	add	r2, r3
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	440b      	add	r3, r1
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	441a      	add	r2, r3
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4619      	mov	r1, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	440b      	add	r3, r1
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	3301      	adds	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
 8002302:	7dfa      	ldrb	r2, [r7, #23]
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3e4      	bcc.n	80022d4 <interleave_data+0x14>
    }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffa3 	bl	8002280 <null_ptr_check>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8002340:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002344:	2b00      	cmp	r3, #0
 8002346:	d17f      	bne.n	8002448 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2218      	movs	r2, #24
 8002350:	2088      	movs	r0, #136	; 0x88
 8002352:	f7ff faf7 	bl	8001944 <bmp280_get_regs>
 8002356:	4603      	mov	r3, r0
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 800235c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002360:	2b00      	cmp	r3, #0
 8002362:	d171      	bne.n	8002448 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8002364:	7b7b      	ldrb	r3, [r7, #13]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	7b3b      	ldrb	r3, [r7, #12]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21b      	sxth	r3, r3
 8002372:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	b21a      	sxth	r2, r3
 800237e:	7bbb      	ldrb	r3, [r7, #14]
 8002380:	b21b      	sxth	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 800238a:	7c7b      	ldrb	r3, [r7, #17]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	b21a      	sxth	r2, r3
 8002390:	7c3b      	ldrb	r3, [r7, #16]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	7cbb      	ldrb	r3, [r7, #18]
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80023b0:	7d7b      	ldrb	r3, [r7, #21]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	7d3b      	ldrb	r3, [r7, #20]
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	7dbb      	ldrb	r3, [r7, #22]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 80023d4:	7e7b      	ldrb	r3, [r7, #25]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21a      	sxth	r2, r3
 80023da:	7e3b      	ldrb	r3, [r7, #24]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 80023e6:	7efb      	ldrb	r3, [r7, #27]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	7ebb      	ldrb	r3, [r7, #26]
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 80023f8:	7f7b      	ldrb	r3, [r7, #29]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	7f3b      	ldrb	r3, [r7, #28]
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	b21a      	sxth	r2, r3
 8002410:	7fbb      	ldrb	r3, [r7, #30]
 8002412:	b21b      	sxth	r3, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 800241c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b21a      	sxth	r2, r3
 8002424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002428:	b21b      	sxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8002432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8002448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800244c:	4618      	mov	r0, r3
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8002462:	2300      	movs	r3, #0
 8002464:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8002466:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 800246a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff07 	bl	8002280 <null_ptr_check>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8002476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 8095 	bne.w	80025aa <conf_sensor+0x156>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8091 	beq.w	80025aa <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8002488:	f107 0114 	add.w	r1, r7, #20
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	20f4      	movs	r0, #244	; 0xf4
 8002492:	f7ff fa57 	bl	8001944 <bmp280_get_regs>
 8002496:	4603      	mov	r3, r0
 8002498:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 800249a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 8086 	bne.w	80025b0 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff faf2 	bl	8001a8e <bmp280_soft_reset>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80024ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d17c      	bne.n	80025b0 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80024b6:	7d3b      	ldrb	r3, [r7, #20]
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	b25a      	sxtb	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	015b      	lsls	r3, r3, #5
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 80024d0:	7d3b      	ldrb	r3, [r7, #20]
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	f023 031c 	bic.w	r3, r3, #28
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	f003 031c 	and.w	r3, r3, #28
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 80024f0:	7d7b      	ldrb	r3, [r7, #21]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	b25a      	sxtb	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	789b      	ldrb	r3, [r3, #2]
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	b25b      	sxtb	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b25b      	sxtb	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 800250a:	7d7b      	ldrb	r3, [r7, #21]
 800250c:	b25b      	sxtb	r3, r3
 800250e:	f023 031c 	bic.w	r3, r3, #28
 8002512:	b25a      	sxtb	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	78db      	ldrb	r3, [r3, #3]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f003 031c 	and.w	r3, r3, #28
 8002520:	b25b      	sxtb	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b25b      	sxtb	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 800252a:	7d7b      	ldrb	r3, [r7, #21]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	b25a      	sxtb	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	791b      	ldrb	r3, [r3, #4]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	b25b      	sxtb	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b25b      	sxtb	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8002548:	f107 0114 	add.w	r1, r7, #20
 800254c:	f107 0010 	add.w	r0, r7, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f7ff fa2d 	bl	80019b2 <bmp280_set_regs>
 8002558:	4603      	mov	r3, r0
 800255a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 800255c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d125      	bne.n	80025b0 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	332c      	adds	r3, #44	; 0x2c
 800256a:	6810      	ldr	r0, [r2, #0]
 800256c:	6018      	str	r0, [r3, #0]
 800256e:	7912      	ldrb	r2, [r2, #4]
 8002570:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8002578:	7d3b      	ldrb	r3, [r7, #20]
 800257a:	b25b      	sxtb	r3, r3
 800257c:	f023 0303 	bic.w	r3, r3, #3
 8002580:	b25a      	sxtb	r2, r3
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	b25b      	sxtb	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b25b      	sxtb	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8002594:	f107 0114 	add.w	r1, r7, #20
 8002598:	f107 0010 	add.w	r0, r7, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f7ff fa07 	bl	80019b2 <bmp280_set_regs>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80025a8:	e002      	b.n	80025b0 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80025aa:	23ff      	movs	r3, #255	; 0xff
 80025ac:	75fb      	strb	r3, [r7, #23]
 80025ae:	e000      	b.n	80025b2 <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 80025b0:	bf00      	nop
    }

    return rslt;
 80025b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dd03      	ble.n	80025dc <st_check_boundaries+0x1c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <st_check_boundaries+0x6c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	dd09      	ble.n	80025f0 <st_check_boundaries+0x30>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dd03      	ble.n	80025ea <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <st_check_boundaries+0x6c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	dd02      	ble.n	80025f0 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80025ea:	23f4      	movs	r3, #244	; 0xf4
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e015      	b.n	800261c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	dd03      	ble.n	80025fe <st_check_boundaries+0x3e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <st_check_boundaries+0x6c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	dd02      	ble.n	8002604 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 80025fe:	23f6      	movs	r3, #246	; 0xf6
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e00b      	b.n	800261c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	dd03      	ble.n	8002612 <st_check_boundaries+0x52>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <st_check_boundaries+0x6c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	dd02      	ble.n	8002618 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8002612:	23f5      	movs	r3, #245	; 0xf5
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e001      	b.n	800261c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	000fffef 	.word	0x000fffef

08002630 <BMP280_init>:
#include "bmp280.h"
#include "bmp280_add.h"

struct bmp280_dev bmp;

int8_t BMP280_init(void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	int8_t rslt;
    struct bmp280_config conf;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <BMP280_init+0xa4>)
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <BMP280_init+0xa8>)
 800263a:	60da      	str	r2, [r3, #12]

    /* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
    bmp.dev_id = (BMP280_I2C_ADDR_PRIM<<1);
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <BMP280_init+0xa4>)
 800263e:	22ee      	movs	r2, #238	; 0xee
 8002640:	705a      	strb	r2, [r3, #1]

    /* Select the interface mode as I2C */
    bmp.intf = BMP280_I2C_INTF;
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <BMP280_init+0xa4>)
 8002644:	2201      	movs	r2, #1
 8002646:	709a      	strb	r2, [r3, #2]

    /* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
    bmp.read = i2c_reg_read;
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <BMP280_init+0xa4>)
 800264a:	4a24      	ldr	r2, [pc, #144]	; (80026dc <BMP280_init+0xac>)
 800264c:	605a      	str	r2, [r3, #4]
    bmp.write = i2c_reg_write;
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <BMP280_init+0xa4>)
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <BMP280_init+0xb0>)
 8002652:	609a      	str	r2, [r3, #8]
     * bmp.dev_id = 0;
     * bmp.read = spi_reg_read;
     * bmp.write = spi_reg_write;
     * bmp.intf = BMP280_SPI_INTF;
     */
    rslt = bmp280_init(&bmp);
 8002654:	481f      	ldr	r0, [pc, #124]	; (80026d4 <BMP280_init+0xa4>)
 8002656:	f7ff fa3f 	bl	8001ad8 <bmp280_init>
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_init status", rslt);
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	4619      	mov	r1, r3
 8002664:	481f      	ldr	r0, [pc, #124]	; (80026e4 <BMP280_init+0xb4>)
 8002666:	f000 f925 	bl	80028b4 <print_rslt>

    /* Always read the current settings before writing, especially when
     * all the configuration is not modified
     */
    rslt = bmp280_get_config(&conf, &bmp);
 800266a:	463b      	mov	r3, r7
 800266c:	4919      	ldr	r1, [pc, #100]	; (80026d4 <BMP280_init+0xa4>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fa98 	bl	8001ba4 <bmp280_get_config>
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_get_config status", rslt);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4619      	mov	r1, r3
 800267e:	481a      	ldr	r0, [pc, #104]	; (80026e8 <BMP280_init+0xb8>)
 8002680:	f000 f918 	bl	80028b4 <print_rslt>

    /* configuring the temperature oversampling, filter coefficient and output data rate */
    /* Overwrite the desired settings */
    conf.filter = BMP280_FILTER_COEFF_2;
 8002684:	2301      	movs	r3, #1
 8002686:	70fb      	strb	r3, [r7, #3]

    /* Pressure oversampling set at 4x */
    conf.os_pres = BMP280_OS_4X;
 8002688:	2303      	movs	r3, #3
 800268a:	707b      	strb	r3, [r7, #1]

    /* Temperature oversampling set at 4x */
    conf.os_temp = BMP280_OS_4X;
 800268c:	2303      	movs	r3, #3
 800268e:	703b      	strb	r3, [r7, #0]

    /* Setting the output data rate as 1HZ(1000ms) */
    conf.odr = BMP280_ODR_1000_MS;
 8002690:	2305      	movs	r3, #5
 8002692:	70bb      	strb	r3, [r7, #2]
    rslt = bmp280_set_config(&conf, &bmp);
 8002694:	463b      	mov	r3, r7
 8002696:	490f      	ldr	r1, [pc, #60]	; (80026d4 <BMP280_init+0xa4>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fad3 	bl	8001c44 <bmp280_set_config>
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_set_config status", rslt);
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4810      	ldr	r0, [pc, #64]	; (80026ec <BMP280_init+0xbc>)
 80026aa:	f000 f903 	bl	80028b4 <print_rslt>

    /* Always set the power mode after setting the configuration */
    rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 80026ae:	4909      	ldr	r1, [pc, #36]	; (80026d4 <BMP280_init+0xa4>)
 80026b0:	2003      	movs	r0, #3
 80026b2:	f7ff fad6 	bl	8001c62 <bmp280_set_power_mode>
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
    print_rslt(" bmp280_set_power_mode status", rslt);
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	4619      	mov	r1, r3
 80026c0:	480b      	ldr	r0, [pc, #44]	; (80026f0 <BMP280_init+0xc0>)
 80026c2:	f000 f8f7 	bl	80028b4 <print_rslt>

    return rslt;
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000620 	.word	0x20000620
 80026d8:	0800281d 	.word	0x0800281d
 80026dc:	08002875 	.word	0x08002875
 80026e0:	08002835 	.word	0x08002835
 80026e4:	080118a0 	.word	0x080118a0
 80026e8:	080118b4 	.word	0x080118b4
 80026ec:	080118d0 	.word	0x080118d0
 80026f0:	080118ec 	.word	0x080118ec

080026f4 <BMP280_read>:

int8_t BMP280_read(void) {
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b0a2      	sub	sp, #136	; 0x88
 80026f8:	af04      	add	r7, sp, #16
     struct bmp280_uncomp_data ucomp_data;
     uint32_t pres32, pres64, temp32;
     double pres, temp;

	 /* Pobranie danych z czujnika */
     rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 80026fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026fe:	4940      	ldr	r1, [pc, #256]	; (8002800 <BMP280_read+0x10c>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff facd 	bl	8001ca0 <bmp280_get_uncomp_data>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
     // rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp);
     //  rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp);


     /* Konwersja na liczby zmiennoprzecinkowe */
    rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
 800270c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800270e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002712:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <BMP280_read+0x10c>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fbeb 	bl	8001ef0 <bmp280_get_comp_pres_double>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
 8002720:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002726:	4a36      	ldr	r2, [pc, #216]	; (8002800 <BMP280_read+0x10c>)
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fb07 	bl	8001d3c <bmp280_get_comp_temp_double>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
     /* Wyswietlenie wartosci */

     char komunikat1[20];
     char komunikat2[20];
     char usb_com[42];
     sprintf(komunikat1,"%.2f C ", temp);
 8002734:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002738:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800273c:	4931      	ldr	r1, [pc, #196]	; (8002804 <BMP280_read+0x110>)
 800273e:	f00b fbbf 	bl	800dec0 <siprintf>
     sprintf(komunikat2,"%.2f HPa ", pres/100);
 8002742:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <BMP280_read+0x114>)
 800274c:	f7fe f88e 	bl	800086c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002758:	492c      	ldr	r1, [pc, #176]	; (800280c <BMP280_read+0x118>)
 800275a:	f00b fbb1 	bl	800dec0 <siprintf>
     GFX_draw_string(0, 56, (unsigned char *)"Temperatura:", WHITE, BLACK, 1, 1);
 800275e:	2301      	movs	r3, #1
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2301      	movs	r3, #1
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	4a28      	ldr	r2, [pc, #160]	; (8002810 <BMP280_read+0x11c>)
 800276e:	2138      	movs	r1, #56	; 0x38
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe fbe9 	bl	8000f48 <GFX_draw_string>
     GFX_draw_string(0, 48, komunikat1, WHITE, BLACK, 1, 1);
 8002776:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800277a:	2301      	movs	r3, #1
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	2301      	movs	r3, #1
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	2130      	movs	r1, #48	; 0x30
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe fbdc 	bl	8000f48 <GFX_draw_string>
     GFX_draw_string(0, 40, (unsigned char *)"Cisnienie:", WHITE, BLACK, 1, 1);
 8002790:	2301      	movs	r3, #1
 8002792:	9302      	str	r3, [sp, #8]
 8002794:	2301      	movs	r3, #1
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <BMP280_read+0x120>)
 80027a0:	2128      	movs	r1, #40	; 0x28
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe fbd0 	bl	8000f48 <GFX_draw_string>
     GFX_draw_string(0, 32, komunikat2, WHITE, BLACK, 1, 1);
 80027a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027ac:	2301      	movs	r3, #1
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	2301      	movs	r3, #1
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	2300      	movs	r3, #0
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	2120      	movs	r1, #32
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fbc3 	bl	8000f48 <GFX_draw_string>
     sprintf(usb_com,"Temperatura: %.2f Ciśnienie: %.2f \r\n", temp ,pres/100);
 80027c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80027c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <BMP280_read+0x114>)
 80027d0:	f7fe f84c 	bl	800086c <__aeabi_ddiv>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	1d38      	adds	r0, r7, #4
 80027da:	e9cd 2300 	strd	r2, r3, [sp]
 80027de:	4622      	mov	r2, r4
 80027e0:	462b      	mov	r3, r5
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <BMP280_read+0x124>)
 80027e4:	f00b fb6c 	bl	800dec0 <siprintf>
     CDC_Transmit_FS(&usb_com,sizeof(usb_com));
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	212a      	movs	r1, #42	; 0x2a
 80027ec:	4618      	mov	r0, r3
 80027ee:	f009 fe69 	bl	800c4c4 <CDC_Transmit_FS>

     return rslt;
 80027f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3778      	adds	r7, #120	; 0x78
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bdb0      	pop	{r4, r5, r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000620 	.word	0x20000620
 8002804:	0801190c 	.word	0x0801190c
 8002808:	40590000 	.word	0x40590000
 800280c:	08011914 	.word	0x08011914
 8002810:	08011920 	.word	0x08011920
 8002814:	08011930 	.word	0x08011930
 8002818:	0801193c 	.word	0x0801193c

0800281c <delay_ms>:
 *  @param[in] period_ms  : the required wait time in milliseconds.
 *  @return void.
 *
 */
void delay_ms(uint32_t period_ms)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    /* Implement the delay routine according to the target machine */
	HAL_Delay(period_ms);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fd7f 	bl	8003328 <HAL_Delay>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af04      	add	r7, sp, #16
 800283a:	603a      	str	r2, [r7, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
 8002842:	460b      	mov	r3, r1
 8002844:	71bb      	strb	r3, [r7, #6]
 8002846:	4613      	mov	r3, r2
 8002848:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C write routine according to the target machine. */
	HAL_I2C_Mem_Write(&hi2c2, i2c_addr, reg_addr, 1, reg_data, length, 100);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	b299      	uxth	r1, r3
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	b29a      	uxth	r2, r3
 8002852:	2364      	movs	r3, #100	; 0x64
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	88bb      	ldrh	r3, [r7, #4]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	4803      	ldr	r0, [pc, #12]	; (8002870 <i2c_reg_write+0x3c>)
 8002862:	f002 faf3 	bl	8004e4c <HAL_I2C_Mem_Write>
    return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200006e8 	.word	0x200006e8

08002874 <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af04      	add	r7, sp, #16
 800287a:	603a      	str	r2, [r7, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
 8002882:	460b      	mov	r3, r1
 8002884:	71bb      	strb	r3, [r7, #6]
 8002886:	4613      	mov	r3, r2
 8002888:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C read routine according to the target machine. */
	HAL_I2C_Mem_Read(&hi2c2, i2c_addr, reg_addr, 1, reg_data, length, 100);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	b299      	uxth	r1, r3
 800288e:	79bb      	ldrb	r3, [r7, #6]
 8002890:	b29a      	uxth	r2, r3
 8002892:	2364      	movs	r3, #100	; 0x64
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	88bb      	ldrh	r3, [r7, #4]
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	4803      	ldr	r0, [pc, #12]	; (80028b0 <i2c_reg_read+0x3c>)
 80028a2:	f002 fbe7 	bl	8005074 <HAL_I2C_Mem_Read>
    return 0;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200006e8 	.word	0x200006e8

080028b4 <print_rslt>:
 *  @param[in] rslt     : error code returned by the API whose execution status has to be printed.
 *
 *  @return void.
 */
void print_rslt(char * api_name, int8_t rslt)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP280_OK)
 80028c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d039      	beq.n	800293c <print_rslt+0x88>
    {
    	printf("%s\t", api_name);
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	481e      	ldr	r0, [pc, #120]	; (8002944 <print_rslt+0x90>)
 80028cc:	f00b faca 	bl	800de64 <iprintf>
        if (rslt == BMP280_E_NULL_PTR)
 80028d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d106      	bne.n	80028e8 <print_rslt+0x34>
        {
            printf("Error [%d] : Null pointer error\r\n", rslt);
 80028da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028de:	4619      	mov	r1, r3
 80028e0:	4819      	ldr	r0, [pc, #100]	; (8002948 <print_rslt+0x94>)
 80028e2:	f00b fabf 	bl	800de64 <iprintf>
        {
            /* For more error codes refer "*_defs.h" */
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 80028e6:	e029      	b.n	800293c <print_rslt+0x88>
        else if (rslt == BMP280_E_COMM_FAIL)
 80028e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ec:	f113 0f04 	cmn.w	r3, #4
 80028f0:	d106      	bne.n	8002900 <print_rslt+0x4c>
            printf("Error [%d] : Bus communication failed\r\n", rslt);
 80028f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f6:	4619      	mov	r1, r3
 80028f8:	4814      	ldr	r0, [pc, #80]	; (800294c <print_rslt+0x98>)
 80028fa:	f00b fab3 	bl	800de64 <iprintf>
}
 80028fe:	e01d      	b.n	800293c <print_rslt+0x88>
        else if (rslt == BMP280_E_IMPLAUS_TEMP)
 8002900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002904:	f113 0f07 	cmn.w	r3, #7
 8002908:	d106      	bne.n	8002918 <print_rslt+0x64>
            printf("Error [%d] : Invalid Temperature\r\n", rslt);
 800290a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290e:	4619      	mov	r1, r3
 8002910:	480f      	ldr	r0, [pc, #60]	; (8002950 <print_rslt+0x9c>)
 8002912:	f00b faa7 	bl	800de64 <iprintf>
}
 8002916:	e011      	b.n	800293c <print_rslt+0x88>
        else if (rslt == BMP280_E_DEV_NOT_FOUND)
 8002918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291c:	f113 0f02 	cmn.w	r3, #2
 8002920:	d106      	bne.n	8002930 <print_rslt+0x7c>
            printf("Error [%d] : Device not found\r\n", rslt);
 8002922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002926:	4619      	mov	r1, r3
 8002928:	480a      	ldr	r0, [pc, #40]	; (8002954 <print_rslt+0xa0>)
 800292a:	f00b fa9b 	bl	800de64 <iprintf>
}
 800292e:	e005      	b.n	800293c <print_rslt+0x88>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8002930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002934:	4619      	mov	r1, r3
 8002936:	4808      	ldr	r0, [pc, #32]	; (8002958 <print_rslt+0xa4>)
 8002938:	f00b fa94 	bl	800de64 <iprintf>
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	08011964 	.word	0x08011964
 8002948:	08011968 	.word	0x08011968
 800294c:	0801198c 	.word	0x0801198c
 8002950:	080119b4 	.word	0x080119b4
 8002954:	080119d8 	.word	0x080119d8
 8002958:	080119f8 	.word	0x080119f8

0800295c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_DMA_Init+0x38>)
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <MX_DMA_Init+0x38>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6493      	str	r3, [r2, #72]	; 0x48
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_DMA_Init+0x38>)
 8002970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2010      	movs	r0, #16
 8002980:	f001 fdad 	bl	80044de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002984:	2010      	movs	r0, #16
 8002986:	f001 fdc6 	bl	8004516 <HAL_NVIC_EnableIRQ>

}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <MX_GPIO_Init>:
        * EXTI
     PG7   ------> LPUART1_TX
     PG8   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a49      	ldr	r2, [pc, #292]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	4a43      	ldr	r2, [pc, #268]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4a3d      	ldr	r2, [pc, #244]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <MX_GPIO_Init+0x140>)
 80029fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <MX_GPIO_Init+0x140>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002a0e:	f005 fa73 	bl	8007ef8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <MX_GPIO_Init+0x140>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	4a30      	ldr	r2, [pc, #192]	; (8002ad8 <MX_GPIO_Init+0x140>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <MX_GPIO_Init+0x140>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002a30:	482a      	ldr	r0, [pc, #168]	; (8002adc <MX_GPIO_Init+0x144>)
 8002a32:	f002 f963 	bl	8004cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	4829      	ldr	r0, [pc, #164]	; (8002ae0 <MX_GPIO_Init+0x148>)
 8002a3c:	f002 f95e 	bl	8004cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4823      	ldr	r0, [pc, #140]	; (8002ae4 <MX_GPIO_Init+0x14c>)
 8002a58:	f001 ffbe 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002a5c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4819      	ldr	r0, [pc, #100]	; (8002adc <MX_GPIO_Init+0x144>)
 8002a76:	f001 ffaf 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <MX_GPIO_Init+0x148>)
 8002a8e:	f001 ffa3 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a92:	2340      	movs	r3, #64	; 0x40
 8002a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <MX_GPIO_Init+0x148>)
 8002aaa:	f001 ff95 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_GPIO_Init+0x148>)
 8002acc:	f001 ff84 	bl	80049d8 <HAL_GPIO_Init>

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	48000400 	.word	0x48000400
 8002ae0:	48001800 	.word	0x48001800
 8002ae4:	48000800 	.word	0x48000800

08002ae8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <MX_I2C1_Init+0x78>)
 8002af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <MX_I2C1_Init+0x7c>)
 8002af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b24:	f002 f902 	bl	8004d2c <HAL_I2C_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b2e:	f000 f9f4 	bl	8002f1a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b32:	2100      	movs	r1, #0
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b36:	f004 f82f 	bl	8006b98 <HAL_I2CEx_ConfigAnalogFilter>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b40:	f000 f9eb 	bl	8002f1a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b44:	2100      	movs	r1, #0
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b48:	f004 f871 	bl	8006c2e <HAL_I2CEx_ConfigDigitalFilter>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b52:	f000 f9e2 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000069c 	.word	0x2000069c
 8002b60:	40005400 	.word	0x40005400
 8002b64:	00909beb 	.word	0x00909beb

08002b68 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <MX_I2C2_Init+0x78>)
 8002b70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <MX_I2C2_Init+0x7c>)
 8002b76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ba2:	480e      	ldr	r0, [pc, #56]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002ba4:	f002 f8c2 	bl	8004d2c <HAL_I2C_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002bae:	f000 f9b4 	bl	8002f1a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002bb6:	f003 ffef 	bl	8006b98 <HAL_I2CEx_ConfigAnalogFilter>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002bc0:	f000 f9ab 	bl	8002f1a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <MX_I2C2_Init+0x74>)
 8002bc8:	f004 f831 	bl	8006c2e <HAL_I2CEx_ConfigDigitalFilter>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bd2:	f000 f9a2 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200006e8 	.word	0x200006e8
 8002be0:	40005800 	.word	0x40005800
 8002be4:	00301347 	.word	0x00301347

08002be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0ae      	sub	sp, #184	; 0xb8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c00:	f107 0318 	add.w	r3, r7, #24
 8002c04:	228c      	movs	r2, #140	; 0x8c
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00a f9ff 	bl	800d00c <memset>
  if(i2cHandle->Instance==I2C1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <HAL_I2C_MspInit+0x198>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d16d      	bne.n	8002cf4 <HAL_I2C_MspInit+0x10c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c18:	2340      	movs	r3, #64	; 0x40
 8002c1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c20:	f107 0318 	add.w	r3, r7, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 ff77 	bl	8008b18 <HAL_RCCEx_PeriphCLKConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c30:	f000 f973 	bl	8002f1a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c54:	2312      	movs	r3, #18
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c66:	2304      	movs	r3, #4
 8002c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4845      	ldr	r0, [pc, #276]	; (8002d88 <HAL_I2C_MspInit+0x1a0>)
 8002c74:	f001 feb0 	bl	80049d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c82:	6593      	str	r3, [r2, #88]	; 0x58
 8002c84:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002c90:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002c92:	4a3f      	ldr	r2, [pc, #252]	; (8002d90 <HAL_I2C_MspInit+0x1a8>)
 8002c94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002c98:	2203      	movs	r2, #3
 8002c9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca8:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002cc6:	4831      	ldr	r0, [pc, #196]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cc8:	f001 fc40 	bl	800454c <HAL_DMA_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8002cd2:	f000 f922 	bl	8002f1a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <HAL_I2C_MspInit+0x1a4>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	201f      	movs	r0, #31
 8002ce8:	f001 fbf9 	bl	80044de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002cec:	201f      	movs	r0, #31
 8002cee:	f001 fc12 	bl	8004516 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002cf2:	e040      	b.n	8002d76 <HAL_I2C_MspInit+0x18e>
  else if(i2cHandle->Instance==I2C2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <HAL_I2C_MspInit+0x1ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d13b      	bne.n	8002d76 <HAL_I2C_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 ff04 	bl	8008b18 <HAL_RCCEx_PeriphCLKConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_MspInit+0x132>
      Error_Handler();
 8002d16:	f000 f900 	bl	8002f1a <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3a:	2312      	movs	r3, #18
 8002d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d56:	4619      	mov	r1, r3
 8002d58:	480b      	ldr	r0, [pc, #44]	; (8002d88 <HAL_I2C_MspInit+0x1a0>)
 8002d5a:	f001 fe3d 	bl	80049d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002d64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_I2C_MspInit+0x19c>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
}
 8002d76:	bf00      	nop
 8002d78:	37b8      	adds	r7, #184	; 0xb8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40005400 	.word	0x40005400
 8002d84:	40021000 	.word	0x40021000
 8002d88:	48000400 	.word	0x48000400
 8002d8c:	20000654 	.word	0x20000654
 8002d90:	4002006c 	.word	0x4002006c
 8002d94:	40005800 	.word	0x40005800

08002d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d9e:	f000 fa4e 	bl	800323e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002da2:	f000 f827 	bl	8002df4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002da6:	f000 f889 	bl	8002ebc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002daa:	f7ff fdf5 	bl	8002998 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dae:	f7ff fdd5 	bl	800295c <MX_DMA_Init>
  MX_I2C1_Init();
 8002db2:	f7ff fe99 	bl	8002ae8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002db6:	f7fe fd2f 	bl	8001818 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002dba:	f7ff fed5 	bl	8002b68 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8002dbe:	f009 fac3 	bl	800c348 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	  bool addrs;
HAL_StatusTypeDef result;
uint8_t i=0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  GFX_draw_string(0, 32, (unsigned char *)"Piąty", WHITE, BLACK, 1, 1);
  GFX_draw_string(0, 24, (unsigned char *)"Czwarty", WHITE, BLACK, 1, 1);
  GFX_draw_string(0, 16, (unsigned char *)"Trzeci", WHITE, BLACK, 1, 1);
  GFX_draw_string(0, 8, (unsigned char *)"Drugi", WHITE, BLACK, 1, 1);
  GFX_draw_string(0, 0, (unsigned char *)"Pierszy", WHITE, BLACK, 1, 1);*/
  SSD1306_init();
 8002dc8:	f7fe f96c 	bl	80010a4 <SSD1306_init>
  SSD1306_display_repaint();
 8002dcc:	f7fe fce2 	bl	8001794 <SSD1306_display_repaint>
  BMP280_init();
 8002dd0:	f7ff fc2e 	bl	8002630 <BMP280_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char usb_com[40];
  uint64_t cnt = 0;
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  while (1)
  {

	  BMP280_read();
 8002de0:	f7ff fc88 	bl	80026f4 <BMP280_read>
	  SSD1306_display_repaint();
 8002de4:	f7fe fcd6 	bl	8001794 <SSD1306_display_repaint>
	  HAL_Delay(1000);
 8002de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dec:	f000 fa9c 	bl	8003328 <HAL_Delay>
  {
 8002df0:	e7f6      	b.n	8002de0 <main+0x48>
	...

08002df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b096      	sub	sp, #88	; 0x58
 8002df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	2244      	movs	r2, #68	; 0x44
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f00a f902 	bl	800d00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e08:	463b      	mov	r3, r7
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002e16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e1a:	f005 f807 	bl	8007e2c <HAL_PWREx_ControlVoltageScaling>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002e24:	f000 f879 	bl	8002f1a <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e28:	f004 ffe2 	bl	8007df0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <SystemClock_Config+0xc4>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <SystemClock_Config+0xc4>)
 8002e34:	f023 0318 	bic.w	r3, r3, #24
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002e3c:	2314      	movs	r3, #20
 8002e3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e40:	2301      	movs	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e44:	2301      	movs	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002e4c:	2360      	movs	r3, #96	; 0x60
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e50:	2302      	movs	r3, #2
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002e54:	2301      	movs	r3, #1
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002e5c:	2328      	movs	r3, #40	; 0x28
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e60:	2302      	movs	r3, #2
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e64:	2302      	movs	r3, #2
 8002e66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 f851 	bl	8007f18 <HAL_RCC_OscConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002e7c:	f000 f84d 	bl	8002f1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e80:	230f      	movs	r3, #15
 8002e82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e84:	2303      	movs	r3, #3
 8002e86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e96:	463b      	mov	r3, r7
 8002e98:	2104      	movs	r1, #4
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 fc62 	bl	8008764 <HAL_RCC_ClockConfig>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002ea6:	f000 f838 	bl	8002f1a <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002eaa:	f006 f931 	bl	8009110 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002eae:	bf00      	nop
 8002eb0:	3758      	adds	r7, #88	; 0x58
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000

08002ebc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0a4      	sub	sp, #144	; 0x90
 8002ec0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	228c      	movs	r2, #140	; 0x8c
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00a f89f 	bl	800d00c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8002ece:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ed2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002edc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ee0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002eea:	2318      	movs	r3, #24
 8002eec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002efa:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8002efe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f005 fe08 	bl	8008b18 <HAL_RCCEx_PeriphCLKConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002f0e:	f000 f804 	bl	8002f1a <Error_Handler>
  }
}
 8002f12:	bf00      	nop
 8002f14:	3790      	adds	r7, #144	; 0x90
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1e:	b672      	cpsid	i
}
 8002f20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <Error_Handler+0x8>

08002f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_MspInit+0x44>)
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_MspInit+0x44>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6613      	str	r3, [r2, #96]	; 0x60
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_MspInit+0x44>)
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_MspInit+0x44>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_MspInit+0x44>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_MspInit+0x44>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f996 	bl	80032e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <DMA1_Channel6_IRQHandler+0x10>)
 8002fc6:	f001 fc1a 	bl	80047fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000654 	.word	0x20000654

08002fd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <I2C1_EV_IRQHandler+0x10>)
 8002fda:	f002 fa5b 	bl	8005494 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000069c 	.word	0x2000069c

08002fe8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <OTG_FS_IRQHandler+0x10>)
 8002fee:	f003 ffbd 	bl	8006f6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20001c08 	.word	0x20001c08

08002ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
	return 1;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <_kill>:

int _kill(int pid, int sig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003016:	f009 ffc7 	bl	800cfa8 <__errno>
 800301a:	4603      	mov	r3, r0
 800301c:	2216      	movs	r2, #22
 800301e:	601a      	str	r2, [r3, #0]
	return -1;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_exit>:

void _exit (int status)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffe7 	bl	800300c <_kill>
	while (1) {}		/* Make sure we hang here */
 800303e:	e7fe      	b.n	800303e <_exit+0x12>

08003040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e00a      	b.n	8003068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003052:	f3af 8000 	nop.w
 8003056:	4601      	mov	r1, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	b2ca      	uxtb	r2, r1
 8003060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	dbf0      	blt.n	8003052 <_read+0x12>
	}

return len;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e009      	b.n	80030a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	60ba      	str	r2, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dbf1      	blt.n	800308c <_write+0x12>
	}
	return len;
 80030a8:	687b      	ldr	r3, [r7, #4]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_close>:

int _close(int file)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030da:	605a      	str	r2, [r3, #4]
	return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_isatty>:

int _isatty(int file)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
	return 1;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	return 0;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f009 ff2c 	bl	800cfa8 <__errno>
 8003150:	4603      	mov	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <_sbrk+0x64>)
 800316c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20050000 	.word	0x20050000
 800317c:	00000400 	.word	0x00000400
 8003180:	20000388 	.word	0x20000388
 8003184:	20002020 	.word	0x20002020

08003188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <SystemInit+0x5c>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <SystemInit+0x5c>)
 8003194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <SystemInit+0x60>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <SystemInit+0x60>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <SystemInit+0x60>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <SystemInit+0x60>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <SystemInit+0x60>)
 80031b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80031b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80031bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <SystemInit+0x60>)
 80031c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <SystemInit+0x60>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <SystemInit+0x60>)
 80031cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SystemInit+0x60>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00
 80031e8:	40021000 	.word	0x40021000

080031ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031f0:	f7ff ffca 	bl	8003188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031f4:	480c      	ldr	r0, [pc, #48]	; (8003228 <LoopForever+0x6>)
  ldr r1, =_edata
 80031f6:	490d      	ldr	r1, [pc, #52]	; (800322c <LoopForever+0xa>)
  ldr r2, =_sidata
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <LoopForever+0xe>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800320c:	4c0a      	ldr	r4, [pc, #40]	; (8003238 <LoopForever+0x16>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800321a:	f009 fecb 	bl	800cfb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800321e:	f7ff fdbb 	bl	8002d98 <main>

08003222 <LoopForever>:

LoopForever:
    b LoopForever
 8003222:	e7fe      	b.n	8003222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003224:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800322c:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8003230:	08012474 	.word	0x08012474
  ldr r2, =_sbss
 8003234:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8003238:	20002020 	.word	0x20002020

0800323c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800323c:	e7fe      	b.n	800323c <ADC1_2_IRQHandler>

0800323e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f001 f93d 	bl	80044c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f80e 	bl	8003270 <HAL_InitTick>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	71fb      	strb	r3, [r7, #7]
 800325e:	e001      	b.n	8003264 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003260:	f7ff fe60 	bl	8002f24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003264:	79fb      	ldrb	r3, [r7, #7]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_InitTick+0x6c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d023      	beq.n	80032cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_InitTick+0x70>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_InitTick+0x6c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003292:	fbb3 f3f1 	udiv	r3, r3, r1
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f949 	bl	8004532 <HAL_SYSTICK_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d809      	bhi.n	80032c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f001 f913 	bl	80044de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <HAL_InitTick+0x74>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e007      	b.n	80032d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e004      	b.n	80032d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	e001      	b.n	80032d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000008 	.word	0x20000008
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004

080032e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_IncTick+0x20>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_IncTick+0x24>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_IncTick+0x24>)
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000008 	.word	0x20000008
 800330c:	20000734 	.word	0x20000734

08003310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return uwTick;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_GetTick+0x14>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000734 	.word	0x20000734

08003328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003330:	f7ff ffee 	bl	8003310 <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d005      	beq.n	800334e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_Delay+0x44>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800334e:	bf00      	nop
 8003350:	f7ff ffde 	bl	8003310 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	429a      	cmp	r2, r3
 800335e:	d8f7      	bhi.n	8003350 <HAL_Delay+0x28>
  {
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000008 	.word	0x20000008

08003370 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3360      	adds	r3, #96	; 0x60
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <LL_ADC_SetOffset+0x44>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	4313      	orrs	r3, r2
 8003408:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	03fff000 	.word	0x03fff000

08003420 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3360      	adds	r3, #96	; 0x60
 800342e:	461a      	mov	r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3360      	adds	r3, #96	; 0x60
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	431a      	orrs	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	615a      	str	r2, [r3, #20]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3330      	adds	r3, #48	; 0x30
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	4413      	add	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	211f      	movs	r1, #31
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	f003 011f 	and.w	r1, r3, #31
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	431a      	orrs	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3314      	adds	r3, #20
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	0e5b      	lsrs	r3, r3, #25
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	4413      	add	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0d1b      	lsrs	r3, r3, #20
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2107      	movs	r1, #7
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	401a      	ands	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0d1b      	lsrs	r3, r3, #20
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	431a      	orrs	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0318 	and.w	r3, r3, #24
 800357a:	4908      	ldr	r1, [pc, #32]	; (800359c <LL_ADC_SetChannelSingleDiff+0x44>)
 800357c:	40d9      	lsrs	r1, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	400b      	ands	r3, r1
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	0007ffff 	.word	0x0007ffff

080035a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80035b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6093      	str	r3, [r2, #8]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d101      	bne.n	80035de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003600:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003628:	d101      	bne.n	800362e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <LL_ADC_IsEnabled+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_ADC_IsEnabled+0x1a>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d101      	bne.n	800367a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d101      	bne.n	80036a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e139      	b.n	800393e <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fe f913 	bl	8001904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff67 	bl	80035c4 <LL_ADC_IsDeepPowerDownEnabled>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff4d 	bl	80035a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff82 	bl	8003614 <LL_ADC_IsInternalRegulatorEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d115      	bne.n	8003742 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff66 	bl	80035ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003720:	4b89      	ldr	r3, [pc, #548]	; (8003948 <HAL_ADC_Init+0x298>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	4a89      	ldr	r2, [pc, #548]	; (800394c <HAL_ADC_Init+0x29c>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	3301      	adds	r3, #1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003734:	e002      	b.n	800373c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3b01      	subs	r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f9      	bne.n	8003736 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff64 	bl	8003614 <LL_ADC_IsInternalRegulatorEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff75 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 8003778:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 80d2 	bne.w	800392c <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 80ce 	bne.w	800392c <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003798:	f043 0202 	orr.w	r2, r3, #2
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff49 	bl	800363c <LL_ADC_IsEnabled>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d115      	bne.n	80037dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b0:	4867      	ldr	r0, [pc, #412]	; (8003950 <HAL_ADC_Init+0x2a0>)
 80037b2:	f7ff ff43 	bl	800363c <LL_ADC_IsEnabled>
 80037b6:	4604      	mov	r4, r0
 80037b8:	4866      	ldr	r0, [pc, #408]	; (8003954 <HAL_ADC_Init+0x2a4>)
 80037ba:	f7ff ff3f 	bl	800363c <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	431c      	orrs	r4, r3
 80037c2:	4865      	ldr	r0, [pc, #404]	; (8003958 <HAL_ADC_Init+0x2a8>)
 80037c4:	f7ff ff3a 	bl	800363c <LL_ADC_IsEnabled>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4323      	orrs	r3, r4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4619      	mov	r1, r3
 80037d6:	4861      	ldr	r0, [pc, #388]	; (800395c <HAL_ADC_Init+0x2ac>)
 80037d8:	f7ff fdca 	bl	8003370 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7e5b      	ldrb	r3, [r3, #25]
 80037e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80037ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80037f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d106      	bne.n	8003818 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	3b01      	subs	r3, #1
 8003810:	045b      	lsls	r3, r3, #17
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_ADC_Init+0x2b0>)
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	430b      	orrs	r3, r1
 8003846:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff08 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 8003852:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff15 	bl	8003688 <LL_ADC_INJ_IsConversionOngoing>
 800385e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d140      	bne.n	80038e8 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d13d      	bne.n	80038e8 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7e1b      	ldrb	r3, [r3, #24]
 8003874:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003876:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800387e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	f023 0306 	bic.w	r3, r3, #6
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d118      	bne.n	80038d8 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038c8:	430a      	orrs	r2, r1
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
 80038d6:	e007      	b.n	80038e8 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f023 010f 	bic.w	r1, r3, #15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
 8003908:	e007      	b.n	800391a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 020f 	bic.w	r2, r2, #15
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	659a      	str	r2, [r3, #88]	; 0x58
 800392a:	e007      	b.n	800393c <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f043 0210 	orr.w	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800393c:	7ffb      	ldrb	r3, [r7, #31]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000
 800394c:	053e2d63 	.word	0x053e2d63
 8003950:	50040000 	.word	0x50040000
 8003954:	50040100 	.word	0x50040100
 8003958:	50040200 	.word	0x50040200
 800395c:	50040300 	.word	0x50040300
 8003960:	fff0c007 	.word	0xfff0c007

08003964 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0b6      	sub	sp, #216	; 0xd8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x22>
 8003982:	2302      	movs	r3, #2
 8003984:	e3e3      	b.n	800414e <HAL_ADC_ConfigChannel+0x7ea>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fe65 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 83c4 	bne.w	8004128 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d824      	bhi.n	80039f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	3b02      	subs	r3, #2
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d81b      	bhi.n	80039ea <HAL_ADC_ConfigChannel+0x86>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_ADC_ConfigChannel+0x54>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039d1 	.word	0x080039d1
 80039c0:	080039d9 	.word	0x080039d9
 80039c4:	080039e1 	.word	0x080039e1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	220c      	movs	r2, #12
 80039cc:	605a      	str	r2, [r3, #4]
          break;
 80039ce:	e011      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2212      	movs	r2, #18
 80039d4:	605a      	str	r2, [r3, #4]
          break;
 80039d6:	e00d      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2218      	movs	r2, #24
 80039dc:	605a      	str	r2, [r3, #4]
          break;
 80039de:	e009      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039e6:	605a      	str	r2, [r3, #4]
          break;
 80039e8:	e004      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2206      	movs	r2, #6
 80039ee:	605a      	str	r2, [r3, #4]
          break;
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80039f2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f7ff fd51 	bl	80034a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fe29 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 8003a10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fe35 	bl	8003688 <LL_ADC_INJ_IsConversionOngoing>
 8003a1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 81c1 	bne.w	8003dae <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 81bc 	bne.w	8003dae <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3e:	d10f      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f7ff fd58 	bl	8003500 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fd12 	bl	8003482 <LL_ADC_SetSamplingTimeCommonConfig>
 8003a5e:	e00e      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f7ff fd47 	bl	8003500 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fd02 	bl	8003482 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6919      	ldr	r1, [r3, #16]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ab0:	f7ff fc92 	bl	80033d8 <LL_ADC_SetOffset>
 8003ab4:	e17b      	b.n	8003dae <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fcaf 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x17e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fca4 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	e01e      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x1bc>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fc99 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e004      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1d4>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	e018      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x206>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	e004      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003b60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d106      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fc68 	bl	800344c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fc4c 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x244>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fc41 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	f003 021f 	and.w	r2, r3, #31
 8003ba6:	e01e      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x282>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fc36 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	e004      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x29a>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	0e9b      	lsrs	r3, r3, #26
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	e018      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x2cc>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003c22:	2320      	movs	r3, #32
 8003c24:	e004      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003c26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d106      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fc05 	bl	800344c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2102      	movs	r1, #2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fbe9 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x30a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fbde 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003c64:	4603      	mov	r3, r0
 8003c66:	0e9b      	lsrs	r3, r3, #26
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	e01e      	b.n	8003cac <HAL_ADC_ConfigChannel+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2102      	movs	r1, #2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fbd3 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003c9c:	2320      	movs	r3, #32
 8003c9e:	e004      	b.n	8003caa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003ca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x360>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	e016      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x38e>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e004      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fba4 	bl	800344c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2103      	movs	r1, #3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fb88 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x3cc>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2103      	movs	r1, #3
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fb7d 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003d26:	4603      	mov	r3, r0
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	f003 021f 	and.w	r2, r3, #31
 8003d2e:	e017      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x3fc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2103      	movs	r1, #3
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fb72 	bl	8003420 <LL_ADC_GetOffsetChannel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e003      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x414>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	e011      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x438>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003d90:	2320      	movs	r3, #32
 8003d92:	e003      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d106      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2103      	movs	r1, #3
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fb4f 	bl	800344c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fc42 	bl	800363c <LL_ADC_IsEnabled>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 8140 	bne.w	8004040 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f7ff fbc3 	bl	8003558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4a8f      	ldr	r2, [pc, #572]	; (8004014 <HAL_ADC_ConfigChannel+0x6b0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	f040 8131 	bne.w	8004040 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x4a2>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	3301      	adds	r3, #1
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2b09      	cmp	r3, #9
 8003dfc:	bf94      	ite	ls
 8003dfe:	2301      	movls	r3, #1
 8003e00:	2300      	movhi	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e019      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x4d6>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e16:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003e1e:	2320      	movs	r3, #32
 8003e20:	e003      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2b09      	cmp	r3, #9
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d079      	beq.n	8003f32 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x4f6>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	0e9b      	lsrs	r3, r3, #26
 8003e50:	3301      	adds	r3, #1
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e58:	e015      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x522>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003e72:	2320      	movs	r3, #32
 8003e74:	e003      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	069b      	lsls	r3, r3, #26
 8003e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x542>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	0e9b      	lsrs	r3, r3, #26
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	e017      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x572>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	e003      	b.n	8003eca <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	ea42 0103 	orr.w	r1, r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x598>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0e9b      	lsrs	r3, r3, #26
 8003eec:	3301      	adds	r3, #1
 8003eee:	f003 021f 	and.w	r2, r3, #31
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	051b      	lsls	r3, r3, #20
 8003efa:	e018      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x5ca>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003f14:	2320      	movs	r3, #32
 8003f16:	e003      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	e081      	b.n	8004036 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x5ea>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	0e9b      	lsrs	r3, r3, #26
 8003f44:	3301      	adds	r3, #1
 8003f46:	069b      	lsls	r3, r3, #26
 8003f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f4c:	e015      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x616>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e003      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	069b      	lsls	r3, r3, #26
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x636>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	0e9b      	lsrs	r3, r3, #26
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	e017      	b.n	8003fca <HAL_ADC_ConfigChannel+0x666>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	61fb      	str	r3, [r7, #28]
  return result;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	e003      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	ea42 0103 	orr.w	r1, r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x692>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0e9b      	lsrs	r3, r3, #26
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f003 021f 	and.w	r2, r3, #31
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	3b1e      	subs	r3, #30
 8003fee:	051b      	lsls	r3, r3, #20
 8003ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	e01e      	b.n	8004034 <HAL_ADC_ConfigChannel+0x6d0>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	613b      	str	r3, [r7, #16]
  return result;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800400e:	2320      	movs	r3, #32
 8004010:	e006      	b.n	8004020 <HAL_ADC_ConfigChannel+0x6bc>
 8004012:	bf00      	nop
 8004014:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	f003 021f 	and.w	r2, r3, #31
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	3b1e      	subs	r3, #30
 800402e:	051b      	lsls	r3, r3, #20
 8004030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004034:	430b      	orrs	r3, r1
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	6892      	ldr	r2, [r2, #8]
 800403a:	4619      	mov	r1, r3
 800403c:	f7ff fa60 	bl	8003500 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_ADC_ConfigChannel+0x7f4>)
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d07a      	beq.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800404c:	4843      	ldr	r0, [pc, #268]	; (800415c <HAL_ADC_ConfigChannel+0x7f8>)
 800404e:	f7ff f9b5 	bl	80033bc <LL_ADC_GetCommonPathInternalCh>
 8004052:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a41      	ldr	r2, [pc, #260]	; (8004160 <HAL_ADC_ConfigChannel+0x7fc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d12c      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d126      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3c      	ldr	r2, [pc, #240]	; (8004164 <HAL_ADC_ConfigChannel+0x800>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_ADC_ConfigChannel+0x71c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3b      	ldr	r2, [pc, #236]	; (8004168 <HAL_ADC_ConfigChannel+0x804>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d15d      	bne.n	800413c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004088:	4619      	mov	r1, r3
 800408a:	4834      	ldr	r0, [pc, #208]	; (800415c <HAL_ADC_ConfigChannel+0x7f8>)
 800408c:	f7ff f983 	bl	8003396 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004090:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_ADC_ConfigChannel+0x808>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	4a36      	ldr	r2, [pc, #216]	; (8004170 <HAL_ADC_ConfigChannel+0x80c>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b8:	e040      	b.n	800413c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2d      	ldr	r2, [pc, #180]	; (8004174 <HAL_ADC_ConfigChannel+0x810>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d118      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x792>
 80040c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d112      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_ADC_ConfigChannel+0x800>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x780>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a22      	ldr	r2, [pc, #136]	; (8004168 <HAL_ADC_ConfigChannel+0x804>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d12d      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ec:	4619      	mov	r1, r3
 80040ee:	481b      	ldr	r0, [pc, #108]	; (800415c <HAL_ADC_ConfigChannel+0x7f8>)
 80040f0:	f7ff f951 	bl	8003396 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040f4:	e024      	b.n	8004140 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_ADC_ConfigChannel+0x814>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d120      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11a      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <HAL_ADC_ConfigChannel+0x800>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d115      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800411a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800411e:	4619      	mov	r1, r3
 8004120:	480e      	ldr	r0, [pc, #56]	; (800415c <HAL_ADC_ConfigChannel+0x7f8>)
 8004122:	f7ff f938 	bl	8003396 <LL_ADC_SetCommonPathInternalCh>
 8004126:	e00c      	b.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800413a:	e002      	b.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004140:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800414a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800414e:	4618      	mov	r0, r3
 8004150:	37d8      	adds	r7, #216	; 0xd8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	80080000 	.word	0x80080000
 800415c:	50040300 	.word	0x50040300
 8004160:	c7520000 	.word	0xc7520000
 8004164:	50040000 	.word	0x50040000
 8004168:	50040200 	.word	0x50040200
 800416c:	20000000 	.word	0x20000000
 8004170:	053e2d63 	.word	0x053e2d63
 8004174:	cb840000 	.word	0xcb840000
 8004178:	80000001 	.word	0x80000001

0800417c <LL_ADC_IsEnabled>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <LL_ADC_IsEnabled+0x18>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_ADC_IsEnabled+0x1a>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d101      	bne.n	80041ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b0a1      	sub	sp, #132	; 0x84
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e093      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80041ee:	2300      	movs	r3, #0
 80041f0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80041f2:	2300      	movs	r3, #0
 80041f4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a47      	ldr	r2, [pc, #284]	; (8004318 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d102      	bne.n	8004206 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004200:	4b46      	ldr	r3, [pc, #280]	; (800431c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e001      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e072      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ffb9 	bl	80041a2 <LL_ADC_REG_IsConversionOngoing>
 8004230:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ffb3 	bl	80041a2 <LL_ADC_REG_IsConversionOngoing>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d154      	bne.n	80042ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	2b00      	cmp	r3, #0
 8004246:	d151      	bne.n	80042ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800424a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02c      	beq.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004266:	035b      	lsls	r3, r3, #13
 8004268:	430b      	orrs	r3, r1
 800426a:	431a      	orrs	r2, r3
 800426c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004270:	4829      	ldr	r0, [pc, #164]	; (8004318 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004272:	f7ff ff83 	bl	800417c <LL_ADC_IsEnabled>
 8004276:	4604      	mov	r4, r0
 8004278:	4828      	ldr	r0, [pc, #160]	; (800431c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800427a:	f7ff ff7f 	bl	800417c <LL_ADC_IsEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	431c      	orrs	r4, r3
 8004282:	4828      	ldr	r0, [pc, #160]	; (8004324 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004284:	f7ff ff7a 	bl	800417c <LL_ADC_IsEnabled>
 8004288:	4603      	mov	r3, r0
 800428a:	4323      	orrs	r3, r4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d137      	bne.n	8004300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004298:	f023 030f 	bic.w	r3, r3, #15
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	6811      	ldr	r1, [r2, #0]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042ac:	e028      	b.n	8004300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ba:	4817      	ldr	r0, [pc, #92]	; (8004318 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80042bc:	f7ff ff5e 	bl	800417c <LL_ADC_IsEnabled>
 80042c0:	4604      	mov	r4, r0
 80042c2:	4816      	ldr	r0, [pc, #88]	; (800431c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80042c4:	f7ff ff5a 	bl	800417c <LL_ADC_IsEnabled>
 80042c8:	4603      	mov	r3, r0
 80042ca:	431c      	orrs	r4, r3
 80042cc:	4815      	ldr	r0, [pc, #84]	; (8004324 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80042ce:	f7ff ff55 	bl	800417c <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4323      	orrs	r3, r4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d112      	bne.n	8004300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80042da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80042e2:	f023 030f 	bic.w	r3, r3, #15
 80042e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042ea:	e009      	b.n	8004300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042fe:	e000      	b.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800430a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800430e:	4618      	mov	r0, r3
 8004310:	3784      	adds	r7, #132	; 0x84
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	bf00      	nop
 8004318:	50040000 	.word	0x50040000
 800431c:	50040100 	.word	0x50040100
 8004320:	50040300 	.word	0x50040300
 8004324:	50040200 	.word	0x50040200

08004328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <__NVIC_SetPriorityGrouping+0x44>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004344:	4013      	ands	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800435a:	4a04      	ldr	r2, [pc, #16]	; (800436c <__NVIC_SetPriorityGrouping+0x44>)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	60d3      	str	r3, [r2, #12]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <__NVIC_GetPriorityGrouping+0x18>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 0307 	and.w	r3, r3, #7
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	db0b      	blt.n	80043b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	f003 021f 	and.w	r2, r3, #31
 80043a4:	4907      	ldr	r1, [pc, #28]	; (80043c4 <__NVIC_EnableIRQ+0x38>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2001      	movs	r0, #1
 80043ae:	fa00 f202 	lsl.w	r2, r0, r2
 80043b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	e000e100 	.word	0xe000e100

080043c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	6039      	str	r1, [r7, #0]
 80043d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db0a      	blt.n	80043f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	490c      	ldr	r1, [pc, #48]	; (8004414 <__NVIC_SetPriority+0x4c>)
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	0112      	lsls	r2, r2, #4
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	440b      	add	r3, r1
 80043ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f0:	e00a      	b.n	8004408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4908      	ldr	r1, [pc, #32]	; (8004418 <__NVIC_SetPriority+0x50>)
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	3b04      	subs	r3, #4
 8004400:	0112      	lsls	r2, r2, #4
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	440b      	add	r3, r1
 8004406:	761a      	strb	r2, [r3, #24]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000e100 	.word	0xe000e100
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f1c3 0307 	rsb	r3, r3, #7
 8004436:	2b04      	cmp	r3, #4
 8004438:	bf28      	it	cs
 800443a:	2304      	movcs	r3, #4
 800443c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3304      	adds	r3, #4
 8004442:	2b06      	cmp	r3, #6
 8004444:	d902      	bls.n	800444c <NVIC_EncodePriority+0x30>
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3b03      	subs	r3, #3
 800444a:	e000      	b.n	800444e <NVIC_EncodePriority+0x32>
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004450:	f04f 32ff 	mov.w	r2, #4294967295
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	401a      	ands	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004464:	f04f 31ff 	mov.w	r1, #4294967295
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	43d9      	mvns	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004474:	4313      	orrs	r3, r2
         );
}
 8004476:	4618      	mov	r0, r3
 8004478:	3724      	adds	r7, #36	; 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004494:	d301      	bcc.n	800449a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <SysTick_Config+0x40>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044a2:	210f      	movs	r1, #15
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f7ff ff8e 	bl	80043c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <SysTick_Config+0x40>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <SysTick_Config+0x40>)
 80044b4:	2207      	movs	r2, #7
 80044b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000e010 	.word	0xe000e010

080044c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff29 	bl	8004328 <__NVIC_SetPriorityGrouping>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044f0:	f7ff ff3e 	bl	8004370 <__NVIC_GetPriorityGrouping>
 80044f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7ff ff8e 	bl	800441c <NVIC_EncodePriority>
 8004500:	4602      	mov	r2, r0
 8004502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff5d 	bl	80043c8 <__NVIC_SetPriority>
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff31 	bl	800438c <__NVIC_EnableIRQ>
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ffa2 	bl	8004484 <SysTick_Config>
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e098      	b.n	8004690 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	4b4d      	ldr	r3, [pc, #308]	; (800469c <HAL_DMA_Init+0x150>)
 8004566:	429a      	cmp	r2, r3
 8004568:	d80f      	bhi.n	800458a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <HAL_DMA_Init+0x154>)
 8004572:	4413      	add	r3, r2
 8004574:	4a4b      	ldr	r2, [pc, #300]	; (80046a4 <HAL_DMA_Init+0x158>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	009a      	lsls	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <HAL_DMA_Init+0x15c>)
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
 8004588:	e00e      	b.n	80045a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_DMA_Init+0x160>)
 8004592:	4413      	add	r3, r2
 8004594:	4a43      	ldr	r2, [pc, #268]	; (80046a4 <HAL_DMA_Init+0x158>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	009a      	lsls	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_DMA_Init+0x164>)
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004602:	d039      	beq.n	8004678 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <HAL_DMA_Init+0x15c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d11a      	bne.n	8004644 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_DMA_Init+0x168>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f003 031c 	and.w	r3, r3, #28
 800461a:	210f      	movs	r1, #15
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	4924      	ldr	r1, [pc, #144]	; (80046b4 <HAL_DMA_Init+0x168>)
 8004624:	4013      	ands	r3, r2
 8004626:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_DMA_Init+0x168>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	f003 031c 	and.w	r3, r3, #28
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	491d      	ldr	r1, [pc, #116]	; (80046b4 <HAL_DMA_Init+0x168>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
 8004642:	e019      	b.n	8004678 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_DMA_Init+0x16c>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	f003 031c 	and.w	r3, r3, #28
 8004650:	210f      	movs	r1, #15
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	4917      	ldr	r1, [pc, #92]	; (80046b8 <HAL_DMA_Init+0x16c>)
 800465a:	4013      	ands	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <HAL_DMA_Init+0x16c>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6859      	ldr	r1, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f003 031c 	and.w	r3, r3, #28
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	4911      	ldr	r1, [pc, #68]	; (80046b8 <HAL_DMA_Init+0x16c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40020407 	.word	0x40020407
 80046a0:	bffdfff8 	.word	0xbffdfff8
 80046a4:	cccccccd 	.word	0xcccccccd
 80046a8:	40020000 	.word	0x40020000
 80046ac:	bffdfbf8 	.word	0xbffdfbf8
 80046b0:	40020400 	.word	0x40020400
 80046b4:	400200a8 	.word	0x400200a8
 80046b8:	400204a8 	.word	0x400204a8

080046bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_Start_IT+0x20>
 80046d8:	2302      	movs	r3, #2
 80046da:	e04b      	b.n	8004774 <HAL_DMA_Start_IT+0xb8>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d13a      	bne.n	8004766 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f92f 	bl	8004978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 020e 	orr.w	r2, r2, #14
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e00f      	b.n	8004754 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 020a 	orr.w	r2, r2, #10
 8004752:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e005      	b.n	8004772 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d005      	beq.n	80047a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2204      	movs	r2, #4
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	e029      	b.n	80047f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 020e 	bic.w	r2, r2, #14
 80047ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f003 021c 	and.w	r2, r3, #28
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f202 	lsl.w	r2, r1, r2
 80047d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
    }
  }
  return status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f003 031c 	and.w	r3, r3, #28
 800481e:	2204      	movs	r2, #4
 8004820:	409a      	lsls	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d026      	beq.n	8004878 <HAL_DMA_IRQHandler+0x7a>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d021      	beq.n	8004878 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0204 	bic.w	r2, r2, #4
 8004850:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f003 021c 	and.w	r2, r3, #28
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2104      	movs	r1, #4
 8004860:	fa01 f202 	lsl.w	r2, r1, r2
 8004864:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	2b00      	cmp	r3, #0
 800486c:	d071      	beq.n	8004952 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004876:	e06c      	b.n	8004952 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f003 031c 	and.w	r3, r3, #28
 8004880:	2202      	movs	r2, #2
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d02e      	beq.n	80048ea <HAL_DMA_IRQHandler+0xec>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d029      	beq.n	80048ea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 020a 	bic.w	r2, r2, #10
 80048b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c0:	f003 021c 	and.w	r2, r3, #28
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	2102      	movs	r1, #2
 80048ca:	fa01 f202 	lsl.w	r2, r1, r2
 80048ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d038      	beq.n	8004952 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048e8:	e033      	b.n	8004952 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f003 031c 	and.w	r3, r3, #28
 80048f2:	2208      	movs	r2, #8
 80048f4:	409a      	lsls	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02a      	beq.n	8004954 <HAL_DMA_IRQHandler+0x156>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d025      	beq.n	8004954 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 020e 	bic.w	r2, r2, #14
 8004916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	f003 021c 	and.w	r2, r3, #28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f202 	lsl.w	r2, r1, r2
 800492a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004952:	bf00      	nop
 8004954:	bf00      	nop
}
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800496a:	b2db      	uxtb	r3, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	f003 021c 	and.w	r2, r3, #28
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f202 	lsl.w	r2, r1, r2
 8004998:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d108      	bne.n	80049bc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ba:	e007      	b.n	80049cc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049e6:	e166      	b.n	8004cb6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8158 	beq.w	8004cb0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d005      	beq.n	8004a18 <HAL_GPIO_Init+0x40>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d130      	bne.n	8004a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	2203      	movs	r2, #3
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a4e:	2201      	movs	r2, #1
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0201 	and.w	r2, r3, #1
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d017      	beq.n	8004ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	2203      	movs	r2, #3
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d123      	bne.n	8004b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	08da      	lsrs	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3208      	adds	r2, #8
 8004aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	6939      	ldr	r1, [r7, #16]
 8004b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80b2 	beq.w	8004cb0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4c:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <HAL_GPIO_Init+0x2fc>)
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	4a60      	ldr	r2, [pc, #384]	; (8004cd4 <HAL_GPIO_Init+0x2fc>)
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	6613      	str	r3, [r2, #96]	; 0x60
 8004b58:	4b5e      	ldr	r3, [pc, #376]	; (8004cd4 <HAL_GPIO_Init+0x2fc>)
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b64:	4a5c      	ldr	r2, [pc, #368]	; (8004cd8 <HAL_GPIO_Init+0x300>)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	220f      	movs	r2, #15
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4013      	ands	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b8e:	d02b      	beq.n	8004be8 <HAL_GPIO_Init+0x210>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a52      	ldr	r2, [pc, #328]	; (8004cdc <HAL_GPIO_Init+0x304>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d025      	beq.n	8004be4 <HAL_GPIO_Init+0x20c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_GPIO_Init+0x308>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01f      	beq.n	8004be0 <HAL_GPIO_Init+0x208>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_GPIO_Init+0x30c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d019      	beq.n	8004bdc <HAL_GPIO_Init+0x204>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a4f      	ldr	r2, [pc, #316]	; (8004ce8 <HAL_GPIO_Init+0x310>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_GPIO_Init+0x200>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <HAL_GPIO_Init+0x314>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_GPIO_Init+0x1fc>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a4d      	ldr	r2, [pc, #308]	; (8004cf0 <HAL_GPIO_Init+0x318>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <HAL_GPIO_Init+0x1f8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a4c      	ldr	r2, [pc, #304]	; (8004cf4 <HAL_GPIO_Init+0x31c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <HAL_GPIO_Init+0x1f4>
 8004bc8:	2307      	movs	r3, #7
 8004bca:	e00e      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	e00c      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	e00a      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004bd4:	2305      	movs	r3, #5
 8004bd6:	e008      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	e006      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e004      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e002      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_GPIO_Init+0x212>
 8004be8:	2300      	movs	r3, #0
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	f002 0203 	and.w	r2, r2, #3
 8004bf0:	0092      	lsls	r2, r2, #2
 8004bf2:	4093      	lsls	r3, r2
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bfa:	4937      	ldr	r1, [pc, #220]	; (8004cd8 <HAL_GPIO_Init+0x300>)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	3302      	adds	r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c2c:	4a32      	ldr	r2, [pc, #200]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c56:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c5c:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <HAL_GPIO_Init+0x320>)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f ae91 	bne.w	80049e8 <HAL_GPIO_Init+0x10>
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	48000400 	.word	0x48000400
 8004ce0:	48000800 	.word	0x48000800
 8004ce4:	48000c00 	.word	0x48000c00
 8004ce8:	48001000 	.word	0x48001000
 8004cec:	48001400 	.word	0x48001400
 8004cf0:	48001800 	.word	0x48001800
 8004cf4:	48001c00 	.word	0x48001c00
 8004cf8:	40010400 	.word	0x40010400

08004cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d0c:	787b      	ldrb	r3, [r7, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d18:	e002      	b.n	8004d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e081      	b.n	8004e42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd ff48 	bl	8002be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	; 0x24
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	e006      	b.n	8004db4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d104      	bne.n	8004dc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69d9      	ldr	r1, [r3, #28]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	813b      	strh	r3, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	f040 80f9 	bne.w	8005066 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_I2C_Mem_Write+0x34>
 8004e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0ed      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_I2C_Mem_Write+0x4e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e0e6      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ea2:	f7fe fa35 	bl	8003310 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2319      	movs	r3, #25
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f001 fbd2 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0d1      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	; 0x21
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eec:	88f8      	ldrh	r0, [r7, #6]
 8004eee:	893a      	ldrh	r2, [r7, #8]
 8004ef0:	8979      	ldrh	r1, [r7, #10]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4603      	mov	r3, r0
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fe21 	bl	8005b44 <I2C_RequestMemoryWrite>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0a9      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2bff      	cmp	r3, #255	; 0xff
 8004f1c:	d90e      	bls.n	8004f3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	22ff      	movs	r2, #255	; 0xff
 8004f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	8979      	ldrh	r1, [r7, #10]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f001 fd3b 	bl	80069b0 <I2C_TransferConfig>
 8004f3a:	e00f      	b.n	8004f5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	8979      	ldrh	r1, [r7, #10]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f001 fd2a 	bl	80069b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f001 fbbc 	bl	80066de <I2C_WaitOnTXISFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e07b      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d034      	beq.n	8005014 <HAL_I2C_Mem_Write+0x1c8>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d130      	bne.n	8005014 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f001 fb4e 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e04d      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2bff      	cmp	r3, #255	; 0xff
 8004fd4:	d90e      	bls.n	8004ff4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	22ff      	movs	r2, #255	; 0xff
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	8979      	ldrh	r1, [r7, #10]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f001 fcdf 	bl	80069b0 <I2C_TransferConfig>
 8004ff2:	e00f      	b.n	8005014 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005002:	b2da      	uxtb	r2, r3
 8005004:	8979      	ldrh	r1, [r7, #10]
 8005006:	2300      	movs	r3, #0
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f001 fcce 	bl	80069b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d19e      	bne.n	8004f5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f001 fb9b 	bl	800675e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e01a      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2220      	movs	r2, #32
 8005038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6859      	ldr	r1, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <HAL_I2C_Mem_Write+0x224>)
 8005046:	400b      	ands	r3, r1
 8005048:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	fe00e800 	.word	0xfe00e800

08005074 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	4608      	mov	r0, r1
 800507e:	4611      	mov	r1, r2
 8005080:	461a      	mov	r2, r3
 8005082:	4603      	mov	r3, r0
 8005084:	817b      	strh	r3, [r7, #10]
 8005086:	460b      	mov	r3, r1
 8005088:	813b      	strh	r3, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b20      	cmp	r3, #32
 8005098:	f040 80fd 	bne.w	8005296 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_I2C_Mem_Read+0x34>
 80050a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0f1      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_I2C_Mem_Read+0x4e>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0ea      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050ca:	f7fe f921 	bl	8003310 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2319      	movs	r3, #25
 80050d6:	2201      	movs	r2, #1
 80050d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f001 fabe 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0d5      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2222      	movs	r2, #34	; 0x22
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2240      	movs	r2, #64	; 0x40
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005114:	88f8      	ldrh	r0, [r7, #6]
 8005116:	893a      	ldrh	r2, [r7, #8]
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	4603      	mov	r3, r0
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fd61 	bl	8005bec <I2C_RequestMemoryRead>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0ad      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2bff      	cmp	r3, #255	; 0xff
 8005144:	d90e      	bls.n	8005164 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	b2da      	uxtb	r2, r3
 8005152:	8979      	ldrh	r1, [r7, #10]
 8005154:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <HAL_I2C_Mem_Read+0x22c>)
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f001 fc27 	bl	80069b0 <I2C_TransferConfig>
 8005162:	e00f      	b.n	8005184 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005172:	b2da      	uxtb	r2, r3
 8005174:	8979      	ldrh	r1, [r7, #10]
 8005176:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <HAL_I2C_Mem_Read+0x22c>)
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f001 fc16 	bl	80069b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2200      	movs	r2, #0
 800518c:	2104      	movs	r1, #4
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f001 fa65 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e07c      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d034      	beq.n	8005244 <HAL_I2C_Mem_Read+0x1d0>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d130      	bne.n	8005244 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f001 fa36 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e04d      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2bff      	cmp	r3, #255	; 0xff
 8005204:	d90e      	bls.n	8005224 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	22ff      	movs	r2, #255	; 0xff
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	b2da      	uxtb	r2, r3
 8005212:	8979      	ldrh	r1, [r7, #10]
 8005214:	2300      	movs	r3, #0
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f001 fbc7 	bl	80069b0 <I2C_TransferConfig>
 8005222:	e00f      	b.n	8005244 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	b2da      	uxtb	r2, r3
 8005234:	8979      	ldrh	r1, [r7, #10]
 8005236:	2300      	movs	r3, #0
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f001 fbb6 	bl	80069b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d19a      	bne.n	8005184 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 fa83 	bl	800675e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01a      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2220      	movs	r2, #32
 8005268:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_I2C_Mem_Read+0x230>)
 8005276:	400b      	ands	r3, r1
 8005278:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e000      	b.n	8005298 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
  }
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	80002400 	.word	0x80002400
 80052a4:	fe00e800 	.word	0xfe00e800

080052a8 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	4608      	mov	r0, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	817b      	strh	r3, [r7, #10]
 80052ba:	460b      	mov	r3, r1
 80052bc:	813b      	strh	r3, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	f040 80d5 	bne.w	800547a <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_I2C_Mem_Write_DMA+0x34>
 80052d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0c9      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f6:	d101      	bne.n	80052fc <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
 80052fa:	e0bf      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_I2C_Mem_Write_DMA+0x62>
 8005306:	2302      	movs	r3, #2
 8005308:	e0b8      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005312:	f7fd fffd 	bl	8003310 <HAL_GetTick>
 8005316:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2221      	movs	r2, #33	; 0x21
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a51      	ldr	r2, [pc, #324]	; (8005484 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a51      	ldr	r2, [pc, #324]	; (8005488 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8005344:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2bff      	cmp	r3, #255	; 0xff
 800534e:	d906      	bls.n	800535e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	22ff      	movs	r2, #255	; 0xff
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e007      	b.n	800536e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800536c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800536e:	88f8      	ldrh	r0, [r7, #6]
 8005370:	893a      	ldrh	r2, [r7, #8]
 8005372:	8979      	ldrh	r1, [r7, #10]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2319      	movs	r3, #25
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	4603      	mov	r3, r0
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fbe0 	bl	8005b44 <I2C_RequestMemoryWrite>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e072      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	2b00      	cmp	r3, #0
 800539c:	d020      	beq.n	80053e0 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	4a3a      	ldr	r2, [pc, #232]	; (800548c <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	4a39      	ldr	r2, [pc, #228]	; (8005490 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	2200      	movs	r2, #0
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3328      	adds	r3, #40	; 0x28
 80053ca:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80053d0:	f7ff f974 	bl	80046bc <HAL_DMA_Start_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d139      	bne.n	8005452 <HAL_I2C_Mem_Write_DMA+0x1aa>
 80053de:	e013      	b.n	8005408 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e039      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	b2da      	uxtb	r2, r3
 800540e:	8979      	ldrh	r1, [r7, #10]
 8005410:	2300      	movs	r3, #0
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f001 faca 	bl	80069b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005436:	2110      	movs	r1, #16
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f001 faeb 	bl	8006a14 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e014      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	f043 0210 	orr.w	r2, r3, #16
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	ffff0000 	.word	0xffff0000
 8005488:	0800579f 	.word	0x0800579f
 800548c:	0800655f 	.word	0x0800655f
 8005490:	080065f5 	.word	0x080065f5

08005494 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4798      	blx	r3
  }
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
 8005524:	4613      	mov	r3, r2
 8005526:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <I2C_Slave_ISR_IT+0x24>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0ec      	b.n	8005796 <I2C_Slave_ISR_IT+0x1fe>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80055dc:	6939      	ldr	r1, [r7, #16]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fd42 	bl	8006068 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d04d      	beq.n	800568c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d047      	beq.n	800568c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d128      	bne.n	8005658 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b28      	cmp	r3, #40	; 0x28
 8005610:	d108      	bne.n	8005624 <I2C_Slave_ISR_IT+0x8c>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005618:	d104      	bne.n	8005624 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800561a:	6939      	ldr	r1, [r7, #16]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fe2d 	bl	800627c <I2C_ITListenCplt>
 8005622:	e032      	b.n	800568a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b29      	cmp	r3, #41	; 0x29
 800562e:	d10e      	bne.n	800564e <I2C_Slave_ISR_IT+0xb6>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005636:	d00a      	beq.n	800564e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2210      	movs	r2, #16
 800563e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 ff68 	bl	8006516 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fbe5 	bl	8005e16 <I2C_ITSlaveSeqCplt>
 800564c:	e01d      	b.n	800568a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2210      	movs	r2, #16
 8005654:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005656:	e096      	b.n	8005786 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2210      	movs	r2, #16
 800565e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f043 0204 	orr.w	r2, r3, #4
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <I2C_Slave_ISR_IT+0xe4>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005678:	f040 8085 	bne.w	8005786 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	4619      	mov	r1, r3
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fe50 	bl	8006328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005688:	e07d      	b.n	8005786 <I2C_Slave_ISR_IT+0x1ee>
 800568a:	e07c      	b.n	8005786 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d030      	beq.n	80056fa <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02a      	beq.n	80056fa <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d14f      	bne.n	800578a <I2C_Slave_ISR_IT+0x1f2>
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056f0:	d04b      	beq.n	800578a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fb8f 	bl	8005e16 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80056f8:	e047      	b.n	800578a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	08db      	lsrs	r3, r3, #3
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	08db      	lsrs	r3, r3, #3
 800570a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fabd 	bl	8005c94 <I2C_ITAddrCplt>
 800571a:	e037      	b.n	800578c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d031      	beq.n	800578c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02b      	beq.n	800578c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	781a      	ldrb	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	; 0x28
 800576e:	e00d      	b.n	800578c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005776:	d002      	beq.n	800577e <I2C_Slave_ISR_IT+0x1e6>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fb49 	bl	8005e16 <I2C_ITSlaveSeqCplt>
 8005784:	e002      	b.n	800578c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005786:	bf00      	nop
 8005788:	e000      	b.n	800578c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800578a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b088      	sub	sp, #32
 80057a2:	af02      	add	r7, sp, #8
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <I2C_Master_ISR_DMA+0x1a>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0e1      	b.n	800597c <I2C_Master_ISR_DMA+0x1de>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d011      	beq.n	80057fc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2210      	movs	r2, #16
 80057de:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e4:	f043 0204 	orr.w	r2, r3, #4
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80057ec:	2120      	movs	r1, #32
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f001 f910 	bl	8006a14 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fe8e 	bl	8006516 <I2C_Flush_TXDR>
 80057fa:	e0ba      	b.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d072      	beq.n	80058ee <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	099b      	lsrs	r3, r3, #6
 800580c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005810:	2b00      	cmp	r3, #0
 8005812:	d06c      	beq.n	80058ee <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005822:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d04e      	beq.n	80058cc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2bff      	cmp	r3, #255	; 0xff
 8005844:	d906      	bls.n	8005854 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	22ff      	movs	r2, #255	; 0xff
 800584a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800584c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e010      	b.n	8005876 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005866:	d003      	beq.n	8005870 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e002      	b.n	8005876 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005874:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	8a79      	ldrh	r1, [r7, #18]
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f001 f893 	bl	80069b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b22      	cmp	r3, #34	; 0x22
 80058a6:	d108      	bne.n	80058ba <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80058b8:	e05b      	b.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80058ca:	e052      	b.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058da:	d003      	beq.n	80058e4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fa5d 	bl	8005d9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80058e2:	e046      	b.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fd1e 	bl	8006328 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80058ec:	e041      	b.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d029      	beq.n	800594e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	099b      	lsrs	r3, r3, #6
 80058fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005902:	2b00      	cmp	r3, #0
 8005904:	d023      	beq.n	800594e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d119      	bne.n	8005944 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800591e:	d027      	beq.n	8005970 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005928:	d108      	bne.n	800593c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005938:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800593a:	e019      	b.n	8005970 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fa2d 	bl	8005d9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005942:	e015      	b.n	8005970 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005944:	2140      	movs	r1, #64	; 0x40
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fcee 	bl	8006328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800594c:	e010      	b.n	8005970 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fab3 	bl	8005ed4 <I2C_ITMasterCplt>
 800596e:	e000      	b.n	8005972 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005970:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <I2C_Slave_ISR_DMA+0x24>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0c9      	b.n	8005b3c <I2C_Slave_ISR_DMA+0x1b8>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fb4c 	bl	8006068 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 809a 	beq.w	8005b12 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8093 	beq.w	8005b12 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0b9b      	lsrs	r3, r3, #14
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0bdb      	lsrs	r3, r3, #15
 80059fc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07f      	beq.n	8005b04 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0bdb      	lsrs	r3, r3, #15
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005a24:	2301      	movs	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0b9b      	lsrs	r3, r3, #14
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d128      	bne.n	8005aa4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b28      	cmp	r3, #40	; 0x28
 8005a5c:	d108      	bne.n	8005a70 <I2C_Slave_ISR_DMA+0xec>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a64:	d104      	bne.n	8005a70 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fc07 	bl	800627c <I2C_ITListenCplt>
 8005a6e:	e048      	b.n	8005b02 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b29      	cmp	r3, #41	; 0x29
 8005a7a:	d10e      	bne.n	8005a9a <I2C_Slave_ISR_DMA+0x116>
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a82:	d00a      	beq.n	8005a9a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fd42 	bl	8006516 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f9bf 	bl	8005e16 <I2C_ITSlaveSeqCplt>
 8005a98:	e033      	b.n	8005b02 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005aa2:	e034      	b.n	8005b0e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f043 0204 	orr.w	r2, r3, #4
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abe:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <I2C_Slave_ISR_DMA+0x14a>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005acc:	d11f      	bne.n	8005b0e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2b21      	cmp	r3, #33	; 0x21
 8005ad2:	d002      	beq.n	8005ada <I2C_Slave_ISR_DMA+0x156>
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b29      	cmp	r3, #41	; 0x29
 8005ad8:	d103      	bne.n	8005ae2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	; 0x21
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae0:	e008      	b.n	8005af4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	2b22      	cmp	r3, #34	; 0x22
 8005ae6:	d002      	beq.n	8005aee <I2C_Slave_ISR_DMA+0x16a>
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b2a      	cmp	r3, #42	; 0x2a
 8005aec:	d102      	bne.n	8005af4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2222      	movs	r2, #34	; 0x22
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fc14 	bl	8006328 <I2C_ITError>
      if (treatdmanack == 1U)
 8005b00:	e005      	b.n	8005b0e <I2C_Slave_ISR_DMA+0x18a>
 8005b02:	e004      	b.n	8005b0e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b0c:	e011      	b.n	8005b32 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005b0e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b10:	e00f      	b.n	8005b32 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	08db      	lsrs	r3, r3, #3
 8005b22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f8b1 	bl	8005c94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	461a      	mov	r2, r3
 8005b52:	4603      	mov	r3, r0
 8005b54:	817b      	strh	r3, [r7, #10]
 8005b56:	460b      	mov	r3, r1
 8005b58:	813b      	strh	r3, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	8979      	ldrh	r1, [r7, #10]
 8005b64:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <I2C_RequestMemoryWrite+0xa4>)
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 ff1f 	bl	80069b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fdb1 	bl	80066de <I2C_WaitOnTXISFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e02c      	b.n	8005be0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d105      	bne.n	8005b98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8c:	893b      	ldrh	r3, [r7, #8]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
 8005b96:	e015      	b.n	8005bc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b98:	893b      	ldrh	r3, [r7, #8]
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fd97 	bl	80066de <I2C_WaitOnTXISFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e012      	b.n	8005be0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bba:	893b      	ldrh	r3, [r7, #8]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fd45 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	80002000 	.word	0x80002000

08005bec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	817b      	strh	r3, [r7, #10]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	813b      	strh	r3, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <I2C_RequestMemoryRead+0xa4>)
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2300      	movs	r3, #0
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fecc 	bl	80069b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fd5e 	bl	80066de <I2C_WaitOnTXISFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e02c      	b.n	8005c86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d105      	bne.n	8005c3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c3c:	e015      	b.n	8005c6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c3e:	893b      	ldrh	r3, [r7, #8]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	69b9      	ldr	r1, [r7, #24]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fd44 	bl	80066de <I2C_WaitOnTXISFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e012      	b.n	8005c86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2140      	movs	r1, #64	; 0x40
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fcf2 	bl	800665e <I2C_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	80002000 	.word	0x80002000

08005c94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005caa:	2b28      	cmp	r3, #40	; 0x28
 8005cac:	d16a      	bne.n	8005d84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	0c1b      	lsrs	r3, r3, #16
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ccc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ce8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d138      	bne.n	8005d64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005cf2:	897b      	ldrh	r3, [r7, #10]
 8005cf4:	09db      	lsrs	r3, r3, #7
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	89bb      	ldrh	r3, [r7, #12]
 8005cfa:	4053      	eors	r3, r2
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f003 0306 	and.w	r3, r3, #6
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11c      	bne.n	8005d40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d13b      	bne.n	8005d94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2208      	movs	r2, #8
 8005d28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d32:	89ba      	ldrh	r2, [r7, #12]
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fbed 	bl	8005518 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d3e:	e029      	b.n	8005d94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fec7 	bl	8006adc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d56:	89ba      	ldrh	r2, [r7, #12]
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fbdb 	bl	8005518 <HAL_I2C_AddrCallback>
}
 8005d62:	e017      	b.n	8005d94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 feb7 	bl	8006adc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d76:	89ba      	ldrh	r2, [r7, #12]
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fbcb 	bl	8005518 <HAL_I2C_AddrCallback>
}
 8005d82:	e007      	b.n	8005d94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b21      	cmp	r3, #33	; 0x21
 8005db6:	d115      	bne.n	8005de4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2211      	movs	r2, #17
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005dcc:	2101      	movs	r1, #1
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fe84 	bl	8006adc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fb73 	bl	80054c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005de2:	e014      	b.n	8005e0e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2212      	movs	r2, #18
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005df8:	2102      	movs	r1, #2
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fe6e 	bl	8006adc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fb67 	bl	80054dc <HAL_I2C_MasterRxCpltCallback>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	0b9b      	lsrs	r3, r3, #14
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e00d      	b.n	8005e68 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	0bdb      	lsrs	r3, r3, #15
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e66:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b29      	cmp	r3, #41	; 0x29
 8005e72:	d112      	bne.n	8005e9a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2228      	movs	r2, #40	; 0x28
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2221      	movs	r2, #33	; 0x21
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e82:	2101      	movs	r1, #1
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fe29 	bl	8006adc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fb2c 	bl	80054f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e98:	e017      	b.n	8005eca <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea4:	d111      	bne.n	8005eca <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2228      	movs	r2, #40	; 0x28
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2222      	movs	r2, #34	; 0x22
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fe10 	bl	8006adc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fb1d 	bl	8005504 <HAL_I2C_SlaveRxCpltCallback>
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b21      	cmp	r3, #33	; 0x21
 8005ef4:	d107      	bne.n	8005f06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fdef 	bl	8006adc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2211      	movs	r2, #17
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
 8005f04:	e00c      	b.n	8005f20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b22      	cmp	r3, #34	; 0x22
 8005f10:	d106      	bne.n	8005f20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f12:	2102      	movs	r1, #2
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fde1 	bl	8006adc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2212      	movs	r2, #18
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b4d      	ldr	r3, [pc, #308]	; (8006060 <I2C_ITMasterCplt+0x18c>)
 8005f2c:	400b      	ands	r3, r1
 8005f2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a4a      	ldr	r2, [pc, #296]	; (8006064 <I2C_ITMasterCplt+0x190>)
 8005f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b60      	cmp	r3, #96	; 0x60
 8005f66:	d10b      	bne.n	8005f80 <I2C_ITMasterCplt+0xac>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	089b      	lsrs	r3, r3, #2
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fac8 	bl	8006516 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d002      	beq.n	8005f9e <I2C_ITMasterCplt+0xca>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d006      	beq.n	8005fac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9bf 	bl	8006328 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005faa:	e054      	b.n	8006056 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b21      	cmp	r3, #33	; 0x21
 8005fb6:	d124      	bne.n	8006002 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d10b      	bne.n	8005fea <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff fab0 	bl	8005548 <HAL_I2C_MemTxCpltCallback>
}
 8005fe8:	e035      	b.n	8006056 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fa64 	bl	80054c8 <HAL_I2C_MasterTxCpltCallback>
}
 8006000:	e029      	b.n	8006056 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b22      	cmp	r3, #34	; 0x22
 800600c:	d123      	bne.n	8006056 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d10b      	bne.n	8006040 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fa8f 	bl	800555c <HAL_I2C_MemRxCpltCallback>
}
 800603e:	e00a      	b.n	8006056 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fa43 	bl	80054dc <HAL_I2C_MasterRxCpltCallback>
}
 8006056:	bf00      	nop
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	fe00e800 	.word	0xfe00e800
 8006064:	ffff0000 	.word	0xffff0000

08006068 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006084:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2220      	movs	r2, #32
 800608c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b21      	cmp	r3, #33	; 0x21
 8006092:	d002      	beq.n	800609a <I2C_ITSlaveCplt+0x32>
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b29      	cmp	r3, #41	; 0x29
 8006098:	d108      	bne.n	80060ac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800609a:	f248 0101 	movw	r1, #32769	; 0x8001
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fd1c 	bl	8006adc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2221      	movs	r2, #33	; 0x21
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
 80060aa:	e00d      	b.n	80060c8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b22      	cmp	r3, #34	; 0x22
 80060b0:	d002      	beq.n	80060b8 <I2C_ITSlaveCplt+0x50>
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b2a      	cmp	r3, #42	; 0x2a
 80060b6:	d107      	bne.n	80060c8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80060b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fd0d 	bl	8006adc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2222      	movs	r2, #34	; 0x22
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6859      	ldr	r1, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b64      	ldr	r3, [pc, #400]	; (8006274 <I2C_ITSlaveCplt+0x20c>)
 80060e4:	400b      	ands	r3, r1
 80060e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa14 	bl	8006516 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	0b9b      	lsrs	r3, r3, #14
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d013      	beq.n	8006122 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006108:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d020      	beq.n	8006154 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b29a      	uxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006120:	e018      	b.n	8006154 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	0bdb      	lsrs	r3, r3, #15
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d012      	beq.n	8006154 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800613c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d020      	beq.n	80061a2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0304 	bic.w	r3, r3, #4
 8006166:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00c      	beq.n	80061a2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b0:	f043 0204 	orr.w	r2, r3, #4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d010      	beq.n	80061f0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8a7 	bl	8006328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b28      	cmp	r3, #40	; 0x28
 80061e4:	d141      	bne.n	800626a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80061e6:	6979      	ldr	r1, [r7, #20]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f847 	bl	800627c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061ee:	e03c      	b.n	800626a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061f8:	d014      	beq.n	8006224 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fe0b 	bl	8005e16 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <I2C_ITSlaveCplt+0x210>)
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff f989 	bl	8005534 <HAL_I2C_ListenCpltCallback>
}
 8006222:	e022      	b.n	800626a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b22      	cmp	r3, #34	; 0x22
 800622e:	d10e      	bne.n	800624e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff f95c 	bl	8005504 <HAL_I2C_SlaveRxCpltCallback>
}
 800624c:	e00d      	b.n	800626a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff f943 	bl	80054f0 <HAL_I2C_SlaveTxCpltCallback>
}
 800626a:	bf00      	nop
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	fe00e800 	.word	0xfe00e800
 8006278:	ffff0000 	.word	0xffff0000

0800627c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a26      	ldr	r2, [pc, #152]	; (8006324 <I2C_ITListenCplt+0xa8>)
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d022      	beq.n	80062fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d012      	beq.n	80062fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	f043 0204 	orr.w	r2, r3, #4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fbec 	bl	8006adc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2210      	movs	r2, #16
 800630a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff f90d 	bl	8005534 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	ffff0000 	.word	0xffff0000

08006328 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a5d      	ldr	r2, [pc, #372]	; (80064bc <I2C_ITError+0x194>)
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b28      	cmp	r3, #40	; 0x28
 800635e:	d005      	beq.n	800636c <I2C_ITError+0x44>
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b29      	cmp	r3, #41	; 0x29
 8006364:	d002      	beq.n	800636c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b2a      	cmp	r3, #42	; 0x2a
 800636a:	d10b      	bne.n	8006384 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800636c:	2103      	movs	r1, #3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fbb4 	bl	8006adc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2228      	movs	r2, #40	; 0x28
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a50      	ldr	r2, [pc, #320]	; (80064c0 <I2C_ITError+0x198>)
 8006380:	635a      	str	r2, [r3, #52]	; 0x34
 8006382:	e011      	b.n	80063a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006384:	f248 0103 	movw	r1, #32771	; 0x8003
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fba7 	bl	8006adc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b60      	cmp	r3, #96	; 0x60
 8006398:	d003      	beq.n	80063a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d039      	beq.n	800642a <I2C_ITError+0x102>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b11      	cmp	r3, #17
 80063ba:	d002      	beq.n	80063c2 <I2C_ITError+0x9a>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b21      	cmp	r3, #33	; 0x21
 80063c0:	d133      	bne.n	800642a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d0:	d107      	bne.n	80063e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fab8 	bl	800495c <HAL_DMA_GetState>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d017      	beq.n	8006422 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	4a33      	ldr	r2, [pc, #204]	; (80064c4 <I2C_ITError+0x19c>)
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe f9b8 	bl	800477c <HAL_DMA_Abort_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d04d      	beq.n	80064ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006420:	e045      	b.n	80064ae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f850 	bl	80064c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006428:	e041      	b.n	80064ae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d039      	beq.n	80064a6 <I2C_ITError+0x17e>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b12      	cmp	r3, #18
 8006436:	d002      	beq.n	800643e <I2C_ITError+0x116>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b22      	cmp	r3, #34	; 0x22
 800643c:	d133      	bne.n	80064a6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644c:	d107      	bne.n	800645e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800645c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fa7a 	bl	800495c <HAL_DMA_GetState>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d017      	beq.n	800649e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <I2C_ITError+0x19c>)
 8006474:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe f97a 	bl	800477c <HAL_DMA_Abort_IT>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800649c:	e009      	b.n	80064b2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f812 	bl	80064c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064a4:	e005      	b.n	80064b2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f80e 	bl	80064c8 <I2C_TreatErrorCallback>
  }
}
 80064ac:	e002      	b.n	80064b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064ae:	bf00      	nop
 80064b0:	e000      	b.n	80064b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064b2:	bf00      	nop
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	ffff0000 	.word	0xffff0000
 80064c0:	08005599 	.word	0x08005599
 80064c4:	08006623 	.word	0x08006623

080064c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b60      	cmp	r3, #96	; 0x60
 80064da:	d10e      	bne.n	80064fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f846 	bl	8005584 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064f8:	e009      	b.n	800650e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff f831 	bl	8005570 <HAL_I2C_ErrorCallback>
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d103      	bne.n	8006534 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2200      	movs	r2, #0
 8006532:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d007      	beq.n	8006552 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	619a      	str	r2, [r3, #24]
  }
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800657a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006586:	2120      	movs	r1, #32
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fa43 	bl	8006a14 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800658e:	e02d      	b.n	80065ec <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006598:	441a      	add	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2bff      	cmp	r3, #255	; 0xff
 80065a6:	d903      	bls.n	80065b0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	22ff      	movs	r2, #255	; 0xff
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80065ae:	e004      	b.n	80065ba <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4619      	mov	r1, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3328      	adds	r3, #40	; 0x28
 80065ca:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80065d0:	f7fe f874 	bl	80046bc <HAL_DMA_Start_IT>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80065da:	2110      	movs	r1, #16
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fea3 	bl	8006328 <I2C_ITError>
}
 80065e2:	e003      	b.n	80065ec <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fa14 	bl	8006a14 <I2C_Enable_IRQ>
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006610:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006612:	2110      	movs	r1, #16
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff fe87 	bl	8006328 <I2C_ITError>
}
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	2200      	movs	r2, #0
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	2200      	movs	r2, #0
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f7ff ff39 	bl	80064c8 <I2C_TreatErrorCallback>
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	603b      	str	r3, [r7, #0]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800666e:	e022      	b.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d01e      	beq.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006678:	f7fc fe4a 	bl	8003310 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d302      	bcc.n	800668e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d113      	bne.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f043 0220 	orr.w	r2, r3, #32
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e00f      	b.n	80066d6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d0cd      	beq.n	8006670 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066ea:	e02c      	b.n	8006746 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f871 	bl	80067d8 <I2C_IsErrorOccurred>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e02a      	b.n	8006756 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d01e      	beq.n	8006746 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006708:	f7fc fe02 	bl	8003310 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d113      	bne.n	8006746 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e007      	b.n	8006756 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b02      	cmp	r3, #2
 8006752:	d1cb      	bne.n	80066ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676a:	e028      	b.n	80067be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f831 	bl	80067d8 <I2C_IsErrorOccurred>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e026      	b.n	80067ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006780:	f7fc fdc6 	bl	8003310 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d113      	bne.n	80067be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	f043 0220 	orr.w	r2, r3, #32
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e007      	b.n	80067ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d1cf      	bne.n	800676c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d075      	beq.n	80068f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2210      	movs	r2, #16
 800680a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800680c:	e056      	b.n	80068bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d052      	beq.n	80068bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fc fd7b 	bl	8003310 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <I2C_IsErrorOccurred+0x54>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d147      	bne.n	80068bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800683e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800684a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684e:	d12e      	bne.n	80068ae <I2C_IsErrorOccurred+0xd6>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006856:	d02a      	beq.n	80068ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	2b20      	cmp	r3, #32
 800685c:	d027      	beq.n	80068ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800686c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800686e:	f7fc fd4f 	bl	8003310 <HAL_GetTick>
 8006872:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006874:	e01b      	b.n	80068ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006876:	f7fc fd4b 	bl	8003310 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b19      	cmp	r3, #25
 8006882:	d914      	bls.n	80068ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d1dc      	bne.n	8006876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d003      	beq.n	80068d2 <I2C_IsErrorOccurred+0xfa>
 80068ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d09d      	beq.n	800680e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2220      	movs	r2, #32
 80068e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f043 0304 	orr.w	r3, r3, #4
 80068e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	f043 0301 	orr.w	r3, r3, #1
 8006908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f043 0308 	orr.w	r3, r3, #8
 800692a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f043 0302 	orr.w	r3, r3, #2
 800694c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800695e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01c      	beq.n	80069a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff fdd5 	bl	8006516 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <I2C_IsErrorOccurred+0x1d4>)
 8006978:	400b      	ands	r3, r1
 800697a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	431a      	orrs	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3728      	adds	r7, #40	; 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	fe00e800 	.word	0xfe00e800

080069b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	817b      	strh	r3, [r7, #10]
 80069be:	4613      	mov	r3, r2
 80069c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069c2:	897b      	ldrh	r3, [r7, #10]
 80069c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069c8:	7a7b      	ldrb	r3, [r7, #9]
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	4313      	orrs	r3, r2
 80069da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	0d5b      	lsrs	r3, r3, #21
 80069ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <I2C_TransferConfig+0x60>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	43db      	mvns	r3, r3
 80069f4:	ea02 0103 	and.w	r1, r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a02:	bf00      	nop
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	03ff63ff 	.word	0x03ff63ff

08006a14 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a28:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <I2C_Enable_IRQ+0xc0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006a32:	4a29      	ldr	r2, [pc, #164]	; (8006ad8 <I2C_Enable_IRQ+0xc4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d11d      	bne.n	8006a74 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da03      	bge.n	8006a48 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006a46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d103      	bne.n	8006a56 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006a54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d103      	bne.n	8006a64 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d125      	bne.n	8006ab6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a70:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006a72:	e020      	b.n	8006ab6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da03      	bge.n	8006a84 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006a82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006a94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a96:	887b      	ldrh	r3, [r7, #2]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006aa6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006aa8:	887b      	ldrh	r3, [r7, #2]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d103      	bne.n	8006ab6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f043 0320 	orr.w	r3, r3, #32
 8006ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	0800579f 	.word	0x0800579f
 8006ad8:	08005985 	.word	0x08005985

08006adc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006afc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b0a:	2b28      	cmp	r3, #40	; 0x28
 8006b0c:	d003      	beq.n	8006b16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006b14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b16:	887b      	ldrh	r3, [r7, #2]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00f      	beq.n	8006b40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006b26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b34:	2b28      	cmp	r3, #40	; 0x28
 8006b36:	d003      	beq.n	8006b40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006b3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da03      	bge.n	8006b50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006b4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b50:	887b      	ldrh	r3, [r7, #2]
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d103      	bne.n	8006b5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006b5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b5e:	887b      	ldrh	r3, [r7, #2]
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d103      	bne.n	8006b6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f043 0320 	orr.w	r3, r3, #32
 8006b6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b6c:	887b      	ldrh	r3, [r7, #2]
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d103      	bne.n	8006b7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	43da      	mvns	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	400a      	ands	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d138      	bne.n	8006c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e032      	b.n	8006c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	; 0x24
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6819      	ldr	r1, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e000      	b.n	8006c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d139      	bne.n	8006cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e033      	b.n	8006cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	; 0x24
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e000      	b.n	8006cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cb8:	2302      	movs	r3, #2
  }
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc8:	b08f      	sub	sp, #60	; 0x3c
 8006cca:	af0a      	add	r7, sp, #40	; 0x28
 8006ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e116      	b.n	8006f06 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f005 fd40 	bl	800c778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 fcb1 	bl	800967e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	687e      	ldr	r6, [r7, #4]
 8006d24:	466d      	mov	r5, sp
 8006d26:	f106 0410 	add.w	r4, r6, #16
 8006d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d3a:	1d33      	adds	r3, r6, #4
 8006d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3e:	6838      	ldr	r0, [r7, #0]
 8006d40:	f002 fbc4 	bl	80094cc <USB_CoreInit>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e0d7      	b.n	8006f06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fc9f 	bl	80096a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	e04a      	b.n	8006dfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d68:	7bfa      	ldrb	r2, [r7, #15]
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	333d      	adds	r3, #61	; 0x3d
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d7c:	7bfa      	ldrb	r2, [r7, #15]
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4613      	mov	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	333c      	adds	r3, #60	; 0x3c
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d90:	7bfa      	ldrb	r2, [r7, #15]
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	b298      	uxth	r0, r3
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	1a9b      	subs	r3, r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	3342      	adds	r3, #66	; 0x42
 8006da4:	4602      	mov	r2, r0
 8006da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006da8:	7bfa      	ldrb	r2, [r7, #15]
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	333f      	adds	r3, #63	; 0x3f
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dbc:	7bfa      	ldrb	r2, [r7, #15]
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	3344      	adds	r3, #68	; 0x44
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dd0:	7bfa      	ldrb	r2, [r7, #15]
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	3348      	adds	r3, #72	; 0x48
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	3350      	adds	r3, #80	; 0x50
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
 8006dfe:	7bfa      	ldrb	r2, [r7, #15]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3af      	bcc.n	8006d68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
 8006e0c:	e044      	b.n	8006e98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e0e:	7bfa      	ldrb	r2, [r7, #15]
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e24:	7bfa      	ldrb	r2, [r7, #15]
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006e36:	7bfa      	ldrb	r2, [r7, #15]
 8006e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e3a:	7bfa      	ldrb	r2, [r7, #15]
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e50:	7bfa      	ldrb	r2, [r7, #15]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e66:	7bfa      	ldrb	r2, [r7, #15]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	1a9b      	subs	r3, r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e7c:	7bfa      	ldrb	r2, [r7, #15]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	3301      	adds	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
 8006e98:	7bfa      	ldrb	r2, [r7, #15]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3b5      	bcc.n	8006e0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	687e      	ldr	r6, [r7, #4]
 8006eaa:	466d      	mov	r5, sp
 8006eac:	f106 0410 	add.w	r4, r6, #16
 8006eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ec0:	1d33      	adds	r3, r6, #4
 8006ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ec4:	6838      	ldr	r0, [r7, #0]
 8006ec6:	f002 fc37 	bl	8009738 <USB_DevInit>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e014      	b.n	8006f06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d102      	bne.n	8006efa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 ff57 	bl	8007da8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f003 fc09 	bl	800a716 <USB_DevDisconnect>

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_PCD_Start+0x1c>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e01c      	b.n	8006f64 <HAL_PCD_Start+0x56>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d105      	bne.n	8006f46 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 fb86 	bl	800965c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f003 fbbd 	bl	800a6d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b08d      	sub	sp, #52	; 0x34
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f003 fc7b 	bl	800a87e <USB_GetMode>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 8384 	bne.w	8007698 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f003 fbdf 	bl	800a758 <USB_ReadInterrupts>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 837a 	beq.w	8007696 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f003 fbd6 	bl	800a758 <USB_ReadInterrupts>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d107      	bne.n	8006fc6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695a      	ldr	r2, [r3, #20]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f002 0202 	and.w	r2, r2, #2
 8006fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f003 fbc4 	bl	800a758 <USB_ReadInterrupts>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b10      	cmp	r3, #16
 8006fd8:	d161      	bne.n	800709e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699a      	ldr	r2, [r3, #24]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0210 	bic.w	r2, r2, #16
 8006fe8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	f003 020f 	and.w	r2, r3, #15
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	3304      	adds	r3, #4
 8007008:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	0c5b      	lsrs	r3, r3, #17
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	2b02      	cmp	r3, #2
 8007014:	d124      	bne.n	8007060 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800701c:	4013      	ands	r3, r2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d035      	beq.n	800708e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	091b      	lsrs	r3, r3, #4
 800702a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800702c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007030:	b29b      	uxth	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	6a38      	ldr	r0, [r7, #32]
 8007036:	f003 f9fb 	bl	800a430 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007046:	441a      	add	r2, r3
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007058:	441a      	add	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	619a      	str	r2, [r3, #24]
 800705e:	e016      	b.n	800708e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	0c5b      	lsrs	r3, r3, #17
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	2b06      	cmp	r3, #6
 800706a:	d110      	bne.n	800708e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007072:	2208      	movs	r2, #8
 8007074:	4619      	mov	r1, r3
 8007076:	6a38      	ldr	r0, [r7, #32]
 8007078:	f003 f9da 	bl	800a430 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007088:	441a      	add	r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0210 	orr.w	r2, r2, #16
 800709c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f003 fb58 	bl	800a758 <USB_ReadInterrupts>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070b2:	d16e      	bne.n	8007192 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f003 fb5e 	bl	800a77e <USB_ReadDevAllOutEpInterrupt>
 80070c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80070c4:	e062      	b.n	800718c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d057      	beq.n	8007180 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f003 fb83 	bl	800a7e6 <USB_ReadDevOutEPInterrupt>
 80070e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00c      	beq.n	8007106 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	461a      	mov	r2, r3
 80070fa:	2301      	movs	r3, #1
 80070fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80070fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fd77 	bl	8007bf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00c      	beq.n	800712a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	461a      	mov	r2, r3
 800711e:	2308      	movs	r3, #8
 8007120:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fdb3 	bl	8007c90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	461a      	mov	r2, r3
 8007142:	2310      	movs	r3, #16
 8007144:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	461a      	mov	r2, r3
 800715e:	2320      	movs	r3, #32
 8007160:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	461a      	mov	r2, r3
 800717a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800717e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	3301      	adds	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d199      	bne.n	80070c6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f003 fade 	bl	800a758 <USB_ReadInterrupts>
 800719c:	4603      	mov	r3, r0
 800719e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071a6:	f040 808c 	bne.w	80072c2 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f003 faff 	bl	800a7b2 <USB_ReadDevAllInEpInterrupt>
 80071b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80071ba:	e07e      	b.n	80072ba <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d073      	beq.n	80072ae <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f003 fb26 	bl	800a822 <USB_ReadDevInEPInterrupt>
 80071d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d020      	beq.n	8007224 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	2201      	movs	r2, #1
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	43db      	mvns	r3, r3
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007202:	4013      	ands	r3, r2
 8007204:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	461a      	mov	r2, r3
 8007214:	2301      	movs	r3, #1
 8007216:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f005 fb3d 	bl	800c89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	461a      	mov	r2, r3
 800723c:	2308      	movs	r3, #8
 800723e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	461a      	mov	r2, r3
 8007258:	2310      	movs	r3, #16
 800725a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	461a      	mov	r2, r3
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00c      	beq.n	800729c <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007284:	6a38      	ldr	r0, [r7, #32]
 8007286:	f002 fba3 	bl	80099d0 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	461a      	mov	r2, r3
 8007298:	2302      	movs	r3, #2
 800729a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80072a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc1a 	bl	8007ae2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	3301      	adds	r3, #1
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	085b      	lsrs	r3, r3, #1
 80072b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f47f af7d 	bne.w	80071bc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f003 fa46 	bl	800a758 <USB_ReadInterrupts>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d6:	d122      	bne.n	800731e <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d108      	bne.n	8007308 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f005 fde5 	bl	800ced0 <HAL_PCDEx_LPM_Callback>
 8007306:	e002      	b.n	800730e <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f005 fb35 	bl	800c978 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800731c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f003 fa18 	bl	800a758 <USB_ReadInterrupts>
 8007328:	4603      	mov	r3, r0
 800732a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800732e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007332:	d112      	bne.n	800735a <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d102      	bne.n	800734a <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f005 faf1 	bl	800c92c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007358:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f003 f9fa 	bl	800a758 <USB_ReadInterrupts>
 8007364:	4603      	mov	r3, r0
 8007366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800736a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800736e:	d121      	bne.n	80073b4 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800737e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d111      	bne.n	80073ae <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007398:	089b      	lsrs	r3, r3, #2
 800739a:	f003 020f 	and.w	r2, r3, #15
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80073a4:	2101      	movs	r1, #1
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f005 fd92 	bl	800ced0 <HAL_PCDEx_LPM_Callback>
 80073ac:	e002      	b.n	80073b4 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f005 fabc 	bl	800c92c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f003 f9cd 	bl	800a758 <USB_ReadInterrupts>
 80073be:	4603      	mov	r3, r0
 80073c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c8:	f040 80b5 	bne.w	8007536 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2110      	movs	r1, #16
 80073e6:	4618      	mov	r0, r3
 80073e8:	f002 faf2 	bl	80099d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ec:	2300      	movs	r3, #0
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f0:	e046      	b.n	8007480 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fe:	461a      	mov	r2, r3
 8007400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007404:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007424:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	461a      	mov	r2, r3
 8007434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007438:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007458:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	69fa      	ldr	r2, [r7, #28]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007478:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	3301      	adds	r3, #1
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007486:	429a      	cmp	r2, r3
 8007488:	d3b3      	bcc.n	80073f2 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007498:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800749c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d016      	beq.n	80074d4 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b6:	f043 030b 	orr.w	r3, r3, #11
 80074ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074cc:	f043 030b 	orr.w	r3, r3, #11
 80074d0:	6453      	str	r3, [r2, #68]	; 0x44
 80074d2:	e015      	b.n	8007500 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80074ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074fa:	f043 030b 	orr.w	r3, r3, #11
 80074fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007512:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f003 f9dd 	bl	800a8e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f003 f90c 	bl	800a758 <USB_ReadInterrupts>
 8007540:	4603      	mov	r3, r0
 8007542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800754a:	d124      	bne.n	8007596 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f003 f9a2 	bl	800a89a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f002 fab1 	bl	8009ac2 <USB_GetDevSpeed>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681c      	ldr	r4, [r3, #0]
 800756c:	f001 fa68 	bl	8008a40 <HAL_RCC_GetHCLKFreq>
 8007570:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	4620      	mov	r0, r4
 800757c:	f001 ffd2 	bl	8009524 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f005 f9b4 	bl	800c8ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007594:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f003 f8dc 	bl	800a758 <USB_ReadInterrupts>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d10a      	bne.n	80075c0 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f005 f991 	bl	800c8d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695a      	ldr	r2, [r3, #20]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f002 0208 	and.w	r2, r2, #8
 80075be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f003 f8c7 	bl	800a758 <USB_ReadInterrupts>
 80075ca:	4603      	mov	r3, r0
 80075cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d4:	d10f      	bne.n	80075f6 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f005 fa03 	bl	800c9ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695a      	ldr	r2, [r3, #20]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80075f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f003 f8ac 	bl	800a758 <USB_ReadInterrupts>
 8007600:	4603      	mov	r3, r0
 8007602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800760a:	d10f      	bne.n	800762c <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	b2db      	uxtb	r3, r3
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f005 f9d6 	bl	800c9c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695a      	ldr	r2, [r3, #20]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800762a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f003 f891 	bl	800a758 <USB_ReadInterrupts>
 8007636:	4603      	mov	r3, r0
 8007638:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800763c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007640:	d10a      	bne.n	8007658 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f005 f9e4 	bl	800ca10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f003 f87b 	bl	800a758 <USB_ReadInterrupts>
 8007662:	4603      	mov	r3, r0
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b04      	cmp	r3, #4
 800766a:	d115      	bne.n	8007698 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f005 f9d4 	bl	800ca2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	430a      	orrs	r2, r1
 8007692:	605a      	str	r2, [r3, #4]
 8007694:	e000      	b.n	8007698 <HAL_PCD_IRQHandler+0x72c>
      return;
 8007696:	bf00      	nop
    }
  }
}
 8007698:	3734      	adds	r7, #52	; 0x34
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}

0800769e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_PCD_SetAddress+0x1a>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e013      	b.n	80076e0 <HAL_PCD_SetAddress+0x42>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	4611      	mov	r1, r2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f002 ffd9 	bl	800a688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	70fb      	strb	r3, [r7, #3]
 80076fa:	460b      	mov	r3, r1
 80076fc:	803b      	strh	r3, [r7, #0]
 80076fe:	4613      	mov	r3, r2
 8007700:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800770a:	2b00      	cmp	r3, #0
 800770c:	da0f      	bge.n	800772e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	f003 020f 	and.w	r2, r3, #15
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	3338      	adds	r3, #56	; 0x38
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	3304      	adds	r3, #4
 8007724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	705a      	strb	r2, [r3, #1]
 800772c:	e00f      	b.n	800774e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 020f 	and.w	r2, r3, #15
 8007734:	4613      	mov	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	3304      	adds	r3, #4
 8007746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800775a:	883a      	ldrh	r2, [r7, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	78ba      	ldrb	r2, [r7, #2]
 8007764:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007778:	78bb      	ldrb	r3, [r7, #2]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d102      	bne.n	8007784 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_PCD_EP_Open+0xaa>
 800778e:	2302      	movs	r3, #2
 8007790:	e00e      	b.n	80077b0 <HAL_PCD_EP_Open+0xc8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 f9ad 	bl	8009b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80077ae:	7afb      	ldrb	r3, [r7, #11]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da0f      	bge.n	80077ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 020f 	and.w	r2, r3, #15
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3338      	adds	r3, #56	; 0x38
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	3304      	adds	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]
 80077ea:	e00f      	b.n	800780c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 020f 	and.w	r2, r3, #15
 80077f2:	4613      	mov	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_PCD_EP_Close+0x6e>
 8007822:	2302      	movs	r3, #2
 8007824:	e00e      	b.n	8007844 <HAL_PCD_EP_Close+0x8c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	4618      	mov	r0, r3
 8007836:	f002 f9eb 	bl	8009c10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	460b      	mov	r3, r1
 800785a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	f003 020f 	and.w	r2, r3, #15
 8007862:	4613      	mov	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	3304      	adds	r3, #4
 8007874:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2200      	movs	r2, #0
 8007886:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2200      	movs	r2, #0
 800788c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	b2da      	uxtb	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6979      	ldr	r1, [r7, #20]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f002 fc68 	bl	800a180 <USB_EP0StartXfer>
 80078b0:	e005      	b.n	80078be <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6979      	ldr	r1, [r7, #20]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f002 fa85 	bl	8009dc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80078ea:	681b      	ldr	r3, [r3, #0]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	460b      	mov	r3, r1
 8007906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	f003 020f 	and.w	r2, r3, #15
 800790e:	4613      	mov	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	3338      	adds	r3, #56	; 0x38
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	3304      	adds	r3, #4
 800791e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2200      	movs	r2, #0
 8007930:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2201      	movs	r2, #1
 8007936:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	b2da      	uxtb	r2, r3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007944:	7afb      	ldrb	r3, [r7, #11]
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	4618      	mov	r0, r3
 8007956:	f002 fc13 	bl	800a180 <USB_EP0StartXfer>
 800795a:	e005      	b.n	8007968 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6979      	ldr	r1, [r7, #20]
 8007962:	4618      	mov	r0, r3
 8007964:	f002 fa30 	bl	8009dc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	460b      	mov	r3, r1
 800797c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d901      	bls.n	8007990 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e04e      	b.n	8007a2e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007994:	2b00      	cmp	r3, #0
 8007996:	da0f      	bge.n	80079b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	f003 020f 	and.w	r2, r3, #15
 800799e:	4613      	mov	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	3338      	adds	r3, #56	; 0x38
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	3304      	adds	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	705a      	strb	r2, [r3, #1]
 80079b6:	e00d      	b.n	80079d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4613      	mov	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4413      	add	r3, r2
 80079ca:	3304      	adds	r3, #4
 80079cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_PCD_EP_SetStall+0x82>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e01c      	b.n	8007a2e <HAL_PCD_EP_SetStall+0xbc>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68f9      	ldr	r1, [r7, #12]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 fd6c 	bl	800a4e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d108      	bne.n	8007a24 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f002 ff5e 	bl	800a8e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	f003 020f 	and.w	r2, r3, #15
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d901      	bls.n	8007a54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e042      	b.n	8007ada <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da0f      	bge.n	8007a7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	f003 020f 	and.w	r2, r3, #15
 8007a62:	4613      	mov	r3, r2
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	3338      	adds	r3, #56	; 0x38
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	4413      	add	r3, r2
 8007a70:	3304      	adds	r3, #4
 8007a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	705a      	strb	r2, [r3, #1]
 8007a7a:	e00f      	b.n	8007a9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	f003 020f 	and.w	r2, r3, #15
 8007a82:	4613      	mov	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_PCD_EP_ClrStall+0x86>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e00e      	b.n	8007ada <HAL_PCD_EP_ClrStall+0xa4>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 fd76 	bl	800a5bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b088      	sub	sp, #32
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	3338      	adds	r3, #56	; 0x38
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4413      	add	r3, r2
 8007b06:	3304      	adds	r3, #4
 8007b08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d901      	bls.n	8007b1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e067      	b.n	8007bea <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	695a      	ldr	r2, [r3, #20]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d902      	bls.n	8007b36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	3303      	adds	r3, #3
 8007b3a:	089b      	lsrs	r3, r3, #2
 8007b3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b3e:	e026      	b.n	8007b8e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d902      	bls.n	8007b5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	3303      	adds	r3, #3
 8007b60:	089b      	lsrs	r3, r3, #2
 8007b62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	6978      	ldr	r0, [r7, #20]
 8007b72:	f002 fc23 	bl	800a3bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	441a      	add	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	441a      	add	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d809      	bhi.n	8007bb8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d203      	bcs.n	8007bb8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1c3      	bne.n	8007b40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d811      	bhi.n	8007be8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	2201      	movs	r2, #1
 8007bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	6939      	ldr	r1, [r7, #16]
 8007be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007be4:	4013      	ands	r3, r2
 8007be6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3720      	adds	r7, #32
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	333c      	adds	r3, #60	; 0x3c
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <PCD_EP_OutXfrComplete_int+0x98>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d124      	bne.n	8007c74 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c40:	461a      	mov	r2, r3
 8007c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c46:	6093      	str	r3, [r2, #8]
 8007c48:	e01a      	b.n	8007c80 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	461a      	mov	r2, r3
 8007c62:	2320      	movs	r3, #32
 8007c64:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f004 fdfb 	bl	800c868 <HAL_PCD_DataOutStageCallback>
 8007c72:	e005      	b.n	8007c80 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f004 fdf4 	bl	800c868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	4f54310a 	.word	0x4f54310a

08007c90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	333c      	adds	r3, #60	; 0x3c
 8007ca8:	3304      	adds	r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4a0c      	ldr	r2, [pc, #48]	; (8007cf4 <PCD_EP_OutSetupPacket_int+0x64>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d90e      	bls.n	8007ce4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d009      	beq.n	8007ce4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f004 fdad 	bl	800c844 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	4f54300a 	.word	0x4f54300a

08007cf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
 8007d04:	4613      	mov	r3, r2
 8007d06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d16:	883b      	ldrh	r3, [r7, #0]
 8007d18:	0419      	lsls	r1, r3, #16
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	629a      	str	r2, [r3, #40]	; 0x28
 8007d24:	e028      	b.n	8007d78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
 8007d38:	e00d      	b.n	8007d56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	3340      	adds	r3, #64	; 0x40
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	3301      	adds	r3, #1
 8007d54:	73fb      	strb	r3, [r7, #15]
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d3ec      	bcc.n	8007d3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d60:	883b      	ldrh	r3, [r7, #0]
 8007d62:	0418      	lsls	r0, r3, #16
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6819      	ldr	r1, [r3, #0]
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	4302      	orrs	r2, r0
 8007d70:	3340      	adds	r3, #64	; 0x40
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	887a      	ldrh	r2, [r7, #2]
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dda:	f043 0303 	orr.w	r3, r3, #3
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dfe:	6013      	str	r3, [r2, #0]
}
 8007e00:	bf00      	nop
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40007000 	.word	0x40007000

08007e10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40007000 	.word	0x40007000

08007e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3a:	d130      	bne.n	8007e9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e3c:	4b23      	ldr	r3, [pc, #140]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e48:	d038      	beq.n	8007ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e4a:	4b20      	ldr	r3, [pc, #128]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e52:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2232      	movs	r2, #50	; 0x32
 8007e60:	fb02 f303 	mul.w	r3, r2, r3
 8007e64:	4a1b      	ldr	r2, [pc, #108]	; (8007ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	0c9b      	lsrs	r3, r3, #18
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e70:	e002      	b.n	8007e78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e78:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e84:	d102      	bne.n	8007e8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f2      	bne.n	8007e72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e98:	d110      	bne.n	8007ebc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e00f      	b.n	8007ebe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eaa:	d007      	beq.n	8007ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007eb4:	4a05      	ldr	r2, [pc, #20]	; (8007ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007eba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	40007000 	.word	0x40007000
 8007ed0:	20000000 	.word	0x20000000
 8007ed4:	431bde83 	.word	0x431bde83

08007ed8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a04      	ldr	r2, [pc, #16]	; (8007ef4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ee6:	6053      	str	r3, [r2, #4]
}
 8007ee8:	bf00      	nop
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40007000 	.word	0x40007000

08007ef8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4a04      	ldr	r2, [pc, #16]	; (8007f14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f06:	6053      	str	r3, [r2, #4]
}
 8007f08:	bf00      	nop
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40007000 	.word	0x40007000

08007f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d102      	bne.n	8007f2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f000 bc16 	b.w	8008758 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f2c:	4ba0      	ldr	r3, [pc, #640]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f003 030c 	and.w	r3, r3, #12
 8007f34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f36:	4b9e      	ldr	r3, [pc, #632]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80e4 	beq.w	8008116 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <HAL_RCC_OscConfig+0x4c>
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b0c      	cmp	r3, #12
 8007f58:	f040 808b 	bne.w	8008072 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	f040 8087 	bne.w	8008072 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f64:	4b92      	ldr	r3, [pc, #584]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_RCC_OscConfig+0x64>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e3ed      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1a      	ldr	r2, [r3, #32]
 8007f80:	4b8b      	ldr	r3, [pc, #556]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <HAL_RCC_OscConfig+0x7e>
 8007f8c:	4b88      	ldr	r3, [pc, #544]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f94:	e005      	b.n	8007fa2 <HAL_RCC_OscConfig+0x8a>
 8007f96:	4b86      	ldr	r3, [pc, #536]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d223      	bcs.n	8007fee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fd54 	bl	8008a58 <RCC_SetFlashLatencyFromMSIRange>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e3ce      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fba:	4b7d      	ldr	r3, [pc, #500]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a7c      	ldr	r2, [pc, #496]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007fc0:	f043 0308 	orr.w	r3, r3, #8
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4b7a      	ldr	r3, [pc, #488]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	4977      	ldr	r1, [pc, #476]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fd8:	4b75      	ldr	r3, [pc, #468]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	4972      	ldr	r1, [pc, #456]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	604b      	str	r3, [r1, #4]
 8007fec:	e025      	b.n	800803a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fee:	4b70      	ldr	r3, [pc, #448]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a6f      	ldr	r2, [pc, #444]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007ff4:	f043 0308 	orr.w	r3, r3, #8
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	4b6d      	ldr	r3, [pc, #436]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	496a      	ldr	r1, [pc, #424]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008008:	4313      	orrs	r3, r2
 800800a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800800c:	4b68      	ldr	r3, [pc, #416]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	4965      	ldr	r1, [pc, #404]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800801c:	4313      	orrs	r3, r2
 800801e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fd14 	bl	8008a58 <RCC_SetFlashLatencyFromMSIRange>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e38e      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800803a:	f000 fc75 	bl	8008928 <HAL_RCC_GetSysClockFreq>
 800803e:	4602      	mov	r2, r0
 8008040:	4b5b      	ldr	r3, [pc, #364]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	091b      	lsrs	r3, r3, #4
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	495a      	ldr	r1, [pc, #360]	; (80081b4 <HAL_RCC_OscConfig+0x29c>)
 800804c:	5ccb      	ldrb	r3, [r1, r3]
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	fa22 f303 	lsr.w	r3, r2, r3
 8008056:	4a58      	ldr	r2, [pc, #352]	; (80081b8 <HAL_RCC_OscConfig+0x2a0>)
 8008058:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800805a:	4b58      	ldr	r3, [pc, #352]	; (80081bc <HAL_RCC_OscConfig+0x2a4>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f7fb f906 	bl	8003270 <HAL_InitTick>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d052      	beq.n	8008114 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	e372      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d032      	beq.n	80080e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800807a:	4b4d      	ldr	r3, [pc, #308]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a4c      	ldr	r2, [pc, #304]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008080:	f043 0301 	orr.w	r3, r3, #1
 8008084:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008086:	f7fb f943 	bl	8003310 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800808e:	f7fb f93f 	bl	8003310 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e35b      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080a0:	4b43      	ldr	r3, [pc, #268]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0f0      	beq.n	800808e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080ac:	4b40      	ldr	r3, [pc, #256]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a3f      	ldr	r2, [pc, #252]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080b2:	f043 0308 	orr.w	r3, r3, #8
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	4b3d      	ldr	r3, [pc, #244]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	493a      	ldr	r1, [pc, #232]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080ca:	4b39      	ldr	r3, [pc, #228]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	4935      	ldr	r1, [pc, #212]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	604b      	str	r3, [r1, #4]
 80080de:	e01a      	b.n	8008116 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80080e0:	4b33      	ldr	r3, [pc, #204]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a32      	ldr	r2, [pc, #200]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 80080e6:	f023 0301 	bic.w	r3, r3, #1
 80080ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80080ec:	f7fb f910 	bl	8003310 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80080f4:	f7fb f90c 	bl	8003310 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e328      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008106:	4b2a      	ldr	r3, [pc, #168]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x1dc>
 8008112:	e000      	b.n	8008116 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008114:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d073      	beq.n	800820a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d005      	beq.n	8008134 <HAL_RCC_OscConfig+0x21c>
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b0c      	cmp	r3, #12
 800812c:	d10e      	bne.n	800814c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d10b      	bne.n	800814c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008134:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d063      	beq.n	8008208 <HAL_RCC_OscConfig+0x2f0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d15f      	bne.n	8008208 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e305      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008154:	d106      	bne.n	8008164 <HAL_RCC_OscConfig+0x24c>
 8008156:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800815c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	e01d      	b.n	80081a0 <HAL_RCC_OscConfig+0x288>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800816c:	d10c      	bne.n	8008188 <HAL_RCC_OscConfig+0x270>
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a0f      	ldr	r2, [pc, #60]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e00b      	b.n	80081a0 <HAL_RCC_OscConfig+0x288>
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800818e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a05      	ldr	r2, [pc, #20]	; (80081b0 <HAL_RCC_OscConfig+0x298>)
 800819a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800819e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01b      	beq.n	80081e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a8:	f7fb f8b2 	bl	8003310 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081ae:	e010      	b.n	80081d2 <HAL_RCC_OscConfig+0x2ba>
 80081b0:	40021000 	.word	0x40021000
 80081b4:	08011f74 	.word	0x08011f74
 80081b8:	20000000 	.word	0x20000000
 80081bc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081c0:	f7fb f8a6 	bl	8003310 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b64      	cmp	r3, #100	; 0x64
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e2c2      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081d2:	4baf      	ldr	r3, [pc, #700]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0x2a8>
 80081de:	e014      	b.n	800820a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fb f896 	bl	8003310 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081e8:	f7fb f892 	bl	8003310 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b64      	cmp	r3, #100	; 0x64
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e2ae      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081fa:	4ba5      	ldr	r3, [pc, #660]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x2d0>
 8008206:	e000      	b.n	800820a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d060      	beq.n	80082d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d005      	beq.n	8008228 <HAL_RCC_OscConfig+0x310>
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	2b0c      	cmp	r3, #12
 8008220:	d119      	bne.n	8008256 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d116      	bne.n	8008256 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008228:	4b99      	ldr	r3, [pc, #612]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <HAL_RCC_OscConfig+0x328>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e28b      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008240:	4b93      	ldr	r3, [pc, #588]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	061b      	lsls	r3, r3, #24
 800824e:	4990      	ldr	r1, [pc, #576]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008250:	4313      	orrs	r3, r2
 8008252:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008254:	e040      	b.n	80082d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d023      	beq.n	80082a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800825e:	4b8c      	ldr	r3, [pc, #560]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a8b      	ldr	r2, [pc, #556]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826a:	f7fb f851 	bl	8003310 <HAL_GetTick>
 800826e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008272:	f7fb f84d 	bl	8003310 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e269      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008284:	4b82      	ldr	r3, [pc, #520]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008290:	4b7f      	ldr	r3, [pc, #508]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	061b      	lsls	r3, r3, #24
 800829e:	497c      	ldr	r1, [pc, #496]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	604b      	str	r3, [r1, #4]
 80082a4:	e018      	b.n	80082d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082a6:	4b7a      	ldr	r3, [pc, #488]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a79      	ldr	r2, [pc, #484]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80082ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fb f82d 	bl	8003310 <HAL_GetTick>
 80082b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082b8:	e008      	b.n	80082cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082ba:	f7fb f829 	bl	8003310 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e245      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082cc:	4b70      	ldr	r3, [pc, #448]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f0      	bne.n	80082ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d03c      	beq.n	800835e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01c      	beq.n	8008326 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082ec:	4b68      	ldr	r3, [pc, #416]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80082ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f2:	4a67      	ldr	r2, [pc, #412]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fc:	f7fb f808 	bl	8003310 <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008304:	f7fb f804 	bl	8003310 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e220      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008316:	4b5e      	ldr	r3, [pc, #376]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0ef      	beq.n	8008304 <HAL_RCC_OscConfig+0x3ec>
 8008324:	e01b      	b.n	800835e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008326:	4b5a      	ldr	r3, [pc, #360]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832c:	4a58      	ldr	r2, [pc, #352]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008336:	f7fa ffeb 	bl	8003310 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800833e:	f7fa ffe7 	bl	8003310 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e203      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008350:	4b4f      	ldr	r3, [pc, #316]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1ef      	bne.n	800833e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80a6 	beq.w	80084b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800836c:	2300      	movs	r3, #0
 800836e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008370:	4b47      	ldr	r3, [pc, #284]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10d      	bne.n	8008398 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800837c:	4b44      	ldr	r3, [pc, #272]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800837e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008380:	4a43      	ldr	r2, [pc, #268]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008386:	6593      	str	r3, [r2, #88]	; 0x58
 8008388:	4b41      	ldr	r3, [pc, #260]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800838a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008394:	2301      	movs	r3, #1
 8008396:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008398:	4b3e      	ldr	r3, [pc, #248]	; (8008494 <HAL_RCC_OscConfig+0x57c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d118      	bne.n	80083d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083a4:	4b3b      	ldr	r3, [pc, #236]	; (8008494 <HAL_RCC_OscConfig+0x57c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a3a      	ldr	r2, [pc, #232]	; (8008494 <HAL_RCC_OscConfig+0x57c>)
 80083aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083b0:	f7fa ffae 	bl	8003310 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b8:	f7fa ffaa 	bl	8003310 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e1c6      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083ca:	4b32      	ldr	r3, [pc, #200]	; (8008494 <HAL_RCC_OscConfig+0x57c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0f0      	beq.n	80083b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d108      	bne.n	80083f0 <HAL_RCC_OscConfig+0x4d8>
 80083de:	4b2c      	ldr	r3, [pc, #176]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80083e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e4:	4a2a      	ldr	r2, [pc, #168]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80083ee:	e024      	b.n	800843a <HAL_RCC_OscConfig+0x522>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	2b05      	cmp	r3, #5
 80083f6:	d110      	bne.n	800841a <HAL_RCC_OscConfig+0x502>
 80083f8:	4b25      	ldr	r3, [pc, #148]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fe:	4a24      	ldr	r2, [pc, #144]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008400:	f043 0304 	orr.w	r3, r3, #4
 8008404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008408:	4b21      	ldr	r3, [pc, #132]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800840a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840e:	4a20      	ldr	r2, [pc, #128]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008418:	e00f      	b.n	800843a <HAL_RCC_OscConfig+0x522>
 800841a:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008420:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008422:	f023 0301 	bic.w	r3, r3, #1
 8008426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800842a:	4b19      	ldr	r3, [pc, #100]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008430:	4a17      	ldr	r2, [pc, #92]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008432:	f023 0304 	bic.w	r3, r3, #4
 8008436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d016      	beq.n	8008470 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008442:	f7fa ff65 	bl	8003310 <HAL_GetTick>
 8008446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008448:	e00a      	b.n	8008460 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800844a:	f7fa ff61 	bl	8003310 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	f241 3288 	movw	r2, #5000	; 0x1388
 8008458:	4293      	cmp	r3, r2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e17b      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <HAL_RCC_OscConfig+0x578>)
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ed      	beq.n	800844a <HAL_RCC_OscConfig+0x532>
 800846e:	e01a      	b.n	80084a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fa ff4e 	bl	8003310 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008476:	e00f      	b.n	8008498 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008478:	f7fa ff4a 	bl	8003310 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	; 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d906      	bls.n	8008498 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e164      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
 800848e:	bf00      	nop
 8008490:	40021000 	.word	0x40021000
 8008494:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008498:	4ba8      	ldr	r3, [pc, #672]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800849a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e8      	bne.n	8008478 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084a6:	7ffb      	ldrb	r3, [r7, #31]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d105      	bne.n	80084b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084ac:	4ba3      	ldr	r3, [pc, #652]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80084ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b0:	4aa2      	ldr	r2, [pc, #648]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80084b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d03c      	beq.n	800853e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01c      	beq.n	8008506 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084cc:	4b9b      	ldr	r3, [pc, #620]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80084ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084d2:	4a9a      	ldr	r2, [pc, #616]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084dc:	f7fa ff18 	bl	8003310 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084e4:	f7fa ff14 	bl	8003310 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e130      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084f6:	4b91      	ldr	r3, [pc, #580]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80084f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0ef      	beq.n	80084e4 <HAL_RCC_OscConfig+0x5cc>
 8008504:	e01b      	b.n	800853e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008506:	4b8d      	ldr	r3, [pc, #564]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800850c:	4a8b      	ldr	r2, [pc, #556]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800850e:	f023 0301 	bic.w	r3, r3, #1
 8008512:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008516:	f7fa fefb 	bl	8003310 <HAL_GetTick>
 800851a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800851c:	e008      	b.n	8008530 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800851e:	f7fa fef7 	bl	8003310 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d901      	bls.n	8008530 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e113      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008530:	4b82      	ldr	r3, [pc, #520]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1ef      	bne.n	800851e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 8107 	beq.w	8008756 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	2b02      	cmp	r3, #2
 800854e:	f040 80cb 	bne.w	80086e8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008552:	4b7a      	ldr	r3, [pc, #488]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f003 0203 	and.w	r2, r3, #3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	429a      	cmp	r2, r3
 8008564:	d12c      	bne.n	80085c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	3b01      	subs	r3, #1
 8008572:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008574:	429a      	cmp	r2, r3
 8008576:	d123      	bne.n	80085c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008582:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008584:	429a      	cmp	r2, r3
 8008586:	d11b      	bne.n	80085c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008594:	429a      	cmp	r2, r3
 8008596:	d113      	bne.n	80085c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	3b01      	subs	r3, #1
 80085a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d109      	bne.n	80085c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	3b01      	subs	r3, #1
 80085ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085bc:	429a      	cmp	r2, r3
 80085be:	d06d      	beq.n	800869c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b0c      	cmp	r3, #12
 80085c4:	d068      	beq.n	8008698 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80085c6:	4b5d      	ldr	r3, [pc, #372]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d105      	bne.n	80085de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80085d2:	4b5a      	ldr	r3, [pc, #360]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e0ba      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80085e2:	4b56      	ldr	r3, [pc, #344]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a55      	ldr	r2, [pc, #340]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80085e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085ee:	f7fa fe8f 	bl	8003310 <HAL_GetTick>
 80085f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085f4:	e008      	b.n	8008608 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085f6:	f7fa fe8b 	bl	8003310 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e0a7      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008608:	4b4c      	ldr	r3, [pc, #304]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008614:	4b49      	ldr	r3, [pc, #292]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	4b49      	ldr	r3, [pc, #292]	; (8008740 <HAL_RCC_OscConfig+0x828>)
 800861a:	4013      	ands	r3, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008624:	3a01      	subs	r2, #1
 8008626:	0112      	lsls	r2, r2, #4
 8008628:	4311      	orrs	r1, r2
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800862e:	0212      	lsls	r2, r2, #8
 8008630:	4311      	orrs	r1, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008636:	0852      	lsrs	r2, r2, #1
 8008638:	3a01      	subs	r2, #1
 800863a:	0552      	lsls	r2, r2, #21
 800863c:	4311      	orrs	r1, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008642:	0852      	lsrs	r2, r2, #1
 8008644:	3a01      	subs	r2, #1
 8008646:	0652      	lsls	r2, r2, #25
 8008648:	4311      	orrs	r1, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800864e:	06d2      	lsls	r2, r2, #27
 8008650:	430a      	orrs	r2, r1
 8008652:	493a      	ldr	r1, [pc, #232]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008654:	4313      	orrs	r3, r2
 8008656:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008658:	4b38      	ldr	r3, [pc, #224]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a37      	ldr	r2, [pc, #220]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800865e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008662:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008664:	4b35      	ldr	r3, [pc, #212]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	4a34      	ldr	r2, [pc, #208]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800866a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800866e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008670:	f7fa fe4e 	bl	8003310 <HAL_GetTick>
 8008674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008676:	e008      	b.n	800868a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008678:	f7fa fe4a 	bl	8003310 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e066      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800868a:	4b2c      	ldr	r3, [pc, #176]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0f0      	beq.n	8008678 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008696:	e05e      	b.n	8008756 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e05d      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800869c:	4b27      	ldr	r3, [pc, #156]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d156      	bne.n	8008756 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80086a8:	4b24      	ldr	r3, [pc, #144]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a23      	ldr	r2, [pc, #140]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086b4:	4b21      	ldr	r3, [pc, #132]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4a20      	ldr	r2, [pc, #128]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086c0:	f7fa fe26 	bl	8003310 <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086c8:	f7fa fe22 	bl	8003310 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e03e      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086da:	4b18      	ldr	r3, [pc, #96]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCC_OscConfig+0x7b0>
 80086e6:	e036      	b.n	8008756 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2b0c      	cmp	r3, #12
 80086ec:	d031      	beq.n	8008752 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a12      	ldr	r2, [pc, #72]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086f8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80086fa:	4b10      	ldr	r3, [pc, #64]	; (800873c <HAL_RCC_OscConfig+0x824>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d105      	bne.n	8008712 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008706:	4b0d      	ldr	r3, [pc, #52]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	4a0c      	ldr	r2, [pc, #48]	; (800873c <HAL_RCC_OscConfig+0x824>)
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <HAL_RCC_OscConfig+0x824>)
 8008718:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800871c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008720:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008722:	f7fa fdf5 	bl	8003310 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008728:	e00c      	b.n	8008744 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800872a:	f7fa fdf1 	bl	8003310 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d905      	bls.n	8008744 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e00d      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
 800873c:	40021000 	.word	0x40021000
 8008740:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <HAL_RCC_OscConfig+0x848>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1ec      	bne.n	800872a <HAL_RCC_OscConfig+0x812>
 8008750:	e001      	b.n	8008756 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3720      	adds	r7, #32
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40021000 	.word	0x40021000

08008764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e0c8      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008778:	4b66      	ldr	r3, [pc, #408]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d910      	bls.n	80087a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008786:	4b63      	ldr	r3, [pc, #396]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f023 0207 	bic.w	r2, r3, #7
 800878e:	4961      	ldr	r1, [pc, #388]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	4313      	orrs	r3, r2
 8008794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008796:	4b5f      	ldr	r3, [pc, #380]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d001      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e0b0      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d04c      	beq.n	800884e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d107      	bne.n	80087cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087bc:	4b56      	ldr	r3, [pc, #344]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d121      	bne.n	800880c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e09e      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d107      	bne.n	80087e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087d4:	4b50      	ldr	r3, [pc, #320]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d115      	bne.n	800880c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e092      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d107      	bne.n	80087fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087ec:	4b4a      	ldr	r3, [pc, #296]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d109      	bne.n	800880c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e086      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087fc:	4b46      	ldr	r3, [pc, #280]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e07e      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800880c:	4b42      	ldr	r3, [pc, #264]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f023 0203 	bic.w	r2, r3, #3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	493f      	ldr	r1, [pc, #252]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 800881a:	4313      	orrs	r3, r2
 800881c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7fa fd77 	bl	8003310 <HAL_GetTick>
 8008822:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008824:	e00a      	b.n	800883c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008826:	f7fa fd73 	bl	8003310 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	f241 3288 	movw	r2, #5000	; 0x1388
 8008834:	4293      	cmp	r3, r2
 8008836:	d901      	bls.n	800883c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e066      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883c:	4b36      	ldr	r3, [pc, #216]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f003 020c 	and.w	r2, r3, #12
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	429a      	cmp	r2, r3
 800884c:	d1eb      	bne.n	8008826 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800885a:	4b2f      	ldr	r3, [pc, #188]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	492c      	ldr	r1, [pc, #176]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 8008868:	4313      	orrs	r3, r2
 800886a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800886c:	4b29      	ldr	r3, [pc, #164]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d210      	bcs.n	800889c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887a:	4b26      	ldr	r3, [pc, #152]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f023 0207 	bic.w	r2, r3, #7
 8008882:	4924      	ldr	r1, [pc, #144]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	4313      	orrs	r3, r2
 8008888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800888a:	4b22      	ldr	r3, [pc, #136]	; (8008914 <HAL_RCC_ClockConfig+0x1b0>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d001      	beq.n	800889c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e036      	b.n	800890a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088a8:	4b1b      	ldr	r3, [pc, #108]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4918      	ldr	r1, [pc, #96]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0308 	and.w	r3, r3, #8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	4910      	ldr	r1, [pc, #64]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088da:	f000 f825 	bl	8008928 <HAL_RCC_GetSysClockFreq>
 80088de:	4602      	mov	r2, r0
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <HAL_RCC_ClockConfig+0x1b4>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	091b      	lsrs	r3, r3, #4
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	490c      	ldr	r1, [pc, #48]	; (800891c <HAL_RCC_ClockConfig+0x1b8>)
 80088ec:	5ccb      	ldrb	r3, [r1, r3]
 80088ee:	f003 031f 	and.w	r3, r3, #31
 80088f2:	fa22 f303 	lsr.w	r3, r2, r3
 80088f6:	4a0a      	ldr	r2, [pc, #40]	; (8008920 <HAL_RCC_ClockConfig+0x1bc>)
 80088f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80088fa:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fa fcb6 	bl	8003270 <HAL_InitTick>
 8008904:	4603      	mov	r3, r0
 8008906:	72fb      	strb	r3, [r7, #11]

  return status;
 8008908:	7afb      	ldrb	r3, [r7, #11]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40022000 	.word	0x40022000
 8008918:	40021000 	.word	0x40021000
 800891c:	08011f74 	.word	0x08011f74
 8008920:	20000000 	.word	0x20000000
 8008924:	20000004 	.word	0x20000004

08008928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008936:	4b3e      	ldr	r3, [pc, #248]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 030c 	and.w	r3, r3, #12
 800893e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008940:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_RCC_GetSysClockFreq+0x34>
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b0c      	cmp	r3, #12
 8008954:	d121      	bne.n	800899a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d11e      	bne.n	800899a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800895c:	4b34      	ldr	r3, [pc, #208]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b00      	cmp	r3, #0
 8008966:	d107      	bne.n	8008978 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008968:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800896a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	e005      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008978:	4b2d      	ldr	r3, [pc, #180]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	091b      	lsrs	r3, r3, #4
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008984:	4a2b      	ldr	r2, [pc, #172]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10d      	bne.n	80089b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008998:	e00a      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d102      	bne.n	80089a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089a0:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80089a2:	61bb      	str	r3, [r7, #24]
 80089a4:	e004      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d101      	bne.n	80089b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089ac:	4b23      	ldr	r3, [pc, #140]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80089ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b0c      	cmp	r3, #12
 80089b4:	d134      	bne.n	8008a20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089b6:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d003      	beq.n	80089ce <HAL_RCC_GetSysClockFreq+0xa6>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d003      	beq.n	80089d4 <HAL_RCC_GetSysClockFreq+0xac>
 80089cc:	e005      	b.n	80089da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80089ce:	4b1a      	ldr	r3, [pc, #104]	; (8008a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80089d0:	617b      	str	r3, [r7, #20]
      break;
 80089d2:	e005      	b.n	80089e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80089d6:	617b      	str	r3, [r7, #20]
      break;
 80089d8:	e002      	b.n	80089e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	617b      	str	r3, [r7, #20]
      break;
 80089de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089e0:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	091b      	lsrs	r3, r3, #4
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	3301      	adds	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80089ee:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	0a1b      	lsrs	r3, r3, #8
 80089f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	fb02 f203 	mul.w	r2, r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a06:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	0e5b      	lsrs	r3, r3, #25
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	3301      	adds	r3, #1
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008a20:	69bb      	ldr	r3, [r7, #24]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3724      	adds	r7, #36	; 0x24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40021000 	.word	0x40021000
 8008a34:	08011f84 	.word	0x08011f84
 8008a38:	00f42400 	.word	0x00f42400
 8008a3c:	007a1200 	.word	0x007a1200

08008a40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a44:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a46:	681b      	ldr	r3, [r3, #0]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000000 	.word	0x20000000

08008a58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a60:	2300      	movs	r3, #0
 8008a62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a64:	4b2a      	ldr	r3, [pc, #168]	; (8008b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008a70:	f7ff f9ce 	bl	8007e10 <HAL_PWREx_GetVoltageRange>
 8008a74:	6178      	str	r0, [r7, #20]
 8008a76:	e014      	b.n	8008aa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a78:	4b25      	ldr	r3, [pc, #148]	; (8008b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	4a24      	ldr	r2, [pc, #144]	; (8008b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a82:	6593      	str	r3, [r2, #88]	; 0x58
 8008a84:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008a90:	f7ff f9be 	bl	8007e10 <HAL_PWREx_GetVoltageRange>
 8008a94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008a96:	4b1e      	ldr	r3, [pc, #120]	; (8008b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9a:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa8:	d10b      	bne.n	8008ac2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b80      	cmp	r3, #128	; 0x80
 8008aae:	d919      	bls.n	8008ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2ba0      	cmp	r3, #160	; 0xa0
 8008ab4:	d902      	bls.n	8008abc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	613b      	str	r3, [r7, #16]
 8008aba:	e013      	b.n	8008ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008abc:	2301      	movs	r3, #1
 8008abe:	613b      	str	r3, [r7, #16]
 8008ac0:	e010      	b.n	8008ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b80      	cmp	r3, #128	; 0x80
 8008ac6:	d902      	bls.n	8008ace <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008ac8:	2303      	movs	r3, #3
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	e00a      	b.n	8008ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b80      	cmp	r3, #128	; 0x80
 8008ad2:	d102      	bne.n	8008ada <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	e004      	b.n	8008ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b70      	cmp	r3, #112	; 0x70
 8008ade:	d101      	bne.n	8008ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f023 0207 	bic.w	r2, r3, #7
 8008aec:	4909      	ldr	r1, [pc, #36]	; (8008b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008af4:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d001      	beq.n	8008b06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	40021000 	.word	0x40021000
 8008b14:	40022000 	.word	0x40022000

08008b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b20:	2300      	movs	r3, #0
 8008b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b24:	2300      	movs	r3, #0
 8008b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d041      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b3c:	d02a      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b42:	d824      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b48:	d008      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b4e:	d81e      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b58:	d010      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b5a:	e018      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008b5c:	4b86      	ldr	r3, [pc, #536]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	4a85      	ldr	r2, [pc, #532]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b68:	e015      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fadd 	bl	8009130 <RCCEx_PLLSAI1_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b7a:	e00c      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3320      	adds	r3, #32
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fbc6 	bl	8009314 <RCCEx_PLLSAI2_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	74fb      	strb	r3, [r7, #19]
      break;
 8008b92:	e000      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b96:	7cfb      	ldrb	r3, [r7, #19]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b9c:	4b76      	ldr	r3, [pc, #472]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008baa:	4973      	ldr	r1, [pc, #460]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008bb2:	e001      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb4:	7cfb      	ldrb	r3, [r7, #19]
 8008bb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d041      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bcc:	d02a      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bd2:	d824      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bd8:	d008      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bde:	d81e      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008be8:	d010      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008bea:	e018      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008bec:	4b62      	ldr	r3, [pc, #392]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	4a61      	ldr	r2, [pc, #388]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008bf8:	e015      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fa95 	bl	8009130 <RCCEx_PLLSAI1_Config>
 8008c06:	4603      	mov	r3, r0
 8008c08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c0a:	e00c      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3320      	adds	r3, #32
 8008c10:	2100      	movs	r1, #0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fb7e 	bl	8009314 <RCCEx_PLLSAI2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c1c:	e003      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	74fb      	strb	r3, [r7, #19]
      break;
 8008c22:	e000      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c26:	7cfb      	ldrb	r3, [r7, #19]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c2c:	4b52      	ldr	r3, [pc, #328]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3a:	494f      	ldr	r1, [pc, #316]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008c42:	e001      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c44:	7cfb      	ldrb	r3, [r7, #19]
 8008c46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80a0 	beq.w	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c56:	2300      	movs	r3, #0
 8008c58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c5a:	4b47      	ldr	r3, [pc, #284]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00d      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c70:	4b41      	ldr	r3, [pc, #260]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c74:	4a40      	ldr	r2, [pc, #256]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c7c:	4b3e      	ldr	r3, [pc, #248]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c84:	60bb      	str	r3, [r7, #8]
 8008c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c8c:	4b3b      	ldr	r3, [pc, #236]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a3a      	ldr	r2, [pc, #232]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c98:	f7fa fb3a 	bl	8003310 <HAL_GetTick>
 8008c9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008c9e:	e009      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ca0:	f7fa fb36 	bl	8003310 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d902      	bls.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	74fb      	strb	r3, [r7, #19]
        break;
 8008cb2:	e005      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008cb4:	4b31      	ldr	r3, [pc, #196]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0ef      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008cc0:	7cfb      	ldrb	r3, [r7, #19]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d15c      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cc6:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01f      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d019      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ce4:	4b24      	ldr	r3, [pc, #144]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008cf0:	4b21      	ldr	r3, [pc, #132]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf6:	4a20      	ldr	r2, [pc, #128]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d00:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d06:	4a1c      	ldr	r2, [pc, #112]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d10:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d016      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d22:	f7fa faf5 	bl	8003310 <HAL_GetTick>
 8008d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d28:	e00b      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d2a:	f7fa faf1 	bl	8003310 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d902      	bls.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8008d40:	e006      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d42:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0ec      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008d50:	7cfb      	ldrb	r3, [r7, #19]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10c      	bne.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d56:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d66:	4904      	ldr	r1, [pc, #16]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008d6e:	e009      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d70:	7cfb      	ldrb	r3, [r7, #19]
 8008d72:	74bb      	strb	r3, [r7, #18]
 8008d74:	e006      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008d76:	bf00      	nop
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7cfb      	ldrb	r3, [r7, #19]
 8008d82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d84:	7c7b      	ldrb	r3, [r7, #17]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d105      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d8a:	4ba6      	ldr	r3, [pc, #664]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8e:	4aa5      	ldr	r2, [pc, #660]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008da2:	4ba0      	ldr	r3, [pc, #640]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da8:	f023 0203 	bic.w	r2, r3, #3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	499c      	ldr	r1, [pc, #624]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008dc4:	4b97      	ldr	r3, [pc, #604]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dca:	f023 020c 	bic.w	r2, r3, #12
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd2:	4994      	ldr	r1, [pc, #592]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008de6:	4b8f      	ldr	r3, [pc, #572]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	498b      	ldr	r1, [pc, #556]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0308 	and.w	r3, r3, #8
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e08:	4b86      	ldr	r3, [pc, #536]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e16:	4983      	ldr	r1, [pc, #524]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e2a:	4b7e      	ldr	r3, [pc, #504]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e38:	497a      	ldr	r1, [pc, #488]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e4c:	4b75      	ldr	r3, [pc, #468]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	4972      	ldr	r1, [pc, #456]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e6e:	4b6d      	ldr	r3, [pc, #436]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7c:	4969      	ldr	r1, [pc, #420]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e90:	4b64      	ldr	r3, [pc, #400]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e9e:	4961      	ldr	r1, [pc, #388]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008eb2:	4b5c      	ldr	r3, [pc, #368]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec0:	4958      	ldr	r1, [pc, #352]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ed4:	4b53      	ldr	r3, [pc, #332]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	4950      	ldr	r1, [pc, #320]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ef6:	4b4b      	ldr	r3, [pc, #300]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f04:	4947      	ldr	r1, [pc, #284]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f18:	4b42      	ldr	r3, [pc, #264]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f1e:	f023 0203 	bic.w	r2, r3, #3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f26:	493f      	ldr	r1, [pc, #252]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d028      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f3a:	4b3a      	ldr	r3, [pc, #232]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f48:	4936      	ldr	r1, [pc, #216]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f58:	d106      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f5a:	4b32      	ldr	r3, [pc, #200]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	4a31      	ldr	r2, [pc, #196]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f64:	60d3      	str	r3, [r2, #12]
 8008f66:	e011      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f70:	d10c      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3304      	adds	r3, #4
 8008f76:	2101      	movs	r1, #1
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 f8d9 	bl	8009130 <RCCEx_PLLSAI1_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008f82:	7cfb      	ldrb	r3, [r7, #19]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8008f88:	7cfb      	ldrb	r3, [r7, #19]
 8008f8a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d028      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f98:	4b22      	ldr	r3, [pc, #136]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa6:	491f      	ldr	r1, [pc, #124]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fb6:	d106      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fb8:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4a19      	ldr	r2, [pc, #100]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fc2:	60d3      	str	r3, [r2, #12]
 8008fc4:	e011      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fce:	d10c      	bne.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f8aa 	bl	8009130 <RCCEx_PLLSAI1_Config>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008fe0:	7cfb      	ldrb	r3, [r7, #19]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8008fe6:	7cfb      	ldrb	r3, [r7, #19]
 8008fe8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d02a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009004:	4907      	ldr	r1, [pc, #28]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009014:	d108      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009016:	4b03      	ldr	r3, [pc, #12]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	4a02      	ldr	r2, [pc, #8]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800901c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009020:	60d3      	str	r3, [r2, #12]
 8009022:	e013      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8009024:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009030:	d10c      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3304      	adds	r3, #4
 8009036:	2101      	movs	r1, #1
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f879 	bl	8009130 <RCCEx_PLLSAI1_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009042:	7cfb      	ldrb	r3, [r7, #19]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8009048:	7cfb      	ldrb	r3, [r7, #19]
 800904a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d02f      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009058:	4b2c      	ldr	r3, [pc, #176]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009066:	4929      	ldr	r1, [pc, #164]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009076:	d10d      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	2102      	movs	r1, #2
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f856 	bl	8009130 <RCCEx_PLLSAI1_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009088:	7cfb      	ldrb	r3, [r7, #19]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d014      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800908e:	7cfb      	ldrb	r3, [r7, #19]
 8009090:	74bb      	strb	r3, [r7, #18]
 8009092:	e011      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909c:	d10c      	bne.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3320      	adds	r3, #32
 80090a2:	2102      	movs	r1, #2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f935 	bl	8009314 <RCCEx_PLLSAI2_Config>
 80090aa:	4603      	mov	r3, r0
 80090ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80090ae:	7cfb      	ldrb	r3, [r7, #19]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80090b4:	7cfb      	ldrb	r3, [r7, #19]
 80090b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d4:	490d      	ldr	r1, [pc, #52]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090e8:	4b08      	ldr	r3, [pc, #32]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f8:	4904      	ldr	r1, [pc, #16]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009100:	7cbb      	ldrb	r3, [r7, #18]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	40021000 	.word	0x40021000

08009110 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a04      	ldr	r2, [pc, #16]	; (800912c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800911a:	f043 0304 	orr.w	r3, r3, #4
 800911e:	6013      	str	r3, [r2, #0]
}
 8009120:	bf00      	nop
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40021000 	.word	0x40021000

08009130 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800913e:	4b74      	ldr	r3, [pc, #464]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d018      	beq.n	800917c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800914a:	4b71      	ldr	r3, [pc, #452]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f003 0203 	and.w	r2, r3, #3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d10d      	bne.n	8009176 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
       ||
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009162:	4b6b      	ldr	r3, [pc, #428]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	091b      	lsrs	r3, r3, #4
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
       ||
 8009172:	429a      	cmp	r2, r3
 8009174:	d047      	beq.n	8009206 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	73fb      	strb	r3, [r7, #15]
 800917a:	e044      	b.n	8009206 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b03      	cmp	r3, #3
 8009182:	d018      	beq.n	80091b6 <RCCEx_PLLSAI1_Config+0x86>
 8009184:	2b03      	cmp	r3, #3
 8009186:	d825      	bhi.n	80091d4 <RCCEx_PLLSAI1_Config+0xa4>
 8009188:	2b01      	cmp	r3, #1
 800918a:	d002      	beq.n	8009192 <RCCEx_PLLSAI1_Config+0x62>
 800918c:	2b02      	cmp	r3, #2
 800918e:	d009      	beq.n	80091a4 <RCCEx_PLLSAI1_Config+0x74>
 8009190:	e020      	b.n	80091d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009192:	4b5f      	ldr	r3, [pc, #380]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d11d      	bne.n	80091da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091a2:	e01a      	b.n	80091da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80091a4:	4b5a      	ldr	r3, [pc, #360]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d116      	bne.n	80091de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091b4:	e013      	b.n	80091de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80091b6:	4b56      	ldr	r3, [pc, #344]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10f      	bne.n	80091e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80091c2:	4b53      	ldr	r3, [pc, #332]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091d2:	e006      	b.n	80091e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
      break;
 80091d8:	e004      	b.n	80091e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091da:	bf00      	nop
 80091dc:	e002      	b.n	80091e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10d      	bne.n	8009206 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80091ea:	4b49      	ldr	r3, [pc, #292]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6819      	ldr	r1, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	430b      	orrs	r3, r1
 8009200:	4943      	ldr	r1, [pc, #268]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009202:	4313      	orrs	r3, r2
 8009204:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d17c      	bne.n	8009306 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800920c:	4b40      	ldr	r3, [pc, #256]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a3f      	ldr	r2, [pc, #252]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009218:	f7fa f87a 	bl	8003310 <HAL_GetTick>
 800921c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800921e:	e009      	b.n	8009234 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009220:	f7fa f876 	bl	8003310 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b02      	cmp	r3, #2
 800922c:	d902      	bls.n	8009234 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	73fb      	strb	r3, [r7, #15]
        break;
 8009232:	e005      	b.n	8009240 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009234:	4b36      	ldr	r3, [pc, #216]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1ef      	bne.n	8009220 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d15f      	bne.n	8009306 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d110      	bne.n	800926e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800924c:	4b30      	ldr	r3, [pc, #192]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009254:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6892      	ldr	r2, [r2, #8]
 800925c:	0211      	lsls	r1, r2, #8
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	68d2      	ldr	r2, [r2, #12]
 8009262:	06d2      	lsls	r2, r2, #27
 8009264:	430a      	orrs	r2, r1
 8009266:	492a      	ldr	r1, [pc, #168]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009268:	4313      	orrs	r3, r2
 800926a:	610b      	str	r3, [r1, #16]
 800926c:	e027      	b.n	80092be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d112      	bne.n	800929a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009274:	4b26      	ldr	r3, [pc, #152]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800927c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6892      	ldr	r2, [r2, #8]
 8009284:	0211      	lsls	r1, r2, #8
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6912      	ldr	r2, [r2, #16]
 800928a:	0852      	lsrs	r2, r2, #1
 800928c:	3a01      	subs	r2, #1
 800928e:	0552      	lsls	r2, r2, #21
 8009290:	430a      	orrs	r2, r1
 8009292:	491f      	ldr	r1, [pc, #124]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009294:	4313      	orrs	r3, r2
 8009296:	610b      	str	r3, [r1, #16]
 8009298:	e011      	b.n	80092be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80092a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6892      	ldr	r2, [r2, #8]
 80092aa:	0211      	lsls	r1, r2, #8
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6952      	ldr	r2, [r2, #20]
 80092b0:	0852      	lsrs	r2, r2, #1
 80092b2:	3a01      	subs	r2, #1
 80092b4:	0652      	lsls	r2, r2, #25
 80092b6:	430a      	orrs	r2, r1
 80092b8:	4915      	ldr	r1, [pc, #84]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80092be:	4b14      	ldr	r3, [pc, #80]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a13      	ldr	r2, [pc, #76]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ca:	f7fa f821 	bl	8003310 <HAL_GetTick>
 80092ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092d0:	e009      	b.n	80092e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092d2:	f7fa f81d 	bl	8003310 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d902      	bls.n	80092e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	73fb      	strb	r3, [r7, #15]
          break;
 80092e4:	e005      	b.n	80092f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092e6:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0ef      	beq.n	80092d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	4903      	ldr	r1, [pc, #12]	; (8009310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009302:	4313      	orrs	r3, r2
 8009304:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	40021000 	.word	0x40021000

08009314 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009322:	4b69      	ldr	r3, [pc, #420]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d018      	beq.n	8009360 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800932e:	4b66      	ldr	r3, [pc, #408]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0203 	and.w	r2, r3, #3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d10d      	bne.n	800935a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
       ||
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009346:	4b60      	ldr	r3, [pc, #384]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	091b      	lsrs	r3, r3, #4
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
       ||
 8009356:	429a      	cmp	r2, r3
 8009358:	d047      	beq.n	80093ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	73fb      	strb	r3, [r7, #15]
 800935e:	e044      	b.n	80093ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b03      	cmp	r3, #3
 8009366:	d018      	beq.n	800939a <RCCEx_PLLSAI2_Config+0x86>
 8009368:	2b03      	cmp	r3, #3
 800936a:	d825      	bhi.n	80093b8 <RCCEx_PLLSAI2_Config+0xa4>
 800936c:	2b01      	cmp	r3, #1
 800936e:	d002      	beq.n	8009376 <RCCEx_PLLSAI2_Config+0x62>
 8009370:	2b02      	cmp	r3, #2
 8009372:	d009      	beq.n	8009388 <RCCEx_PLLSAI2_Config+0x74>
 8009374:	e020      	b.n	80093b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009376:	4b54      	ldr	r3, [pc, #336]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d11d      	bne.n	80093be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009386:	e01a      	b.n	80093be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009388:	4b4f      	ldr	r3, [pc, #316]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009390:	2b00      	cmp	r3, #0
 8009392:	d116      	bne.n	80093c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009398:	e013      	b.n	80093c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800939a:	4b4b      	ldr	r3, [pc, #300]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10f      	bne.n	80093c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80093a6:	4b48      	ldr	r3, [pc, #288]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093b6:	e006      	b.n	80093c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
      break;
 80093bc:	e004      	b.n	80093c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093be:	bf00      	nop
 80093c0:	e002      	b.n	80093c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093c2:	bf00      	nop
 80093c4:	e000      	b.n	80093c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10d      	bne.n	80093ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80093ce:	4b3e      	ldr	r3, [pc, #248]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6819      	ldr	r1, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	3b01      	subs	r3, #1
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	430b      	orrs	r3, r1
 80093e4:	4938      	ldr	r1, [pc, #224]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d166      	bne.n	80094be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80093f0:	4b35      	ldr	r3, [pc, #212]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a34      	ldr	r2, [pc, #208]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80093f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fc:	f7f9 ff88 	bl	8003310 <HAL_GetTick>
 8009400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009402:	e009      	b.n	8009418 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009404:	f7f9 ff84 	bl	8003310 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d902      	bls.n	8009418 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	73fb      	strb	r3, [r7, #15]
        break;
 8009416:	e005      	b.n	8009424 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009418:	4b2b      	ldr	r3, [pc, #172]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1ef      	bne.n	8009404 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d149      	bne.n	80094be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d110      	bne.n	8009452 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009430:	4b25      	ldr	r3, [pc, #148]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009438:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6892      	ldr	r2, [r2, #8]
 8009440:	0211      	lsls	r1, r2, #8
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	68d2      	ldr	r2, [r2, #12]
 8009446:	06d2      	lsls	r2, r2, #27
 8009448:	430a      	orrs	r2, r1
 800944a:	491f      	ldr	r1, [pc, #124]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800944c:	4313      	orrs	r3, r2
 800944e:	614b      	str	r3, [r1, #20]
 8009450:	e011      	b.n	8009476 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009452:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800945a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	6892      	ldr	r2, [r2, #8]
 8009462:	0211      	lsls	r1, r2, #8
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6912      	ldr	r2, [r2, #16]
 8009468:	0852      	lsrs	r2, r2, #1
 800946a:	3a01      	subs	r2, #1
 800946c:	0652      	lsls	r2, r2, #25
 800946e:	430a      	orrs	r2, r1
 8009470:	4915      	ldr	r1, [pc, #84]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009472:	4313      	orrs	r3, r2
 8009474:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a13      	ldr	r2, [pc, #76]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800947c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009480:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009482:	f7f9 ff45 	bl	8003310 <HAL_GetTick>
 8009486:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009488:	e009      	b.n	800949e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800948a:	f7f9 ff41 	bl	8003310 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d902      	bls.n	800949e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	73fb      	strb	r3, [r7, #15]
          break;
 800949c:	e005      	b.n	80094aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0ef      	beq.n	800948a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d106      	bne.n	80094be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80094b2:	695a      	ldr	r2, [r3, #20]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	4903      	ldr	r1, [pc, #12]	; (80094c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40021000 	.word	0x40021000

080094cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094cc:	b084      	sub	sp, #16
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	f107 001c 	add.w	r0, r7, #28
 80094da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fa40 	bl	800a970 <USB_CoreReset>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80094f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
 8009506:	e005      	b.n	8009514 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009520:	b004      	add	sp, #16
 8009522:	4770      	bx	lr

08009524 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b02      	cmp	r3, #2
 8009536:	d165      	bne.n	8009604 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4a3e      	ldr	r2, [pc, #248]	; (8009634 <USB_SetTurnaroundTime+0x110>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d906      	bls.n	800954e <USB_SetTurnaroundTime+0x2a>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4a3d      	ldr	r2, [pc, #244]	; (8009638 <USB_SetTurnaroundTime+0x114>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d202      	bcs.n	800954e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009548:	230f      	movs	r3, #15
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	e05c      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4a39      	ldr	r2, [pc, #228]	; (8009638 <USB_SetTurnaroundTime+0x114>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d306      	bcc.n	8009564 <USB_SetTurnaroundTime+0x40>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a38      	ldr	r2, [pc, #224]	; (800963c <USB_SetTurnaroundTime+0x118>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d202      	bcs.n	8009564 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800955e:	230e      	movs	r3, #14
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	e051      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4a35      	ldr	r2, [pc, #212]	; (800963c <USB_SetTurnaroundTime+0x118>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d306      	bcc.n	800957a <USB_SetTurnaroundTime+0x56>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4a34      	ldr	r2, [pc, #208]	; (8009640 <USB_SetTurnaroundTime+0x11c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d202      	bcs.n	800957a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009574:	230d      	movs	r3, #13
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e046      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	4a30      	ldr	r2, [pc, #192]	; (8009640 <USB_SetTurnaroundTime+0x11c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d306      	bcc.n	8009590 <USB_SetTurnaroundTime+0x6c>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	4a2f      	ldr	r2, [pc, #188]	; (8009644 <USB_SetTurnaroundTime+0x120>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d802      	bhi.n	8009590 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800958a:	230c      	movs	r3, #12
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	e03b      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4a2c      	ldr	r2, [pc, #176]	; (8009644 <USB_SetTurnaroundTime+0x120>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d906      	bls.n	80095a6 <USB_SetTurnaroundTime+0x82>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4a2b      	ldr	r2, [pc, #172]	; (8009648 <USB_SetTurnaroundTime+0x124>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d802      	bhi.n	80095a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095a0:	230b      	movs	r3, #11
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e030      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4a27      	ldr	r2, [pc, #156]	; (8009648 <USB_SetTurnaroundTime+0x124>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d906      	bls.n	80095bc <USB_SetTurnaroundTime+0x98>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4a26      	ldr	r2, [pc, #152]	; (800964c <USB_SetTurnaroundTime+0x128>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d802      	bhi.n	80095bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80095b6:	230a      	movs	r3, #10
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	e025      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4a23      	ldr	r2, [pc, #140]	; (800964c <USB_SetTurnaroundTime+0x128>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d906      	bls.n	80095d2 <USB_SetTurnaroundTime+0xae>
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a22      	ldr	r2, [pc, #136]	; (8009650 <USB_SetTurnaroundTime+0x12c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d202      	bcs.n	80095d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095cc:	2309      	movs	r3, #9
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e01a      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4a1e      	ldr	r2, [pc, #120]	; (8009650 <USB_SetTurnaroundTime+0x12c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d306      	bcc.n	80095e8 <USB_SetTurnaroundTime+0xc4>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <USB_SetTurnaroundTime+0x130>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d802      	bhi.n	80095e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095e2:	2308      	movs	r3, #8
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e00f      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4a1a      	ldr	r2, [pc, #104]	; (8009654 <USB_SetTurnaroundTime+0x130>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d906      	bls.n	80095fe <USB_SetTurnaroundTime+0xda>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4a19      	ldr	r2, [pc, #100]	; (8009658 <USB_SetTurnaroundTime+0x134>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d202      	bcs.n	80095fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80095f8:	2307      	movs	r3, #7
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e004      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80095fe:	2306      	movs	r3, #6
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	e001      	b.n	8009608 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009604:	2309      	movs	r3, #9
 8009606:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	029b      	lsls	r3, r3, #10
 800961c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009620:	431a      	orrs	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	00d8acbf 	.word	0x00d8acbf
 8009638:	00e4e1c0 	.word	0x00e4e1c0
 800963c:	00f42400 	.word	0x00f42400
 8009640:	01067380 	.word	0x01067380
 8009644:	011a499f 	.word	0x011a499f
 8009648:	01312cff 	.word	0x01312cff
 800964c:	014ca43f 	.word	0x014ca43f
 8009650:	016e3600 	.word	0x016e3600
 8009654:	01a6ab1f 	.word	0x01a6ab1f
 8009658:	01e84800 	.word	0x01e84800

0800965c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f043 0201 	orr.w	r2, r3, #1
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f023 0201 	bic.w	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096bc:	78fb      	ldrb	r3, [r7, #3]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d115      	bne.n	80096ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096ce:	2001      	movs	r0, #1
 80096d0:	f7f9 fe2a 	bl	8003328 <HAL_Delay>
      ms++;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
 80096d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 f8cf 	bl	800a87e <USB_GetMode>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d01e      	beq.n	8009724 <USB_SetCurrentMode+0x84>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b31      	cmp	r3, #49	; 0x31
 80096ea:	d9f0      	bls.n	80096ce <USB_SetCurrentMode+0x2e>
 80096ec:	e01a      	b.n	8009724 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d115      	bne.n	8009720 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009700:	2001      	movs	r0, #1
 8009702:	f7f9 fe11 	bl	8003328 <HAL_Delay>
      ms++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3301      	adds	r3, #1
 800970a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 f8b6 	bl	800a87e <USB_GetMode>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d005      	beq.n	8009724 <USB_SetCurrentMode+0x84>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b31      	cmp	r3, #49	; 0x31
 800971c:	d9f0      	bls.n	8009700 <USB_SetCurrentMode+0x60>
 800971e:	e001      	b.n	8009724 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e005      	b.n	8009730 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b32      	cmp	r3, #50	; 0x32
 8009728:	d101      	bne.n	800972e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009738:	b084      	sub	sp, #16
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009752:	2300      	movs	r3, #0
 8009754:	613b      	str	r3, [r7, #16]
 8009756:	e009      	b.n	800976c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3340      	adds	r3, #64	; 0x40
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	2200      	movs	r2, #0
 8009764:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	3301      	adds	r3, #1
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b0e      	cmp	r3, #14
 8009770:	d9f2      	bls.n	8009758 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009774:	2b00      	cmp	r3, #0
 8009776:	d11c      	bne.n	80097b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009786:	f043 0302 	orr.w	r3, r3, #2
 800978a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	e005      	b.n	80097be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097c4:	461a      	mov	r2, r3
 80097c6:	2300      	movs	r3, #0
 80097c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d0:	4619      	mov	r1, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d8:	461a      	mov	r2, r3
 80097da:	680b      	ldr	r3, [r1, #0]
 80097dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097de:	2103      	movs	r1, #3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f955 	bl	8009a90 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097e6:	2110      	movs	r1, #16
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8f1 	bl	80099d0 <USB_FlushTxFifo>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f91b 	bl	8009a34 <USB_FlushRxFifo>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	461a      	mov	r2, r3
 8009810:	2300      	movs	r3, #0
 8009812:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981a:	461a      	mov	r2, r3
 800981c:	2300      	movs	r3, #0
 800981e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009826:	461a      	mov	r2, r3
 8009828:	2300      	movs	r3, #0
 800982a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800982c:	2300      	movs	r3, #0
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	e043      	b.n	80098ba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009848:	d118      	bne.n	800987c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	461a      	mov	r2, r3
 800985e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	e013      	b.n	800988e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009872:	461a      	mov	r2, r3
 8009874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	e008      	b.n	800988e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	015a      	lsls	r2, r3, #5
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4413      	add	r3, r2
 8009884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009888:	461a      	mov	r2, r3
 800988a:	2300      	movs	r3, #0
 800988c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	461a      	mov	r2, r3
 800989c:	2300      	movs	r3, #0
 800989e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	461a      	mov	r2, r3
 80098ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	3301      	adds	r3, #1
 80098b8:	613b      	str	r3, [r7, #16]
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d3b7      	bcc.n	8009832 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098c2:	2300      	movs	r3, #0
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	e043      	b.n	8009950 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098de:	d118      	bne.n	8009912 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f2:	461a      	mov	r2, r3
 80098f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	e013      	b.n	8009924 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009908:	461a      	mov	r2, r3
 800990a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	e008      	b.n	8009924 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991e:	461a      	mov	r2, r3
 8009920:	2300      	movs	r3, #0
 8009922:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	461a      	mov	r2, r3
 8009932:	2300      	movs	r3, #0
 8009934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009942:	461a      	mov	r2, r3
 8009944:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009948:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3301      	adds	r3, #1
 800994e:	613b      	str	r3, [r7, #16]
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	429a      	cmp	r2, r3
 8009956:	d3b7      	bcc.n	80098c8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800996a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009978:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	f043 0210 	orr.w	r2, r3, #16
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699a      	ldr	r2, [r3, #24]
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <USB_DevInit+0x294>)
 800998c:	4313      	orrs	r3, r2
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f043 0208 	orr.w	r2, r3, #8
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d107      	bne.n	80099ba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099b2:	f043 0304 	orr.w	r3, r3, #4
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099c6:	b004      	add	sp, #16
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	803c3800 	.word	0x803c3800

080099d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3301      	adds	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	4a12      	ldr	r2, [pc, #72]	; (8009a30 <USB_FlushTxFifo+0x60>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e01a      	b.n	8009a24 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	daf3      	bge.n	80099de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	019b      	lsls	r3, r3, #6
 80099fe:	f043 0220 	orr.w	r2, r3, #32
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	4a08      	ldr	r2, [pc, #32]	; (8009a30 <USB_FlushTxFifo+0x60>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d901      	bls.n	8009a16 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e006      	b.n	8009a24 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	f003 0320 	and.w	r3, r3, #32
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d0f1      	beq.n	8009a06 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	00030d40 	.word	0x00030d40

08009a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3301      	adds	r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	4a11      	ldr	r2, [pc, #68]	; (8009a8c <USB_FlushRxFifo+0x58>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d901      	bls.n	8009a50 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e017      	b.n	8009a80 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	daf3      	bge.n	8009a40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2210      	movs	r2, #16
 8009a60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	4a08      	ldr	r2, [pc, #32]	; (8009a8c <USB_FlushRxFifo+0x58>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d901      	bls.n	8009a72 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e006      	b.n	8009a80 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d0f1      	beq.n	8009a62 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	00030d40 	.word	0x00030d40

08009a90 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b087      	sub	sp, #28
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 0306 	and.w	r3, r3, #6
 8009ada:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d002      	beq.n	8009ae8 <USB_GetDevSpeed+0x26>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b06      	cmp	r3, #6
 8009ae6:	d102      	bne.n	8009aee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ae8:	2302      	movs	r3, #2
 8009aea:	75fb      	strb	r3, [r7, #23]
 8009aec:	e001      	b.n	8009af2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009aee:	230f      	movs	r3, #15
 8009af0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d13a      	bne.n	8009b92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b22:	69da      	ldr	r2, [r3, #28]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f003 030f 	and.w	r3, r3, #15
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	68f9      	ldr	r1, [r7, #12]
 8009b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d155      	bne.n	8009c00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	78db      	ldrb	r3, [r3, #3]
 8009b6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	059b      	lsls	r3, r3, #22
 8009b76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	e036      	b.n	8009c00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b98:	69da      	ldr	r2, [r3, #28]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba8:	041b      	lsls	r3, r3, #16
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d11a      	bne.n	8009c00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	78db      	ldrb	r3, [r3, #3]
 8009be4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009be6:	430b      	orrs	r3, r1
 8009be8:	4313      	orrs	r3, r2
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	0151      	lsls	r1, r2, #5
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	440a      	add	r2, r1
 8009bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
	...

08009c10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d161      	bne.n	8009cf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c42:	d11f      	bne.n	8009c84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	0151      	lsls	r1, r2, #5
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	440a      	add	r2, r1
 8009c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	2101      	movs	r1, #1
 8009c96:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cae:	69da      	ldr	r2, [r3, #28]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	2101      	movs	r1, #1
 8009cba:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	68f9      	ldr	r1, [r7, #12]
 8009cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cc8:	4013      	ands	r3, r2
 8009cca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	0159      	lsls	r1, r3, #5
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	440b      	add	r3, r1
 8009ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4b35      	ldr	r3, [pc, #212]	; (8009dc0 <USB_DeactivateEndpoint+0x1b0>)
 8009cea:	4013      	ands	r3, r2
 8009cec:	600b      	str	r3, [r1, #0]
 8009cee:	e060      	b.n	8009db2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d06:	d11f      	bne.n	8009d48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	2101      	movs	r1, #1
 8009d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5e:	041b      	lsls	r3, r3, #16
 8009d60:	43db      	mvns	r3, r3
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d68:	4013      	ands	r3, r2
 8009d6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	69da      	ldr	r2, [r3, #28]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 030f 	and.w	r3, r3, #15
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	43db      	mvns	r3, r3
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	0159      	lsls	r1, r3, #5
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	440b      	add	r3, r1
 8009da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009daa:	4619      	mov	r1, r3
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <USB_DeactivateEndpoint+0x1b4>)
 8009dae:	4013      	ands	r3, r2
 8009db0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	ec337800 	.word	0xec337800
 8009dc4:	eff37800 	.word	0xeff37800

08009dc8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	f040 810a 	bne.w	8009ffa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d132      	bne.n	8009e54 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	0151      	lsls	r1, r2, #5
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	440a      	add	r2, r1
 8009e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	0151      	lsls	r1, r2, #5
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	440a      	add	r2, r1
 8009e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	0151      	lsls	r1, r2, #5
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	440a      	add	r2, r1
 8009e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e4c:	0cdb      	lsrs	r3, r3, #19
 8009e4e:	04db      	lsls	r3, r3, #19
 8009e50:	6113      	str	r3, [r2, #16]
 8009e52:	e074      	b.n	8009f3e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6e:	0cdb      	lsrs	r3, r3, #19
 8009e70:	04db      	lsls	r3, r3, #19
 8009e72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	6959      	ldr	r1, [r3, #20]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	440b      	add	r3, r1
 8009eb0:	1e59      	subs	r1, r3, #1
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009eba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ebc:	4baf      	ldr	r3, [pc, #700]	; (800a17c <USB_EPStartXfer+0x3b4>)
 8009ebe:	400b      	ands	r3, r1
 8009ec0:	6939      	ldr	r1, [r7, #16]
 8009ec2:	0148      	lsls	r0, r1, #5
 8009ec4:	6979      	ldr	r1, [r7, #20]
 8009ec6:	4401      	add	r1, r0
 8009ec8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	691a      	ldr	r2, [r3, #16]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ee6:	6939      	ldr	r1, [r7, #16]
 8009ee8:	0148      	lsls	r0, r1, #5
 8009eea:	6979      	ldr	r1, [r7, #20]
 8009eec:	4401      	add	r1, r0
 8009eee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	78db      	ldrb	r3, [r3, #3]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d11f      	bne.n	8009f3e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	0151      	lsls	r1, r2, #5
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	440a      	add	r2, r1
 8009f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009f1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	015a      	lsls	r2, r3, #5
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	4413      	add	r3, r2
 8009f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	0151      	lsls	r1, r2, #5
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	440a      	add	r2, r1
 8009f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f3c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	0151      	lsls	r1, r2, #5
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	440a      	add	r2, r1
 8009f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f5c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	78db      	ldrb	r3, [r3, #3]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d015      	beq.n	8009f92 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8100 	beq.w	800a170 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	6979      	ldr	r1, [r7, #20]
 8009f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	634b      	str	r3, [r1, #52]	; 0x34
 8009f90:	e0ee      	b.n	800a170 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d110      	bne.n	8009fc4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	015a      	lsls	r2, r3, #5
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	0151      	lsls	r1, r2, #5
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	440a      	add	r2, r1
 8009fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	e00f      	b.n	8009fe4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fe2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68d9      	ldr	r1, [r3, #12]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781a      	ldrb	r2, [r3, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9e2 	bl	800a3bc <USB_WritePacket>
 8009ff8:	e0ba      	b.n	800a170 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a014:	0cdb      	lsrs	r3, r3, #19
 800a016:	04db      	lsls	r3, r3, #19
 800a018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	0151      	lsls	r1, r2, #5
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	440a      	add	r2, r1
 800a030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a03c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d123      	bne.n	800a08e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a052:	691a      	ldr	r2, [r3, #16]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05c:	6939      	ldr	r1, [r7, #16]
 800a05e:	0148      	lsls	r0, r1, #5
 800a060:	6979      	ldr	r1, [r7, #20]
 800a062:	4401      	add	r1, r0
 800a064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a068:	4313      	orrs	r3, r2
 800a06a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	0151      	lsls	r1, r2, #5
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	440a      	add	r2, r1
 800a082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a08a:	6113      	str	r3, [r2, #16]
 800a08c:	e033      	b.n	800a0f6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	4413      	add	r3, r2
 800a098:	1e5a      	subs	r2, r3, #1
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b0:	691a      	ldr	r2, [r3, #16]
 800a0b2:	89fb      	ldrh	r3, [r7, #14]
 800a0b4:	04d9      	lsls	r1, r3, #19
 800a0b6:	4b31      	ldr	r3, [pc, #196]	; (800a17c <USB_EPStartXfer+0x3b4>)
 800a0b8:	400b      	ands	r3, r1
 800a0ba:	6939      	ldr	r1, [r7, #16]
 800a0bc:	0148      	lsls	r0, r1, #5
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	4401      	add	r1, r0
 800a0c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	89f9      	ldrh	r1, [r7, #14]
 800a0de:	fb01 f303 	mul.w	r3, r1, r3
 800a0e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0e6:	6939      	ldr	r1, [r7, #16]
 800a0e8:	0148      	lsls	r0, r1, #5
 800a0ea:	6979      	ldr	r1, [r7, #20]
 800a0ec:	4401      	add	r1, r0
 800a0ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	78db      	ldrb	r3, [r3, #3]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d128      	bne.n	800a150 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d110      	bne.n	800a130 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	e00f      	b.n	800a150 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a14e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a16e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	1ff80000 	.word	0x1ff80000

0800a180 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	f040 80ab 	bne.w	800a2f4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d132      	bne.n	800a20c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	0151      	lsls	r1, r2, #5
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	440a      	add	r2, r1
 800a1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	015a      	lsls	r2, r3, #5
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	0151      	lsls	r1, r2, #5
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	440a      	add	r2, r1
 800a1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	0151      	lsls	r1, r2, #5
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	440a      	add	r2, r1
 800a200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a204:	0cdb      	lsrs	r3, r3, #19
 800a206:	04db      	lsls	r3, r3, #19
 800a208:	6113      	str	r3, [r2, #16]
 800a20a:	e04e      	b.n	800a2aa <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a226:	0cdb      	lsrs	r3, r3, #19
 800a228:	04db      	lsls	r3, r3, #19
 800a22a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a24a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a24e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	695a      	ldr	r2, [r3, #20]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d903      	bls.n	800a264 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	0151      	lsls	r1, r2, #5
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	440a      	add	r2, r1
 800a27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	691a      	ldr	r2, [r3, #16]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	0148      	lsls	r0, r1, #5
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	4401      	add	r1, r0
 800a2a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	0151      	lsls	r1, r2, #5
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	440a      	add	r2, r1
 800a2c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2c8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d06d      	beq.n	800a3ae <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e8:	68f9      	ldr	r1, [r7, #12]
 800a2ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	634b      	str	r3, [r1, #52]	; 0x34
 800a2f2:	e05c      	b.n	800a3ae <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30e:	0cdb      	lsrs	r3, r3, #19
 800a310:	04db      	lsls	r3, r3, #19
 800a312:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	0151      	lsls	r1, r2, #5
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	440a      	add	r2, r1
 800a32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a32e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a332:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a336:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	0151      	lsls	r1, r2, #5
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	440a      	add	r2, r1
 800a35e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a366:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	015a      	lsls	r2, r3, #5
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4413      	add	r3, r2
 800a370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a374:	691a      	ldr	r2, [r3, #16]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	0148      	lsls	r0, r1, #5
 800a382:	68f9      	ldr	r1, [r7, #12]
 800a384:	4401      	add	r1, r0
 800a386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a38a:	4313      	orrs	r3, r2
 800a38c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	0151      	lsls	r1, r2, #5
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	440a      	add	r2, r1
 800a3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b089      	sub	sp, #36	; 0x24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	71fb      	strb	r3, [r7, #7]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a3da:	88bb      	ldrh	r3, [r7, #4]
 800a3dc:	3303      	adds	r3, #3
 800a3de:	089b      	lsrs	r3, r3, #2
 800a3e0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	61bb      	str	r3, [r7, #24]
 800a3e6:	e018      	b.n	800a41a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	031a      	lsls	r2, r3, #12
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	3301      	adds	r3, #1
 800a400:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	3301      	adds	r3, #1
 800a406:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	3301      	adds	r3, #1
 800a40c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	3301      	adds	r3, #1
 800a412:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	3301      	adds	r3, #1
 800a418:	61bb      	str	r3, [r7, #24]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d3e2      	bcc.n	800a3e8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3724      	adds	r7, #36	; 0x24
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a430:	b480      	push	{r7}
 800a432:	b08b      	sub	sp, #44	; 0x2c
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	089b      	lsrs	r3, r3, #2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a456:	2300      	movs	r3, #0
 800a458:	623b      	str	r3, [r7, #32]
 800a45a:	e014      	b.n	800a486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	601a      	str	r2, [r3, #0]
    pDest++;
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	3301      	adds	r3, #1
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	3301      	adds	r3, #1
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	3301      	adds	r3, #1
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	3301      	adds	r3, #1
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	3301      	adds	r3, #1
 800a484:	623b      	str	r3, [r7, #32]
 800a486:	6a3a      	ldr	r2, [r7, #32]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d3e6      	bcc.n	800a45c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a48e:	8bfb      	ldrh	r3, [r7, #30]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01e      	beq.n	800a4d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f107 0310 	add.w	r3, r7, #16
 800a4a4:	6812      	ldr	r2, [r2, #0]
 800a4a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	701a      	strb	r2, [r3, #0]
      i++;
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a4c6:	8bfb      	ldrh	r3, [r7, #30]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4cc:	8bfb      	ldrh	r3, [r7, #30]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1ea      	bne.n	800a4a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	372c      	adds	r7, #44	; 0x2c
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	785b      	ldrb	r3, [r3, #1]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d12c      	bne.n	800a556 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	db12      	blt.n	800a534 <USB_EPSetStall+0x54>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00f      	beq.n	800a534 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a52e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a532:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a54e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	e02b      	b.n	800a5ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	db12      	blt.n	800a58e <USB_EPSetStall+0xae>
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00f      	beq.n	800a58e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4413      	add	r3, r2
 800a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	0151      	lsls	r1, r2, #5
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	440a      	add	r2, r1
 800a584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a58c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	0151      	lsls	r1, r2, #5
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	785b      	ldrb	r3, [r3, #1]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d128      	bne.n	800a62a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	0151      	lsls	r1, r2, #5
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	440a      	add	r2, r1
 800a5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	78db      	ldrb	r3, [r3, #3]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d003      	beq.n	800a608 <USB_EPClearStall+0x4c>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	78db      	ldrb	r3, [r3, #3]
 800a604:	2b02      	cmp	r3, #2
 800a606:	d138      	bne.n	800a67a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	0151      	lsls	r1, r2, #5
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	440a      	add	r2, r1
 800a61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	e027      	b.n	800a67a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	0151      	lsls	r1, r2, #5
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	440a      	add	r2, r1
 800a640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a644:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a648:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	78db      	ldrb	r3, [r3, #3]
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d003      	beq.n	800a65a <USB_EPClearStall+0x9e>
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	78db      	ldrb	r3, [r3, #3]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d10f      	bne.n	800a67a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	0151      	lsls	r1, r2, #5
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	440a      	add	r2, r1
 800a670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a678:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a6aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	011b      	lsls	r3, r3, #4
 800a6b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a6bc:	68f9      	ldr	r1, [r7, #12]
 800a6be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a702:	f023 0302 	bic.w	r3, r3, #2
 800a706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a716:	b480      	push	{r7}
 800a718:	b085      	sub	sp, #20
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a730:	f023 0303 	bic.w	r3, r3, #3
 800a734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4013      	ands	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a770:	68fb      	ldr	r3, [r7, #12]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	0c1b      	lsrs	r3, r3, #16
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	b29b      	uxth	r3, r3
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4013      	ands	r3, r2
 800a812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a814:	68bb      	ldr	r3, [r7, #8]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a822:	b480      	push	{r7}
 800a824:	b087      	sub	sp, #28
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a846:	78fb      	ldrb	r3, [r7, #3]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	fa22 f303 	lsr.w	r3, r2, r3
 800a852:	01db      	lsls	r3, r3, #7
 800a854:	b2db      	uxtb	r3, r3
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	4313      	orrs	r3, r2
 800a85a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	4013      	ands	r3, r2
 800a86e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a870:	68bb      	ldr	r3, [r7, #8]
}
 800a872:	4618      	mov	r0, r3
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	f003 0301 	and.w	r3, r3, #1
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a8b8:	f023 0307 	bic.w	r3, r3, #7
 800a8bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	333c      	adds	r3, #60	; 0x3c
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	4a1c      	ldr	r2, [pc, #112]	; (800a96c <USB_EP0_OutStart+0x8c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d90a      	bls.n	800a916 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a90c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a910:	d101      	bne.n	800a916 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e024      	b.n	800a960 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91c:	461a      	mov	r2, r3
 800a91e:	2300      	movs	r3, #0
 800a920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a944:	f043 0318 	orr.w	r3, r3, #24
 800a948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a958:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a95c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	4f54300a 	.word	0x4f54300a

0800a970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3301      	adds	r3, #1
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <USB_CoreReset+0x60>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d901      	bls.n	800a98c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e01a      	b.n	800a9c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	daf3      	bge.n	800a97c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	f043 0201 	orr.w	r2, r3, #1
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	4a09      	ldr	r2, [pc, #36]	; (800a9d0 <USB_CoreReset+0x60>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d901      	bls.n	800a9b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e006      	b.n	800a9c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d0f1      	beq.n	800a9a4 <USB_CoreReset+0x34>

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	00030d40 	.word	0x00030d40

0800a9d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a9e4:	f002 fac2 	bl	800cf6c <USBD_static_malloc>
 800a9e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d105      	bne.n	800a9fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e066      	b.n	800aaca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	7c1b      	ldrb	r3, [r3, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d119      	bne.n	800aa40 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa10:	2202      	movs	r2, #2
 800aa12:	2181      	movs	r1, #129	; 0x81
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f002 f895 	bl	800cb44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa24:	2202      	movs	r2, #2
 800aa26:	2101      	movs	r1, #1
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f002 f88b 	bl	800cb44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2210      	movs	r2, #16
 800aa3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800aa3e:	e016      	b.n	800aa6e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa40:	2340      	movs	r3, #64	; 0x40
 800aa42:	2202      	movs	r2, #2
 800aa44:	2181      	movs	r1, #129	; 0x81
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f002 f87c 	bl	800cb44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa52:	2340      	movs	r3, #64	; 0x40
 800aa54:	2202      	movs	r2, #2
 800aa56:	2101      	movs	r1, #1
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f002 f873 	bl	800cb44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2210      	movs	r2, #16
 800aa6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa6e:	2308      	movs	r3, #8
 800aa70:	2203      	movs	r2, #3
 800aa72:	2182      	movs	r1, #130	; 0x82
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f002 f865 	bl	800cb44 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	7c1b      	ldrb	r3, [r3, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d109      	bne.n	800aab8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaae:	2101      	movs	r1, #1
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f002 f9c1 	bl	800ce38 <USBD_LL_PrepareReceive>
 800aab6:	e007      	b.n	800aac8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aabe:	2340      	movs	r3, #64	; 0x40
 800aac0:	2101      	movs	r1, #1
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f002 f9b8 	bl	800ce38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aade:	2181      	movs	r1, #129	; 0x81
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f002 f86d 	bl	800cbc0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aaec:	2101      	movs	r1, #1
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f002 f866 	bl	800cbc0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aafc:	2182      	movs	r1, #130	; 0x82
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f002 f85e 	bl	800cbc0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00e      	beq.n	800ab3c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f002 fa2a 	bl	800cf88 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e0af      	b.n	800acd0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d03f      	beq.n	800abfc <USBD_CDC_Setup+0xb4>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	f040 809f 	bne.w	800acc0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	88db      	ldrh	r3, [r3, #6]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d02e      	beq.n	800abe8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da16      	bge.n	800abc2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800aba0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	88d2      	ldrh	r2, [r2, #6]
 800aba6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	88db      	ldrh	r3, [r3, #6]
 800abac:	2b07      	cmp	r3, #7
 800abae:	bf28      	it	cs
 800abb0:	2307      	movcs	r3, #7
 800abb2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	89fa      	ldrh	r2, [r7, #14]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 fb43 	bl	800c246 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800abc0:	e085      	b.n	800acce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	785a      	ldrb	r2, [r3, #1]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	88db      	ldrh	r3, [r3, #6]
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800abd8:	6939      	ldr	r1, [r7, #16]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	461a      	mov	r2, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f001 fb5c 	bl	800c29e <USBD_CtlPrepareRx>
      break;
 800abe6:	e072      	b.n	800acce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	7850      	ldrb	r0, [r2, #1]
 800abf4:	2200      	movs	r2, #0
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	4798      	blx	r3
      break;
 800abfa:	e068      	b.n	800acce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	785b      	ldrb	r3, [r3, #1]
 800ac00:	2b0b      	cmp	r3, #11
 800ac02:	d852      	bhi.n	800acaa <USBD_CDC_Setup+0x162>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <USBD_CDC_Setup+0xc4>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac3d 	.word	0x0800ac3d
 800ac10:	0800acb9 	.word	0x0800acb9
 800ac14:	0800acab 	.word	0x0800acab
 800ac18:	0800acab 	.word	0x0800acab
 800ac1c:	0800acab 	.word	0x0800acab
 800ac20:	0800acab 	.word	0x0800acab
 800ac24:	0800acab 	.word	0x0800acab
 800ac28:	0800acab 	.word	0x0800acab
 800ac2c:	0800acab 	.word	0x0800acab
 800ac30:	0800acab 	.word	0x0800acab
 800ac34:	0800ac67 	.word	0x0800ac67
 800ac38:	0800ac91 	.word	0x0800ac91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d107      	bne.n	800ac58 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac48:	f107 030a 	add.w	r3, r7, #10
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 faf8 	bl	800c246 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac56:	e032      	b.n	800acbe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 fa82 	bl	800c164 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac60:	2303      	movs	r3, #3
 800ac62:	75fb      	strb	r3, [r7, #23]
          break;
 800ac64:	e02b      	b.n	800acbe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d107      	bne.n	800ac82 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac72:	f107 030d 	add.w	r3, r7, #13
 800ac76:	2201      	movs	r2, #1
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f001 fae3 	bl	800c246 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac80:	e01d      	b.n	800acbe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f001 fa6d 	bl	800c164 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	75fb      	strb	r3, [r7, #23]
          break;
 800ac8e:	e016      	b.n	800acbe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d00f      	beq.n	800acbc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fa60 	bl	800c164 <USBD_CtlError>
            ret = USBD_FAIL;
 800aca4:	2303      	movs	r3, #3
 800aca6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aca8:	e008      	b.n	800acbc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 fa59 	bl	800c164 <USBD_CtlError>
          ret = USBD_FAIL;
 800acb2:	2303      	movs	r3, #3
 800acb4:	75fb      	strb	r3, [r7, #23]
          break;
 800acb6:	e002      	b.n	800acbe <USBD_CDC_Setup+0x176>
          break;
 800acb8:	bf00      	nop
 800acba:	e008      	b.n	800acce <USBD_CDC_Setup+0x186>
          break;
 800acbc:	bf00      	nop
      }
      break;
 800acbe:	e006      	b.n	800acce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 fa4e 	bl	800c164 <USBD_CtlError>
      ret = USBD_FAIL;
 800acc8:	2303      	movs	r3, #3
 800acca:	75fb      	strb	r3, [r7, #23]
      break;
 800accc:	bf00      	nop
  }

  return (uint8_t)ret;
 800acce:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e04f      	b.n	800ad9a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	440b      	add	r3, r1
 800ad10:	3318      	adds	r3, #24
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d029      	beq.n	800ad6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3318      	adds	r3, #24
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	78f9      	ldrb	r1, [r7, #3]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	1a5b      	subs	r3, r3, r1
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4403      	add	r3, r0
 800ad38:	3344      	adds	r3, #68	; 0x44
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad40:	fb03 f301 	mul.w	r3, r3, r1
 800ad44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d110      	bne.n	800ad6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ad4a:	78fa      	ldrb	r2, [r7, #3]
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	3318      	adds	r3, #24
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad5e:	78f9      	ldrb	r1, [r7, #3]
 800ad60:	2300      	movs	r3, #0
 800ad62:	2200      	movs	r2, #0
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f002 f82f 	bl	800cdc8 <USBD_LL_Transmit>
 800ad6a:	e015      	b.n	800ad98 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	460b      	mov	r3, r1
 800adac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e015      	b.n	800adf0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f002 f86d 	bl	800cea8 <USBD_LL_GetRxDataSize>
 800adce:	4602      	mov	r2, r0
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800adea:	4611      	mov	r1, r2
 800adec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e01b      	b.n	800ae4a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d015      	beq.n	800ae48 <USBD_CDC_EP0_RxReady+0x50>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae22:	2bff      	cmp	r3, #255	; 0xff
 800ae24:	d010      	beq.n	800ae48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ae34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae3c:	b292      	uxth	r2, r2
 800ae3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	22ff      	movs	r2, #255	; 0xff
 800ae44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2243      	movs	r2, #67	; 0x43
 800ae60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ae62:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000094 	.word	0x20000094

0800ae74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2243      	movs	r2, #67	; 0x43
 800ae80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ae82:	4b03      	ldr	r3, [pc, #12]	; (800ae90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	20000050 	.word	0x20000050

0800ae94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2243      	movs	r2, #67	; 0x43
 800aea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200000d8 	.word	0x200000d8

0800aeb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	220a      	movs	r2, #10
 800aec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aec2:	4b03      	ldr	r3, [pc, #12]	; (800aed0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	2000000c 	.word	0x2000000c

0800aed4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e004      	b.n	800aef2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aefe:	b480      	push	{r7}
 800af00:	b087      	sub	sp, #28
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800af18:	2303      	movs	r3, #3
 800af1a:	e008      	b.n	800af2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800af52:	2303      	movs	r3, #3
 800af54:	e004      	b.n	800af60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af7a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800af7c:	2301      	movs	r3, #1
 800af7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e01a      	b.n	800afc4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af94:	2b00      	cmp	r3, #0
 800af96:	d114      	bne.n	800afc2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800afb6:	2181      	movs	r1, #129	; 0x81
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 ff05 	bl	800cdc8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e016      	b.n	800b018 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	7c1b      	ldrb	r3, [r3, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d109      	bne.n	800b006 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800affc:	2101      	movs	r1, #1
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f001 ff1a 	bl	800ce38 <USBD_LL_PrepareReceive>
 800b004:	e007      	b.n	800b016 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	2101      	movs	r1, #1
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 ff11 	bl	800ce38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	4613      	mov	r3, r2
 800b02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b034:	2303      	movs	r3, #3
 800b036:	e01f      	b.n	800b078 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	79fa      	ldrb	r2, [r7, #7]
 800b06a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f001 fceb 	bl	800ca48 <USBD_LL_Init>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b094:	2303      	movs	r3, #3
 800b096:	e016      	b.n	800b0c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	f107 020e 	add.w	r2, r7, #14
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	4798      	blx	r3
 800b0bc:	4602      	mov	r2, r0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 fd02 	bl	800cae0 <USBD_LL_Start>
 800b0dc:	4603      	mov	r3, r0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d009      	beq.n	800b12a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	78fa      	ldrb	r2, [r7, #3]
 800b120:	4611      	mov	r1, r2
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d007      	beq.n	800b15a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	4611      	mov	r1, r2
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
  }

  return USBD_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f000 ffba 	bl	800c0f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b18a:	461a      	mov	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b198:	f003 031f 	and.w	r3, r3, #31
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d01a      	beq.n	800b1d6 <USBD_LL_SetupStage+0x72>
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d822      	bhi.n	800b1ea <USBD_LL_SetupStage+0x86>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <USBD_LL_SetupStage+0x4a>
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d00a      	beq.n	800b1c2 <USBD_LL_SetupStage+0x5e>
 800b1ac:	e01d      	b.n	800b1ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa62 	bl	800b680 <USBD_StdDevReq>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c0:	e020      	b.n	800b204 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fac6 	bl	800b75c <USBD_StdItfReq>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d4:	e016      	b.n	800b204 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fb05 	bl	800b7ee <USBD_StdEPReq>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e8:	e00c      	b.n	800b204 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 fd17 	bl	800cc2c <USBD_LL_StallEP>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73fb      	strb	r3, [r7, #15]
      break;
 800b202:	bf00      	nop
  }

  return ret;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b086      	sub	sp, #24
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	460b      	mov	r3, r1
 800b218:	607a      	str	r2, [r7, #4]
 800b21a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b21c:	7afb      	ldrb	r3, [r7, #11]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d138      	bne.n	800b294 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b228:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b230:	2b03      	cmp	r3, #3
 800b232:	d14a      	bne.n	800b2ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	689a      	ldr	r2, [r3, #8]
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d913      	bls.n	800b268 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	1ad2      	subs	r2, r2, r3
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	4293      	cmp	r3, r2
 800b258:	bf28      	it	cs
 800b25a:	4613      	movcs	r3, r2
 800b25c:	461a      	mov	r2, r3
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f001 f839 	bl	800c2d8 <USBD_CtlContinueRx>
 800b266:	e030      	b.n	800b2ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b03      	cmp	r3, #3
 800b272:	d10b      	bne.n	800b28c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f001 f834 	bl	800c2fa <USBD_CtlSendStatus>
 800b292:	e01a      	b.n	800b2ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d114      	bne.n	800b2ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00e      	beq.n	800b2ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	7afa      	ldrb	r2, [r7, #11]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	4798      	blx	r3
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	e000      	b.n	800b2cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d16b      	bne.n	800b3c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d156      	bne.n	800b3a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	689a      	ldr	r2, [r3, #8]
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	429a      	cmp	r2, r3
 800b302:	d914      	bls.n	800b32e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	689a      	ldr	r2, [r3, #8]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	1ad2      	subs	r2, r2, r3
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	461a      	mov	r2, r3
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 ffae 	bl	800c27c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b320:	2300      	movs	r3, #0
 800b322:	2200      	movs	r2, #0
 800b324:	2100      	movs	r1, #0
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f001 fd86 	bl	800ce38 <USBD_LL_PrepareReceive>
 800b32c:	e03b      	b.n	800b3a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	d11c      	bne.n	800b374 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b342:	429a      	cmp	r2, r3
 800b344:	d316      	bcc.n	800b374 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b350:	429a      	cmp	r2, r3
 800b352:	d20f      	bcs.n	800b374 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b354:	2200      	movs	r2, #0
 800b356:	2100      	movs	r1, #0
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 ff8f 	bl	800c27c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b366:	2300      	movs	r3, #0
 800b368:	2200      	movs	r2, #0
 800b36a:	2100      	movs	r1, #0
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f001 fd63 	bl	800ce38 <USBD_LL_PrepareReceive>
 800b372:	e018      	b.n	800b3a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d10b      	bne.n	800b398 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b398:	2180      	movs	r1, #128	; 0x80
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f001 fc46 	bl	800cc2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 ffbd 	bl	800c320 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d122      	bne.n	800b3f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7ff fe98 	bl	800b0e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b3be:	e01a      	b.n	800b3f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d114      	bne.n	800b3f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00e      	beq.n	800b3f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	7afa      	ldrb	r2, [r7, #11]
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	4798      	blx	r3
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	e000      	b.n	800b3f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	e02f      	b.n	800b494 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00f      	beq.n	800b45e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d009      	beq.n	800b45e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6852      	ldr	r2, [r2, #4]
 800b456:	b2d2      	uxtb	r2, r2
 800b458:	4611      	mov	r1, r2
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	2200      	movs	r2, #0
 800b462:	2100      	movs	r1, #0
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 fb6d 	bl	800cb44 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2240      	movs	r2, #64	; 0x40
 800b476:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	2200      	movs	r2, #0
 800b47e:	2180      	movs	r1, #128	; 0x80
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f001 fb5f 	bl	800cb44 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2240      	movs	r2, #64	; 0x40
 800b490:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2204      	movs	r2, #4
 800b4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d106      	bne.n	800b50a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b502:	b2da      	uxtb	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b52a:	2303      	movs	r3, #3
 800b52c:	e012      	b.n	800b554 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b03      	cmp	r3, #3
 800b538:	d10b      	bne.n	800b552 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d005      	beq.n	800b552 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b572:	2303      	movs	r3, #3
 800b574:	e014      	b.n	800b5a0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d10d      	bne.n	800b59e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d007      	beq.n	800b59e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	78fa      	ldrb	r2, [r7, #3]
 800b598:	4611      	mov	r1, r2
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e014      	b.n	800b5ec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d10d      	bne.n	800b5ea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d007      	beq.n	800b5ea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	78fa      	ldrb	r2, [r7, #3]
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b620:	2b00      	cmp	r3, #0
 800b622:	d009      	beq.n	800b638 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	6852      	ldr	r2, [r2, #4]
 800b630:	b2d2      	uxtb	r2, r2
 800b632:	4611      	mov	r1, r2
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	4798      	blx	r3
  }

  return USBD_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b642:	b480      	push	{r7}
 800b644:	b087      	sub	sp, #28
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	3301      	adds	r3, #1
 800b658:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b660:	8a3b      	ldrh	r3, [r7, #16]
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	b21a      	sxth	r2, r3
 800b666:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	b21b      	sxth	r3, r3
 800b66e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b670:	89fb      	ldrh	r3, [r7, #14]
}
 800b672:	4618      	mov	r0, r3
 800b674:	371c      	adds	r7, #28
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
	...

0800b680 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b696:	2b40      	cmp	r3, #64	; 0x40
 800b698:	d005      	beq.n	800b6a6 <USBD_StdDevReq+0x26>
 800b69a:	2b40      	cmp	r3, #64	; 0x40
 800b69c:	d853      	bhi.n	800b746 <USBD_StdDevReq+0xc6>
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00b      	beq.n	800b6ba <USBD_StdDevReq+0x3a>
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	d14f      	bne.n	800b746 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	4798      	blx	r3
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b8:	e04a      	b.n	800b750 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	785b      	ldrb	r3, [r3, #1]
 800b6be:	2b09      	cmp	r3, #9
 800b6c0:	d83b      	bhi.n	800b73a <USBD_StdDevReq+0xba>
 800b6c2:	a201      	add	r2, pc, #4	; (adr r2, 800b6c8 <USBD_StdDevReq+0x48>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b71d 	.word	0x0800b71d
 800b6cc:	0800b731 	.word	0x0800b731
 800b6d0:	0800b73b 	.word	0x0800b73b
 800b6d4:	0800b727 	.word	0x0800b727
 800b6d8:	0800b73b 	.word	0x0800b73b
 800b6dc:	0800b6fb 	.word	0x0800b6fb
 800b6e0:	0800b6f1 	.word	0x0800b6f1
 800b6e4:	0800b73b 	.word	0x0800b73b
 800b6e8:	0800b713 	.word	0x0800b713
 800b6ec:	0800b705 	.word	0x0800b705
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f9de 	bl	800bab4 <USBD_GetDescriptor>
          break;
 800b6f8:	e024      	b.n	800b744 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fb6d 	bl	800bddc <USBD_SetAddress>
          break;
 800b702:	e01f      	b.n	800b744 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fbac 	bl	800be64 <USBD_SetConfig>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
          break;
 800b710:	e018      	b.n	800b744 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fc4b 	bl	800bfb0 <USBD_GetConfig>
          break;
 800b71a:	e013      	b.n	800b744 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fc7c 	bl	800c01c <USBD_GetStatus>
          break;
 800b724:	e00e      	b.n	800b744 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fcab 	bl	800c084 <USBD_SetFeature>
          break;
 800b72e:	e009      	b.n	800b744 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fcba 	bl	800c0ac <USBD_ClrFeature>
          break;
 800b738:	e004      	b.n	800b744 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fd11 	bl	800c164 <USBD_CtlError>
          break;
 800b742:	bf00      	nop
      }
      break;
 800b744:	e004      	b.n	800b750 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fd0b 	bl	800c164 <USBD_CtlError>
      break;
 800b74e:	bf00      	nop
  }

  return ret;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop

0800b75c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b772:	2b40      	cmp	r3, #64	; 0x40
 800b774:	d005      	beq.n	800b782 <USBD_StdItfReq+0x26>
 800b776:	2b40      	cmp	r3, #64	; 0x40
 800b778:	d82f      	bhi.n	800b7da <USBD_StdItfReq+0x7e>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <USBD_StdItfReq+0x26>
 800b77e:	2b20      	cmp	r3, #32
 800b780:	d12b      	bne.n	800b7da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	3b01      	subs	r3, #1
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d81d      	bhi.n	800b7cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	889b      	ldrh	r3, [r3, #4]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b01      	cmp	r3, #1
 800b798:	d813      	bhi.n	800b7c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	88db      	ldrh	r3, [r3, #6]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d110      	bne.n	800b7d6 <USBD_StdItfReq+0x7a>
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10d      	bne.n	800b7d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fd9d 	bl	800c2fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7c0:	e009      	b.n	800b7d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fccd 	bl	800c164 <USBD_CtlError>
          break;
 800b7ca:	e004      	b.n	800b7d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b7cc:	6839      	ldr	r1, [r7, #0]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fcc8 	bl	800c164 <USBD_CtlError>
          break;
 800b7d4:	e000      	b.n	800b7d8 <USBD_StdItfReq+0x7c>
          break;
 800b7d6:	bf00      	nop
      }
      break;
 800b7d8:	e004      	b.n	800b7e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fcc1 	bl	800c164 <USBD_CtlError>
      break;
 800b7e2:	bf00      	nop
  }

  return ret;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	889b      	ldrh	r3, [r3, #4]
 800b800:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b80a:	2b40      	cmp	r3, #64	; 0x40
 800b80c:	d007      	beq.n	800b81e <USBD_StdEPReq+0x30>
 800b80e:	2b40      	cmp	r3, #64	; 0x40
 800b810:	f200 8145 	bhi.w	800ba9e <USBD_StdEPReq+0x2b0>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00c      	beq.n	800b832 <USBD_StdEPReq+0x44>
 800b818:	2b20      	cmp	r3, #32
 800b81a:	f040 8140 	bne.w	800ba9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
      break;
 800b830:	e13a      	b.n	800baa8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b03      	cmp	r3, #3
 800b838:	d007      	beq.n	800b84a <USBD_StdEPReq+0x5c>
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	f300 8129 	bgt.w	800ba92 <USBD_StdEPReq+0x2a4>
 800b840:	2b00      	cmp	r3, #0
 800b842:	d07f      	beq.n	800b944 <USBD_StdEPReq+0x156>
 800b844:	2b01      	cmp	r3, #1
 800b846:	d03c      	beq.n	800b8c2 <USBD_StdEPReq+0xd4>
 800b848:	e123      	b.n	800ba92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b02      	cmp	r3, #2
 800b854:	d002      	beq.n	800b85c <USBD_StdEPReq+0x6e>
 800b856:	2b03      	cmp	r3, #3
 800b858:	d016      	beq.n	800b888 <USBD_StdEPReq+0x9a>
 800b85a:	e02c      	b.n	800b8b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00d      	beq.n	800b87e <USBD_StdEPReq+0x90>
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	2b80      	cmp	r3, #128	; 0x80
 800b866:	d00a      	beq.n	800b87e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 f9dd 	bl	800cc2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b872:	2180      	movs	r1, #128	; 0x80
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 f9d9 	bl	800cc2c <USBD_LL_StallEP>
 800b87a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b87c:	e020      	b.n	800b8c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fc6f 	bl	800c164 <USBD_CtlError>
              break;
 800b886:	e01b      	b.n	800b8c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	885b      	ldrh	r3, [r3, #2]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10e      	bne.n	800b8ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00b      	beq.n	800b8ae <USBD_StdEPReq+0xc0>
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b80      	cmp	r3, #128	; 0x80
 800b89a:	d008      	beq.n	800b8ae <USBD_StdEPReq+0xc0>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	88db      	ldrh	r3, [r3, #6]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d104      	bne.n	800b8ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f001 f9bf 	bl	800cc2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fd23 	bl	800c2fa <USBD_CtlSendStatus>

              break;
 800b8b4:	e004      	b.n	800b8c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fc53 	bl	800c164 <USBD_CtlError>
              break;
 800b8be:	bf00      	nop
          }
          break;
 800b8c0:	e0ec      	b.n	800ba9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d002      	beq.n	800b8d4 <USBD_StdEPReq+0xe6>
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d016      	beq.n	800b900 <USBD_StdEPReq+0x112>
 800b8d2:	e030      	b.n	800b936 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <USBD_StdEPReq+0x108>
 800b8da:	7bbb      	ldrb	r3, [r7, #14]
 800b8dc:	2b80      	cmp	r3, #128	; 0x80
 800b8de:	d00a      	beq.n	800b8f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 f9a1 	bl	800cc2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ea:	2180      	movs	r1, #128	; 0x80
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f001 f99d 	bl	800cc2c <USBD_LL_StallEP>
 800b8f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8f4:	e025      	b.n	800b942 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fc33 	bl	800c164 <USBD_CtlError>
              break;
 800b8fe:	e020      	b.n	800b942 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	885b      	ldrh	r3, [r3, #2]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11b      	bne.n	800b940 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d004      	beq.n	800b91c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 f9be 	bl	800cc98 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fcec 	bl	800c2fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b934:	e004      	b.n	800b940 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fc13 	bl	800c164 <USBD_CtlError>
              break;
 800b93e:	e000      	b.n	800b942 <USBD_StdEPReq+0x154>
              break;
 800b940:	bf00      	nop
          }
          break;
 800b942:	e0ab      	b.n	800ba9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d002      	beq.n	800b956 <USBD_StdEPReq+0x168>
 800b950:	2b03      	cmp	r3, #3
 800b952:	d032      	beq.n	800b9ba <USBD_StdEPReq+0x1cc>
 800b954:	e097      	b.n	800ba86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d007      	beq.n	800b96c <USBD_StdEPReq+0x17e>
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	2b80      	cmp	r3, #128	; 0x80
 800b960:	d004      	beq.n	800b96c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fbfd 	bl	800c164 <USBD_CtlError>
                break;
 800b96a:	e091      	b.n	800ba90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b96c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b970:	2b00      	cmp	r3, #0
 800b972:	da0b      	bge.n	800b98c <USBD_StdEPReq+0x19e>
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	3310      	adds	r3, #16
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	4413      	add	r3, r2
 800b988:	3304      	adds	r3, #4
 800b98a:	e00b      	b.n	800b9a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fc47 	bl	800c246 <USBD_CtlSendData>
              break;
 800b9b8:	e06a      	b.n	800ba90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	da11      	bge.n	800b9e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	f003 020f 	and.w	r2, r3, #15
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	3324      	adds	r3, #36	; 0x24
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d117      	bne.n	800ba0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fbc0 	bl	800c164 <USBD_CtlError>
                  break;
 800b9e4:	e054      	b.n	800ba90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	f003 020f 	and.w	r2, r3, #15
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d104      	bne.n	800ba0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fbad 	bl	800c164 <USBD_CtlError>
                  break;
 800ba0a:	e041      	b.n	800ba90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	da0b      	bge.n	800ba2c <USBD_StdEPReq+0x23e>
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	3310      	adds	r3, #16
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	3304      	adds	r3, #4
 800ba2a:	e00b      	b.n	800ba44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba32:	4613      	mov	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	4413      	add	r3, r2
 800ba42:	3304      	adds	r3, #4
 800ba44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d002      	beq.n	800ba52 <USBD_StdEPReq+0x264>
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	2b80      	cmp	r3, #128	; 0x80
 800ba50:	d103      	bne.n	800ba5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2200      	movs	r2, #0
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	e00e      	b.n	800ba78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 f950 	bl	800cd04 <USBD_LL_IsStallEP>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	e002      	b.n	800ba78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2200      	movs	r2, #0
 800ba76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fbe1 	bl	800c246 <USBD_CtlSendData>
              break;
 800ba84:	e004      	b.n	800ba90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fb6b 	bl	800c164 <USBD_CtlError>
              break;
 800ba8e:	bf00      	nop
          }
          break;
 800ba90:	e004      	b.n	800ba9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fb65 	bl	800c164 <USBD_CtlError>
          break;
 800ba9a:	bf00      	nop
      }
      break;
 800ba9c:	e004      	b.n	800baa8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fb5f 	bl	800c164 <USBD_CtlError>
      break;
 800baa6:	bf00      	nop
  }

  return ret;
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800babe:	2300      	movs	r3, #0
 800bac0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	0a1b      	lsrs	r3, r3, #8
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	2b0e      	cmp	r3, #14
 800bad6:	f200 8152 	bhi.w	800bd7e <USBD_GetDescriptor+0x2ca>
 800bada:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <USBD_GetDescriptor+0x2c>)
 800badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae0:	0800bb51 	.word	0x0800bb51
 800bae4:	0800bb69 	.word	0x0800bb69
 800bae8:	0800bba9 	.word	0x0800bba9
 800baec:	0800bd7f 	.word	0x0800bd7f
 800baf0:	0800bd7f 	.word	0x0800bd7f
 800baf4:	0800bd1f 	.word	0x0800bd1f
 800baf8:	0800bd4b 	.word	0x0800bd4b
 800bafc:	0800bd7f 	.word	0x0800bd7f
 800bb00:	0800bd7f 	.word	0x0800bd7f
 800bb04:	0800bd7f 	.word	0x0800bd7f
 800bb08:	0800bd7f 	.word	0x0800bd7f
 800bb0c:	0800bd7f 	.word	0x0800bd7f
 800bb10:	0800bd7f 	.word	0x0800bd7f
 800bb14:	0800bd7f 	.word	0x0800bd7f
 800bb18:	0800bb1d 	.word	0x0800bb1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb22:	69db      	ldr	r3, [r3, #28]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00b      	beq.n	800bb40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb2e:	69db      	ldr	r3, [r3, #28]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	7c12      	ldrb	r2, [r2, #16]
 800bb34:	f107 0108 	add.w	r1, r7, #8
 800bb38:	4610      	mov	r0, r2
 800bb3a:	4798      	blx	r3
 800bb3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb3e:	e126      	b.n	800bd8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fb0e 	bl	800c164 <USBD_CtlError>
        err++;
 800bb48:	7afb      	ldrb	r3, [r7, #11]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	72fb      	strb	r3, [r7, #11]
      break;
 800bb4e:	e11e      	b.n	800bd8e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	f107 0108 	add.w	r1, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
      break;
 800bb66:	e112      	b.n	800bd8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	7c1b      	ldrb	r3, [r3, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10d      	bne.n	800bb8c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	f107 0208 	add.w	r2, r7, #8
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	4798      	blx	r3
 800bb80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3301      	adds	r3, #1
 800bb86:	2202      	movs	r2, #2
 800bb88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb8a:	e100      	b.n	800bd8e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	f107 0208 	add.w	r2, r7, #8
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3301      	adds	r3, #1
 800bba2:	2202      	movs	r2, #2
 800bba4:	701a      	strb	r2, [r3, #0]
      break;
 800bba6:	e0f2      	b.n	800bd8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	885b      	ldrh	r3, [r3, #2]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b05      	cmp	r3, #5
 800bbb0:	f200 80ac 	bhi.w	800bd0c <USBD_GetDescriptor+0x258>
 800bbb4:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <USBD_GetDescriptor+0x108>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bbd5 	.word	0x0800bbd5
 800bbc0:	0800bc09 	.word	0x0800bc09
 800bbc4:	0800bc3d 	.word	0x0800bc3d
 800bbc8:	0800bc71 	.word	0x0800bc71
 800bbcc:	0800bca5 	.word	0x0800bca5
 800bbd0:	0800bcd9 	.word	0x0800bcd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	7c12      	ldrb	r2, [r2, #16]
 800bbec:	f107 0108 	add.w	r1, r7, #8
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf6:	e091      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fab2 	bl	800c164 <USBD_CtlError>
            err++;
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	3301      	adds	r3, #1
 800bc04:	72fb      	strb	r3, [r7, #11]
          break;
 800bc06:	e089      	b.n	800bd1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	7c12      	ldrb	r2, [r2, #16]
 800bc20:	f107 0108 	add.w	r1, r7, #8
 800bc24:	4610      	mov	r0, r2
 800bc26:	4798      	blx	r3
 800bc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2a:	e077      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fa98 	bl	800c164 <USBD_CtlError>
            err++;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	3301      	adds	r3, #1
 800bc38:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3a:	e06f      	b.n	800bd1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7c12      	ldrb	r2, [r2, #16]
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc5e:	e05d      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa7e 	bl	800c164 <USBD_CtlError>
            err++;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc6e:	e055      	b.n	800bd1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7c12      	ldrb	r2, [r2, #16]
 800bc88:	f107 0108 	add.w	r1, r7, #8
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4798      	blx	r3
 800bc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc92:	e043      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa64 	bl	800c164 <USBD_CtlError>
            err++;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	72fb      	strb	r3, [r7, #11]
          break;
 800bca2:	e03b      	b.n	800bd1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	7c12      	ldrb	r2, [r2, #16]
 800bcbc:	f107 0108 	add.w	r1, r7, #8
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4798      	blx	r3
 800bcc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc6:	e029      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fa4a 	bl	800c164 <USBD_CtlError>
            err++;
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd6:	e021      	b.n	800bd1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00b      	beq.n	800bcfc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	7c12      	ldrb	r2, [r2, #16]
 800bcf0:	f107 0108 	add.w	r1, r7, #8
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
 800bcf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcfa:	e00f      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fa30 	bl	800c164 <USBD_CtlError>
            err++;
 800bd04:	7afb      	ldrb	r3, [r7, #11]
 800bd06:	3301      	adds	r3, #1
 800bd08:	72fb      	strb	r3, [r7, #11]
          break;
 800bd0a:	e007      	b.n	800bd1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa28 	bl	800c164 <USBD_CtlError>
          err++;
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	3301      	adds	r3, #1
 800bd18:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bd1a:	bf00      	nop
      }
      break;
 800bd1c:	e037      	b.n	800bd8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	7c1b      	ldrb	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	f107 0208 	add.w	r2, r7, #8
 800bd32:	4610      	mov	r0, r2
 800bd34:	4798      	blx	r3
 800bd36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd38:	e029      	b.n	800bd8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fa11 	bl	800c164 <USBD_CtlError>
        err++;
 800bd42:	7afb      	ldrb	r3, [r7, #11]
 800bd44:	3301      	adds	r3, #1
 800bd46:	72fb      	strb	r3, [r7, #11]
      break;
 800bd48:	e021      	b.n	800bd8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7c1b      	ldrb	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10d      	bne.n	800bd6e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5a:	f107 0208 	add.w	r2, r7, #8
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4798      	blx	r3
 800bd62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	2207      	movs	r2, #7
 800bd6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd6c:	e00f      	b.n	800bd8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f9f7 	bl	800c164 <USBD_CtlError>
        err++;
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd7c:	e007      	b.n	800bd8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f9ef 	bl	800c164 <USBD_CtlError>
      err++;
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd8c:	bf00      	nop
  }

  if (err != 0U)
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d11e      	bne.n	800bdd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	88db      	ldrh	r3, [r3, #6]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d016      	beq.n	800bdca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd9c:	893b      	ldrh	r3, [r7, #8]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00e      	beq.n	800bdc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	88da      	ldrh	r2, [r3, #6]
 800bda6:	893b      	ldrh	r3, [r7, #8]
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	bf28      	it	cs
 800bdac:	4613      	movcs	r3, r2
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdb2:	893b      	ldrh	r3, [r7, #8]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fa44 	bl	800c246 <USBD_CtlSendData>
 800bdbe:	e009      	b.n	800bdd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f9ce 	bl	800c164 <USBD_CtlError>
 800bdc8:	e004      	b.n	800bdd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa95 	bl	800c2fa <USBD_CtlSendStatus>
 800bdd0:	e000      	b.n	800bdd4 <USBD_GetDescriptor+0x320>
    return;
 800bdd2:	bf00      	nop
  }
}
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop

0800bddc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	889b      	ldrh	r3, [r3, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d131      	bne.n	800be52 <USBD_SetAddress+0x76>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	88db      	ldrh	r3, [r3, #6]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d12d      	bne.n	800be52 <USBD_SetAddress+0x76>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	885b      	ldrh	r3, [r3, #2]
 800bdfa:	2b7f      	cmp	r3, #127	; 0x7f
 800bdfc:	d829      	bhi.n	800be52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d104      	bne.n	800be20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f9a3 	bl	800c164 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	e01d      	b.n	800be5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	7bfa      	ldrb	r2, [r7, #15]
 800be24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 ff95 	bl	800cd5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa61 	bl	800c2fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2202      	movs	r2, #2
 800be42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be46:	e009      	b.n	800be5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be50:	e004      	b.n	800be5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f985 	bl	800c164 <USBD_CtlError>
  }
}
 800be5a:	bf00      	nop
 800be5c:	bf00      	nop
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	885b      	ldrh	r3, [r3, #2]
 800be76:	b2da      	uxtb	r2, r3
 800be78:	4b4c      	ldr	r3, [pc, #304]	; (800bfac <USBD_SetConfig+0x148>)
 800be7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be7c:	4b4b      	ldr	r3, [pc, #300]	; (800bfac <USBD_SetConfig+0x148>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d905      	bls.n	800be90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f96c 	bl	800c164 <USBD_CtlError>
    return USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e088      	b.n	800bfa2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d002      	beq.n	800bea2 <USBD_SetConfig+0x3e>
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d025      	beq.n	800beec <USBD_SetConfig+0x88>
 800bea0:	e071      	b.n	800bf86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bea2:	4b42      	ldr	r3, [pc, #264]	; (800bfac <USBD_SetConfig+0x148>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d01c      	beq.n	800bee4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800beaa:	4b40      	ldr	r3, [pc, #256]	; (800bfac <USBD_SetConfig+0x148>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800beb4:	4b3d      	ldr	r3, [pc, #244]	; (800bfac <USBD_SetConfig+0x148>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff f91e 	bl	800b0fc <USBD_SetClassConfig>
 800bec0:	4603      	mov	r3, r0
 800bec2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d004      	beq.n	800bed4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f949 	bl	800c164 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bed2:	e065      	b.n	800bfa0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fa10 	bl	800c2fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2203      	movs	r2, #3
 800bede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bee2:	e05d      	b.n	800bfa0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fa08 	bl	800c2fa <USBD_CtlSendStatus>
      break;
 800beea:	e059      	b.n	800bfa0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800beec:	4b2f      	ldr	r3, [pc, #188]	; (800bfac <USBD_SetConfig+0x148>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d112      	bne.n	800bf1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800befc:	4b2b      	ldr	r3, [pc, #172]	; (800bfac <USBD_SetConfig+0x148>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	461a      	mov	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf06:	4b29      	ldr	r3, [pc, #164]	; (800bfac <USBD_SetConfig+0x148>)
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff f911 	bl	800b134 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f9f1 	bl	800c2fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf18:	e042      	b.n	800bfa0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bf1a:	4b24      	ldr	r3, [pc, #144]	; (800bfac <USBD_SetConfig+0x148>)
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d02a      	beq.n	800bf7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7ff f8ff 	bl	800b134 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf36:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <USBD_SetConfig+0x148>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <USBD_SetConfig+0x148>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff f8d8 	bl	800b0fc <USBD_SetClassConfig>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00f      	beq.n	800bf76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f903 	bl	800c164 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff f8e4 	bl	800b134 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf74:	e014      	b.n	800bfa0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f9bf 	bl	800c2fa <USBD_CtlSendStatus>
      break;
 800bf7c:	e010      	b.n	800bfa0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f9bb 	bl	800c2fa <USBD_CtlSendStatus>
      break;
 800bf84:	e00c      	b.n	800bfa0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f8eb 	bl	800c164 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf8e:	4b07      	ldr	r3, [pc, #28]	; (800bfac <USBD_SetConfig+0x148>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7ff f8cd 	bl	800b134 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf9e:	bf00      	nop
  }

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	2000038c 	.word	0x2000038c

0800bfb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	88db      	ldrh	r3, [r3, #6]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d004      	beq.n	800bfcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f8cd 	bl	800c164 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfca:	e023      	b.n	800c014 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	dc02      	bgt.n	800bfde <USBD_GetConfig+0x2e>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dc03      	bgt.n	800bfe4 <USBD_GetConfig+0x34>
 800bfdc:	e015      	b.n	800c00a <USBD_GetConfig+0x5a>
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d00b      	beq.n	800bffa <USBD_GetConfig+0x4a>
 800bfe2:	e012      	b.n	800c00a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3308      	adds	r3, #8
 800bfee:	2201      	movs	r2, #1
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f927 	bl	800c246 <USBD_CtlSendData>
        break;
 800bff8:	e00c      	b.n	800c014 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3304      	adds	r3, #4
 800bffe:	2201      	movs	r2, #1
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f91f 	bl	800c246 <USBD_CtlSendData>
        break;
 800c008:	e004      	b.n	800c014 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f8a9 	bl	800c164 <USBD_CtlError>
        break;
 800c012:	bf00      	nop
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	3b01      	subs	r3, #1
 800c030:	2b02      	cmp	r3, #2
 800c032:	d81e      	bhi.n	800c072 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	88db      	ldrh	r3, [r3, #6]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d004      	beq.n	800c046 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f890 	bl	800c164 <USBD_CtlError>
        break;
 800c044:	e01a      	b.n	800c07c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2201      	movs	r2, #1
 800c04a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c052:	2b00      	cmp	r3, #0
 800c054:	d005      	beq.n	800c062 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f043 0202 	orr.w	r2, r3, #2
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	330c      	adds	r3, #12
 800c066:	2202      	movs	r2, #2
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f8eb 	bl	800c246 <USBD_CtlSendData>
      break;
 800c070:	e004      	b.n	800c07c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f875 	bl	800c164 <USBD_CtlError>
      break;
 800c07a:	bf00      	nop
  }
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	885b      	ldrh	r3, [r3, #2]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d106      	bne.n	800c0a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f92b 	bl	800c2fa <USBD_CtlSendStatus>
  }
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d80b      	bhi.n	800c0dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	885b      	ldrh	r3, [r3, #2]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d10c      	bne.n	800c0e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f910 	bl	800c2fa <USBD_CtlSendStatus>
      }
      break;
 800c0da:	e004      	b.n	800c0e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f840 	bl	800c164 <USBD_CtlError>
      break;
 800c0e4:	e000      	b.n	800c0e8 <USBD_ClrFeature+0x3c>
      break;
 800c0e6:	bf00      	nop
  }
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	781a      	ldrb	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3301      	adds	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3301      	adds	r3, #1
 800c118:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fa91 	bl	800b642 <SWAPBYTE>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3301      	adds	r3, #1
 800c12c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fa84 	bl	800b642 <SWAPBYTE>
 800c13a:	4603      	mov	r3, r0
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3301      	adds	r3, #1
 800c146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fa77 	bl	800b642 <SWAPBYTE>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	80da      	strh	r2, [r3, #6]
}
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c16e:	2180      	movs	r1, #128	; 0x80
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fd5b 	bl	800cc2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c176:	2100      	movs	r1, #0
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fd57 	bl	800cc2c <USBD_LL_StallEP>
}
 800c17e:	bf00      	nop
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b086      	sub	sp, #24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c192:	2300      	movs	r3, #0
 800c194:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d036      	beq.n	800c20a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1a0:	6938      	ldr	r0, [r7, #16]
 800c1a2:	f000 f836 	bl	800c212 <USBD_GetLen>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	7812      	ldrb	r2, [r2, #0]
 800c1be:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1d6:	e013      	b.n	800c200 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	7812      	ldrb	r2, [r2, #0]
 800c1e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	613b      	str	r3, [r7, #16]
    idx++;
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1f0:	7dfb      	ldrb	r3, [r7, #23]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1e7      	bne.n	800c1d8 <USBD_GetString+0x52>
 800c208:	e000      	b.n	800c20c <USBD_GetString+0x86>
    return;
 800c20a:	bf00      	nop
  }
}
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c212:	b480      	push	{r7}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c222:	e005      	b.n	800c230 <USBD_GetLen+0x1e>
  {
    len++;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	3301      	adds	r3, #1
 800c228:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	3301      	adds	r3, #1
 800c22e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1f5      	bne.n	800c224 <USBD_GetLen+0x12>
  }

  return len;
 800c238:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr

0800c246 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2202      	movs	r2, #2
 800c256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	2100      	movs	r1, #0
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 fdab 	bl	800cdc8 <USBD_LL_Transmit>

  return USBD_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	2100      	movs	r1, #0
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 fd9a 	bl	800cdc8 <USBD_LL_Transmit>

  return USBD_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2203      	movs	r2, #3
 800c2ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 fdb5 	bl	800ce38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 fda4 	bl	800ce38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2204      	movs	r2, #4
 800c306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c30a:	2300      	movs	r3, #0
 800c30c:	2200      	movs	r2, #0
 800c30e:	2100      	movs	r1, #0
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fd59 	bl	800cdc8 <USBD_LL_Transmit>

  return USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2205      	movs	r2, #5
 800c32c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c330:	2300      	movs	r3, #0
 800c332:	2200      	movs	r2, #0
 800c334:	2100      	movs	r1, #0
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fd7e 	bl	800ce38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c34c:	2200      	movs	r2, #0
 800c34e:	4912      	ldr	r1, [pc, #72]	; (800c398 <MX_USB_DEVICE_Init+0x50>)
 800c350:	4812      	ldr	r0, [pc, #72]	; (800c39c <MX_USB_DEVICE_Init+0x54>)
 800c352:	f7fe fe65 	bl	800b020 <USBD_Init>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c35c:	f7f6 fddd 	bl	8002f1a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c360:	490f      	ldr	r1, [pc, #60]	; (800c3a0 <MX_USB_DEVICE_Init+0x58>)
 800c362:	480e      	ldr	r0, [pc, #56]	; (800c39c <MX_USB_DEVICE_Init+0x54>)
 800c364:	f7fe fe8c 	bl	800b080 <USBD_RegisterClass>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d001      	beq.n	800c372 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c36e:	f7f6 fdd4 	bl	8002f1a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c372:	490c      	ldr	r1, [pc, #48]	; (800c3a4 <MX_USB_DEVICE_Init+0x5c>)
 800c374:	4809      	ldr	r0, [pc, #36]	; (800c39c <MX_USB_DEVICE_Init+0x54>)
 800c376:	f7fe fdad 	bl	800aed4 <USBD_CDC_RegisterInterface>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c380:	f7f6 fdcb 	bl	8002f1a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c384:	4805      	ldr	r0, [pc, #20]	; (800c39c <MX_USB_DEVICE_Init+0x54>)
 800c386:	f7fe fea2 	bl	800b0ce <USBD_Start>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d001      	beq.n	800c394 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c390:	f7f6 fdc3 	bl	8002f1a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c394:	bf00      	nop
 800c396:	bd80      	pop	{r7, pc}
 800c398:	20000130 	.word	0x20000130
 800c39c:	20000738 	.word	0x20000738
 800c3a0:	20000018 	.word	0x20000018
 800c3a4:	2000011c 	.word	0x2000011c

0800c3a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4905      	ldr	r1, [pc, #20]	; (800c3c4 <CDC_Init_FS+0x1c>)
 800c3b0:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <CDC_Init_FS+0x20>)
 800c3b2:	f7fe fda4 	bl	800aefe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3b6:	4905      	ldr	r1, [pc, #20]	; (800c3cc <CDC_Init_FS+0x24>)
 800c3b8:	4803      	ldr	r0, [pc, #12]	; (800c3c8 <CDC_Init_FS+0x20>)
 800c3ba:	f7fe fdbe 	bl	800af3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20001208 	.word	0x20001208
 800c3c8:	20000738 	.word	0x20000738
 800c3cc:	20000a08 	.word	0x20000a08

0800c3d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	6039      	str	r1, [r7, #0]
 800c3ea:	71fb      	strb	r3, [r7, #7]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	2b23      	cmp	r3, #35	; 0x23
 800c3f4:	d84a      	bhi.n	800c48c <CDC_Control_FS+0xac>
 800c3f6:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <CDC_Control_FS+0x1c>)
 800c3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fc:	0800c48d 	.word	0x0800c48d
 800c400:	0800c48d 	.word	0x0800c48d
 800c404:	0800c48d 	.word	0x0800c48d
 800c408:	0800c48d 	.word	0x0800c48d
 800c40c:	0800c48d 	.word	0x0800c48d
 800c410:	0800c48d 	.word	0x0800c48d
 800c414:	0800c48d 	.word	0x0800c48d
 800c418:	0800c48d 	.word	0x0800c48d
 800c41c:	0800c48d 	.word	0x0800c48d
 800c420:	0800c48d 	.word	0x0800c48d
 800c424:	0800c48d 	.word	0x0800c48d
 800c428:	0800c48d 	.word	0x0800c48d
 800c42c:	0800c48d 	.word	0x0800c48d
 800c430:	0800c48d 	.word	0x0800c48d
 800c434:	0800c48d 	.word	0x0800c48d
 800c438:	0800c48d 	.word	0x0800c48d
 800c43c:	0800c48d 	.word	0x0800c48d
 800c440:	0800c48d 	.word	0x0800c48d
 800c444:	0800c48d 	.word	0x0800c48d
 800c448:	0800c48d 	.word	0x0800c48d
 800c44c:	0800c48d 	.word	0x0800c48d
 800c450:	0800c48d 	.word	0x0800c48d
 800c454:	0800c48d 	.word	0x0800c48d
 800c458:	0800c48d 	.word	0x0800c48d
 800c45c:	0800c48d 	.word	0x0800c48d
 800c460:	0800c48d 	.word	0x0800c48d
 800c464:	0800c48d 	.word	0x0800c48d
 800c468:	0800c48d 	.word	0x0800c48d
 800c46c:	0800c48d 	.word	0x0800c48d
 800c470:	0800c48d 	.word	0x0800c48d
 800c474:	0800c48d 	.word	0x0800c48d
 800c478:	0800c48d 	.word	0x0800c48d
 800c47c:	0800c48d 	.word	0x0800c48d
 800c480:	0800c48d 	.word	0x0800c48d
 800c484:	0800c48d 	.word	0x0800c48d
 800c488:	0800c48d 	.word	0x0800c48d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c48c:	bf00      	nop
  }

  return (USBD_OK);
 800c48e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c490:	4618      	mov	r0, r3
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	4805      	ldr	r0, [pc, #20]	; (800c4c0 <CDC_Receive_FS+0x24>)
 800c4aa:	f7fe fd46 	bl	800af3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c4ae:	4804      	ldr	r0, [pc, #16]	; (800c4c0 <CDC_Receive_FS+0x24>)
 800c4b0:	f7fe fd8c 	bl	800afcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c4b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	20000738 	.word	0x20000738

0800c4c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <CDC_Transmit_FS+0x48>)
 800c4d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e00b      	b.n	800c502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4ea:	887b      	ldrh	r3, [r7, #2]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	4806      	ldr	r0, [pc, #24]	; (800c50c <CDC_Transmit_FS+0x48>)
 800c4f2:	f7fe fd04 	bl	800aefe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4f6:	4805      	ldr	r0, [pc, #20]	; (800c50c <CDC_Transmit_FS+0x48>)
 800c4f8:	f7fe fd38 	bl	800af6c <USBD_CDC_TransmitPacket>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	20000738 	.word	0x20000738

0800c510 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c510:	b480      	push	{r7}
 800c512:	b087      	sub	sp, #28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c526:	4618      	mov	r0, r3
 800c528:	371c      	adds	r7, #28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
	...

0800c534 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	6039      	str	r1, [r7, #0]
 800c53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2212      	movs	r2, #18
 800c544:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c546:	4b03      	ldr	r3, [pc, #12]	; (800c554 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	20000150 	.word	0x20000150

0800c558 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	6039      	str	r1, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2204      	movs	r2, #4
 800c568:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c56a:	4b03      	ldr	r3, [pc, #12]	; (800c578 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	20000170 	.word	0x20000170

0800c57c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	6039      	str	r1, [r7, #0]
 800c586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d105      	bne.n	800c59a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	4907      	ldr	r1, [pc, #28]	; (800c5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c592:	4808      	ldr	r0, [pc, #32]	; (800c5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c594:	f7ff fdf7 	bl	800c186 <USBD_GetString>
 800c598:	e004      	b.n	800c5a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	4904      	ldr	r1, [pc, #16]	; (800c5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c59e:	4805      	ldr	r0, [pc, #20]	; (800c5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5a0:	f7ff fdf1 	bl	800c186 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5a4:	4b02      	ldr	r3, [pc, #8]	; (800c5b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20001a08 	.word	0x20001a08
 800c5b4:	08011a1c 	.word	0x08011a1c

0800c5b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	6039      	str	r1, [r7, #0]
 800c5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	4904      	ldr	r1, [pc, #16]	; (800c5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c5c8:	4804      	ldr	r0, [pc, #16]	; (800c5dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c5ca:	f7ff fddc 	bl	800c186 <USBD_GetString>
  return USBD_StrDesc;
 800c5ce:	4b02      	ldr	r3, [pc, #8]	; (800c5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	20001a08 	.word	0x20001a08
 800c5dc:	08011a34 	.word	0x08011a34

0800c5e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	221a      	movs	r2, #26
 800c5f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5f2:	f000 f855 	bl	800c6a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c5f6:	4b02      	ldr	r3, [pc, #8]	; (800c600 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	20000174 	.word	0x20000174

0800c604 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	6039      	str	r1, [r7, #0]
 800c60e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d105      	bne.n	800c622 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	4907      	ldr	r1, [pc, #28]	; (800c638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c61a:	4808      	ldr	r0, [pc, #32]	; (800c63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c61c:	f7ff fdb3 	bl	800c186 <USBD_GetString>
 800c620:	e004      	b.n	800c62c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	4904      	ldr	r1, [pc, #16]	; (800c638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c626:	4805      	ldr	r0, [pc, #20]	; (800c63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c628:	f7ff fdad 	bl	800c186 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c62c:	4b02      	ldr	r3, [pc, #8]	; (800c638 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	20001a08 	.word	0x20001a08
 800c63c:	08011a48 	.word	0x08011a48

0800c640 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	6039      	str	r1, [r7, #0]
 800c64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c64c:	79fb      	ldrb	r3, [r7, #7]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d105      	bne.n	800c65e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	4907      	ldr	r1, [pc, #28]	; (800c674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c656:	4808      	ldr	r0, [pc, #32]	; (800c678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c658:	f7ff fd95 	bl	800c186 <USBD_GetString>
 800c65c:	e004      	b.n	800c668 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	4904      	ldr	r1, [pc, #16]	; (800c674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c662:	4805      	ldr	r0, [pc, #20]	; (800c678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c664:	f7ff fd8f 	bl	800c186 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20001a08 	.word	0x20001a08
 800c678:	08011a54 	.word	0x08011a54

0800c67c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	6039      	str	r1, [r7, #0]
 800c686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	220c      	movs	r2, #12
 800c68c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c68e:	4b03      	ldr	r3, [pc, #12]	; (800c69c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c690:	4618      	mov	r0, r3
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	20000164 	.word	0x20000164

0800c6a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <Get_SerialNum+0x44>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6ac:	4b0e      	ldr	r3, [pc, #56]	; (800c6e8 <Get_SerialNum+0x48>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6b2:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <Get_SerialNum+0x4c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d009      	beq.n	800c6da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6c6:	2208      	movs	r2, #8
 800c6c8:	4909      	ldr	r1, [pc, #36]	; (800c6f0 <Get_SerialNum+0x50>)
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f000 f814 	bl	800c6f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6d0:	2204      	movs	r2, #4
 800c6d2:	4908      	ldr	r1, [pc, #32]	; (800c6f4 <Get_SerialNum+0x54>)
 800c6d4:	68b8      	ldr	r0, [r7, #8]
 800c6d6:	f000 f80f 	bl	800c6f8 <IntToUnicode>
  }
}
 800c6da:	bf00      	nop
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	1fff7590 	.word	0x1fff7590
 800c6e8:	1fff7594 	.word	0x1fff7594
 800c6ec:	1fff7598 	.word	0x1fff7598
 800c6f0:	20000176 	.word	0x20000176
 800c6f4:	20000186 	.word	0x20000186

0800c6f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	4613      	mov	r3, r2
 800c704:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c70a:	2300      	movs	r3, #0
 800c70c:	75fb      	strb	r3, [r7, #23]
 800c70e:	e027      	b.n	800c760 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	0f1b      	lsrs	r3, r3, #28
 800c714:	2b09      	cmp	r3, #9
 800c716:	d80b      	bhi.n	800c730 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	0f1b      	lsrs	r3, r3, #28
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	4619      	mov	r1, r3
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	440b      	add	r3, r1
 800c728:	3230      	adds	r2, #48	; 0x30
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
 800c72e:	e00a      	b.n	800c746 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	0f1b      	lsrs	r3, r3, #28
 800c734:	b2da      	uxtb	r2, r3
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	4619      	mov	r1, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	440b      	add	r3, r1
 800c740:	3237      	adds	r2, #55	; 0x37
 800c742:	b2d2      	uxtb	r2, r2
 800c744:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	011b      	lsls	r3, r3, #4
 800c74a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	3301      	adds	r3, #1
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	4413      	add	r3, r2
 800c756:	2200      	movs	r2, #0
 800c758:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	3301      	adds	r3, #1
 800c75e:	75fb      	strb	r3, [r7, #23]
 800c760:	7dfa      	ldrb	r2, [r7, #23]
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	429a      	cmp	r2, r3
 800c766:	d3d3      	bcc.n	800c710 <IntToUnicode+0x18>
  }
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	371c      	adds	r7, #28
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
	...

0800c778 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08a      	sub	sp, #40	; 0x28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c780:	f107 0314 	add.w	r3, r7, #20
 800c784:	2200      	movs	r2, #0
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	605a      	str	r2, [r3, #4]
 800c78a:	609a      	str	r2, [r3, #8]
 800c78c:	60da      	str	r2, [r3, #12]
 800c78e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c798:	d14e      	bne.n	800c838 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c79a:	4b29      	ldr	r3, [pc, #164]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c79e:	4a28      	ldr	r2, [pc, #160]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7a0:	f043 0301 	orr.w	r3, r3, #1
 800c7a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c7a6:	4b26      	ldr	r3, [pc, #152]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	613b      	str	r3, [r7, #16]
 800c7b0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c7b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c7b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7c4:	230a      	movs	r3, #10
 800c7c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7c8:	f107 0314 	add.w	r3, r7, #20
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c7d2:	f7f8 f901 	bl	80049d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7d6:	4b1a      	ldr	r3, [pc, #104]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7da:	4a19      	ldr	r2, [pc, #100]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c7e2:	4b17      	ldr	r3, [pc, #92]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7ee:	4b14      	ldr	r3, [pc, #80]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d114      	bne.n	800c824 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7fa:	4b11      	ldr	r3, [pc, #68]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7fe:	4a10      	ldr	r2, [pc, #64]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c804:	6593      	str	r3, [r2, #88]	; 0x58
 800c806:	4b0e      	ldr	r3, [pc, #56]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c80e:	60bb      	str	r3, [r7, #8]
 800c810:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c812:	f7fb fb61 	bl	8007ed8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c816:	4b0a      	ldr	r3, [pc, #40]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81a:	4a09      	ldr	r2, [pc, #36]	; (800c840 <HAL_PCD_MspInit+0xc8>)
 800c81c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c820:	6593      	str	r3, [r2, #88]	; 0x58
 800c822:	e001      	b.n	800c828 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c824:	f7fb fb58 	bl	8007ed8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c828:	2200      	movs	r2, #0
 800c82a:	2100      	movs	r1, #0
 800c82c:	2043      	movs	r0, #67	; 0x43
 800c82e:	f7f7 fe56 	bl	80044de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c832:	2043      	movs	r0, #67	; 0x43
 800c834:	f7f7 fe6f 	bl	8004516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c838:	bf00      	nop
 800c83a:	3728      	adds	r7, #40	; 0x28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	40021000 	.word	0x40021000

0800c844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c858:	4619      	mov	r1, r3
 800c85a:	4610      	mov	r0, r2
 800c85c:	f7fe fc82 	bl	800b164 <USBD_LL_SetupStage>
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c87a:	78fa      	ldrb	r2, [r7, #3]
 800c87c:	6879      	ldr	r1, [r7, #4]
 800c87e:	4613      	mov	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	1a9b      	subs	r3, r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	440b      	add	r3, r1
 800c888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	78fb      	ldrb	r3, [r7, #3]
 800c890:	4619      	mov	r1, r3
 800c892:	f7fe fcbc 	bl	800b20e <USBD_LL_DataOutStage>
}
 800c896:	bf00      	nop
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c8b0:	78fa      	ldrb	r2, [r7, #3]
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	1a9b      	subs	r3, r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	440b      	add	r3, r1
 800c8be:	3348      	adds	r3, #72	; 0x48
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	78fb      	ldrb	r3, [r7, #3]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	f7fe fd05 	bl	800b2d4 <USBD_LL_DataInStage>
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fe fe19 	bl	800b518 <USBD_LL_SOF>
}
 800c8e6:	bf00      	nop
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d001      	beq.n	800c906 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c902:	f7f6 fb0a 	bl	8002f1a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c90c:	7bfa      	ldrb	r2, [r7, #15]
 800c90e:	4611      	mov	r1, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fdc3 	bl	800b49c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fd6f 	bl	800b400 <USBD_LL_Reset>
}
 800c922:	bf00      	nop
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
	...

0800c92c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6812      	ldr	r2, [r2, #0]
 800c942:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c946:	f043 0301 	orr.w	r3, r3, #1
 800c94a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe fdb2 	bl	800b4bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a1b      	ldr	r3, [r3, #32]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c960:	4b04      	ldr	r3, [pc, #16]	; (800c974 <HAL_PCD_SuspendCallback+0x48>)
 800c962:	691b      	ldr	r3, [r3, #16]
 800c964:	4a03      	ldr	r2, [pc, #12]	; (800c974 <HAL_PCD_SuspendCallback+0x48>)
 800c966:	f043 0306 	orr.w	r3, r3, #6
 800c96a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c96c:	bf00      	nop
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	e000ed00 	.word	0xe000ed00

0800c978 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6812      	ldr	r2, [r2, #0]
 800c98e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c992:	f023 0301 	bic.w	r3, r3, #1
 800c996:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9a0:	4b08      	ldr	r3, [pc, #32]	; (800c9c4 <HAL_PCD_ResumeCallback+0x4c>)
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	4a07      	ldr	r2, [pc, #28]	; (800c9c4 <HAL_PCD_ResumeCallback+0x4c>)
 800c9a6:	f023 0306 	bic.w	r3, r3, #6
 800c9aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9ac:	f000 faf6 	bl	800cf9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe fd96 	bl	800b4e8 <USBD_LL_Resume>
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	e000ed00 	.word	0xe000ed00

0800c9c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9da:	78fa      	ldrb	r2, [r7, #3]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fde2 	bl	800b5a8 <USBD_LL_IsoOUTIncomplete>
}
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9fe:	78fa      	ldrb	r2, [r7, #3]
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fdaa 	bl	800b55c <USBD_LL_IsoINIncomplete>
}
 800ca08:	bf00      	nop
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fde8 	bl	800b5f4 <USBD_LL_DevConnected>
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fe fde5 	bl	800b60a <USBD_LL_DevDisconnected>
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d13c      	bne.n	800cad2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca58:	4a20      	ldr	r2, [pc, #128]	; (800cadc <USBD_LL_Init+0x94>)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a1e      	ldr	r2, [pc, #120]	; (800cadc <USBD_LL_Init+0x94>)
 800ca64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca68:	4b1c      	ldr	r3, [pc, #112]	; (800cadc <USBD_LL_Init+0x94>)
 800ca6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ca70:	4b1a      	ldr	r3, [pc, #104]	; (800cadc <USBD_LL_Init+0x94>)
 800ca72:	2206      	movs	r2, #6
 800ca74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca76:	4b19      	ldr	r3, [pc, #100]	; (800cadc <USBD_LL_Init+0x94>)
 800ca78:	2202      	movs	r2, #2
 800ca7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca7c:	4b17      	ldr	r3, [pc, #92]	; (800cadc <USBD_LL_Init+0x94>)
 800ca7e:	2202      	movs	r2, #2
 800ca80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca82:	4b16      	ldr	r3, [pc, #88]	; (800cadc <USBD_LL_Init+0x94>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca88:	4b14      	ldr	r3, [pc, #80]	; (800cadc <USBD_LL_Init+0x94>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <USBD_LL_Init+0x94>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ca94:	4b11      	ldr	r3, [pc, #68]	; (800cadc <USBD_LL_Init+0x94>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca9a:	4b10      	ldr	r3, [pc, #64]	; (800cadc <USBD_LL_Init+0x94>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800caa0:	4b0e      	ldr	r3, [pc, #56]	; (800cadc <USBD_LL_Init+0x94>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800caa6:	480d      	ldr	r0, [pc, #52]	; (800cadc <USBD_LL_Init+0x94>)
 800caa8:	f7fa f90d 	bl	8006cc6 <HAL_PCD_Init>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cab2:	f7f6 fa32 	bl	8002f1a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cab6:	2180      	movs	r1, #128	; 0x80
 800cab8:	4808      	ldr	r0, [pc, #32]	; (800cadc <USBD_LL_Init+0x94>)
 800caba:	f7fb f964 	bl	8007d86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cabe:	2240      	movs	r2, #64	; 0x40
 800cac0:	2100      	movs	r1, #0
 800cac2:	4806      	ldr	r0, [pc, #24]	; (800cadc <USBD_LL_Init+0x94>)
 800cac4:	f7fb f918 	bl	8007cf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cac8:	2280      	movs	r2, #128	; 0x80
 800caca:	2101      	movs	r1, #1
 800cacc:	4803      	ldr	r0, [pc, #12]	; (800cadc <USBD_LL_Init+0x94>)
 800cace:	f7fb f913 	bl	8007cf8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	20001c08 	.word	0x20001c08

0800cae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fa fa09 	bl	8006f0e <HAL_PCD_Start>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d816      	bhi.n	800cb34 <USBD_LL_Start+0x54>
 800cb06:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <USBD_LL_Start+0x2c>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cb1d 	.word	0x0800cb1d
 800cb10:	0800cb23 	.word	0x0800cb23
 800cb14:	0800cb29 	.word	0x0800cb29
 800cb18:	0800cb2f 	.word	0x0800cb2f
    case HAL_OK :
      usb_status = USBD_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb20:	e00b      	b.n	800cb3a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb22:	2303      	movs	r3, #3
 800cb24:	73fb      	strb	r3, [r7, #15]
    break;
 800cb26:	e008      	b.n	800cb3a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb2c:	e005      	b.n	800cb3a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	73fb      	strb	r3, [r7, #15]
    break;
 800cb32:	e002      	b.n	800cb3a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb34:	2303      	movs	r3, #3
 800cb36:	73fb      	strb	r3, [r7, #15]
    break;
 800cb38:	bf00      	nop
  }
  return usb_status;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	4611      	mov	r1, r2
 800cb50:	461a      	mov	r2, r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	70fb      	strb	r3, [r7, #3]
 800cb56:	460b      	mov	r3, r1
 800cb58:	70bb      	strb	r3, [r7, #2]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb6c:	78bb      	ldrb	r3, [r7, #2]
 800cb6e:	883a      	ldrh	r2, [r7, #0]
 800cb70:	78f9      	ldrb	r1, [r7, #3]
 800cb72:	f7fa fdb9 	bl	80076e8 <HAL_PCD_EP_Open>
 800cb76:	4603      	mov	r3, r0
 800cb78:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb7a:	7bbb      	ldrb	r3, [r7, #14]
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d817      	bhi.n	800cbb0 <USBD_LL_OpenEP+0x6c>
 800cb80:	a201      	add	r2, pc, #4	; (adr r2, 800cb88 <USBD_LL_OpenEP+0x44>)
 800cb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb86:	bf00      	nop
 800cb88:	0800cb99 	.word	0x0800cb99
 800cb8c:	0800cb9f 	.word	0x0800cb9f
 800cb90:	0800cba5 	.word	0x0800cba5
 800cb94:	0800cbab 	.word	0x0800cbab
    case HAL_OK :
      usb_status = USBD_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb9c:	e00b      	b.n	800cbb6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	73fb      	strb	r3, [r7, #15]
    break;
 800cba2:	e008      	b.n	800cbb6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cba4:	2301      	movs	r3, #1
 800cba6:	73fb      	strb	r3, [r7, #15]
    break;
 800cba8:	e005      	b.n	800cbb6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	73fb      	strb	r3, [r7, #15]
    break;
 800cbae:	e002      	b.n	800cbb6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb4:	bf00      	nop
  }
  return usb_status;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbda:	78fa      	ldrb	r2, [r7, #3]
 800cbdc:	4611      	mov	r1, r2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fa fdea 	bl	80077b8 <HAL_PCD_EP_Close>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d816      	bhi.n	800cc1c <USBD_LL_CloseEP+0x5c>
 800cbee:	a201      	add	r2, pc, #4	; (adr r2, 800cbf4 <USBD_LL_CloseEP+0x34>)
 800cbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf4:	0800cc05 	.word	0x0800cc05
 800cbf8:	0800cc0b 	.word	0x0800cc0b
 800cbfc:	0800cc11 	.word	0x0800cc11
 800cc00:	0800cc17 	.word	0x0800cc17
    case HAL_OK :
      usb_status = USBD_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]
    break;
 800cc08:	e00b      	b.n	800cc22 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc0e:	e008      	b.n	800cc22 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc10:	2301      	movs	r3, #1
 800cc12:	73fb      	strb	r3, [r7, #15]
    break;
 800cc14:	e005      	b.n	800cc22 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc16:	2303      	movs	r3, #3
 800cc18:	73fb      	strb	r3, [r7, #15]
    break;
 800cc1a:	e002      	b.n	800cc22 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc20:	bf00      	nop
  }
  return usb_status;
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc46:	78fa      	ldrb	r2, [r7, #3]
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fa fe91 	bl	8007972 <HAL_PCD_EP_SetStall>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc54:	7bbb      	ldrb	r3, [r7, #14]
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d816      	bhi.n	800cc88 <USBD_LL_StallEP+0x5c>
 800cc5a:	a201      	add	r2, pc, #4	; (adr r2, 800cc60 <USBD_LL_StallEP+0x34>)
 800cc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc60:	0800cc71 	.word	0x0800cc71
 800cc64:	0800cc77 	.word	0x0800cc77
 800cc68:	0800cc7d 	.word	0x0800cc7d
 800cc6c:	0800cc83 	.word	0x0800cc83
    case HAL_OK :
      usb_status = USBD_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73fb      	strb	r3, [r7, #15]
    break;
 800cc74:	e00b      	b.n	800cc8e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc76:	2303      	movs	r3, #3
 800cc78:	73fb      	strb	r3, [r7, #15]
    break;
 800cc7a:	e008      	b.n	800cc8e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc80:	e005      	b.n	800cc8e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc82:	2303      	movs	r3, #3
 800cc84:	73fb      	strb	r3, [r7, #15]
    break;
 800cc86:	e002      	b.n	800cc8e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8c:	bf00      	nop
  }
  return usb_status;
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fa febd 	bl	8007a36 <HAL_PCD_EP_ClrStall>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccc0:	7bbb      	ldrb	r3, [r7, #14]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d816      	bhi.n	800ccf4 <USBD_LL_ClearStallEP+0x5c>
 800ccc6:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <USBD_LL_ClearStallEP+0x34>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800ccdd 	.word	0x0800ccdd
 800ccd0:	0800cce3 	.word	0x0800cce3
 800ccd4:	0800cce9 	.word	0x0800cce9
 800ccd8:	0800ccef 	.word	0x0800ccef
    case HAL_OK :
      usb_status = USBD_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73fb      	strb	r3, [r7, #15]
    break;
 800cce0:	e00b      	b.n	800ccfa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cce2:	2303      	movs	r3, #3
 800cce4:	73fb      	strb	r3, [r7, #15]
    break;
 800cce6:	e008      	b.n	800ccfa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
    break;
 800ccec:	e005      	b.n	800ccfa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf2:	e002      	b.n	800ccfa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf8:	bf00      	nop
  }
  return usb_status;
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	da0b      	bge.n	800cd38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd26:	68f9      	ldr	r1, [r7, #12]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	1a9b      	subs	r3, r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	440b      	add	r3, r1
 800cd32:	333e      	adds	r3, #62	; 0x3e
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	e00b      	b.n	800cd50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd38:	78fb      	ldrb	r3, [r7, #3]
 800cd3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd3e:	68f9      	ldr	r1, [r7, #12]
 800cd40:	4613      	mov	r3, r2
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	1a9b      	subs	r3, r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	440b      	add	r3, r1
 800cd4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3714      	adds	r7, #20
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd76:	78fa      	ldrb	r2, [r7, #3]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fa fc8f 	bl	800769e <HAL_PCD_SetAddress>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	d816      	bhi.n	800cdb8 <USBD_LL_SetUSBAddress+0x5c>
 800cd8a:	a201      	add	r2, pc, #4	; (adr r2, 800cd90 <USBD_LL_SetUSBAddress+0x34>)
 800cd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd90:	0800cda1 	.word	0x0800cda1
 800cd94:	0800cda7 	.word	0x0800cda7
 800cd98:	0800cdad 	.word	0x0800cdad
 800cd9c:	0800cdb3 	.word	0x0800cdb3
    case HAL_OK :
      usb_status = USBD_OK;
 800cda0:	2300      	movs	r3, #0
 800cda2:	73fb      	strb	r3, [r7, #15]
    break;
 800cda4:	e00b      	b.n	800cdbe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cda6:	2303      	movs	r3, #3
 800cda8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdaa:	e008      	b.n	800cdbe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdac:	2301      	movs	r3, #1
 800cdae:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb0:	e005      	b.n	800cdbe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb6:	e002      	b.n	800cdbe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	73fb      	strb	r3, [r7, #15]
    break;
 800cdbc:	bf00      	nop
  }
  return usb_status;
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	607a      	str	r2, [r7, #4]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cde6:	7af9      	ldrb	r1, [r7, #11]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	f7fa fd84 	bl	80078f8 <HAL_PCD_EP_Transmit>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cdf4:	7dbb      	ldrb	r3, [r7, #22]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d816      	bhi.n	800ce28 <USBD_LL_Transmit+0x60>
 800cdfa:	a201      	add	r2, pc, #4	; (adr r2, 800ce00 <USBD_LL_Transmit+0x38>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce17 	.word	0x0800ce17
 800ce08:	0800ce1d 	.word	0x0800ce1d
 800ce0c:	0800ce23 	.word	0x0800ce23
    case HAL_OK :
      usb_status = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75fb      	strb	r3, [r7, #23]
    break;
 800ce14:	e00b      	b.n	800ce2e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	75fb      	strb	r3, [r7, #23]
    break;
 800ce1a:	e008      	b.n	800ce2e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce20:	e005      	b.n	800ce2e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce22:	2303      	movs	r3, #3
 800ce24:	75fb      	strb	r3, [r7, #23]
    break;
 800ce26:	e002      	b.n	800ce2e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce2c:	bf00      	nop
  }
  return usb_status;
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	607a      	str	r2, [r7, #4]
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	460b      	mov	r3, r1
 800ce46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce56:	7af9      	ldrb	r1, [r7, #11]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	f7fa fcf6 	bl	800784c <HAL_PCD_EP_Receive>
 800ce60:	4603      	mov	r3, r0
 800ce62:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce64:	7dbb      	ldrb	r3, [r7, #22]
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d816      	bhi.n	800ce98 <USBD_LL_PrepareReceive+0x60>
 800ce6a:	a201      	add	r2, pc, #4	; (adr r2, 800ce70 <USBD_LL_PrepareReceive+0x38>)
 800ce6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce70:	0800ce81 	.word	0x0800ce81
 800ce74:	0800ce87 	.word	0x0800ce87
 800ce78:	0800ce8d 	.word	0x0800ce8d
 800ce7c:	0800ce93 	.word	0x0800ce93
    case HAL_OK :
      usb_status = USBD_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	75fb      	strb	r3, [r7, #23]
    break;
 800ce84:	e00b      	b.n	800ce9e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce86:	2303      	movs	r3, #3
 800ce88:	75fb      	strb	r3, [r7, #23]
    break;
 800ce8a:	e008      	b.n	800ce9e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce90:	e005      	b.n	800ce9e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	75fb      	strb	r3, [r7, #23]
    break;
 800ce96:	e002      	b.n	800ce9e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce9c:	bf00      	nop
  }
  return usb_status;
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ceba:	78fa      	ldrb	r2, [r7, #3]
 800cebc:	4611      	mov	r1, r2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fa fd02 	bl	80078c8 <HAL_PCD_EP_GetRxCount>
 800cec4:	4603      	mov	r3, r0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
	...

0800ced0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cedc:	78fb      	ldrb	r3, [r7, #3]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d002      	beq.n	800cee8 <HAL_PCDEx_LPM_Callback+0x18>
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d01f      	beq.n	800cf26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cee6:	e03b      	b.n	800cf60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d007      	beq.n	800cf00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cef0:	f000 f854 	bl	800cf9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cef4:	4b1c      	ldr	r3, [pc, #112]	; (800cf68 <HAL_PCDEx_LPM_Callback+0x98>)
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	4a1b      	ldr	r2, [pc, #108]	; (800cf68 <HAL_PCDEx_LPM_Callback+0x98>)
 800cefa:	f023 0306 	bic.w	r3, r3, #6
 800cefe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	6812      	ldr	r2, [r2, #0]
 800cf0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf12:	f023 0301 	bic.w	r3, r3, #1
 800cf16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fae2 	bl	800b4e8 <USBD_LL_Resume>
    break;
 800cf24:	e01c      	b.n	800cf60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	6812      	ldr	r2, [r2, #0]
 800cf34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf38:	f043 0301 	orr.w	r3, r3, #1
 800cf3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fe fab9 	bl	800b4bc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <HAL_PCDEx_LPM_Callback+0x98>)
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	4a04      	ldr	r2, [pc, #16]	; (800cf68 <HAL_PCDEx_LPM_Callback+0x98>)
 800cf58:	f043 0306 	orr.w	r3, r3, #6
 800cf5c:	6113      	str	r3, [r2, #16]
    break;
 800cf5e:	bf00      	nop
}
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	e000ed00 	.word	0xe000ed00

0800cf6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf74:	4b03      	ldr	r3, [pc, #12]	; (800cf84 <USBD_static_malloc+0x18>)
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	20000390 	.word	0x20000390

0800cf88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]

}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfa0:	f7f5 ff28 	bl	8002df4 <SystemClock_Config>
}
 800cfa4:	bf00      	nop
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <__errno>:
 800cfa8:	4b01      	ldr	r3, [pc, #4]	; (800cfb0 <__errno+0x8>)
 800cfaa:	6818      	ldr	r0, [r3, #0]
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	20000190 	.word	0x20000190

0800cfb4 <__libc_init_array>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	4d0d      	ldr	r5, [pc, #52]	; (800cfec <__libc_init_array+0x38>)
 800cfb8:	4c0d      	ldr	r4, [pc, #52]	; (800cff0 <__libc_init_array+0x3c>)
 800cfba:	1b64      	subs	r4, r4, r5
 800cfbc:	10a4      	asrs	r4, r4, #2
 800cfbe:	2600      	movs	r6, #0
 800cfc0:	42a6      	cmp	r6, r4
 800cfc2:	d109      	bne.n	800cfd8 <__libc_init_array+0x24>
 800cfc4:	4d0b      	ldr	r5, [pc, #44]	; (800cff4 <__libc_init_array+0x40>)
 800cfc6:	4c0c      	ldr	r4, [pc, #48]	; (800cff8 <__libc_init_array+0x44>)
 800cfc8:	f004 fc5c 	bl	8011884 <_init>
 800cfcc:	1b64      	subs	r4, r4, r5
 800cfce:	10a4      	asrs	r4, r4, #2
 800cfd0:	2600      	movs	r6, #0
 800cfd2:	42a6      	cmp	r6, r4
 800cfd4:	d105      	bne.n	800cfe2 <__libc_init_array+0x2e>
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
 800cfd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfdc:	4798      	blx	r3
 800cfde:	3601      	adds	r6, #1
 800cfe0:	e7ee      	b.n	800cfc0 <__libc_init_array+0xc>
 800cfe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfe6:	4798      	blx	r3
 800cfe8:	3601      	adds	r6, #1
 800cfea:	e7f2      	b.n	800cfd2 <__libc_init_array+0x1e>
 800cfec:	0801246c 	.word	0x0801246c
 800cff0:	0801246c 	.word	0x0801246c
 800cff4:	0801246c 	.word	0x0801246c
 800cff8:	08012470 	.word	0x08012470

0800cffc <malloc>:
 800cffc:	4b02      	ldr	r3, [pc, #8]	; (800d008 <malloc+0xc>)
 800cffe:	4601      	mov	r1, r0
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	f000 b85b 	b.w	800d0bc <_malloc_r>
 800d006:	bf00      	nop
 800d008:	20000190 	.word	0x20000190

0800d00c <memset>:
 800d00c:	4402      	add	r2, r0
 800d00e:	4603      	mov	r3, r0
 800d010:	4293      	cmp	r3, r2
 800d012:	d100      	bne.n	800d016 <memset+0xa>
 800d014:	4770      	bx	lr
 800d016:	f803 1b01 	strb.w	r1, [r3], #1
 800d01a:	e7f9      	b.n	800d010 <memset+0x4>

0800d01c <_free_r>:
 800d01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d01e:	2900      	cmp	r1, #0
 800d020:	d048      	beq.n	800d0b4 <_free_r+0x98>
 800d022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d026:	9001      	str	r0, [sp, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f1a1 0404 	sub.w	r4, r1, #4
 800d02e:	bfb8      	it	lt
 800d030:	18e4      	addlt	r4, r4, r3
 800d032:	f003 f91d 	bl	8010270 <__malloc_lock>
 800d036:	4a20      	ldr	r2, [pc, #128]	; (800d0b8 <_free_r+0x9c>)
 800d038:	9801      	ldr	r0, [sp, #4]
 800d03a:	6813      	ldr	r3, [r2, #0]
 800d03c:	4615      	mov	r5, r2
 800d03e:	b933      	cbnz	r3, 800d04e <_free_r+0x32>
 800d040:	6063      	str	r3, [r4, #4]
 800d042:	6014      	str	r4, [r2, #0]
 800d044:	b003      	add	sp, #12
 800d046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d04a:	f003 b917 	b.w	801027c <__malloc_unlock>
 800d04e:	42a3      	cmp	r3, r4
 800d050:	d90b      	bls.n	800d06a <_free_r+0x4e>
 800d052:	6821      	ldr	r1, [r4, #0]
 800d054:	1862      	adds	r2, r4, r1
 800d056:	4293      	cmp	r3, r2
 800d058:	bf04      	itt	eq
 800d05a:	681a      	ldreq	r2, [r3, #0]
 800d05c:	685b      	ldreq	r3, [r3, #4]
 800d05e:	6063      	str	r3, [r4, #4]
 800d060:	bf04      	itt	eq
 800d062:	1852      	addeq	r2, r2, r1
 800d064:	6022      	streq	r2, [r4, #0]
 800d066:	602c      	str	r4, [r5, #0]
 800d068:	e7ec      	b.n	800d044 <_free_r+0x28>
 800d06a:	461a      	mov	r2, r3
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	b10b      	cbz	r3, 800d074 <_free_r+0x58>
 800d070:	42a3      	cmp	r3, r4
 800d072:	d9fa      	bls.n	800d06a <_free_r+0x4e>
 800d074:	6811      	ldr	r1, [r2, #0]
 800d076:	1855      	adds	r5, r2, r1
 800d078:	42a5      	cmp	r5, r4
 800d07a:	d10b      	bne.n	800d094 <_free_r+0x78>
 800d07c:	6824      	ldr	r4, [r4, #0]
 800d07e:	4421      	add	r1, r4
 800d080:	1854      	adds	r4, r2, r1
 800d082:	42a3      	cmp	r3, r4
 800d084:	6011      	str	r1, [r2, #0]
 800d086:	d1dd      	bne.n	800d044 <_free_r+0x28>
 800d088:	681c      	ldr	r4, [r3, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	6053      	str	r3, [r2, #4]
 800d08e:	4421      	add	r1, r4
 800d090:	6011      	str	r1, [r2, #0]
 800d092:	e7d7      	b.n	800d044 <_free_r+0x28>
 800d094:	d902      	bls.n	800d09c <_free_r+0x80>
 800d096:	230c      	movs	r3, #12
 800d098:	6003      	str	r3, [r0, #0]
 800d09a:	e7d3      	b.n	800d044 <_free_r+0x28>
 800d09c:	6825      	ldr	r5, [r4, #0]
 800d09e:	1961      	adds	r1, r4, r5
 800d0a0:	428b      	cmp	r3, r1
 800d0a2:	bf04      	itt	eq
 800d0a4:	6819      	ldreq	r1, [r3, #0]
 800d0a6:	685b      	ldreq	r3, [r3, #4]
 800d0a8:	6063      	str	r3, [r4, #4]
 800d0aa:	bf04      	itt	eq
 800d0ac:	1949      	addeq	r1, r1, r5
 800d0ae:	6021      	streq	r1, [r4, #0]
 800d0b0:	6054      	str	r4, [r2, #4]
 800d0b2:	e7c7      	b.n	800d044 <_free_r+0x28>
 800d0b4:	b003      	add	sp, #12
 800d0b6:	bd30      	pop	{r4, r5, pc}
 800d0b8:	200005b0 	.word	0x200005b0

0800d0bc <_malloc_r>:
 800d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0be:	1ccd      	adds	r5, r1, #3
 800d0c0:	f025 0503 	bic.w	r5, r5, #3
 800d0c4:	3508      	adds	r5, #8
 800d0c6:	2d0c      	cmp	r5, #12
 800d0c8:	bf38      	it	cc
 800d0ca:	250c      	movcc	r5, #12
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	db01      	blt.n	800d0d6 <_malloc_r+0x1a>
 800d0d2:	42a9      	cmp	r1, r5
 800d0d4:	d903      	bls.n	800d0de <_malloc_r+0x22>
 800d0d6:	230c      	movs	r3, #12
 800d0d8:	6033      	str	r3, [r6, #0]
 800d0da:	2000      	movs	r0, #0
 800d0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0de:	f003 f8c7 	bl	8010270 <__malloc_lock>
 800d0e2:	4921      	ldr	r1, [pc, #132]	; (800d168 <_malloc_r+0xac>)
 800d0e4:	680a      	ldr	r2, [r1, #0]
 800d0e6:	4614      	mov	r4, r2
 800d0e8:	b99c      	cbnz	r4, 800d112 <_malloc_r+0x56>
 800d0ea:	4f20      	ldr	r7, [pc, #128]	; (800d16c <_malloc_r+0xb0>)
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	b923      	cbnz	r3, 800d0fa <_malloc_r+0x3e>
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f000 fece 	bl	800de94 <_sbrk_r>
 800d0f8:	6038      	str	r0, [r7, #0]
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f000 fec9 	bl	800de94 <_sbrk_r>
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	d123      	bne.n	800d14e <_malloc_r+0x92>
 800d106:	230c      	movs	r3, #12
 800d108:	6033      	str	r3, [r6, #0]
 800d10a:	4630      	mov	r0, r6
 800d10c:	f003 f8b6 	bl	801027c <__malloc_unlock>
 800d110:	e7e3      	b.n	800d0da <_malloc_r+0x1e>
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	1b5b      	subs	r3, r3, r5
 800d116:	d417      	bmi.n	800d148 <_malloc_r+0x8c>
 800d118:	2b0b      	cmp	r3, #11
 800d11a:	d903      	bls.n	800d124 <_malloc_r+0x68>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	441c      	add	r4, r3
 800d120:	6025      	str	r5, [r4, #0]
 800d122:	e004      	b.n	800d12e <_malloc_r+0x72>
 800d124:	6863      	ldr	r3, [r4, #4]
 800d126:	42a2      	cmp	r2, r4
 800d128:	bf0c      	ite	eq
 800d12a:	600b      	streq	r3, [r1, #0]
 800d12c:	6053      	strne	r3, [r2, #4]
 800d12e:	4630      	mov	r0, r6
 800d130:	f003 f8a4 	bl	801027c <__malloc_unlock>
 800d134:	f104 000b 	add.w	r0, r4, #11
 800d138:	1d23      	adds	r3, r4, #4
 800d13a:	f020 0007 	bic.w	r0, r0, #7
 800d13e:	1ac2      	subs	r2, r0, r3
 800d140:	d0cc      	beq.n	800d0dc <_malloc_r+0x20>
 800d142:	1a1b      	subs	r3, r3, r0
 800d144:	50a3      	str	r3, [r4, r2]
 800d146:	e7c9      	b.n	800d0dc <_malloc_r+0x20>
 800d148:	4622      	mov	r2, r4
 800d14a:	6864      	ldr	r4, [r4, #4]
 800d14c:	e7cc      	b.n	800d0e8 <_malloc_r+0x2c>
 800d14e:	1cc4      	adds	r4, r0, #3
 800d150:	f024 0403 	bic.w	r4, r4, #3
 800d154:	42a0      	cmp	r0, r4
 800d156:	d0e3      	beq.n	800d120 <_malloc_r+0x64>
 800d158:	1a21      	subs	r1, r4, r0
 800d15a:	4630      	mov	r0, r6
 800d15c:	f000 fe9a 	bl	800de94 <_sbrk_r>
 800d160:	3001      	adds	r0, #1
 800d162:	d1dd      	bne.n	800d120 <_malloc_r+0x64>
 800d164:	e7cf      	b.n	800d106 <_malloc_r+0x4a>
 800d166:	bf00      	nop
 800d168:	200005b0 	.word	0x200005b0
 800d16c:	200005b4 	.word	0x200005b4

0800d170 <__cvt>:
 800d170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d174:	ec55 4b10 	vmov	r4, r5, d0
 800d178:	2d00      	cmp	r5, #0
 800d17a:	460e      	mov	r6, r1
 800d17c:	4619      	mov	r1, r3
 800d17e:	462b      	mov	r3, r5
 800d180:	bfbb      	ittet	lt
 800d182:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d186:	461d      	movlt	r5, r3
 800d188:	2300      	movge	r3, #0
 800d18a:	232d      	movlt	r3, #45	; 0x2d
 800d18c:	700b      	strb	r3, [r1, #0]
 800d18e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d190:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d194:	4691      	mov	r9, r2
 800d196:	f023 0820 	bic.w	r8, r3, #32
 800d19a:	bfbc      	itt	lt
 800d19c:	4622      	movlt	r2, r4
 800d19e:	4614      	movlt	r4, r2
 800d1a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1a4:	d005      	beq.n	800d1b2 <__cvt+0x42>
 800d1a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d1aa:	d100      	bne.n	800d1ae <__cvt+0x3e>
 800d1ac:	3601      	adds	r6, #1
 800d1ae:	2102      	movs	r1, #2
 800d1b0:	e000      	b.n	800d1b4 <__cvt+0x44>
 800d1b2:	2103      	movs	r1, #3
 800d1b4:	ab03      	add	r3, sp, #12
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	ab02      	add	r3, sp, #8
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	ec45 4b10 	vmov	d0, r4, r5
 800d1c0:	4653      	mov	r3, sl
 800d1c2:	4632      	mov	r2, r6
 800d1c4:	f001 fddc 	bl	800ed80 <_dtoa_r>
 800d1c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	d102      	bne.n	800d1d6 <__cvt+0x66>
 800d1d0:	f019 0f01 	tst.w	r9, #1
 800d1d4:	d022      	beq.n	800d21c <__cvt+0xac>
 800d1d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1da:	eb07 0906 	add.w	r9, r7, r6
 800d1de:	d110      	bne.n	800d202 <__cvt+0x92>
 800d1e0:	783b      	ldrb	r3, [r7, #0]
 800d1e2:	2b30      	cmp	r3, #48	; 0x30
 800d1e4:	d10a      	bne.n	800d1fc <__cvt+0x8c>
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	f7f3 fc7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1f2:	b918      	cbnz	r0, 800d1fc <__cvt+0x8c>
 800d1f4:	f1c6 0601 	rsb	r6, r6, #1
 800d1f8:	f8ca 6000 	str.w	r6, [sl]
 800d1fc:	f8da 3000 	ldr.w	r3, [sl]
 800d200:	4499      	add	r9, r3
 800d202:	2200      	movs	r2, #0
 800d204:	2300      	movs	r3, #0
 800d206:	4620      	mov	r0, r4
 800d208:	4629      	mov	r1, r5
 800d20a:	f7f3 fc6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d20e:	b108      	cbz	r0, 800d214 <__cvt+0xa4>
 800d210:	f8cd 900c 	str.w	r9, [sp, #12]
 800d214:	2230      	movs	r2, #48	; 0x30
 800d216:	9b03      	ldr	r3, [sp, #12]
 800d218:	454b      	cmp	r3, r9
 800d21a:	d307      	bcc.n	800d22c <__cvt+0xbc>
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d220:	1bdb      	subs	r3, r3, r7
 800d222:	4638      	mov	r0, r7
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	b004      	add	sp, #16
 800d228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22c:	1c59      	adds	r1, r3, #1
 800d22e:	9103      	str	r1, [sp, #12]
 800d230:	701a      	strb	r2, [r3, #0]
 800d232:	e7f0      	b.n	800d216 <__cvt+0xa6>

0800d234 <__exponent>:
 800d234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d236:	4603      	mov	r3, r0
 800d238:	2900      	cmp	r1, #0
 800d23a:	bfb8      	it	lt
 800d23c:	4249      	neglt	r1, r1
 800d23e:	f803 2b02 	strb.w	r2, [r3], #2
 800d242:	bfb4      	ite	lt
 800d244:	222d      	movlt	r2, #45	; 0x2d
 800d246:	222b      	movge	r2, #43	; 0x2b
 800d248:	2909      	cmp	r1, #9
 800d24a:	7042      	strb	r2, [r0, #1]
 800d24c:	dd2a      	ble.n	800d2a4 <__exponent+0x70>
 800d24e:	f10d 0407 	add.w	r4, sp, #7
 800d252:	46a4      	mov	ip, r4
 800d254:	270a      	movs	r7, #10
 800d256:	46a6      	mov	lr, r4
 800d258:	460a      	mov	r2, r1
 800d25a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d25e:	fb07 1516 	mls	r5, r7, r6, r1
 800d262:	3530      	adds	r5, #48	; 0x30
 800d264:	2a63      	cmp	r2, #99	; 0x63
 800d266:	f104 34ff 	add.w	r4, r4, #4294967295
 800d26a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d26e:	4631      	mov	r1, r6
 800d270:	dcf1      	bgt.n	800d256 <__exponent+0x22>
 800d272:	3130      	adds	r1, #48	; 0x30
 800d274:	f1ae 0502 	sub.w	r5, lr, #2
 800d278:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d27c:	1c44      	adds	r4, r0, #1
 800d27e:	4629      	mov	r1, r5
 800d280:	4561      	cmp	r1, ip
 800d282:	d30a      	bcc.n	800d29a <__exponent+0x66>
 800d284:	f10d 0209 	add.w	r2, sp, #9
 800d288:	eba2 020e 	sub.w	r2, r2, lr
 800d28c:	4565      	cmp	r5, ip
 800d28e:	bf88      	it	hi
 800d290:	2200      	movhi	r2, #0
 800d292:	4413      	add	r3, r2
 800d294:	1a18      	subs	r0, r3, r0
 800d296:	b003      	add	sp, #12
 800d298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d29e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d2a2:	e7ed      	b.n	800d280 <__exponent+0x4c>
 800d2a4:	2330      	movs	r3, #48	; 0x30
 800d2a6:	3130      	adds	r1, #48	; 0x30
 800d2a8:	7083      	strb	r3, [r0, #2]
 800d2aa:	70c1      	strb	r1, [r0, #3]
 800d2ac:	1d03      	adds	r3, r0, #4
 800d2ae:	e7f1      	b.n	800d294 <__exponent+0x60>

0800d2b0 <_printf_float>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	ed2d 8b02 	vpush	{d8}
 800d2b8:	b08d      	sub	sp, #52	; 0x34
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	461f      	mov	r7, r3
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	f002 ffab 	bl	8010220 <_localeconv_r>
 800d2ca:	f8d0 a000 	ldr.w	sl, [r0]
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	f7f2 ff8e 	bl	80001f0 <strlen>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	9305      	str	r3, [sp, #20]
 800d2dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2e4:	3307      	adds	r3, #7
 800d2e6:	f023 0307 	bic.w	r3, r3, #7
 800d2ea:	f103 0208 	add.w	r2, r3, #8
 800d2ee:	f8c8 2000 	str.w	r2, [r8]
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d2fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d302:	9307      	str	r3, [sp, #28]
 800d304:	f8cd 8018 	str.w	r8, [sp, #24]
 800d308:	ee08 0a10 	vmov	s16, r0
 800d30c:	4b9f      	ldr	r3, [pc, #636]	; (800d58c <_printf_float+0x2dc>)
 800d30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d312:	f04f 32ff 	mov.w	r2, #4294967295
 800d316:	f7f3 fc19 	bl	8000b4c <__aeabi_dcmpun>
 800d31a:	bb88      	cbnz	r0, 800d380 <_printf_float+0xd0>
 800d31c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d320:	4b9a      	ldr	r3, [pc, #616]	; (800d58c <_printf_float+0x2dc>)
 800d322:	f04f 32ff 	mov.w	r2, #4294967295
 800d326:	f7f3 fbf3 	bl	8000b10 <__aeabi_dcmple>
 800d32a:	bb48      	cbnz	r0, 800d380 <_printf_float+0xd0>
 800d32c:	2200      	movs	r2, #0
 800d32e:	2300      	movs	r3, #0
 800d330:	4640      	mov	r0, r8
 800d332:	4649      	mov	r1, r9
 800d334:	f7f3 fbe2 	bl	8000afc <__aeabi_dcmplt>
 800d338:	b110      	cbz	r0, 800d340 <_printf_float+0x90>
 800d33a:	232d      	movs	r3, #45	; 0x2d
 800d33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d340:	4b93      	ldr	r3, [pc, #588]	; (800d590 <_printf_float+0x2e0>)
 800d342:	4894      	ldr	r0, [pc, #592]	; (800d594 <_printf_float+0x2e4>)
 800d344:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d348:	bf94      	ite	ls
 800d34a:	4698      	movls	r8, r3
 800d34c:	4680      	movhi	r8, r0
 800d34e:	2303      	movs	r3, #3
 800d350:	6123      	str	r3, [r4, #16]
 800d352:	9b05      	ldr	r3, [sp, #20]
 800d354:	f023 0204 	bic.w	r2, r3, #4
 800d358:	6022      	str	r2, [r4, #0]
 800d35a:	f04f 0900 	mov.w	r9, #0
 800d35e:	9700      	str	r7, [sp, #0]
 800d360:	4633      	mov	r3, r6
 800d362:	aa0b      	add	r2, sp, #44	; 0x2c
 800d364:	4621      	mov	r1, r4
 800d366:	4628      	mov	r0, r5
 800d368:	f000 f9d8 	bl	800d71c <_printf_common>
 800d36c:	3001      	adds	r0, #1
 800d36e:	f040 8090 	bne.w	800d492 <_printf_float+0x1e2>
 800d372:	f04f 30ff 	mov.w	r0, #4294967295
 800d376:	b00d      	add	sp, #52	; 0x34
 800d378:	ecbd 8b02 	vpop	{d8}
 800d37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d380:	4642      	mov	r2, r8
 800d382:	464b      	mov	r3, r9
 800d384:	4640      	mov	r0, r8
 800d386:	4649      	mov	r1, r9
 800d388:	f7f3 fbe0 	bl	8000b4c <__aeabi_dcmpun>
 800d38c:	b140      	cbz	r0, 800d3a0 <_printf_float+0xf0>
 800d38e:	464b      	mov	r3, r9
 800d390:	2b00      	cmp	r3, #0
 800d392:	bfbc      	itt	lt
 800d394:	232d      	movlt	r3, #45	; 0x2d
 800d396:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d39a:	487f      	ldr	r0, [pc, #508]	; (800d598 <_printf_float+0x2e8>)
 800d39c:	4b7f      	ldr	r3, [pc, #508]	; (800d59c <_printf_float+0x2ec>)
 800d39e:	e7d1      	b.n	800d344 <_printf_float+0x94>
 800d3a0:	6863      	ldr	r3, [r4, #4]
 800d3a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d3a6:	9206      	str	r2, [sp, #24]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	d13f      	bne.n	800d42c <_printf_float+0x17c>
 800d3ac:	2306      	movs	r3, #6
 800d3ae:	6063      	str	r3, [r4, #4]
 800d3b0:	9b05      	ldr	r3, [sp, #20]
 800d3b2:	6861      	ldr	r1, [r4, #4]
 800d3b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9303      	str	r3, [sp, #12]
 800d3bc:	ab0a      	add	r3, sp, #40	; 0x28
 800d3be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d3c2:	ab09      	add	r3, sp, #36	; 0x24
 800d3c4:	ec49 8b10 	vmov	d0, r8, r9
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	6022      	str	r2, [r4, #0]
 800d3cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7ff fecd 	bl	800d170 <__cvt>
 800d3d6:	9b06      	ldr	r3, [sp, #24]
 800d3d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3da:	2b47      	cmp	r3, #71	; 0x47
 800d3dc:	4680      	mov	r8, r0
 800d3de:	d108      	bne.n	800d3f2 <_printf_float+0x142>
 800d3e0:	1cc8      	adds	r0, r1, #3
 800d3e2:	db02      	blt.n	800d3ea <_printf_float+0x13a>
 800d3e4:	6863      	ldr	r3, [r4, #4]
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	dd41      	ble.n	800d46e <_printf_float+0x1be>
 800d3ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3ee:	fa5f fb8b 	uxtb.w	fp, fp
 800d3f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3f6:	d820      	bhi.n	800d43a <_printf_float+0x18a>
 800d3f8:	3901      	subs	r1, #1
 800d3fa:	465a      	mov	r2, fp
 800d3fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d400:	9109      	str	r1, [sp, #36]	; 0x24
 800d402:	f7ff ff17 	bl	800d234 <__exponent>
 800d406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d408:	1813      	adds	r3, r2, r0
 800d40a:	2a01      	cmp	r2, #1
 800d40c:	4681      	mov	r9, r0
 800d40e:	6123      	str	r3, [r4, #16]
 800d410:	dc02      	bgt.n	800d418 <_printf_float+0x168>
 800d412:	6822      	ldr	r2, [r4, #0]
 800d414:	07d2      	lsls	r2, r2, #31
 800d416:	d501      	bpl.n	800d41c <_printf_float+0x16c>
 800d418:	3301      	adds	r3, #1
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d420:	2b00      	cmp	r3, #0
 800d422:	d09c      	beq.n	800d35e <_printf_float+0xae>
 800d424:	232d      	movs	r3, #45	; 0x2d
 800d426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d42a:	e798      	b.n	800d35e <_printf_float+0xae>
 800d42c:	9a06      	ldr	r2, [sp, #24]
 800d42e:	2a47      	cmp	r2, #71	; 0x47
 800d430:	d1be      	bne.n	800d3b0 <_printf_float+0x100>
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1bc      	bne.n	800d3b0 <_printf_float+0x100>
 800d436:	2301      	movs	r3, #1
 800d438:	e7b9      	b.n	800d3ae <_printf_float+0xfe>
 800d43a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d43e:	d118      	bne.n	800d472 <_printf_float+0x1c2>
 800d440:	2900      	cmp	r1, #0
 800d442:	6863      	ldr	r3, [r4, #4]
 800d444:	dd0b      	ble.n	800d45e <_printf_float+0x1ae>
 800d446:	6121      	str	r1, [r4, #16]
 800d448:	b913      	cbnz	r3, 800d450 <_printf_float+0x1a0>
 800d44a:	6822      	ldr	r2, [r4, #0]
 800d44c:	07d0      	lsls	r0, r2, #31
 800d44e:	d502      	bpl.n	800d456 <_printf_float+0x1a6>
 800d450:	3301      	adds	r3, #1
 800d452:	440b      	add	r3, r1
 800d454:	6123      	str	r3, [r4, #16]
 800d456:	65a1      	str	r1, [r4, #88]	; 0x58
 800d458:	f04f 0900 	mov.w	r9, #0
 800d45c:	e7de      	b.n	800d41c <_printf_float+0x16c>
 800d45e:	b913      	cbnz	r3, 800d466 <_printf_float+0x1b6>
 800d460:	6822      	ldr	r2, [r4, #0]
 800d462:	07d2      	lsls	r2, r2, #31
 800d464:	d501      	bpl.n	800d46a <_printf_float+0x1ba>
 800d466:	3302      	adds	r3, #2
 800d468:	e7f4      	b.n	800d454 <_printf_float+0x1a4>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e7f2      	b.n	800d454 <_printf_float+0x1a4>
 800d46e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d474:	4299      	cmp	r1, r3
 800d476:	db05      	blt.n	800d484 <_printf_float+0x1d4>
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	6121      	str	r1, [r4, #16]
 800d47c:	07d8      	lsls	r0, r3, #31
 800d47e:	d5ea      	bpl.n	800d456 <_printf_float+0x1a6>
 800d480:	1c4b      	adds	r3, r1, #1
 800d482:	e7e7      	b.n	800d454 <_printf_float+0x1a4>
 800d484:	2900      	cmp	r1, #0
 800d486:	bfd4      	ite	le
 800d488:	f1c1 0202 	rsble	r2, r1, #2
 800d48c:	2201      	movgt	r2, #1
 800d48e:	4413      	add	r3, r2
 800d490:	e7e0      	b.n	800d454 <_printf_float+0x1a4>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	055a      	lsls	r2, r3, #21
 800d496:	d407      	bmi.n	800d4a8 <_printf_float+0x1f8>
 800d498:	6923      	ldr	r3, [r4, #16]
 800d49a:	4642      	mov	r2, r8
 800d49c:	4631      	mov	r1, r6
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47b8      	blx	r7
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	d12c      	bne.n	800d500 <_printf_float+0x250>
 800d4a6:	e764      	b.n	800d372 <_printf_float+0xc2>
 800d4a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d4ac:	f240 80e0 	bls.w	800d670 <_printf_float+0x3c0>
 800d4b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f7f3 fb16 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d034      	beq.n	800d52a <_printf_float+0x27a>
 800d4c0:	4a37      	ldr	r2, [pc, #220]	; (800d5a0 <_printf_float+0x2f0>)
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	47b8      	blx	r7
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f43f af51 	beq.w	800d372 <_printf_float+0xc2>
 800d4d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	db02      	blt.n	800d4de <_printf_float+0x22e>
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	07d8      	lsls	r0, r3, #31
 800d4dc:	d510      	bpl.n	800d500 <_printf_float+0x250>
 800d4de:	ee18 3a10 	vmov	r3, s16
 800d4e2:	4652      	mov	r2, sl
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b8      	blx	r7
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	f43f af41 	beq.w	800d372 <_printf_float+0xc2>
 800d4f0:	f04f 0800 	mov.w	r8, #0
 800d4f4:	f104 091a 	add.w	r9, r4, #26
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	4543      	cmp	r3, r8
 800d4fe:	dc09      	bgt.n	800d514 <_printf_float+0x264>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	079b      	lsls	r3, r3, #30
 800d504:	f100 8105 	bmi.w	800d712 <_printf_float+0x462>
 800d508:	68e0      	ldr	r0, [r4, #12]
 800d50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d50c:	4298      	cmp	r0, r3
 800d50e:	bfb8      	it	lt
 800d510:	4618      	movlt	r0, r3
 800d512:	e730      	b.n	800d376 <_printf_float+0xc6>
 800d514:	2301      	movs	r3, #1
 800d516:	464a      	mov	r2, r9
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	f43f af27 	beq.w	800d372 <_printf_float+0xc2>
 800d524:	f108 0801 	add.w	r8, r8, #1
 800d528:	e7e6      	b.n	800d4f8 <_printf_float+0x248>
 800d52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dc39      	bgt.n	800d5a4 <_printf_float+0x2f4>
 800d530:	4a1b      	ldr	r2, [pc, #108]	; (800d5a0 <_printf_float+0x2f0>)
 800d532:	2301      	movs	r3, #1
 800d534:	4631      	mov	r1, r6
 800d536:	4628      	mov	r0, r5
 800d538:	47b8      	blx	r7
 800d53a:	3001      	adds	r0, #1
 800d53c:	f43f af19 	beq.w	800d372 <_printf_float+0xc2>
 800d540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d544:	4313      	orrs	r3, r2
 800d546:	d102      	bne.n	800d54e <_printf_float+0x29e>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	07d9      	lsls	r1, r3, #31
 800d54c:	d5d8      	bpl.n	800d500 <_printf_float+0x250>
 800d54e:	ee18 3a10 	vmov	r3, s16
 800d552:	4652      	mov	r2, sl
 800d554:	4631      	mov	r1, r6
 800d556:	4628      	mov	r0, r5
 800d558:	47b8      	blx	r7
 800d55a:	3001      	adds	r0, #1
 800d55c:	f43f af09 	beq.w	800d372 <_printf_float+0xc2>
 800d560:	f04f 0900 	mov.w	r9, #0
 800d564:	f104 0a1a 	add.w	sl, r4, #26
 800d568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d56a:	425b      	negs	r3, r3
 800d56c:	454b      	cmp	r3, r9
 800d56e:	dc01      	bgt.n	800d574 <_printf_float+0x2c4>
 800d570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d572:	e792      	b.n	800d49a <_printf_float+0x1ea>
 800d574:	2301      	movs	r3, #1
 800d576:	4652      	mov	r2, sl
 800d578:	4631      	mov	r1, r6
 800d57a:	4628      	mov	r0, r5
 800d57c:	47b8      	blx	r7
 800d57e:	3001      	adds	r0, #1
 800d580:	f43f aef7 	beq.w	800d372 <_printf_float+0xc2>
 800d584:	f109 0901 	add.w	r9, r9, #1
 800d588:	e7ee      	b.n	800d568 <_printf_float+0x2b8>
 800d58a:	bf00      	nop
 800d58c:	7fefffff 	.word	0x7fefffff
 800d590:	08011fb8 	.word	0x08011fb8
 800d594:	08011fbc 	.word	0x08011fbc
 800d598:	08011fc4 	.word	0x08011fc4
 800d59c:	08011fc0 	.word	0x08011fc0
 800d5a0:	08011fc8 	.word	0x08011fc8
 800d5a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	bfa8      	it	ge
 800d5ac:	461a      	movge	r2, r3
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	4691      	mov	r9, r2
 800d5b2:	dc37      	bgt.n	800d624 <_printf_float+0x374>
 800d5b4:	f04f 0b00 	mov.w	fp, #0
 800d5b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5bc:	f104 021a 	add.w	r2, r4, #26
 800d5c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	eba3 0309 	sub.w	r3, r3, r9
 800d5c8:	455b      	cmp	r3, fp
 800d5ca:	dc33      	bgt.n	800d634 <_printf_float+0x384>
 800d5cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	db3b      	blt.n	800d64c <_printf_float+0x39c>
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	07da      	lsls	r2, r3, #31
 800d5d8:	d438      	bmi.n	800d64c <_printf_float+0x39c>
 800d5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5dc:	9b05      	ldr	r3, [sp, #20]
 800d5de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	eba2 0901 	sub.w	r9, r2, r1
 800d5e6:	4599      	cmp	r9, r3
 800d5e8:	bfa8      	it	ge
 800d5ea:	4699      	movge	r9, r3
 800d5ec:	f1b9 0f00 	cmp.w	r9, #0
 800d5f0:	dc35      	bgt.n	800d65e <_printf_float+0x3ae>
 800d5f2:	f04f 0800 	mov.w	r8, #0
 800d5f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5fa:	f104 0a1a 	add.w	sl, r4, #26
 800d5fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	eba3 0309 	sub.w	r3, r3, r9
 800d608:	4543      	cmp	r3, r8
 800d60a:	f77f af79 	ble.w	800d500 <_printf_float+0x250>
 800d60e:	2301      	movs	r3, #1
 800d610:	4652      	mov	r2, sl
 800d612:	4631      	mov	r1, r6
 800d614:	4628      	mov	r0, r5
 800d616:	47b8      	blx	r7
 800d618:	3001      	adds	r0, #1
 800d61a:	f43f aeaa 	beq.w	800d372 <_printf_float+0xc2>
 800d61e:	f108 0801 	add.w	r8, r8, #1
 800d622:	e7ec      	b.n	800d5fe <_printf_float+0x34e>
 800d624:	4613      	mov	r3, r2
 800d626:	4631      	mov	r1, r6
 800d628:	4642      	mov	r2, r8
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b8      	blx	r7
 800d62e:	3001      	adds	r0, #1
 800d630:	d1c0      	bne.n	800d5b4 <_printf_float+0x304>
 800d632:	e69e      	b.n	800d372 <_printf_float+0xc2>
 800d634:	2301      	movs	r3, #1
 800d636:	4631      	mov	r1, r6
 800d638:	4628      	mov	r0, r5
 800d63a:	9205      	str	r2, [sp, #20]
 800d63c:	47b8      	blx	r7
 800d63e:	3001      	adds	r0, #1
 800d640:	f43f ae97 	beq.w	800d372 <_printf_float+0xc2>
 800d644:	9a05      	ldr	r2, [sp, #20]
 800d646:	f10b 0b01 	add.w	fp, fp, #1
 800d64a:	e7b9      	b.n	800d5c0 <_printf_float+0x310>
 800d64c:	ee18 3a10 	vmov	r3, s16
 800d650:	4652      	mov	r2, sl
 800d652:	4631      	mov	r1, r6
 800d654:	4628      	mov	r0, r5
 800d656:	47b8      	blx	r7
 800d658:	3001      	adds	r0, #1
 800d65a:	d1be      	bne.n	800d5da <_printf_float+0x32a>
 800d65c:	e689      	b.n	800d372 <_printf_float+0xc2>
 800d65e:	9a05      	ldr	r2, [sp, #20]
 800d660:	464b      	mov	r3, r9
 800d662:	4442      	add	r2, r8
 800d664:	4631      	mov	r1, r6
 800d666:	4628      	mov	r0, r5
 800d668:	47b8      	blx	r7
 800d66a:	3001      	adds	r0, #1
 800d66c:	d1c1      	bne.n	800d5f2 <_printf_float+0x342>
 800d66e:	e680      	b.n	800d372 <_printf_float+0xc2>
 800d670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d672:	2a01      	cmp	r2, #1
 800d674:	dc01      	bgt.n	800d67a <_printf_float+0x3ca>
 800d676:	07db      	lsls	r3, r3, #31
 800d678:	d538      	bpl.n	800d6ec <_printf_float+0x43c>
 800d67a:	2301      	movs	r3, #1
 800d67c:	4642      	mov	r2, r8
 800d67e:	4631      	mov	r1, r6
 800d680:	4628      	mov	r0, r5
 800d682:	47b8      	blx	r7
 800d684:	3001      	adds	r0, #1
 800d686:	f43f ae74 	beq.w	800d372 <_printf_float+0xc2>
 800d68a:	ee18 3a10 	vmov	r3, s16
 800d68e:	4652      	mov	r2, sl
 800d690:	4631      	mov	r1, r6
 800d692:	4628      	mov	r0, r5
 800d694:	47b8      	blx	r7
 800d696:	3001      	adds	r0, #1
 800d698:	f43f ae6b 	beq.w	800d372 <_printf_float+0xc2>
 800d69c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f7f3 fa20 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6a8:	b9d8      	cbnz	r0, 800d6e2 <_printf_float+0x432>
 800d6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ac:	f108 0201 	add.w	r2, r8, #1
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	47b8      	blx	r7
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d10e      	bne.n	800d6da <_printf_float+0x42a>
 800d6bc:	e659      	b.n	800d372 <_printf_float+0xc2>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	4652      	mov	r2, sl
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	47b8      	blx	r7
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	f43f ae52 	beq.w	800d372 <_printf_float+0xc2>
 800d6ce:	f108 0801 	add.w	r8, r8, #1
 800d6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	4543      	cmp	r3, r8
 800d6d8:	dcf1      	bgt.n	800d6be <_printf_float+0x40e>
 800d6da:	464b      	mov	r3, r9
 800d6dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6e0:	e6dc      	b.n	800d49c <_printf_float+0x1ec>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	f104 0a1a 	add.w	sl, r4, #26
 800d6ea:	e7f2      	b.n	800d6d2 <_printf_float+0x422>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	4642      	mov	r2, r8
 800d6f0:	e7df      	b.n	800d6b2 <_printf_float+0x402>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	464a      	mov	r2, r9
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	47b8      	blx	r7
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	f43f ae38 	beq.w	800d372 <_printf_float+0xc2>
 800d702:	f108 0801 	add.w	r8, r8, #1
 800d706:	68e3      	ldr	r3, [r4, #12]
 800d708:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d70a:	1a5b      	subs	r3, r3, r1
 800d70c:	4543      	cmp	r3, r8
 800d70e:	dcf0      	bgt.n	800d6f2 <_printf_float+0x442>
 800d710:	e6fa      	b.n	800d508 <_printf_float+0x258>
 800d712:	f04f 0800 	mov.w	r8, #0
 800d716:	f104 0919 	add.w	r9, r4, #25
 800d71a:	e7f4      	b.n	800d706 <_printf_float+0x456>

0800d71c <_printf_common>:
 800d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	4616      	mov	r6, r2
 800d722:	4699      	mov	r9, r3
 800d724:	688a      	ldr	r2, [r1, #8]
 800d726:	690b      	ldr	r3, [r1, #16]
 800d728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d72c:	4293      	cmp	r3, r2
 800d72e:	bfb8      	it	lt
 800d730:	4613      	movlt	r3, r2
 800d732:	6033      	str	r3, [r6, #0]
 800d734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d738:	4607      	mov	r7, r0
 800d73a:	460c      	mov	r4, r1
 800d73c:	b10a      	cbz	r2, 800d742 <_printf_common+0x26>
 800d73e:	3301      	adds	r3, #1
 800d740:	6033      	str	r3, [r6, #0]
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	0699      	lsls	r1, r3, #26
 800d746:	bf42      	ittt	mi
 800d748:	6833      	ldrmi	r3, [r6, #0]
 800d74a:	3302      	addmi	r3, #2
 800d74c:	6033      	strmi	r3, [r6, #0]
 800d74e:	6825      	ldr	r5, [r4, #0]
 800d750:	f015 0506 	ands.w	r5, r5, #6
 800d754:	d106      	bne.n	800d764 <_printf_common+0x48>
 800d756:	f104 0a19 	add.w	sl, r4, #25
 800d75a:	68e3      	ldr	r3, [r4, #12]
 800d75c:	6832      	ldr	r2, [r6, #0]
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	42ab      	cmp	r3, r5
 800d762:	dc26      	bgt.n	800d7b2 <_printf_common+0x96>
 800d764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d768:	1e13      	subs	r3, r2, #0
 800d76a:	6822      	ldr	r2, [r4, #0]
 800d76c:	bf18      	it	ne
 800d76e:	2301      	movne	r3, #1
 800d770:	0692      	lsls	r2, r2, #26
 800d772:	d42b      	bmi.n	800d7cc <_printf_common+0xb0>
 800d774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d778:	4649      	mov	r1, r9
 800d77a:	4638      	mov	r0, r7
 800d77c:	47c0      	blx	r8
 800d77e:	3001      	adds	r0, #1
 800d780:	d01e      	beq.n	800d7c0 <_printf_common+0xa4>
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	68e5      	ldr	r5, [r4, #12]
 800d786:	6832      	ldr	r2, [r6, #0]
 800d788:	f003 0306 	and.w	r3, r3, #6
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	bf08      	it	eq
 800d790:	1aad      	subeq	r5, r5, r2
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	6922      	ldr	r2, [r4, #16]
 800d796:	bf0c      	ite	eq
 800d798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d79c:	2500      	movne	r5, #0
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	bfc4      	itt	gt
 800d7a2:	1a9b      	subgt	r3, r3, r2
 800d7a4:	18ed      	addgt	r5, r5, r3
 800d7a6:	2600      	movs	r6, #0
 800d7a8:	341a      	adds	r4, #26
 800d7aa:	42b5      	cmp	r5, r6
 800d7ac:	d11a      	bne.n	800d7e4 <_printf_common+0xc8>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e008      	b.n	800d7c4 <_printf_common+0xa8>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	4649      	mov	r1, r9
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	47c0      	blx	r8
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d103      	bne.n	800d7c8 <_printf_common+0xac>
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c8:	3501      	adds	r5, #1
 800d7ca:	e7c6      	b.n	800d75a <_printf_common+0x3e>
 800d7cc:	18e1      	adds	r1, r4, r3
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	2030      	movs	r0, #48	; 0x30
 800d7d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7d6:	4422      	add	r2, r4
 800d7d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7e0:	3302      	adds	r3, #2
 800d7e2:	e7c7      	b.n	800d774 <_printf_common+0x58>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	4649      	mov	r1, r9
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	47c0      	blx	r8
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	d0e6      	beq.n	800d7c0 <_printf_common+0xa4>
 800d7f2:	3601      	adds	r6, #1
 800d7f4:	e7d9      	b.n	800d7aa <_printf_common+0x8e>
	...

0800d7f8 <_printf_i>:
 800d7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7fc:	460c      	mov	r4, r1
 800d7fe:	4691      	mov	r9, r2
 800d800:	7e27      	ldrb	r7, [r4, #24]
 800d802:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d804:	2f78      	cmp	r7, #120	; 0x78
 800d806:	4680      	mov	r8, r0
 800d808:	469a      	mov	sl, r3
 800d80a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d80e:	d807      	bhi.n	800d820 <_printf_i+0x28>
 800d810:	2f62      	cmp	r7, #98	; 0x62
 800d812:	d80a      	bhi.n	800d82a <_printf_i+0x32>
 800d814:	2f00      	cmp	r7, #0
 800d816:	f000 80d8 	beq.w	800d9ca <_printf_i+0x1d2>
 800d81a:	2f58      	cmp	r7, #88	; 0x58
 800d81c:	f000 80a3 	beq.w	800d966 <_printf_i+0x16e>
 800d820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d828:	e03a      	b.n	800d8a0 <_printf_i+0xa8>
 800d82a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d82e:	2b15      	cmp	r3, #21
 800d830:	d8f6      	bhi.n	800d820 <_printf_i+0x28>
 800d832:	a001      	add	r0, pc, #4	; (adr r0, 800d838 <_printf_i+0x40>)
 800d834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d838:	0800d891 	.word	0x0800d891
 800d83c:	0800d8a5 	.word	0x0800d8a5
 800d840:	0800d821 	.word	0x0800d821
 800d844:	0800d821 	.word	0x0800d821
 800d848:	0800d821 	.word	0x0800d821
 800d84c:	0800d821 	.word	0x0800d821
 800d850:	0800d8a5 	.word	0x0800d8a5
 800d854:	0800d821 	.word	0x0800d821
 800d858:	0800d821 	.word	0x0800d821
 800d85c:	0800d821 	.word	0x0800d821
 800d860:	0800d821 	.word	0x0800d821
 800d864:	0800d9b1 	.word	0x0800d9b1
 800d868:	0800d8d5 	.word	0x0800d8d5
 800d86c:	0800d993 	.word	0x0800d993
 800d870:	0800d821 	.word	0x0800d821
 800d874:	0800d821 	.word	0x0800d821
 800d878:	0800d9d3 	.word	0x0800d9d3
 800d87c:	0800d821 	.word	0x0800d821
 800d880:	0800d8d5 	.word	0x0800d8d5
 800d884:	0800d821 	.word	0x0800d821
 800d888:	0800d821 	.word	0x0800d821
 800d88c:	0800d99b 	.word	0x0800d99b
 800d890:	680b      	ldr	r3, [r1, #0]
 800d892:	1d1a      	adds	r2, r3, #4
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	600a      	str	r2, [r1, #0]
 800d898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d89c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e0a3      	b.n	800d9ec <_printf_i+0x1f4>
 800d8a4:	6825      	ldr	r5, [r4, #0]
 800d8a6:	6808      	ldr	r0, [r1, #0]
 800d8a8:	062e      	lsls	r6, r5, #24
 800d8aa:	f100 0304 	add.w	r3, r0, #4
 800d8ae:	d50a      	bpl.n	800d8c6 <_printf_i+0xce>
 800d8b0:	6805      	ldr	r5, [r0, #0]
 800d8b2:	600b      	str	r3, [r1, #0]
 800d8b4:	2d00      	cmp	r5, #0
 800d8b6:	da03      	bge.n	800d8c0 <_printf_i+0xc8>
 800d8b8:	232d      	movs	r3, #45	; 0x2d
 800d8ba:	426d      	negs	r5, r5
 800d8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c0:	485e      	ldr	r0, [pc, #376]	; (800da3c <_printf_i+0x244>)
 800d8c2:	230a      	movs	r3, #10
 800d8c4:	e019      	b.n	800d8fa <_printf_i+0x102>
 800d8c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d8ca:	6805      	ldr	r5, [r0, #0]
 800d8cc:	600b      	str	r3, [r1, #0]
 800d8ce:	bf18      	it	ne
 800d8d0:	b22d      	sxthne	r5, r5
 800d8d2:	e7ef      	b.n	800d8b4 <_printf_i+0xbc>
 800d8d4:	680b      	ldr	r3, [r1, #0]
 800d8d6:	6825      	ldr	r5, [r4, #0]
 800d8d8:	1d18      	adds	r0, r3, #4
 800d8da:	6008      	str	r0, [r1, #0]
 800d8dc:	0628      	lsls	r0, r5, #24
 800d8de:	d501      	bpl.n	800d8e4 <_printf_i+0xec>
 800d8e0:	681d      	ldr	r5, [r3, #0]
 800d8e2:	e002      	b.n	800d8ea <_printf_i+0xf2>
 800d8e4:	0669      	lsls	r1, r5, #25
 800d8e6:	d5fb      	bpl.n	800d8e0 <_printf_i+0xe8>
 800d8e8:	881d      	ldrh	r5, [r3, #0]
 800d8ea:	4854      	ldr	r0, [pc, #336]	; (800da3c <_printf_i+0x244>)
 800d8ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d8ee:	bf0c      	ite	eq
 800d8f0:	2308      	moveq	r3, #8
 800d8f2:	230a      	movne	r3, #10
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8fa:	6866      	ldr	r6, [r4, #4]
 800d8fc:	60a6      	str	r6, [r4, #8]
 800d8fe:	2e00      	cmp	r6, #0
 800d900:	bfa2      	ittt	ge
 800d902:	6821      	ldrge	r1, [r4, #0]
 800d904:	f021 0104 	bicge.w	r1, r1, #4
 800d908:	6021      	strge	r1, [r4, #0]
 800d90a:	b90d      	cbnz	r5, 800d910 <_printf_i+0x118>
 800d90c:	2e00      	cmp	r6, #0
 800d90e:	d04d      	beq.n	800d9ac <_printf_i+0x1b4>
 800d910:	4616      	mov	r6, r2
 800d912:	fbb5 f1f3 	udiv	r1, r5, r3
 800d916:	fb03 5711 	mls	r7, r3, r1, r5
 800d91a:	5dc7      	ldrb	r7, [r0, r7]
 800d91c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d920:	462f      	mov	r7, r5
 800d922:	42bb      	cmp	r3, r7
 800d924:	460d      	mov	r5, r1
 800d926:	d9f4      	bls.n	800d912 <_printf_i+0x11a>
 800d928:	2b08      	cmp	r3, #8
 800d92a:	d10b      	bne.n	800d944 <_printf_i+0x14c>
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	07df      	lsls	r7, r3, #31
 800d930:	d508      	bpl.n	800d944 <_printf_i+0x14c>
 800d932:	6923      	ldr	r3, [r4, #16]
 800d934:	6861      	ldr	r1, [r4, #4]
 800d936:	4299      	cmp	r1, r3
 800d938:	bfde      	ittt	le
 800d93a:	2330      	movle	r3, #48	; 0x30
 800d93c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d940:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d944:	1b92      	subs	r2, r2, r6
 800d946:	6122      	str	r2, [r4, #16]
 800d948:	f8cd a000 	str.w	sl, [sp]
 800d94c:	464b      	mov	r3, r9
 800d94e:	aa03      	add	r2, sp, #12
 800d950:	4621      	mov	r1, r4
 800d952:	4640      	mov	r0, r8
 800d954:	f7ff fee2 	bl	800d71c <_printf_common>
 800d958:	3001      	adds	r0, #1
 800d95a:	d14c      	bne.n	800d9f6 <_printf_i+0x1fe>
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	b004      	add	sp, #16
 800d962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d966:	4835      	ldr	r0, [pc, #212]	; (800da3c <_printf_i+0x244>)
 800d968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	680e      	ldr	r6, [r1, #0]
 800d970:	061f      	lsls	r7, r3, #24
 800d972:	f856 5b04 	ldr.w	r5, [r6], #4
 800d976:	600e      	str	r6, [r1, #0]
 800d978:	d514      	bpl.n	800d9a4 <_printf_i+0x1ac>
 800d97a:	07d9      	lsls	r1, r3, #31
 800d97c:	bf44      	itt	mi
 800d97e:	f043 0320 	orrmi.w	r3, r3, #32
 800d982:	6023      	strmi	r3, [r4, #0]
 800d984:	b91d      	cbnz	r5, 800d98e <_printf_i+0x196>
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	f023 0320 	bic.w	r3, r3, #32
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	2310      	movs	r3, #16
 800d990:	e7b0      	b.n	800d8f4 <_printf_i+0xfc>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	f043 0320 	orr.w	r3, r3, #32
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	2378      	movs	r3, #120	; 0x78
 800d99c:	4828      	ldr	r0, [pc, #160]	; (800da40 <_printf_i+0x248>)
 800d99e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9a2:	e7e3      	b.n	800d96c <_printf_i+0x174>
 800d9a4:	065e      	lsls	r6, r3, #25
 800d9a6:	bf48      	it	mi
 800d9a8:	b2ad      	uxthmi	r5, r5
 800d9aa:	e7e6      	b.n	800d97a <_printf_i+0x182>
 800d9ac:	4616      	mov	r6, r2
 800d9ae:	e7bb      	b.n	800d928 <_printf_i+0x130>
 800d9b0:	680b      	ldr	r3, [r1, #0]
 800d9b2:	6826      	ldr	r6, [r4, #0]
 800d9b4:	6960      	ldr	r0, [r4, #20]
 800d9b6:	1d1d      	adds	r5, r3, #4
 800d9b8:	600d      	str	r5, [r1, #0]
 800d9ba:	0635      	lsls	r5, r6, #24
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	d501      	bpl.n	800d9c4 <_printf_i+0x1cc>
 800d9c0:	6018      	str	r0, [r3, #0]
 800d9c2:	e002      	b.n	800d9ca <_printf_i+0x1d2>
 800d9c4:	0671      	lsls	r1, r6, #25
 800d9c6:	d5fb      	bpl.n	800d9c0 <_printf_i+0x1c8>
 800d9c8:	8018      	strh	r0, [r3, #0]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	6123      	str	r3, [r4, #16]
 800d9ce:	4616      	mov	r6, r2
 800d9d0:	e7ba      	b.n	800d948 <_printf_i+0x150>
 800d9d2:	680b      	ldr	r3, [r1, #0]
 800d9d4:	1d1a      	adds	r2, r3, #4
 800d9d6:	600a      	str	r2, [r1, #0]
 800d9d8:	681e      	ldr	r6, [r3, #0]
 800d9da:	6862      	ldr	r2, [r4, #4]
 800d9dc:	2100      	movs	r1, #0
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7f2 fc0e 	bl	8000200 <memchr>
 800d9e4:	b108      	cbz	r0, 800d9ea <_printf_i+0x1f2>
 800d9e6:	1b80      	subs	r0, r0, r6
 800d9e8:	6060      	str	r0, [r4, #4]
 800d9ea:	6863      	ldr	r3, [r4, #4]
 800d9ec:	6123      	str	r3, [r4, #16]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9f4:	e7a8      	b.n	800d948 <_printf_i+0x150>
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	4632      	mov	r2, r6
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	47d0      	blx	sl
 800da00:	3001      	adds	r0, #1
 800da02:	d0ab      	beq.n	800d95c <_printf_i+0x164>
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	079b      	lsls	r3, r3, #30
 800da08:	d413      	bmi.n	800da32 <_printf_i+0x23a>
 800da0a:	68e0      	ldr	r0, [r4, #12]
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	4298      	cmp	r0, r3
 800da10:	bfb8      	it	lt
 800da12:	4618      	movlt	r0, r3
 800da14:	e7a4      	b.n	800d960 <_printf_i+0x168>
 800da16:	2301      	movs	r3, #1
 800da18:	4632      	mov	r2, r6
 800da1a:	4649      	mov	r1, r9
 800da1c:	4640      	mov	r0, r8
 800da1e:	47d0      	blx	sl
 800da20:	3001      	adds	r0, #1
 800da22:	d09b      	beq.n	800d95c <_printf_i+0x164>
 800da24:	3501      	adds	r5, #1
 800da26:	68e3      	ldr	r3, [r4, #12]
 800da28:	9903      	ldr	r1, [sp, #12]
 800da2a:	1a5b      	subs	r3, r3, r1
 800da2c:	42ab      	cmp	r3, r5
 800da2e:	dcf2      	bgt.n	800da16 <_printf_i+0x21e>
 800da30:	e7eb      	b.n	800da0a <_printf_i+0x212>
 800da32:	2500      	movs	r5, #0
 800da34:	f104 0619 	add.w	r6, r4, #25
 800da38:	e7f5      	b.n	800da26 <_printf_i+0x22e>
 800da3a:	bf00      	nop
 800da3c:	08011fca 	.word	0x08011fca
 800da40:	08011fdb 	.word	0x08011fdb

0800da44 <_scanf_float>:
 800da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da48:	b087      	sub	sp, #28
 800da4a:	4617      	mov	r7, r2
 800da4c:	9303      	str	r3, [sp, #12]
 800da4e:	688b      	ldr	r3, [r1, #8]
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da56:	bf83      	ittte	hi
 800da58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da5c:	195b      	addhi	r3, r3, r5
 800da5e:	9302      	strhi	r3, [sp, #8]
 800da60:	2300      	movls	r3, #0
 800da62:	bf86      	itte	hi
 800da64:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da68:	608b      	strhi	r3, [r1, #8]
 800da6a:	9302      	strls	r3, [sp, #8]
 800da6c:	680b      	ldr	r3, [r1, #0]
 800da6e:	468b      	mov	fp, r1
 800da70:	2500      	movs	r5, #0
 800da72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800da76:	f84b 3b1c 	str.w	r3, [fp], #28
 800da7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da7e:	4680      	mov	r8, r0
 800da80:	460c      	mov	r4, r1
 800da82:	465e      	mov	r6, fp
 800da84:	46aa      	mov	sl, r5
 800da86:	46a9      	mov	r9, r5
 800da88:	9501      	str	r5, [sp, #4]
 800da8a:	68a2      	ldr	r2, [r4, #8]
 800da8c:	b152      	cbz	r2, 800daa4 <_scanf_float+0x60>
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b4e      	cmp	r3, #78	; 0x4e
 800da94:	d864      	bhi.n	800db60 <_scanf_float+0x11c>
 800da96:	2b40      	cmp	r3, #64	; 0x40
 800da98:	d83c      	bhi.n	800db14 <_scanf_float+0xd0>
 800da9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800da9e:	b2c8      	uxtb	r0, r1
 800daa0:	280e      	cmp	r0, #14
 800daa2:	d93a      	bls.n	800db1a <_scanf_float+0xd6>
 800daa4:	f1b9 0f00 	cmp.w	r9, #0
 800daa8:	d003      	beq.n	800dab2 <_scanf_float+0x6e>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dab6:	f1ba 0f01 	cmp.w	sl, #1
 800daba:	f200 8113 	bhi.w	800dce4 <_scanf_float+0x2a0>
 800dabe:	455e      	cmp	r6, fp
 800dac0:	f200 8105 	bhi.w	800dcce <_scanf_float+0x28a>
 800dac4:	2501      	movs	r5, #1
 800dac6:	4628      	mov	r0, r5
 800dac8:	b007      	add	sp, #28
 800daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dad2:	2a0d      	cmp	r2, #13
 800dad4:	d8e6      	bhi.n	800daa4 <_scanf_float+0x60>
 800dad6:	a101      	add	r1, pc, #4	; (adr r1, 800dadc <_scanf_float+0x98>)
 800dad8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dadc:	0800dc1b 	.word	0x0800dc1b
 800dae0:	0800daa5 	.word	0x0800daa5
 800dae4:	0800daa5 	.word	0x0800daa5
 800dae8:	0800daa5 	.word	0x0800daa5
 800daec:	0800dc7b 	.word	0x0800dc7b
 800daf0:	0800dc53 	.word	0x0800dc53
 800daf4:	0800daa5 	.word	0x0800daa5
 800daf8:	0800daa5 	.word	0x0800daa5
 800dafc:	0800dc29 	.word	0x0800dc29
 800db00:	0800daa5 	.word	0x0800daa5
 800db04:	0800daa5 	.word	0x0800daa5
 800db08:	0800daa5 	.word	0x0800daa5
 800db0c:	0800daa5 	.word	0x0800daa5
 800db10:	0800dbe1 	.word	0x0800dbe1
 800db14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800db18:	e7db      	b.n	800dad2 <_scanf_float+0x8e>
 800db1a:	290e      	cmp	r1, #14
 800db1c:	d8c2      	bhi.n	800daa4 <_scanf_float+0x60>
 800db1e:	a001      	add	r0, pc, #4	; (adr r0, 800db24 <_scanf_float+0xe0>)
 800db20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800db24:	0800dbd3 	.word	0x0800dbd3
 800db28:	0800daa5 	.word	0x0800daa5
 800db2c:	0800dbd3 	.word	0x0800dbd3
 800db30:	0800dc67 	.word	0x0800dc67
 800db34:	0800daa5 	.word	0x0800daa5
 800db38:	0800db81 	.word	0x0800db81
 800db3c:	0800dbbd 	.word	0x0800dbbd
 800db40:	0800dbbd 	.word	0x0800dbbd
 800db44:	0800dbbd 	.word	0x0800dbbd
 800db48:	0800dbbd 	.word	0x0800dbbd
 800db4c:	0800dbbd 	.word	0x0800dbbd
 800db50:	0800dbbd 	.word	0x0800dbbd
 800db54:	0800dbbd 	.word	0x0800dbbd
 800db58:	0800dbbd 	.word	0x0800dbbd
 800db5c:	0800dbbd 	.word	0x0800dbbd
 800db60:	2b6e      	cmp	r3, #110	; 0x6e
 800db62:	d809      	bhi.n	800db78 <_scanf_float+0x134>
 800db64:	2b60      	cmp	r3, #96	; 0x60
 800db66:	d8b2      	bhi.n	800dace <_scanf_float+0x8a>
 800db68:	2b54      	cmp	r3, #84	; 0x54
 800db6a:	d077      	beq.n	800dc5c <_scanf_float+0x218>
 800db6c:	2b59      	cmp	r3, #89	; 0x59
 800db6e:	d199      	bne.n	800daa4 <_scanf_float+0x60>
 800db70:	2d07      	cmp	r5, #7
 800db72:	d197      	bne.n	800daa4 <_scanf_float+0x60>
 800db74:	2508      	movs	r5, #8
 800db76:	e029      	b.n	800dbcc <_scanf_float+0x188>
 800db78:	2b74      	cmp	r3, #116	; 0x74
 800db7a:	d06f      	beq.n	800dc5c <_scanf_float+0x218>
 800db7c:	2b79      	cmp	r3, #121	; 0x79
 800db7e:	e7f6      	b.n	800db6e <_scanf_float+0x12a>
 800db80:	6821      	ldr	r1, [r4, #0]
 800db82:	05c8      	lsls	r0, r1, #23
 800db84:	d51a      	bpl.n	800dbbc <_scanf_float+0x178>
 800db86:	9b02      	ldr	r3, [sp, #8]
 800db88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800db8c:	6021      	str	r1, [r4, #0]
 800db8e:	f109 0901 	add.w	r9, r9, #1
 800db92:	b11b      	cbz	r3, 800db9c <_scanf_float+0x158>
 800db94:	3b01      	subs	r3, #1
 800db96:	3201      	adds	r2, #1
 800db98:	9302      	str	r3, [sp, #8]
 800db9a:	60a2      	str	r2, [r4, #8]
 800db9c:	68a3      	ldr	r3, [r4, #8]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	60a3      	str	r3, [r4, #8]
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	3301      	adds	r3, #1
 800dba6:	6123      	str	r3, [r4, #16]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	607b      	str	r3, [r7, #4]
 800dbb0:	f340 8084 	ble.w	800dcbc <_scanf_float+0x278>
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	603b      	str	r3, [r7, #0]
 800dbba:	e766      	b.n	800da8a <_scanf_float+0x46>
 800dbbc:	eb1a 0f05 	cmn.w	sl, r5
 800dbc0:	f47f af70 	bne.w	800daa4 <_scanf_float+0x60>
 800dbc4:	6822      	ldr	r2, [r4, #0]
 800dbc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dbca:	6022      	str	r2, [r4, #0]
 800dbcc:	f806 3b01 	strb.w	r3, [r6], #1
 800dbd0:	e7e4      	b.n	800db9c <_scanf_float+0x158>
 800dbd2:	6822      	ldr	r2, [r4, #0]
 800dbd4:	0610      	lsls	r0, r2, #24
 800dbd6:	f57f af65 	bpl.w	800daa4 <_scanf_float+0x60>
 800dbda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbde:	e7f4      	b.n	800dbca <_scanf_float+0x186>
 800dbe0:	f1ba 0f00 	cmp.w	sl, #0
 800dbe4:	d10e      	bne.n	800dc04 <_scanf_float+0x1c0>
 800dbe6:	f1b9 0f00 	cmp.w	r9, #0
 800dbea:	d10e      	bne.n	800dc0a <_scanf_float+0x1c6>
 800dbec:	6822      	ldr	r2, [r4, #0]
 800dbee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dbf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dbf6:	d108      	bne.n	800dc0a <_scanf_float+0x1c6>
 800dbf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dbfc:	6022      	str	r2, [r4, #0]
 800dbfe:	f04f 0a01 	mov.w	sl, #1
 800dc02:	e7e3      	b.n	800dbcc <_scanf_float+0x188>
 800dc04:	f1ba 0f02 	cmp.w	sl, #2
 800dc08:	d055      	beq.n	800dcb6 <_scanf_float+0x272>
 800dc0a:	2d01      	cmp	r5, #1
 800dc0c:	d002      	beq.n	800dc14 <_scanf_float+0x1d0>
 800dc0e:	2d04      	cmp	r5, #4
 800dc10:	f47f af48 	bne.w	800daa4 <_scanf_float+0x60>
 800dc14:	3501      	adds	r5, #1
 800dc16:	b2ed      	uxtb	r5, r5
 800dc18:	e7d8      	b.n	800dbcc <_scanf_float+0x188>
 800dc1a:	f1ba 0f01 	cmp.w	sl, #1
 800dc1e:	f47f af41 	bne.w	800daa4 <_scanf_float+0x60>
 800dc22:	f04f 0a02 	mov.w	sl, #2
 800dc26:	e7d1      	b.n	800dbcc <_scanf_float+0x188>
 800dc28:	b97d      	cbnz	r5, 800dc4a <_scanf_float+0x206>
 800dc2a:	f1b9 0f00 	cmp.w	r9, #0
 800dc2e:	f47f af3c 	bne.w	800daaa <_scanf_float+0x66>
 800dc32:	6822      	ldr	r2, [r4, #0]
 800dc34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dc38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc3c:	f47f af39 	bne.w	800dab2 <_scanf_float+0x6e>
 800dc40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc44:	6022      	str	r2, [r4, #0]
 800dc46:	2501      	movs	r5, #1
 800dc48:	e7c0      	b.n	800dbcc <_scanf_float+0x188>
 800dc4a:	2d03      	cmp	r5, #3
 800dc4c:	d0e2      	beq.n	800dc14 <_scanf_float+0x1d0>
 800dc4e:	2d05      	cmp	r5, #5
 800dc50:	e7de      	b.n	800dc10 <_scanf_float+0x1cc>
 800dc52:	2d02      	cmp	r5, #2
 800dc54:	f47f af26 	bne.w	800daa4 <_scanf_float+0x60>
 800dc58:	2503      	movs	r5, #3
 800dc5a:	e7b7      	b.n	800dbcc <_scanf_float+0x188>
 800dc5c:	2d06      	cmp	r5, #6
 800dc5e:	f47f af21 	bne.w	800daa4 <_scanf_float+0x60>
 800dc62:	2507      	movs	r5, #7
 800dc64:	e7b2      	b.n	800dbcc <_scanf_float+0x188>
 800dc66:	6822      	ldr	r2, [r4, #0]
 800dc68:	0591      	lsls	r1, r2, #22
 800dc6a:	f57f af1b 	bpl.w	800daa4 <_scanf_float+0x60>
 800dc6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dc72:	6022      	str	r2, [r4, #0]
 800dc74:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc78:	e7a8      	b.n	800dbcc <_scanf_float+0x188>
 800dc7a:	6822      	ldr	r2, [r4, #0]
 800dc7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dc80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dc84:	d006      	beq.n	800dc94 <_scanf_float+0x250>
 800dc86:	0550      	lsls	r0, r2, #21
 800dc88:	f57f af0c 	bpl.w	800daa4 <_scanf_float+0x60>
 800dc8c:	f1b9 0f00 	cmp.w	r9, #0
 800dc90:	f43f af0f 	beq.w	800dab2 <_scanf_float+0x6e>
 800dc94:	0591      	lsls	r1, r2, #22
 800dc96:	bf58      	it	pl
 800dc98:	9901      	ldrpl	r1, [sp, #4]
 800dc9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc9e:	bf58      	it	pl
 800dca0:	eba9 0101 	subpl.w	r1, r9, r1
 800dca4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dca8:	bf58      	it	pl
 800dcaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dcae:	6022      	str	r2, [r4, #0]
 800dcb0:	f04f 0900 	mov.w	r9, #0
 800dcb4:	e78a      	b.n	800dbcc <_scanf_float+0x188>
 800dcb6:	f04f 0a03 	mov.w	sl, #3
 800dcba:	e787      	b.n	800dbcc <_scanf_float+0x188>
 800dcbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dcc0:	4639      	mov	r1, r7
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4798      	blx	r3
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	f43f aedf 	beq.w	800da8a <_scanf_float+0x46>
 800dccc:	e6ea      	b.n	800daa4 <_scanf_float+0x60>
 800dcce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dcd6:	463a      	mov	r2, r7
 800dcd8:	4640      	mov	r0, r8
 800dcda:	4798      	blx	r3
 800dcdc:	6923      	ldr	r3, [r4, #16]
 800dcde:	3b01      	subs	r3, #1
 800dce0:	6123      	str	r3, [r4, #16]
 800dce2:	e6ec      	b.n	800dabe <_scanf_float+0x7a>
 800dce4:	1e6b      	subs	r3, r5, #1
 800dce6:	2b06      	cmp	r3, #6
 800dce8:	d825      	bhi.n	800dd36 <_scanf_float+0x2f2>
 800dcea:	2d02      	cmp	r5, #2
 800dcec:	d836      	bhi.n	800dd5c <_scanf_float+0x318>
 800dcee:	455e      	cmp	r6, fp
 800dcf0:	f67f aee8 	bls.w	800dac4 <_scanf_float+0x80>
 800dcf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcf8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dcfc:	463a      	mov	r2, r7
 800dcfe:	4640      	mov	r0, r8
 800dd00:	4798      	blx	r3
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	6123      	str	r3, [r4, #16]
 800dd08:	e7f1      	b.n	800dcee <_scanf_float+0x2aa>
 800dd0a:	9802      	ldr	r0, [sp, #8]
 800dd0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dd14:	9002      	str	r0, [sp, #8]
 800dd16:	463a      	mov	r2, r7
 800dd18:	4640      	mov	r0, r8
 800dd1a:	4798      	blx	r3
 800dd1c:	6923      	ldr	r3, [r4, #16]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	6123      	str	r3, [r4, #16]
 800dd22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd26:	fa5f fa8a 	uxtb.w	sl, sl
 800dd2a:	f1ba 0f02 	cmp.w	sl, #2
 800dd2e:	d1ec      	bne.n	800dd0a <_scanf_float+0x2c6>
 800dd30:	3d03      	subs	r5, #3
 800dd32:	b2ed      	uxtb	r5, r5
 800dd34:	1b76      	subs	r6, r6, r5
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	05da      	lsls	r2, r3, #23
 800dd3a:	d52f      	bpl.n	800dd9c <_scanf_float+0x358>
 800dd3c:	055b      	lsls	r3, r3, #21
 800dd3e:	d510      	bpl.n	800dd62 <_scanf_float+0x31e>
 800dd40:	455e      	cmp	r6, fp
 800dd42:	f67f aebf 	bls.w	800dac4 <_scanf_float+0x80>
 800dd46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd4e:	463a      	mov	r2, r7
 800dd50:	4640      	mov	r0, r8
 800dd52:	4798      	blx	r3
 800dd54:	6923      	ldr	r3, [r4, #16]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	6123      	str	r3, [r4, #16]
 800dd5a:	e7f1      	b.n	800dd40 <_scanf_float+0x2fc>
 800dd5c:	46aa      	mov	sl, r5
 800dd5e:	9602      	str	r6, [sp, #8]
 800dd60:	e7df      	b.n	800dd22 <_scanf_float+0x2de>
 800dd62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd66:	6923      	ldr	r3, [r4, #16]
 800dd68:	2965      	cmp	r1, #101	; 0x65
 800dd6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd72:	6123      	str	r3, [r4, #16]
 800dd74:	d00c      	beq.n	800dd90 <_scanf_float+0x34c>
 800dd76:	2945      	cmp	r1, #69	; 0x45
 800dd78:	d00a      	beq.n	800dd90 <_scanf_float+0x34c>
 800dd7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd7e:	463a      	mov	r2, r7
 800dd80:	4640      	mov	r0, r8
 800dd82:	4798      	blx	r3
 800dd84:	6923      	ldr	r3, [r4, #16]
 800dd86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	1eb5      	subs	r5, r6, #2
 800dd8e:	6123      	str	r3, [r4, #16]
 800dd90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd94:	463a      	mov	r2, r7
 800dd96:	4640      	mov	r0, r8
 800dd98:	4798      	blx	r3
 800dd9a:	462e      	mov	r6, r5
 800dd9c:	6825      	ldr	r5, [r4, #0]
 800dd9e:	f015 0510 	ands.w	r5, r5, #16
 800dda2:	d158      	bne.n	800de56 <_scanf_float+0x412>
 800dda4:	7035      	strb	r5, [r6, #0]
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ddac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddb0:	d11c      	bne.n	800ddec <_scanf_float+0x3a8>
 800ddb2:	9b01      	ldr	r3, [sp, #4]
 800ddb4:	454b      	cmp	r3, r9
 800ddb6:	eba3 0209 	sub.w	r2, r3, r9
 800ddba:	d124      	bne.n	800de06 <_scanf_float+0x3c2>
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	4659      	mov	r1, fp
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	f000 fec3 	bl	800eb4c <_strtod_r>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	6821      	ldr	r1, [r4, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f011 0f02 	tst.w	r1, #2
 800ddd0:	ec57 6b10 	vmov	r6, r7, d0
 800ddd4:	f103 0204 	add.w	r2, r3, #4
 800ddd8:	d020      	beq.n	800de1c <_scanf_float+0x3d8>
 800ddda:	9903      	ldr	r1, [sp, #12]
 800dddc:	600a      	str	r2, [r1, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	e9c3 6700 	strd	r6, r7, [r3]
 800dde4:	68e3      	ldr	r3, [r4, #12]
 800dde6:	3301      	adds	r3, #1
 800dde8:	60e3      	str	r3, [r4, #12]
 800ddea:	e66c      	b.n	800dac6 <_scanf_float+0x82>
 800ddec:	9b04      	ldr	r3, [sp, #16]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0e4      	beq.n	800ddbc <_scanf_float+0x378>
 800ddf2:	9905      	ldr	r1, [sp, #20]
 800ddf4:	230a      	movs	r3, #10
 800ddf6:	462a      	mov	r2, r5
 800ddf8:	3101      	adds	r1, #1
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	f000 ff30 	bl	800ec60 <_strtol_r>
 800de00:	9b04      	ldr	r3, [sp, #16]
 800de02:	9e05      	ldr	r6, [sp, #20]
 800de04:	1ac2      	subs	r2, r0, r3
 800de06:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800de0a:	429e      	cmp	r6, r3
 800de0c:	bf28      	it	cs
 800de0e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800de12:	4912      	ldr	r1, [pc, #72]	; (800de5c <_scanf_float+0x418>)
 800de14:	4630      	mov	r0, r6
 800de16:	f000 f853 	bl	800dec0 <siprintf>
 800de1a:	e7cf      	b.n	800ddbc <_scanf_float+0x378>
 800de1c:	f011 0f04 	tst.w	r1, #4
 800de20:	9903      	ldr	r1, [sp, #12]
 800de22:	600a      	str	r2, [r1, #0]
 800de24:	d1db      	bne.n	800ddde <_scanf_float+0x39a>
 800de26:	f8d3 8000 	ldr.w	r8, [r3]
 800de2a:	ee10 2a10 	vmov	r2, s0
 800de2e:	ee10 0a10 	vmov	r0, s0
 800de32:	463b      	mov	r3, r7
 800de34:	4639      	mov	r1, r7
 800de36:	f7f2 fe89 	bl	8000b4c <__aeabi_dcmpun>
 800de3a:	b128      	cbz	r0, 800de48 <_scanf_float+0x404>
 800de3c:	4808      	ldr	r0, [pc, #32]	; (800de60 <_scanf_float+0x41c>)
 800de3e:	f000 f839 	bl	800deb4 <nanf>
 800de42:	ed88 0a00 	vstr	s0, [r8]
 800de46:	e7cd      	b.n	800dde4 <_scanf_float+0x3a0>
 800de48:	4630      	mov	r0, r6
 800de4a:	4639      	mov	r1, r7
 800de4c:	f7f2 fedc 	bl	8000c08 <__aeabi_d2f>
 800de50:	f8c8 0000 	str.w	r0, [r8]
 800de54:	e7c6      	b.n	800dde4 <_scanf_float+0x3a0>
 800de56:	2500      	movs	r5, #0
 800de58:	e635      	b.n	800dac6 <_scanf_float+0x82>
 800de5a:	bf00      	nop
 800de5c:	08011fec 	.word	0x08011fec
 800de60:	08012468 	.word	0x08012468

0800de64 <iprintf>:
 800de64:	b40f      	push	{r0, r1, r2, r3}
 800de66:	4b0a      	ldr	r3, [pc, #40]	; (800de90 <iprintf+0x2c>)
 800de68:	b513      	push	{r0, r1, r4, lr}
 800de6a:	681c      	ldr	r4, [r3, #0]
 800de6c:	b124      	cbz	r4, 800de78 <iprintf+0x14>
 800de6e:	69a3      	ldr	r3, [r4, #24]
 800de70:	b913      	cbnz	r3, 800de78 <iprintf+0x14>
 800de72:	4620      	mov	r0, r4
 800de74:	f001 fdc8 	bl	800fa08 <__sinit>
 800de78:	ab05      	add	r3, sp, #20
 800de7a:	9a04      	ldr	r2, [sp, #16]
 800de7c:	68a1      	ldr	r1, [r4, #8]
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	4620      	mov	r0, r4
 800de82:	f003 f851 	bl	8010f28 <_vfiprintf_r>
 800de86:	b002      	add	sp, #8
 800de88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de8c:	b004      	add	sp, #16
 800de8e:	4770      	bx	lr
 800de90:	20000190 	.word	0x20000190

0800de94 <_sbrk_r>:
 800de94:	b538      	push	{r3, r4, r5, lr}
 800de96:	4d06      	ldr	r5, [pc, #24]	; (800deb0 <_sbrk_r+0x1c>)
 800de98:	2300      	movs	r3, #0
 800de9a:	4604      	mov	r4, r0
 800de9c:	4608      	mov	r0, r1
 800de9e:	602b      	str	r3, [r5, #0]
 800dea0:	f7f5 f93c 	bl	800311c <_sbrk>
 800dea4:	1c43      	adds	r3, r0, #1
 800dea6:	d102      	bne.n	800deae <_sbrk_r+0x1a>
 800dea8:	682b      	ldr	r3, [r5, #0]
 800deaa:	b103      	cbz	r3, 800deae <_sbrk_r+0x1a>
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	bd38      	pop	{r3, r4, r5, pc}
 800deb0:	2000201c 	.word	0x2000201c

0800deb4 <nanf>:
 800deb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800debc <nanf+0x8>
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	7fc00000 	.word	0x7fc00000

0800dec0 <siprintf>:
 800dec0:	b40e      	push	{r1, r2, r3}
 800dec2:	b500      	push	{lr}
 800dec4:	b09c      	sub	sp, #112	; 0x70
 800dec6:	ab1d      	add	r3, sp, #116	; 0x74
 800dec8:	9002      	str	r0, [sp, #8]
 800deca:	9006      	str	r0, [sp, #24]
 800decc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ded0:	4809      	ldr	r0, [pc, #36]	; (800def8 <siprintf+0x38>)
 800ded2:	9107      	str	r1, [sp, #28]
 800ded4:	9104      	str	r1, [sp, #16]
 800ded6:	4909      	ldr	r1, [pc, #36]	; (800defc <siprintf+0x3c>)
 800ded8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dedc:	9105      	str	r1, [sp, #20]
 800dede:	6800      	ldr	r0, [r0, #0]
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	a902      	add	r1, sp, #8
 800dee4:	f002 fef6 	bl	8010cd4 <_svfiprintf_r>
 800dee8:	9b02      	ldr	r3, [sp, #8]
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	b01c      	add	sp, #112	; 0x70
 800def0:	f85d eb04 	ldr.w	lr, [sp], #4
 800def4:	b003      	add	sp, #12
 800def6:	4770      	bx	lr
 800def8:	20000190 	.word	0x20000190
 800defc:	ffff0208 	.word	0xffff0208

0800df00 <sulp>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	4604      	mov	r4, r0
 800df04:	460d      	mov	r5, r1
 800df06:	ec45 4b10 	vmov	d0, r4, r5
 800df0a:	4616      	mov	r6, r2
 800df0c:	f002 fd28 	bl	8010960 <__ulp>
 800df10:	ec51 0b10 	vmov	r0, r1, d0
 800df14:	b17e      	cbz	r6, 800df36 <sulp+0x36>
 800df16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800df1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800df1e:	2b00      	cmp	r3, #0
 800df20:	dd09      	ble.n	800df36 <sulp+0x36>
 800df22:	051b      	lsls	r3, r3, #20
 800df24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800df28:	2400      	movs	r4, #0
 800df2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800df2e:	4622      	mov	r2, r4
 800df30:	462b      	mov	r3, r5
 800df32:	f7f2 fb71 	bl	8000618 <__aeabi_dmul>
 800df36:	bd70      	pop	{r4, r5, r6, pc}

0800df38 <_strtod_l>:
 800df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3c:	b0a3      	sub	sp, #140	; 0x8c
 800df3e:	461f      	mov	r7, r3
 800df40:	2300      	movs	r3, #0
 800df42:	931e      	str	r3, [sp, #120]	; 0x78
 800df44:	4ba4      	ldr	r3, [pc, #656]	; (800e1d8 <_strtod_l+0x2a0>)
 800df46:	9219      	str	r2, [sp, #100]	; 0x64
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	9307      	str	r3, [sp, #28]
 800df4c:	4604      	mov	r4, r0
 800df4e:	4618      	mov	r0, r3
 800df50:	4688      	mov	r8, r1
 800df52:	f7f2 f94d 	bl	80001f0 <strlen>
 800df56:	f04f 0a00 	mov.w	sl, #0
 800df5a:	4605      	mov	r5, r0
 800df5c:	f04f 0b00 	mov.w	fp, #0
 800df60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800df64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	2a2b      	cmp	r2, #43	; 0x2b
 800df6a:	d04c      	beq.n	800e006 <_strtod_l+0xce>
 800df6c:	d839      	bhi.n	800dfe2 <_strtod_l+0xaa>
 800df6e:	2a0d      	cmp	r2, #13
 800df70:	d832      	bhi.n	800dfd8 <_strtod_l+0xa0>
 800df72:	2a08      	cmp	r2, #8
 800df74:	d832      	bhi.n	800dfdc <_strtod_l+0xa4>
 800df76:	2a00      	cmp	r2, #0
 800df78:	d03c      	beq.n	800dff4 <_strtod_l+0xbc>
 800df7a:	2300      	movs	r3, #0
 800df7c:	930e      	str	r3, [sp, #56]	; 0x38
 800df7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800df80:	7833      	ldrb	r3, [r6, #0]
 800df82:	2b30      	cmp	r3, #48	; 0x30
 800df84:	f040 80b4 	bne.w	800e0f0 <_strtod_l+0x1b8>
 800df88:	7873      	ldrb	r3, [r6, #1]
 800df8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df8e:	2b58      	cmp	r3, #88	; 0x58
 800df90:	d16c      	bne.n	800e06c <_strtod_l+0x134>
 800df92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	ab1e      	add	r3, sp, #120	; 0x78
 800df98:	9702      	str	r7, [sp, #8]
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	4a8f      	ldr	r2, [pc, #572]	; (800e1dc <_strtod_l+0x2a4>)
 800df9e:	ab1f      	add	r3, sp, #124	; 0x7c
 800dfa0:	a91d      	add	r1, sp, #116	; 0x74
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f001 fe34 	bl	800fc10 <__gethex>
 800dfa8:	f010 0707 	ands.w	r7, r0, #7
 800dfac:	4605      	mov	r5, r0
 800dfae:	d005      	beq.n	800dfbc <_strtod_l+0x84>
 800dfb0:	2f06      	cmp	r7, #6
 800dfb2:	d12a      	bne.n	800e00a <_strtod_l+0xd2>
 800dfb4:	3601      	adds	r6, #1
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	961d      	str	r6, [sp, #116]	; 0x74
 800dfba:	930e      	str	r3, [sp, #56]	; 0x38
 800dfbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f040 8596 	bne.w	800eaf0 <_strtod_l+0xbb8>
 800dfc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfc6:	b1db      	cbz	r3, 800e000 <_strtod_l+0xc8>
 800dfc8:	4652      	mov	r2, sl
 800dfca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dfce:	ec43 2b10 	vmov	d0, r2, r3
 800dfd2:	b023      	add	sp, #140	; 0x8c
 800dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd8:	2a20      	cmp	r2, #32
 800dfda:	d1ce      	bne.n	800df7a <_strtod_l+0x42>
 800dfdc:	3301      	adds	r3, #1
 800dfde:	931d      	str	r3, [sp, #116]	; 0x74
 800dfe0:	e7c0      	b.n	800df64 <_strtod_l+0x2c>
 800dfe2:	2a2d      	cmp	r2, #45	; 0x2d
 800dfe4:	d1c9      	bne.n	800df7a <_strtod_l+0x42>
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	920e      	str	r2, [sp, #56]	; 0x38
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	921d      	str	r2, [sp, #116]	; 0x74
 800dfee:	785b      	ldrb	r3, [r3, #1]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1c4      	bne.n	800df7e <_strtod_l+0x46>
 800dff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dff6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f040 8576 	bne.w	800eaec <_strtod_l+0xbb4>
 800e000:	4652      	mov	r2, sl
 800e002:	465b      	mov	r3, fp
 800e004:	e7e3      	b.n	800dfce <_strtod_l+0x96>
 800e006:	2200      	movs	r2, #0
 800e008:	e7ee      	b.n	800dfe8 <_strtod_l+0xb0>
 800e00a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e00c:	b13a      	cbz	r2, 800e01e <_strtod_l+0xe6>
 800e00e:	2135      	movs	r1, #53	; 0x35
 800e010:	a820      	add	r0, sp, #128	; 0x80
 800e012:	f002 fdb0 	bl	8010b76 <__copybits>
 800e016:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e018:	4620      	mov	r0, r4
 800e01a:	f002 f975 	bl	8010308 <_Bfree>
 800e01e:	3f01      	subs	r7, #1
 800e020:	2f05      	cmp	r7, #5
 800e022:	d807      	bhi.n	800e034 <_strtod_l+0xfc>
 800e024:	e8df f007 	tbb	[pc, r7]
 800e028:	1d180b0e 	.word	0x1d180b0e
 800e02c:	030e      	.short	0x030e
 800e02e:	f04f 0b00 	mov.w	fp, #0
 800e032:	46da      	mov	sl, fp
 800e034:	0728      	lsls	r0, r5, #28
 800e036:	d5c1      	bpl.n	800dfbc <_strtod_l+0x84>
 800e038:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e03c:	e7be      	b.n	800dfbc <_strtod_l+0x84>
 800e03e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e042:	e7f7      	b.n	800e034 <_strtod_l+0xfc>
 800e044:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e048:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e04a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e04e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e052:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e056:	e7ed      	b.n	800e034 <_strtod_l+0xfc>
 800e058:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e1e0 <_strtod_l+0x2a8>
 800e05c:	f04f 0a00 	mov.w	sl, #0
 800e060:	e7e8      	b.n	800e034 <_strtod_l+0xfc>
 800e062:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e066:	f04f 3aff 	mov.w	sl, #4294967295
 800e06a:	e7e3      	b.n	800e034 <_strtod_l+0xfc>
 800e06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e06e:	1c5a      	adds	r2, r3, #1
 800e070:	921d      	str	r2, [sp, #116]	; 0x74
 800e072:	785b      	ldrb	r3, [r3, #1]
 800e074:	2b30      	cmp	r3, #48	; 0x30
 800e076:	d0f9      	beq.n	800e06c <_strtod_l+0x134>
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d09f      	beq.n	800dfbc <_strtod_l+0x84>
 800e07c:	2301      	movs	r3, #1
 800e07e:	f04f 0900 	mov.w	r9, #0
 800e082:	9304      	str	r3, [sp, #16]
 800e084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e086:	930a      	str	r3, [sp, #40]	; 0x28
 800e088:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e08c:	464f      	mov	r7, r9
 800e08e:	220a      	movs	r2, #10
 800e090:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e092:	7806      	ldrb	r6, [r0, #0]
 800e094:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e098:	b2d9      	uxtb	r1, r3
 800e09a:	2909      	cmp	r1, #9
 800e09c:	d92a      	bls.n	800e0f4 <_strtod_l+0x1bc>
 800e09e:	9907      	ldr	r1, [sp, #28]
 800e0a0:	462a      	mov	r2, r5
 800e0a2:	f003 f8bc 	bl	801121e <strncmp>
 800e0a6:	b398      	cbz	r0, 800e110 <_strtod_l+0x1d8>
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	4633      	mov	r3, r6
 800e0ac:	463d      	mov	r5, r7
 800e0ae:	9007      	str	r0, [sp, #28]
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	2b65      	cmp	r3, #101	; 0x65
 800e0b4:	d001      	beq.n	800e0ba <_strtod_l+0x182>
 800e0b6:	2b45      	cmp	r3, #69	; 0x45
 800e0b8:	d118      	bne.n	800e0ec <_strtod_l+0x1b4>
 800e0ba:	b91d      	cbnz	r5, 800e0c4 <_strtod_l+0x18c>
 800e0bc:	9b04      	ldr	r3, [sp, #16]
 800e0be:	4303      	orrs	r3, r0
 800e0c0:	d098      	beq.n	800dff4 <_strtod_l+0xbc>
 800e0c2:	2500      	movs	r5, #0
 800e0c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e0c8:	f108 0301 	add.w	r3, r8, #1
 800e0cc:	931d      	str	r3, [sp, #116]	; 0x74
 800e0ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e0d2:	2b2b      	cmp	r3, #43	; 0x2b
 800e0d4:	d075      	beq.n	800e1c2 <_strtod_l+0x28a>
 800e0d6:	2b2d      	cmp	r3, #45	; 0x2d
 800e0d8:	d07b      	beq.n	800e1d2 <_strtod_l+0x29a>
 800e0da:	f04f 0c00 	mov.w	ip, #0
 800e0de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e0e2:	2909      	cmp	r1, #9
 800e0e4:	f240 8082 	bls.w	800e1ec <_strtod_l+0x2b4>
 800e0e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e0ec:	2600      	movs	r6, #0
 800e0ee:	e09d      	b.n	800e22c <_strtod_l+0x2f4>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e7c4      	b.n	800e07e <_strtod_l+0x146>
 800e0f4:	2f08      	cmp	r7, #8
 800e0f6:	bfd8      	it	le
 800e0f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e0fa:	f100 0001 	add.w	r0, r0, #1
 800e0fe:	bfda      	itte	le
 800e100:	fb02 3301 	mlale	r3, r2, r1, r3
 800e104:	9309      	strle	r3, [sp, #36]	; 0x24
 800e106:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e10a:	3701      	adds	r7, #1
 800e10c:	901d      	str	r0, [sp, #116]	; 0x74
 800e10e:	e7bf      	b.n	800e090 <_strtod_l+0x158>
 800e110:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e112:	195a      	adds	r2, r3, r5
 800e114:	921d      	str	r2, [sp, #116]	; 0x74
 800e116:	5d5b      	ldrb	r3, [r3, r5]
 800e118:	2f00      	cmp	r7, #0
 800e11a:	d037      	beq.n	800e18c <_strtod_l+0x254>
 800e11c:	9007      	str	r0, [sp, #28]
 800e11e:	463d      	mov	r5, r7
 800e120:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e124:	2a09      	cmp	r2, #9
 800e126:	d912      	bls.n	800e14e <_strtod_l+0x216>
 800e128:	2201      	movs	r2, #1
 800e12a:	e7c2      	b.n	800e0b2 <_strtod_l+0x17a>
 800e12c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e12e:	1c5a      	adds	r2, r3, #1
 800e130:	921d      	str	r2, [sp, #116]	; 0x74
 800e132:	785b      	ldrb	r3, [r3, #1]
 800e134:	3001      	adds	r0, #1
 800e136:	2b30      	cmp	r3, #48	; 0x30
 800e138:	d0f8      	beq.n	800e12c <_strtod_l+0x1f4>
 800e13a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e13e:	2a08      	cmp	r2, #8
 800e140:	f200 84db 	bhi.w	800eafa <_strtod_l+0xbc2>
 800e144:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e146:	9007      	str	r0, [sp, #28]
 800e148:	2000      	movs	r0, #0
 800e14a:	920a      	str	r2, [sp, #40]	; 0x28
 800e14c:	4605      	mov	r5, r0
 800e14e:	3b30      	subs	r3, #48	; 0x30
 800e150:	f100 0201 	add.w	r2, r0, #1
 800e154:	d014      	beq.n	800e180 <_strtod_l+0x248>
 800e156:	9907      	ldr	r1, [sp, #28]
 800e158:	4411      	add	r1, r2
 800e15a:	9107      	str	r1, [sp, #28]
 800e15c:	462a      	mov	r2, r5
 800e15e:	eb00 0e05 	add.w	lr, r0, r5
 800e162:	210a      	movs	r1, #10
 800e164:	4572      	cmp	r2, lr
 800e166:	d113      	bne.n	800e190 <_strtod_l+0x258>
 800e168:	182a      	adds	r2, r5, r0
 800e16a:	2a08      	cmp	r2, #8
 800e16c:	f105 0501 	add.w	r5, r5, #1
 800e170:	4405      	add	r5, r0
 800e172:	dc1c      	bgt.n	800e1ae <_strtod_l+0x276>
 800e174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e176:	220a      	movs	r2, #10
 800e178:	fb02 3301 	mla	r3, r2, r1, r3
 800e17c:	9309      	str	r3, [sp, #36]	; 0x24
 800e17e:	2200      	movs	r2, #0
 800e180:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e182:	1c59      	adds	r1, r3, #1
 800e184:	911d      	str	r1, [sp, #116]	; 0x74
 800e186:	785b      	ldrb	r3, [r3, #1]
 800e188:	4610      	mov	r0, r2
 800e18a:	e7c9      	b.n	800e120 <_strtod_l+0x1e8>
 800e18c:	4638      	mov	r0, r7
 800e18e:	e7d2      	b.n	800e136 <_strtod_l+0x1fe>
 800e190:	2a08      	cmp	r2, #8
 800e192:	dc04      	bgt.n	800e19e <_strtod_l+0x266>
 800e194:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e196:	434e      	muls	r6, r1
 800e198:	9609      	str	r6, [sp, #36]	; 0x24
 800e19a:	3201      	adds	r2, #1
 800e19c:	e7e2      	b.n	800e164 <_strtod_l+0x22c>
 800e19e:	f102 0c01 	add.w	ip, r2, #1
 800e1a2:	f1bc 0f10 	cmp.w	ip, #16
 800e1a6:	bfd8      	it	le
 800e1a8:	fb01 f909 	mulle.w	r9, r1, r9
 800e1ac:	e7f5      	b.n	800e19a <_strtod_l+0x262>
 800e1ae:	2d10      	cmp	r5, #16
 800e1b0:	bfdc      	itt	le
 800e1b2:	220a      	movle	r2, #10
 800e1b4:	fb02 3909 	mlale	r9, r2, r9, r3
 800e1b8:	e7e1      	b.n	800e17e <_strtod_l+0x246>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9307      	str	r3, [sp, #28]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	e77c      	b.n	800e0bc <_strtod_l+0x184>
 800e1c2:	f04f 0c00 	mov.w	ip, #0
 800e1c6:	f108 0302 	add.w	r3, r8, #2
 800e1ca:	931d      	str	r3, [sp, #116]	; 0x74
 800e1cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e1d0:	e785      	b.n	800e0de <_strtod_l+0x1a6>
 800e1d2:	f04f 0c01 	mov.w	ip, #1
 800e1d6:	e7f6      	b.n	800e1c6 <_strtod_l+0x28e>
 800e1d8:	080122ac 	.word	0x080122ac
 800e1dc:	08011ff4 	.word	0x08011ff4
 800e1e0:	7ff00000 	.word	0x7ff00000
 800e1e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1e6:	1c59      	adds	r1, r3, #1
 800e1e8:	911d      	str	r1, [sp, #116]	; 0x74
 800e1ea:	785b      	ldrb	r3, [r3, #1]
 800e1ec:	2b30      	cmp	r3, #48	; 0x30
 800e1ee:	d0f9      	beq.n	800e1e4 <_strtod_l+0x2ac>
 800e1f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e1f4:	2908      	cmp	r1, #8
 800e1f6:	f63f af79 	bhi.w	800e0ec <_strtod_l+0x1b4>
 800e1fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e1fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e200:	9308      	str	r3, [sp, #32]
 800e202:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e204:	1c59      	adds	r1, r3, #1
 800e206:	911d      	str	r1, [sp, #116]	; 0x74
 800e208:	785b      	ldrb	r3, [r3, #1]
 800e20a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e20e:	2e09      	cmp	r6, #9
 800e210:	d937      	bls.n	800e282 <_strtod_l+0x34a>
 800e212:	9e08      	ldr	r6, [sp, #32]
 800e214:	1b89      	subs	r1, r1, r6
 800e216:	2908      	cmp	r1, #8
 800e218:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e21c:	dc02      	bgt.n	800e224 <_strtod_l+0x2ec>
 800e21e:	4576      	cmp	r6, lr
 800e220:	bfa8      	it	ge
 800e222:	4676      	movge	r6, lr
 800e224:	f1bc 0f00 	cmp.w	ip, #0
 800e228:	d000      	beq.n	800e22c <_strtod_l+0x2f4>
 800e22a:	4276      	negs	r6, r6
 800e22c:	2d00      	cmp	r5, #0
 800e22e:	d14f      	bne.n	800e2d0 <_strtod_l+0x398>
 800e230:	9904      	ldr	r1, [sp, #16]
 800e232:	4301      	orrs	r1, r0
 800e234:	f47f aec2 	bne.w	800dfbc <_strtod_l+0x84>
 800e238:	2a00      	cmp	r2, #0
 800e23a:	f47f aedb 	bne.w	800dff4 <_strtod_l+0xbc>
 800e23e:	2b69      	cmp	r3, #105	; 0x69
 800e240:	d027      	beq.n	800e292 <_strtod_l+0x35a>
 800e242:	dc24      	bgt.n	800e28e <_strtod_l+0x356>
 800e244:	2b49      	cmp	r3, #73	; 0x49
 800e246:	d024      	beq.n	800e292 <_strtod_l+0x35a>
 800e248:	2b4e      	cmp	r3, #78	; 0x4e
 800e24a:	f47f aed3 	bne.w	800dff4 <_strtod_l+0xbc>
 800e24e:	499e      	ldr	r1, [pc, #632]	; (800e4c8 <_strtod_l+0x590>)
 800e250:	a81d      	add	r0, sp, #116	; 0x74
 800e252:	f001 ff35 	bl	80100c0 <__match>
 800e256:	2800      	cmp	r0, #0
 800e258:	f43f aecc 	beq.w	800dff4 <_strtod_l+0xbc>
 800e25c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	2b28      	cmp	r3, #40	; 0x28
 800e262:	d12d      	bne.n	800e2c0 <_strtod_l+0x388>
 800e264:	4999      	ldr	r1, [pc, #612]	; (800e4cc <_strtod_l+0x594>)
 800e266:	aa20      	add	r2, sp, #128	; 0x80
 800e268:	a81d      	add	r0, sp, #116	; 0x74
 800e26a:	f001 ff3d 	bl	80100e8 <__hexnan>
 800e26e:	2805      	cmp	r0, #5
 800e270:	d126      	bne.n	800e2c0 <_strtod_l+0x388>
 800e272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e274:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e278:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e27c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e280:	e69c      	b.n	800dfbc <_strtod_l+0x84>
 800e282:	210a      	movs	r1, #10
 800e284:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e288:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e28c:	e7b9      	b.n	800e202 <_strtod_l+0x2ca>
 800e28e:	2b6e      	cmp	r3, #110	; 0x6e
 800e290:	e7db      	b.n	800e24a <_strtod_l+0x312>
 800e292:	498f      	ldr	r1, [pc, #572]	; (800e4d0 <_strtod_l+0x598>)
 800e294:	a81d      	add	r0, sp, #116	; 0x74
 800e296:	f001 ff13 	bl	80100c0 <__match>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	f43f aeaa 	beq.w	800dff4 <_strtod_l+0xbc>
 800e2a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2a2:	498c      	ldr	r1, [pc, #560]	; (800e4d4 <_strtod_l+0x59c>)
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	a81d      	add	r0, sp, #116	; 0x74
 800e2a8:	931d      	str	r3, [sp, #116]	; 0x74
 800e2aa:	f001 ff09 	bl	80100c0 <__match>
 800e2ae:	b910      	cbnz	r0, 800e2b6 <_strtod_l+0x37e>
 800e2b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	931d      	str	r3, [sp, #116]	; 0x74
 800e2b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e4e4 <_strtod_l+0x5ac>
 800e2ba:	f04f 0a00 	mov.w	sl, #0
 800e2be:	e67d      	b.n	800dfbc <_strtod_l+0x84>
 800e2c0:	4885      	ldr	r0, [pc, #532]	; (800e4d8 <_strtod_l+0x5a0>)
 800e2c2:	f002 ff61 	bl	8011188 <nan>
 800e2c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e2ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e2ce:	e675      	b.n	800dfbc <_strtod_l+0x84>
 800e2d0:	9b07      	ldr	r3, [sp, #28]
 800e2d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2d4:	1af3      	subs	r3, r6, r3
 800e2d6:	2f00      	cmp	r7, #0
 800e2d8:	bf08      	it	eq
 800e2da:	462f      	moveq	r7, r5
 800e2dc:	2d10      	cmp	r5, #16
 800e2de:	9308      	str	r3, [sp, #32]
 800e2e0:	46a8      	mov	r8, r5
 800e2e2:	bfa8      	it	ge
 800e2e4:	f04f 0810 	movge.w	r8, #16
 800e2e8:	f7f2 f91c 	bl	8000524 <__aeabi_ui2d>
 800e2ec:	2d09      	cmp	r5, #9
 800e2ee:	4682      	mov	sl, r0
 800e2f0:	468b      	mov	fp, r1
 800e2f2:	dd13      	ble.n	800e31c <_strtod_l+0x3e4>
 800e2f4:	4b79      	ldr	r3, [pc, #484]	; (800e4dc <_strtod_l+0x5a4>)
 800e2f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e2fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e2fe:	f7f2 f98b 	bl	8000618 <__aeabi_dmul>
 800e302:	4682      	mov	sl, r0
 800e304:	4648      	mov	r0, r9
 800e306:	468b      	mov	fp, r1
 800e308:	f7f2 f90c 	bl	8000524 <__aeabi_ui2d>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	4650      	mov	r0, sl
 800e312:	4659      	mov	r1, fp
 800e314:	f7f1 ffca 	bl	80002ac <__adddf3>
 800e318:	4682      	mov	sl, r0
 800e31a:	468b      	mov	fp, r1
 800e31c:	2d0f      	cmp	r5, #15
 800e31e:	dc38      	bgt.n	800e392 <_strtod_l+0x45a>
 800e320:	9b08      	ldr	r3, [sp, #32]
 800e322:	2b00      	cmp	r3, #0
 800e324:	f43f ae4a 	beq.w	800dfbc <_strtod_l+0x84>
 800e328:	dd24      	ble.n	800e374 <_strtod_l+0x43c>
 800e32a:	2b16      	cmp	r3, #22
 800e32c:	dc0b      	bgt.n	800e346 <_strtod_l+0x40e>
 800e32e:	4d6b      	ldr	r5, [pc, #428]	; (800e4dc <_strtod_l+0x5a4>)
 800e330:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e334:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e338:	4652      	mov	r2, sl
 800e33a:	465b      	mov	r3, fp
 800e33c:	f7f2 f96c 	bl	8000618 <__aeabi_dmul>
 800e340:	4682      	mov	sl, r0
 800e342:	468b      	mov	fp, r1
 800e344:	e63a      	b.n	800dfbc <_strtod_l+0x84>
 800e346:	9a08      	ldr	r2, [sp, #32]
 800e348:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e34c:	4293      	cmp	r3, r2
 800e34e:	db20      	blt.n	800e392 <_strtod_l+0x45a>
 800e350:	4c62      	ldr	r4, [pc, #392]	; (800e4dc <_strtod_l+0x5a4>)
 800e352:	f1c5 050f 	rsb	r5, r5, #15
 800e356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e35a:	4652      	mov	r2, sl
 800e35c:	465b      	mov	r3, fp
 800e35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e362:	f7f2 f959 	bl	8000618 <__aeabi_dmul>
 800e366:	9b08      	ldr	r3, [sp, #32]
 800e368:	1b5d      	subs	r5, r3, r5
 800e36a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e36e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e372:	e7e3      	b.n	800e33c <_strtod_l+0x404>
 800e374:	9b08      	ldr	r3, [sp, #32]
 800e376:	3316      	adds	r3, #22
 800e378:	db0b      	blt.n	800e392 <_strtod_l+0x45a>
 800e37a:	9b07      	ldr	r3, [sp, #28]
 800e37c:	4a57      	ldr	r2, [pc, #348]	; (800e4dc <_strtod_l+0x5a4>)
 800e37e:	1b9e      	subs	r6, r3, r6
 800e380:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e384:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e388:	4650      	mov	r0, sl
 800e38a:	4659      	mov	r1, fp
 800e38c:	f7f2 fa6e 	bl	800086c <__aeabi_ddiv>
 800e390:	e7d6      	b.n	800e340 <_strtod_l+0x408>
 800e392:	9b08      	ldr	r3, [sp, #32]
 800e394:	eba5 0808 	sub.w	r8, r5, r8
 800e398:	4498      	add	r8, r3
 800e39a:	f1b8 0f00 	cmp.w	r8, #0
 800e39e:	dd71      	ble.n	800e484 <_strtod_l+0x54c>
 800e3a0:	f018 030f 	ands.w	r3, r8, #15
 800e3a4:	d00a      	beq.n	800e3bc <_strtod_l+0x484>
 800e3a6:	494d      	ldr	r1, [pc, #308]	; (800e4dc <_strtod_l+0x5a4>)
 800e3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e3ac:	4652      	mov	r2, sl
 800e3ae:	465b      	mov	r3, fp
 800e3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b4:	f7f2 f930 	bl	8000618 <__aeabi_dmul>
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	468b      	mov	fp, r1
 800e3bc:	f038 080f 	bics.w	r8, r8, #15
 800e3c0:	d04d      	beq.n	800e45e <_strtod_l+0x526>
 800e3c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e3c6:	dd22      	ble.n	800e40e <_strtod_l+0x4d6>
 800e3c8:	2500      	movs	r5, #0
 800e3ca:	462e      	mov	r6, r5
 800e3cc:	9509      	str	r5, [sp, #36]	; 0x24
 800e3ce:	9507      	str	r5, [sp, #28]
 800e3d0:	2322      	movs	r3, #34	; 0x22
 800e3d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e4e4 <_strtod_l+0x5ac>
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	f04f 0a00 	mov.w	sl, #0
 800e3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f43f adec 	beq.w	800dfbc <_strtod_l+0x84>
 800e3e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f001 ff8e 	bl	8010308 <_Bfree>
 800e3ec:	9907      	ldr	r1, [sp, #28]
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f001 ff8a 	bl	8010308 <_Bfree>
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f001 ff86 	bl	8010308 <_Bfree>
 800e3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3fe:	4620      	mov	r0, r4
 800e400:	f001 ff82 	bl	8010308 <_Bfree>
 800e404:	4629      	mov	r1, r5
 800e406:	4620      	mov	r0, r4
 800e408:	f001 ff7e 	bl	8010308 <_Bfree>
 800e40c:	e5d6      	b.n	800dfbc <_strtod_l+0x84>
 800e40e:	2300      	movs	r3, #0
 800e410:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e414:	4650      	mov	r0, sl
 800e416:	4659      	mov	r1, fp
 800e418:	4699      	mov	r9, r3
 800e41a:	f1b8 0f01 	cmp.w	r8, #1
 800e41e:	dc21      	bgt.n	800e464 <_strtod_l+0x52c>
 800e420:	b10b      	cbz	r3, 800e426 <_strtod_l+0x4ee>
 800e422:	4682      	mov	sl, r0
 800e424:	468b      	mov	fp, r1
 800e426:	4b2e      	ldr	r3, [pc, #184]	; (800e4e0 <_strtod_l+0x5a8>)
 800e428:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e42c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e430:	4652      	mov	r2, sl
 800e432:	465b      	mov	r3, fp
 800e434:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e438:	f7f2 f8ee 	bl	8000618 <__aeabi_dmul>
 800e43c:	4b29      	ldr	r3, [pc, #164]	; (800e4e4 <_strtod_l+0x5ac>)
 800e43e:	460a      	mov	r2, r1
 800e440:	400b      	ands	r3, r1
 800e442:	4929      	ldr	r1, [pc, #164]	; (800e4e8 <_strtod_l+0x5b0>)
 800e444:	428b      	cmp	r3, r1
 800e446:	4682      	mov	sl, r0
 800e448:	d8be      	bhi.n	800e3c8 <_strtod_l+0x490>
 800e44a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e44e:	428b      	cmp	r3, r1
 800e450:	bf86      	itte	hi
 800e452:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e4ec <_strtod_l+0x5b4>
 800e456:	f04f 3aff 	movhi.w	sl, #4294967295
 800e45a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e45e:	2300      	movs	r3, #0
 800e460:	9304      	str	r3, [sp, #16]
 800e462:	e081      	b.n	800e568 <_strtod_l+0x630>
 800e464:	f018 0f01 	tst.w	r8, #1
 800e468:	d007      	beq.n	800e47a <_strtod_l+0x542>
 800e46a:	4b1d      	ldr	r3, [pc, #116]	; (800e4e0 <_strtod_l+0x5a8>)
 800e46c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	f7f2 f8d0 	bl	8000618 <__aeabi_dmul>
 800e478:	2301      	movs	r3, #1
 800e47a:	f109 0901 	add.w	r9, r9, #1
 800e47e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e482:	e7ca      	b.n	800e41a <_strtod_l+0x4e2>
 800e484:	d0eb      	beq.n	800e45e <_strtod_l+0x526>
 800e486:	f1c8 0800 	rsb	r8, r8, #0
 800e48a:	f018 020f 	ands.w	r2, r8, #15
 800e48e:	d00a      	beq.n	800e4a6 <_strtod_l+0x56e>
 800e490:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <_strtod_l+0x5a4>)
 800e492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e496:	4650      	mov	r0, sl
 800e498:	4659      	mov	r1, fp
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	f7f2 f9e5 	bl	800086c <__aeabi_ddiv>
 800e4a2:	4682      	mov	sl, r0
 800e4a4:	468b      	mov	fp, r1
 800e4a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e4aa:	d0d8      	beq.n	800e45e <_strtod_l+0x526>
 800e4ac:	f1b8 0f1f 	cmp.w	r8, #31
 800e4b0:	dd1e      	ble.n	800e4f0 <_strtod_l+0x5b8>
 800e4b2:	2500      	movs	r5, #0
 800e4b4:	462e      	mov	r6, r5
 800e4b6:	9509      	str	r5, [sp, #36]	; 0x24
 800e4b8:	9507      	str	r5, [sp, #28]
 800e4ba:	2322      	movs	r3, #34	; 0x22
 800e4bc:	f04f 0a00 	mov.w	sl, #0
 800e4c0:	f04f 0b00 	mov.w	fp, #0
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	e789      	b.n	800e3dc <_strtod_l+0x4a4>
 800e4c8:	08011fc5 	.word	0x08011fc5
 800e4cc:	08012008 	.word	0x08012008
 800e4d0:	08011fbd 	.word	0x08011fbd
 800e4d4:	0801214c 	.word	0x0801214c
 800e4d8:	08012468 	.word	0x08012468
 800e4dc:	08012348 	.word	0x08012348
 800e4e0:	08012320 	.word	0x08012320
 800e4e4:	7ff00000 	.word	0x7ff00000
 800e4e8:	7ca00000 	.word	0x7ca00000
 800e4ec:	7fefffff 	.word	0x7fefffff
 800e4f0:	f018 0310 	ands.w	r3, r8, #16
 800e4f4:	bf18      	it	ne
 800e4f6:	236a      	movne	r3, #106	; 0x6a
 800e4f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e8b0 <_strtod_l+0x978>
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	4650      	mov	r0, sl
 800e500:	4659      	mov	r1, fp
 800e502:	2300      	movs	r3, #0
 800e504:	f018 0f01 	tst.w	r8, #1
 800e508:	d004      	beq.n	800e514 <_strtod_l+0x5dc>
 800e50a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e50e:	f7f2 f883 	bl	8000618 <__aeabi_dmul>
 800e512:	2301      	movs	r3, #1
 800e514:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e518:	f109 0908 	add.w	r9, r9, #8
 800e51c:	d1f2      	bne.n	800e504 <_strtod_l+0x5cc>
 800e51e:	b10b      	cbz	r3, 800e524 <_strtod_l+0x5ec>
 800e520:	4682      	mov	sl, r0
 800e522:	468b      	mov	fp, r1
 800e524:	9b04      	ldr	r3, [sp, #16]
 800e526:	b1bb      	cbz	r3, 800e558 <_strtod_l+0x620>
 800e528:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e52c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e530:	2b00      	cmp	r3, #0
 800e532:	4659      	mov	r1, fp
 800e534:	dd10      	ble.n	800e558 <_strtod_l+0x620>
 800e536:	2b1f      	cmp	r3, #31
 800e538:	f340 8128 	ble.w	800e78c <_strtod_l+0x854>
 800e53c:	2b34      	cmp	r3, #52	; 0x34
 800e53e:	bfde      	ittt	le
 800e540:	3b20      	suble	r3, #32
 800e542:	f04f 32ff 	movle.w	r2, #4294967295
 800e546:	fa02 f303 	lslle.w	r3, r2, r3
 800e54a:	f04f 0a00 	mov.w	sl, #0
 800e54e:	bfcc      	ite	gt
 800e550:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e554:	ea03 0b01 	andle.w	fp, r3, r1
 800e558:	2200      	movs	r2, #0
 800e55a:	2300      	movs	r3, #0
 800e55c:	4650      	mov	r0, sl
 800e55e:	4659      	mov	r1, fp
 800e560:	f7f2 fac2 	bl	8000ae8 <__aeabi_dcmpeq>
 800e564:	2800      	cmp	r0, #0
 800e566:	d1a4      	bne.n	800e4b2 <_strtod_l+0x57a>
 800e568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e56e:	462b      	mov	r3, r5
 800e570:	463a      	mov	r2, r7
 800e572:	4620      	mov	r0, r4
 800e574:	f001 ff34 	bl	80103e0 <__s2b>
 800e578:	9009      	str	r0, [sp, #36]	; 0x24
 800e57a:	2800      	cmp	r0, #0
 800e57c:	f43f af24 	beq.w	800e3c8 <_strtod_l+0x490>
 800e580:	9b07      	ldr	r3, [sp, #28]
 800e582:	1b9e      	subs	r6, r3, r6
 800e584:	9b08      	ldr	r3, [sp, #32]
 800e586:	2b00      	cmp	r3, #0
 800e588:	bfb4      	ite	lt
 800e58a:	4633      	movlt	r3, r6
 800e58c:	2300      	movge	r3, #0
 800e58e:	9310      	str	r3, [sp, #64]	; 0x40
 800e590:	9b08      	ldr	r3, [sp, #32]
 800e592:	2500      	movs	r5, #0
 800e594:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e598:	9318      	str	r3, [sp, #96]	; 0x60
 800e59a:	462e      	mov	r6, r5
 800e59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e59e:	4620      	mov	r0, r4
 800e5a0:	6859      	ldr	r1, [r3, #4]
 800e5a2:	f001 fe71 	bl	8010288 <_Balloc>
 800e5a6:	9007      	str	r0, [sp, #28]
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	f43f af11 	beq.w	800e3d0 <_strtod_l+0x498>
 800e5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b0:	691a      	ldr	r2, [r3, #16]
 800e5b2:	3202      	adds	r2, #2
 800e5b4:	f103 010c 	add.w	r1, r3, #12
 800e5b8:	0092      	lsls	r2, r2, #2
 800e5ba:	300c      	adds	r0, #12
 800e5bc:	f001 fe49 	bl	8010252 <memcpy>
 800e5c0:	ec4b ab10 	vmov	d0, sl, fp
 800e5c4:	aa20      	add	r2, sp, #128	; 0x80
 800e5c6:	a91f      	add	r1, sp, #124	; 0x7c
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e5ce:	f002 fa43 	bl	8010a58 <__d2b>
 800e5d2:	901e      	str	r0, [sp, #120]	; 0x78
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	f43f aefb 	beq.w	800e3d0 <_strtod_l+0x498>
 800e5da:	2101      	movs	r1, #1
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f001 ff99 	bl	8010514 <__i2b>
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	f43f aef3 	beq.w	800e3d0 <_strtod_l+0x498>
 800e5ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5ec:	9904      	ldr	r1, [sp, #16]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	bfab      	itete	ge
 800e5f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e5f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e5f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e5f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e5fc:	bfac      	ite	ge
 800e5fe:	eb03 0902 	addge.w	r9, r3, r2
 800e602:	1ad7      	sublt	r7, r2, r3
 800e604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e606:	eba3 0801 	sub.w	r8, r3, r1
 800e60a:	4490      	add	r8, r2
 800e60c:	4ba3      	ldr	r3, [pc, #652]	; (800e89c <_strtod_l+0x964>)
 800e60e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e612:	4598      	cmp	r8, r3
 800e614:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e618:	f280 80cc 	bge.w	800e7b4 <_strtod_l+0x87c>
 800e61c:	eba3 0308 	sub.w	r3, r3, r8
 800e620:	2b1f      	cmp	r3, #31
 800e622:	eba2 0203 	sub.w	r2, r2, r3
 800e626:	f04f 0101 	mov.w	r1, #1
 800e62a:	f300 80b6 	bgt.w	800e79a <_strtod_l+0x862>
 800e62e:	fa01 f303 	lsl.w	r3, r1, r3
 800e632:	9311      	str	r3, [sp, #68]	; 0x44
 800e634:	2300      	movs	r3, #0
 800e636:	930c      	str	r3, [sp, #48]	; 0x30
 800e638:	eb09 0802 	add.w	r8, r9, r2
 800e63c:	9b04      	ldr	r3, [sp, #16]
 800e63e:	45c1      	cmp	r9, r8
 800e640:	4417      	add	r7, r2
 800e642:	441f      	add	r7, r3
 800e644:	464b      	mov	r3, r9
 800e646:	bfa8      	it	ge
 800e648:	4643      	movge	r3, r8
 800e64a:	42bb      	cmp	r3, r7
 800e64c:	bfa8      	it	ge
 800e64e:	463b      	movge	r3, r7
 800e650:	2b00      	cmp	r3, #0
 800e652:	bfc2      	ittt	gt
 800e654:	eba8 0803 	subgt.w	r8, r8, r3
 800e658:	1aff      	subgt	r7, r7, r3
 800e65a:	eba9 0903 	subgt.w	r9, r9, r3
 800e65e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e660:	2b00      	cmp	r3, #0
 800e662:	dd17      	ble.n	800e694 <_strtod_l+0x75c>
 800e664:	4631      	mov	r1, r6
 800e666:	461a      	mov	r2, r3
 800e668:	4620      	mov	r0, r4
 800e66a:	f002 f80f 	bl	801068c <__pow5mult>
 800e66e:	4606      	mov	r6, r0
 800e670:	2800      	cmp	r0, #0
 800e672:	f43f aead 	beq.w	800e3d0 <_strtod_l+0x498>
 800e676:	4601      	mov	r1, r0
 800e678:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e67a:	4620      	mov	r0, r4
 800e67c:	f001 ff60 	bl	8010540 <__multiply>
 800e680:	900f      	str	r0, [sp, #60]	; 0x3c
 800e682:	2800      	cmp	r0, #0
 800e684:	f43f aea4 	beq.w	800e3d0 <_strtod_l+0x498>
 800e688:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e68a:	4620      	mov	r0, r4
 800e68c:	f001 fe3c 	bl	8010308 <_Bfree>
 800e690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e692:	931e      	str	r3, [sp, #120]	; 0x78
 800e694:	f1b8 0f00 	cmp.w	r8, #0
 800e698:	f300 8091 	bgt.w	800e7be <_strtod_l+0x886>
 800e69c:	9b08      	ldr	r3, [sp, #32]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	dd08      	ble.n	800e6b4 <_strtod_l+0x77c>
 800e6a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e6a4:	9907      	ldr	r1, [sp, #28]
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f001 fff0 	bl	801068c <__pow5mult>
 800e6ac:	9007      	str	r0, [sp, #28]
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f ae8e 	beq.w	800e3d0 <_strtod_l+0x498>
 800e6b4:	2f00      	cmp	r7, #0
 800e6b6:	dd08      	ble.n	800e6ca <_strtod_l+0x792>
 800e6b8:	9907      	ldr	r1, [sp, #28]
 800e6ba:	463a      	mov	r2, r7
 800e6bc:	4620      	mov	r0, r4
 800e6be:	f002 f83f 	bl	8010740 <__lshift>
 800e6c2:	9007      	str	r0, [sp, #28]
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	f43f ae83 	beq.w	800e3d0 <_strtod_l+0x498>
 800e6ca:	f1b9 0f00 	cmp.w	r9, #0
 800e6ce:	dd08      	ble.n	800e6e2 <_strtod_l+0x7aa>
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	464a      	mov	r2, r9
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f002 f833 	bl	8010740 <__lshift>
 800e6da:	4606      	mov	r6, r0
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	f43f ae77 	beq.w	800e3d0 <_strtod_l+0x498>
 800e6e2:	9a07      	ldr	r2, [sp, #28]
 800e6e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f002 f8b2 	bl	8010850 <__mdiff>
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	f43f ae6e 	beq.w	800e3d0 <_strtod_l+0x498>
 800e6f4:	68c3      	ldr	r3, [r0, #12]
 800e6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	60c3      	str	r3, [r0, #12]
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	f002 f88b 	bl	8010818 <__mcmp>
 800e702:	2800      	cmp	r0, #0
 800e704:	da65      	bge.n	800e7d2 <_strtod_l+0x89a>
 800e706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e708:	ea53 030a 	orrs.w	r3, r3, sl
 800e70c:	f040 8087 	bne.w	800e81e <_strtod_l+0x8e6>
 800e710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e714:	2b00      	cmp	r3, #0
 800e716:	f040 8082 	bne.w	800e81e <_strtod_l+0x8e6>
 800e71a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e71e:	0d1b      	lsrs	r3, r3, #20
 800e720:	051b      	lsls	r3, r3, #20
 800e722:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e726:	d97a      	bls.n	800e81e <_strtod_l+0x8e6>
 800e728:	696b      	ldr	r3, [r5, #20]
 800e72a:	b913      	cbnz	r3, 800e732 <_strtod_l+0x7fa>
 800e72c:	692b      	ldr	r3, [r5, #16]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	dd75      	ble.n	800e81e <_strtod_l+0x8e6>
 800e732:	4629      	mov	r1, r5
 800e734:	2201      	movs	r2, #1
 800e736:	4620      	mov	r0, r4
 800e738:	f002 f802 	bl	8010740 <__lshift>
 800e73c:	4631      	mov	r1, r6
 800e73e:	4605      	mov	r5, r0
 800e740:	f002 f86a 	bl	8010818 <__mcmp>
 800e744:	2800      	cmp	r0, #0
 800e746:	dd6a      	ble.n	800e81e <_strtod_l+0x8e6>
 800e748:	9904      	ldr	r1, [sp, #16]
 800e74a:	4a55      	ldr	r2, [pc, #340]	; (800e8a0 <_strtod_l+0x968>)
 800e74c:	465b      	mov	r3, fp
 800e74e:	2900      	cmp	r1, #0
 800e750:	f000 8085 	beq.w	800e85e <_strtod_l+0x926>
 800e754:	ea02 010b 	and.w	r1, r2, fp
 800e758:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e75c:	dc7f      	bgt.n	800e85e <_strtod_l+0x926>
 800e75e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e762:	f77f aeaa 	ble.w	800e4ba <_strtod_l+0x582>
 800e766:	4a4f      	ldr	r2, [pc, #316]	; (800e8a4 <_strtod_l+0x96c>)
 800e768:	2300      	movs	r3, #0
 800e76a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e76e:	4650      	mov	r0, sl
 800e770:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e774:	4659      	mov	r1, fp
 800e776:	f7f1 ff4f 	bl	8000618 <__aeabi_dmul>
 800e77a:	460b      	mov	r3, r1
 800e77c:	4303      	orrs	r3, r0
 800e77e:	bf08      	it	eq
 800e780:	2322      	moveq	r3, #34	; 0x22
 800e782:	4682      	mov	sl, r0
 800e784:	468b      	mov	fp, r1
 800e786:	bf08      	it	eq
 800e788:	6023      	streq	r3, [r4, #0]
 800e78a:	e62b      	b.n	800e3e4 <_strtod_l+0x4ac>
 800e78c:	f04f 32ff 	mov.w	r2, #4294967295
 800e790:	fa02 f303 	lsl.w	r3, r2, r3
 800e794:	ea03 0a0a 	and.w	sl, r3, sl
 800e798:	e6de      	b.n	800e558 <_strtod_l+0x620>
 800e79a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e79e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e7a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e7a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e7aa:	fa01 f308 	lsl.w	r3, r1, r8
 800e7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e7b0:	9111      	str	r1, [sp, #68]	; 0x44
 800e7b2:	e741      	b.n	800e638 <_strtod_l+0x700>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	930c      	str	r3, [sp, #48]	; 0x30
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	9311      	str	r3, [sp, #68]	; 0x44
 800e7bc:	e73c      	b.n	800e638 <_strtod_l+0x700>
 800e7be:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e7c0:	4642      	mov	r2, r8
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f001 ffbc 	bl	8010740 <__lshift>
 800e7c8:	901e      	str	r0, [sp, #120]	; 0x78
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	f47f af66 	bne.w	800e69c <_strtod_l+0x764>
 800e7d0:	e5fe      	b.n	800e3d0 <_strtod_l+0x498>
 800e7d2:	465f      	mov	r7, fp
 800e7d4:	d16e      	bne.n	800e8b4 <_strtod_l+0x97c>
 800e7d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7dc:	b342      	cbz	r2, 800e830 <_strtod_l+0x8f8>
 800e7de:	4a32      	ldr	r2, [pc, #200]	; (800e8a8 <_strtod_l+0x970>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d128      	bne.n	800e836 <_strtod_l+0x8fe>
 800e7e4:	9b04      	ldr	r3, [sp, #16]
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	b1eb      	cbz	r3, 800e826 <_strtod_l+0x8ee>
 800e7ea:	4a2d      	ldr	r2, [pc, #180]	; (800e8a0 <_strtod_l+0x968>)
 800e7ec:	403a      	ands	r2, r7
 800e7ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e7f2:	f04f 31ff 	mov.w	r1, #4294967295
 800e7f6:	d819      	bhi.n	800e82c <_strtod_l+0x8f4>
 800e7f8:	0d12      	lsrs	r2, r2, #20
 800e7fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800e802:	4298      	cmp	r0, r3
 800e804:	d117      	bne.n	800e836 <_strtod_l+0x8fe>
 800e806:	4b29      	ldr	r3, [pc, #164]	; (800e8ac <_strtod_l+0x974>)
 800e808:	429f      	cmp	r7, r3
 800e80a:	d102      	bne.n	800e812 <_strtod_l+0x8da>
 800e80c:	3001      	adds	r0, #1
 800e80e:	f43f addf 	beq.w	800e3d0 <_strtod_l+0x498>
 800e812:	4b23      	ldr	r3, [pc, #140]	; (800e8a0 <_strtod_l+0x968>)
 800e814:	403b      	ands	r3, r7
 800e816:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e81a:	f04f 0a00 	mov.w	sl, #0
 800e81e:	9b04      	ldr	r3, [sp, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1a0      	bne.n	800e766 <_strtod_l+0x82e>
 800e824:	e5de      	b.n	800e3e4 <_strtod_l+0x4ac>
 800e826:	f04f 33ff 	mov.w	r3, #4294967295
 800e82a:	e7ea      	b.n	800e802 <_strtod_l+0x8ca>
 800e82c:	460b      	mov	r3, r1
 800e82e:	e7e8      	b.n	800e802 <_strtod_l+0x8ca>
 800e830:	ea53 030a 	orrs.w	r3, r3, sl
 800e834:	d088      	beq.n	800e748 <_strtod_l+0x810>
 800e836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e838:	b1db      	cbz	r3, 800e872 <_strtod_l+0x93a>
 800e83a:	423b      	tst	r3, r7
 800e83c:	d0ef      	beq.n	800e81e <_strtod_l+0x8e6>
 800e83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e840:	9a04      	ldr	r2, [sp, #16]
 800e842:	4650      	mov	r0, sl
 800e844:	4659      	mov	r1, fp
 800e846:	b1c3      	cbz	r3, 800e87a <_strtod_l+0x942>
 800e848:	f7ff fb5a 	bl	800df00 <sulp>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e854:	f7f1 fd2a 	bl	80002ac <__adddf3>
 800e858:	4682      	mov	sl, r0
 800e85a:	468b      	mov	fp, r1
 800e85c:	e7df      	b.n	800e81e <_strtod_l+0x8e6>
 800e85e:	4013      	ands	r3, r2
 800e860:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e864:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e868:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e86c:	f04f 3aff 	mov.w	sl, #4294967295
 800e870:	e7d5      	b.n	800e81e <_strtod_l+0x8e6>
 800e872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e874:	ea13 0f0a 	tst.w	r3, sl
 800e878:	e7e0      	b.n	800e83c <_strtod_l+0x904>
 800e87a:	f7ff fb41 	bl	800df00 <sulp>
 800e87e:	4602      	mov	r2, r0
 800e880:	460b      	mov	r3, r1
 800e882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e886:	f7f1 fd0f 	bl	80002a8 <__aeabi_dsub>
 800e88a:	2200      	movs	r2, #0
 800e88c:	2300      	movs	r3, #0
 800e88e:	4682      	mov	sl, r0
 800e890:	468b      	mov	fp, r1
 800e892:	f7f2 f929 	bl	8000ae8 <__aeabi_dcmpeq>
 800e896:	2800      	cmp	r0, #0
 800e898:	d0c1      	beq.n	800e81e <_strtod_l+0x8e6>
 800e89a:	e60e      	b.n	800e4ba <_strtod_l+0x582>
 800e89c:	fffffc02 	.word	0xfffffc02
 800e8a0:	7ff00000 	.word	0x7ff00000
 800e8a4:	39500000 	.word	0x39500000
 800e8a8:	000fffff 	.word	0x000fffff
 800e8ac:	7fefffff 	.word	0x7fefffff
 800e8b0:	08012020 	.word	0x08012020
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	f002 f92a 	bl	8010b10 <__ratio>
 800e8bc:	ec59 8b10 	vmov	r8, r9, d0
 800e8c0:	ee10 0a10 	vmov	r0, s0
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8ca:	4649      	mov	r1, r9
 800e8cc:	f7f2 f920 	bl	8000b10 <__aeabi_dcmple>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d07c      	beq.n	800e9ce <_strtod_l+0xa96>
 800e8d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d04c      	beq.n	800e974 <_strtod_l+0xa3c>
 800e8da:	4b95      	ldr	r3, [pc, #596]	; (800eb30 <_strtod_l+0xbf8>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e8e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800eb30 <_strtod_l+0xbf8>
 800e8e6:	f04f 0800 	mov.w	r8, #0
 800e8ea:	4b92      	ldr	r3, [pc, #584]	; (800eb34 <_strtod_l+0xbfc>)
 800e8ec:	403b      	ands	r3, r7
 800e8ee:	9311      	str	r3, [sp, #68]	; 0x44
 800e8f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e8f2:	4b91      	ldr	r3, [pc, #580]	; (800eb38 <_strtod_l+0xc00>)
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	f040 80b2 	bne.w	800ea5e <_strtod_l+0xb26>
 800e8fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e8fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e902:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e906:	ec4b ab10 	vmov	d0, sl, fp
 800e90a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e90e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e912:	f002 f825 	bl	8010960 <__ulp>
 800e916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e91a:	ec53 2b10 	vmov	r2, r3, d0
 800e91e:	f7f1 fe7b 	bl	8000618 <__aeabi_dmul>
 800e922:	4652      	mov	r2, sl
 800e924:	465b      	mov	r3, fp
 800e926:	f7f1 fcc1 	bl	80002ac <__adddf3>
 800e92a:	460b      	mov	r3, r1
 800e92c:	4981      	ldr	r1, [pc, #516]	; (800eb34 <_strtod_l+0xbfc>)
 800e92e:	4a83      	ldr	r2, [pc, #524]	; (800eb3c <_strtod_l+0xc04>)
 800e930:	4019      	ands	r1, r3
 800e932:	4291      	cmp	r1, r2
 800e934:	4682      	mov	sl, r0
 800e936:	d95e      	bls.n	800e9f6 <_strtod_l+0xabe>
 800e938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e93a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e93e:	4293      	cmp	r3, r2
 800e940:	d103      	bne.n	800e94a <_strtod_l+0xa12>
 800e942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e944:	3301      	adds	r3, #1
 800e946:	f43f ad43 	beq.w	800e3d0 <_strtod_l+0x498>
 800e94a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800eb48 <_strtod_l+0xc10>
 800e94e:	f04f 3aff 	mov.w	sl, #4294967295
 800e952:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e954:	4620      	mov	r0, r4
 800e956:	f001 fcd7 	bl	8010308 <_Bfree>
 800e95a:	9907      	ldr	r1, [sp, #28]
 800e95c:	4620      	mov	r0, r4
 800e95e:	f001 fcd3 	bl	8010308 <_Bfree>
 800e962:	4631      	mov	r1, r6
 800e964:	4620      	mov	r0, r4
 800e966:	f001 fccf 	bl	8010308 <_Bfree>
 800e96a:	4629      	mov	r1, r5
 800e96c:	4620      	mov	r0, r4
 800e96e:	f001 fccb 	bl	8010308 <_Bfree>
 800e972:	e613      	b.n	800e59c <_strtod_l+0x664>
 800e974:	f1ba 0f00 	cmp.w	sl, #0
 800e978:	d11b      	bne.n	800e9b2 <_strtod_l+0xa7a>
 800e97a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e97e:	b9f3      	cbnz	r3, 800e9be <_strtod_l+0xa86>
 800e980:	4b6b      	ldr	r3, [pc, #428]	; (800eb30 <_strtod_l+0xbf8>)
 800e982:	2200      	movs	r2, #0
 800e984:	4640      	mov	r0, r8
 800e986:	4649      	mov	r1, r9
 800e988:	f7f2 f8b8 	bl	8000afc <__aeabi_dcmplt>
 800e98c:	b9d0      	cbnz	r0, 800e9c4 <_strtod_l+0xa8c>
 800e98e:	4640      	mov	r0, r8
 800e990:	4649      	mov	r1, r9
 800e992:	4b6b      	ldr	r3, [pc, #428]	; (800eb40 <_strtod_l+0xc08>)
 800e994:	2200      	movs	r2, #0
 800e996:	f7f1 fe3f 	bl	8000618 <__aeabi_dmul>
 800e99a:	4680      	mov	r8, r0
 800e99c:	4689      	mov	r9, r1
 800e99e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e9a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e9a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800e9a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e9ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e9b0:	e79b      	b.n	800e8ea <_strtod_l+0x9b2>
 800e9b2:	f1ba 0f01 	cmp.w	sl, #1
 800e9b6:	d102      	bne.n	800e9be <_strtod_l+0xa86>
 800e9b8:	2f00      	cmp	r7, #0
 800e9ba:	f43f ad7e 	beq.w	800e4ba <_strtod_l+0x582>
 800e9be:	4b61      	ldr	r3, [pc, #388]	; (800eb44 <_strtod_l+0xc0c>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	e78c      	b.n	800e8de <_strtod_l+0x9a6>
 800e9c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eb40 <_strtod_l+0xc08>
 800e9c8:	f04f 0800 	mov.w	r8, #0
 800e9cc:	e7e7      	b.n	800e99e <_strtod_l+0xa66>
 800e9ce:	4b5c      	ldr	r3, [pc, #368]	; (800eb40 <_strtod_l+0xc08>)
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f7f1 fe1f 	bl	8000618 <__aeabi_dmul>
 800e9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9dc:	4680      	mov	r8, r0
 800e9de:	4689      	mov	r9, r1
 800e9e0:	b933      	cbnz	r3, 800e9f0 <_strtod_l+0xab8>
 800e9e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9e6:	9012      	str	r0, [sp, #72]	; 0x48
 800e9e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e9ee:	e7dd      	b.n	800e9ac <_strtod_l+0xa74>
 800e9f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e9f4:	e7f9      	b.n	800e9ea <_strtod_l+0xab2>
 800e9f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e9fa:	9b04      	ldr	r3, [sp, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1a8      	bne.n	800e952 <_strtod_l+0xa1a>
 800ea00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea06:	0d1b      	lsrs	r3, r3, #20
 800ea08:	051b      	lsls	r3, r3, #20
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d1a1      	bne.n	800e952 <_strtod_l+0xa1a>
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4649      	mov	r1, r9
 800ea12:	f7f2 f949 	bl	8000ca8 <__aeabi_d2lz>
 800ea16:	f7f1 fdd1 	bl	80005bc <__aeabi_l2d>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	4640      	mov	r0, r8
 800ea20:	4649      	mov	r1, r9
 800ea22:	f7f1 fc41 	bl	80002a8 <__aeabi_dsub>
 800ea26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea2c:	ea43 030a 	orr.w	r3, r3, sl
 800ea30:	4313      	orrs	r3, r2
 800ea32:	4680      	mov	r8, r0
 800ea34:	4689      	mov	r9, r1
 800ea36:	d053      	beq.n	800eae0 <_strtod_l+0xba8>
 800ea38:	a335      	add	r3, pc, #212	; (adr r3, 800eb10 <_strtod_l+0xbd8>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f7f2 f85d 	bl	8000afc <__aeabi_dcmplt>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f47f acce 	bne.w	800e3e4 <_strtod_l+0x4ac>
 800ea48:	a333      	add	r3, pc, #204	; (adr r3, 800eb18 <_strtod_l+0xbe0>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	4640      	mov	r0, r8
 800ea50:	4649      	mov	r1, r9
 800ea52:	f7f2 f871 	bl	8000b38 <__aeabi_dcmpgt>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	f43f af7b 	beq.w	800e952 <_strtod_l+0xa1a>
 800ea5c:	e4c2      	b.n	800e3e4 <_strtod_l+0x4ac>
 800ea5e:	9b04      	ldr	r3, [sp, #16]
 800ea60:	b333      	cbz	r3, 800eab0 <_strtod_l+0xb78>
 800ea62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ea68:	d822      	bhi.n	800eab0 <_strtod_l+0xb78>
 800ea6a:	a32d      	add	r3, pc, #180	; (adr r3, 800eb20 <_strtod_l+0xbe8>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	4640      	mov	r0, r8
 800ea72:	4649      	mov	r1, r9
 800ea74:	f7f2 f84c 	bl	8000b10 <__aeabi_dcmple>
 800ea78:	b1a0      	cbz	r0, 800eaa4 <_strtod_l+0xb6c>
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	f7f2 f8a3 	bl	8000bc8 <__aeabi_d2uiz>
 800ea82:	2801      	cmp	r0, #1
 800ea84:	bf38      	it	cc
 800ea86:	2001      	movcc	r0, #1
 800ea88:	f7f1 fd4c 	bl	8000524 <__aeabi_ui2d>
 800ea8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea8e:	4680      	mov	r8, r0
 800ea90:	4689      	mov	r9, r1
 800ea92:	bb13      	cbnz	r3, 800eada <_strtod_l+0xba2>
 800ea94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea98:	9014      	str	r0, [sp, #80]	; 0x50
 800ea9a:	9315      	str	r3, [sp, #84]	; 0x54
 800ea9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eaa0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eaa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eaa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800eaac:	1a9b      	subs	r3, r3, r2
 800eaae:	930d      	str	r3, [sp, #52]	; 0x34
 800eab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eab4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eabc:	f001 ff50 	bl	8010960 <__ulp>
 800eac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eac4:	ec53 2b10 	vmov	r2, r3, d0
 800eac8:	f7f1 fda6 	bl	8000618 <__aeabi_dmul>
 800eacc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ead0:	f7f1 fbec 	bl	80002ac <__adddf3>
 800ead4:	4682      	mov	sl, r0
 800ead6:	468b      	mov	fp, r1
 800ead8:	e78f      	b.n	800e9fa <_strtod_l+0xac2>
 800eada:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800eade:	e7dd      	b.n	800ea9c <_strtod_l+0xb64>
 800eae0:	a311      	add	r3, pc, #68	; (adr r3, 800eb28 <_strtod_l+0xbf0>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	f7f2 f809 	bl	8000afc <__aeabi_dcmplt>
 800eaea:	e7b4      	b.n	800ea56 <_strtod_l+0xb1e>
 800eaec:	2300      	movs	r3, #0
 800eaee:	930e      	str	r3, [sp, #56]	; 0x38
 800eaf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eaf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	f7ff ba65 	b.w	800dfc4 <_strtod_l+0x8c>
 800eafa:	2b65      	cmp	r3, #101	; 0x65
 800eafc:	f43f ab5d 	beq.w	800e1ba <_strtod_l+0x282>
 800eb00:	2b45      	cmp	r3, #69	; 0x45
 800eb02:	f43f ab5a 	beq.w	800e1ba <_strtod_l+0x282>
 800eb06:	2201      	movs	r2, #1
 800eb08:	f7ff bb92 	b.w	800e230 <_strtod_l+0x2f8>
 800eb0c:	f3af 8000 	nop.w
 800eb10:	94a03595 	.word	0x94a03595
 800eb14:	3fdfffff 	.word	0x3fdfffff
 800eb18:	35afe535 	.word	0x35afe535
 800eb1c:	3fe00000 	.word	0x3fe00000
 800eb20:	ffc00000 	.word	0xffc00000
 800eb24:	41dfffff 	.word	0x41dfffff
 800eb28:	94a03595 	.word	0x94a03595
 800eb2c:	3fcfffff 	.word	0x3fcfffff
 800eb30:	3ff00000 	.word	0x3ff00000
 800eb34:	7ff00000 	.word	0x7ff00000
 800eb38:	7fe00000 	.word	0x7fe00000
 800eb3c:	7c9fffff 	.word	0x7c9fffff
 800eb40:	3fe00000 	.word	0x3fe00000
 800eb44:	bff00000 	.word	0xbff00000
 800eb48:	7fefffff 	.word	0x7fefffff

0800eb4c <_strtod_r>:
 800eb4c:	4b01      	ldr	r3, [pc, #4]	; (800eb54 <_strtod_r+0x8>)
 800eb4e:	f7ff b9f3 	b.w	800df38 <_strtod_l>
 800eb52:	bf00      	nop
 800eb54:	200001f8 	.word	0x200001f8

0800eb58 <_strtol_l.isra.0>:
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5e:	d001      	beq.n	800eb64 <_strtol_l.isra.0+0xc>
 800eb60:	2b24      	cmp	r3, #36	; 0x24
 800eb62:	d906      	bls.n	800eb72 <_strtol_l.isra.0+0x1a>
 800eb64:	f7fe fa20 	bl	800cfa8 <__errno>
 800eb68:	2316      	movs	r3, #22
 800eb6a:	6003      	str	r3, [r0, #0]
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb72:	4f3a      	ldr	r7, [pc, #232]	; (800ec5c <_strtol_l.isra.0+0x104>)
 800eb74:	468e      	mov	lr, r1
 800eb76:	4676      	mov	r6, lr
 800eb78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb7c:	5de5      	ldrb	r5, [r4, r7]
 800eb7e:	f015 0508 	ands.w	r5, r5, #8
 800eb82:	d1f8      	bne.n	800eb76 <_strtol_l.isra.0+0x1e>
 800eb84:	2c2d      	cmp	r4, #45	; 0x2d
 800eb86:	d134      	bne.n	800ebf2 <_strtol_l.isra.0+0x9a>
 800eb88:	f89e 4000 	ldrb.w	r4, [lr]
 800eb8c:	f04f 0801 	mov.w	r8, #1
 800eb90:	f106 0e02 	add.w	lr, r6, #2
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d05c      	beq.n	800ec52 <_strtol_l.isra.0+0xfa>
 800eb98:	2b10      	cmp	r3, #16
 800eb9a:	d10c      	bne.n	800ebb6 <_strtol_l.isra.0+0x5e>
 800eb9c:	2c30      	cmp	r4, #48	; 0x30
 800eb9e:	d10a      	bne.n	800ebb6 <_strtol_l.isra.0+0x5e>
 800eba0:	f89e 4000 	ldrb.w	r4, [lr]
 800eba4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eba8:	2c58      	cmp	r4, #88	; 0x58
 800ebaa:	d14d      	bne.n	800ec48 <_strtol_l.isra.0+0xf0>
 800ebac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ebb0:	2310      	movs	r3, #16
 800ebb2:	f10e 0e02 	add.w	lr, lr, #2
 800ebb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ebba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebbe:	2600      	movs	r6, #0
 800ebc0:	fbbc f9f3 	udiv	r9, ip, r3
 800ebc4:	4635      	mov	r5, r6
 800ebc6:	fb03 ca19 	mls	sl, r3, r9, ip
 800ebca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ebce:	2f09      	cmp	r7, #9
 800ebd0:	d818      	bhi.n	800ec04 <_strtol_l.isra.0+0xac>
 800ebd2:	463c      	mov	r4, r7
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	dd24      	ble.n	800ec22 <_strtol_l.isra.0+0xca>
 800ebd8:	2e00      	cmp	r6, #0
 800ebda:	db1f      	blt.n	800ec1c <_strtol_l.isra.0+0xc4>
 800ebdc:	45a9      	cmp	r9, r5
 800ebde:	d31d      	bcc.n	800ec1c <_strtol_l.isra.0+0xc4>
 800ebe0:	d101      	bne.n	800ebe6 <_strtol_l.isra.0+0x8e>
 800ebe2:	45a2      	cmp	sl, r4
 800ebe4:	db1a      	blt.n	800ec1c <_strtol_l.isra.0+0xc4>
 800ebe6:	fb05 4503 	mla	r5, r5, r3, r4
 800ebea:	2601      	movs	r6, #1
 800ebec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ebf0:	e7eb      	b.n	800ebca <_strtol_l.isra.0+0x72>
 800ebf2:	2c2b      	cmp	r4, #43	; 0x2b
 800ebf4:	bf08      	it	eq
 800ebf6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ebfa:	46a8      	mov	r8, r5
 800ebfc:	bf08      	it	eq
 800ebfe:	f106 0e02 	addeq.w	lr, r6, #2
 800ec02:	e7c7      	b.n	800eb94 <_strtol_l.isra.0+0x3c>
 800ec04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ec08:	2f19      	cmp	r7, #25
 800ec0a:	d801      	bhi.n	800ec10 <_strtol_l.isra.0+0xb8>
 800ec0c:	3c37      	subs	r4, #55	; 0x37
 800ec0e:	e7e1      	b.n	800ebd4 <_strtol_l.isra.0+0x7c>
 800ec10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ec14:	2f19      	cmp	r7, #25
 800ec16:	d804      	bhi.n	800ec22 <_strtol_l.isra.0+0xca>
 800ec18:	3c57      	subs	r4, #87	; 0x57
 800ec1a:	e7db      	b.n	800ebd4 <_strtol_l.isra.0+0x7c>
 800ec1c:	f04f 36ff 	mov.w	r6, #4294967295
 800ec20:	e7e4      	b.n	800ebec <_strtol_l.isra.0+0x94>
 800ec22:	2e00      	cmp	r6, #0
 800ec24:	da05      	bge.n	800ec32 <_strtol_l.isra.0+0xda>
 800ec26:	2322      	movs	r3, #34	; 0x22
 800ec28:	6003      	str	r3, [r0, #0]
 800ec2a:	4665      	mov	r5, ip
 800ec2c:	b942      	cbnz	r2, 800ec40 <_strtol_l.isra.0+0xe8>
 800ec2e:	4628      	mov	r0, r5
 800ec30:	e79d      	b.n	800eb6e <_strtol_l.isra.0+0x16>
 800ec32:	f1b8 0f00 	cmp.w	r8, #0
 800ec36:	d000      	beq.n	800ec3a <_strtol_l.isra.0+0xe2>
 800ec38:	426d      	negs	r5, r5
 800ec3a:	2a00      	cmp	r2, #0
 800ec3c:	d0f7      	beq.n	800ec2e <_strtol_l.isra.0+0xd6>
 800ec3e:	b10e      	cbz	r6, 800ec44 <_strtol_l.isra.0+0xec>
 800ec40:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ec44:	6011      	str	r1, [r2, #0]
 800ec46:	e7f2      	b.n	800ec2e <_strtol_l.isra.0+0xd6>
 800ec48:	2430      	movs	r4, #48	; 0x30
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1b3      	bne.n	800ebb6 <_strtol_l.isra.0+0x5e>
 800ec4e:	2308      	movs	r3, #8
 800ec50:	e7b1      	b.n	800ebb6 <_strtol_l.isra.0+0x5e>
 800ec52:	2c30      	cmp	r4, #48	; 0x30
 800ec54:	d0a4      	beq.n	800eba0 <_strtol_l.isra.0+0x48>
 800ec56:	230a      	movs	r3, #10
 800ec58:	e7ad      	b.n	800ebb6 <_strtol_l.isra.0+0x5e>
 800ec5a:	bf00      	nop
 800ec5c:	08012049 	.word	0x08012049

0800ec60 <_strtol_r>:
 800ec60:	f7ff bf7a 	b.w	800eb58 <_strtol_l.isra.0>

0800ec64 <quorem>:
 800ec64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	6903      	ldr	r3, [r0, #16]
 800ec6a:	690c      	ldr	r4, [r1, #16]
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	4607      	mov	r7, r0
 800ec70:	f2c0 8081 	blt.w	800ed76 <quorem+0x112>
 800ec74:	3c01      	subs	r4, #1
 800ec76:	f101 0814 	add.w	r8, r1, #20
 800ec7a:	f100 0514 	add.w	r5, r0, #20
 800ec7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ec94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec9c:	d331      	bcc.n	800ed02 <quorem+0x9e>
 800ec9e:	f04f 0e00 	mov.w	lr, #0
 800eca2:	4640      	mov	r0, r8
 800eca4:	46ac      	mov	ip, r5
 800eca6:	46f2      	mov	sl, lr
 800eca8:	f850 2b04 	ldr.w	r2, [r0], #4
 800ecac:	b293      	uxth	r3, r2
 800ecae:	fb06 e303 	mla	r3, r6, r3, lr
 800ecb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	ebaa 0303 	sub.w	r3, sl, r3
 800ecbc:	0c12      	lsrs	r2, r2, #16
 800ecbe:	f8dc a000 	ldr.w	sl, [ip]
 800ecc2:	fb06 e202 	mla	r2, r6, r2, lr
 800ecc6:	fa13 f38a 	uxtah	r3, r3, sl
 800ecca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ecce:	fa1f fa82 	uxth.w	sl, r2
 800ecd2:	f8dc 2000 	ldr.w	r2, [ip]
 800ecd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ecda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ece4:	4581      	cmp	r9, r0
 800ece6:	f84c 3b04 	str.w	r3, [ip], #4
 800ecea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ecee:	d2db      	bcs.n	800eca8 <quorem+0x44>
 800ecf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800ecf4:	b92b      	cbnz	r3, 800ed02 <quorem+0x9e>
 800ecf6:	9b01      	ldr	r3, [sp, #4]
 800ecf8:	3b04      	subs	r3, #4
 800ecfa:	429d      	cmp	r5, r3
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	d32e      	bcc.n	800ed5e <quorem+0xfa>
 800ed00:	613c      	str	r4, [r7, #16]
 800ed02:	4638      	mov	r0, r7
 800ed04:	f001 fd88 	bl	8010818 <__mcmp>
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	db24      	blt.n	800ed56 <quorem+0xf2>
 800ed0c:	3601      	adds	r6, #1
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f04f 0c00 	mov.w	ip, #0
 800ed14:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed18:	f8d0 e000 	ldr.w	lr, [r0]
 800ed1c:	b293      	uxth	r3, r2
 800ed1e:	ebac 0303 	sub.w	r3, ip, r3
 800ed22:	0c12      	lsrs	r2, r2, #16
 800ed24:	fa13 f38e 	uxtah	r3, r3, lr
 800ed28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed36:	45c1      	cmp	r9, r8
 800ed38:	f840 3b04 	str.w	r3, [r0], #4
 800ed3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed40:	d2e8      	bcs.n	800ed14 <quorem+0xb0>
 800ed42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed4a:	b922      	cbnz	r2, 800ed56 <quorem+0xf2>
 800ed4c:	3b04      	subs	r3, #4
 800ed4e:	429d      	cmp	r5, r3
 800ed50:	461a      	mov	r2, r3
 800ed52:	d30a      	bcc.n	800ed6a <quorem+0x106>
 800ed54:	613c      	str	r4, [r7, #16]
 800ed56:	4630      	mov	r0, r6
 800ed58:	b003      	add	sp, #12
 800ed5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5e:	6812      	ldr	r2, [r2, #0]
 800ed60:	3b04      	subs	r3, #4
 800ed62:	2a00      	cmp	r2, #0
 800ed64:	d1cc      	bne.n	800ed00 <quorem+0x9c>
 800ed66:	3c01      	subs	r4, #1
 800ed68:	e7c7      	b.n	800ecfa <quorem+0x96>
 800ed6a:	6812      	ldr	r2, [r2, #0]
 800ed6c:	3b04      	subs	r3, #4
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	d1f0      	bne.n	800ed54 <quorem+0xf0>
 800ed72:	3c01      	subs	r4, #1
 800ed74:	e7eb      	b.n	800ed4e <quorem+0xea>
 800ed76:	2000      	movs	r0, #0
 800ed78:	e7ee      	b.n	800ed58 <quorem+0xf4>
 800ed7a:	0000      	movs	r0, r0
 800ed7c:	0000      	movs	r0, r0
	...

0800ed80 <_dtoa_r>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	ed2d 8b02 	vpush	{d8}
 800ed88:	ec57 6b10 	vmov	r6, r7, d0
 800ed8c:	b095      	sub	sp, #84	; 0x54
 800ed8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ed94:	9105      	str	r1, [sp, #20]
 800ed96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eda0:	b975      	cbnz	r5, 800edc0 <_dtoa_r+0x40>
 800eda2:	2010      	movs	r0, #16
 800eda4:	f7fe f92a 	bl	800cffc <malloc>
 800eda8:	4602      	mov	r2, r0
 800edaa:	6260      	str	r0, [r4, #36]	; 0x24
 800edac:	b920      	cbnz	r0, 800edb8 <_dtoa_r+0x38>
 800edae:	4bb2      	ldr	r3, [pc, #712]	; (800f078 <_dtoa_r+0x2f8>)
 800edb0:	21ea      	movs	r1, #234	; 0xea
 800edb2:	48b2      	ldr	r0, [pc, #712]	; (800f07c <_dtoa_r+0x2fc>)
 800edb4:	f002 fb26 	bl	8011404 <__assert_func>
 800edb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800edbc:	6005      	str	r5, [r0, #0]
 800edbe:	60c5      	str	r5, [r0, #12]
 800edc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edc2:	6819      	ldr	r1, [r3, #0]
 800edc4:	b151      	cbz	r1, 800eddc <_dtoa_r+0x5c>
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	604a      	str	r2, [r1, #4]
 800edca:	2301      	movs	r3, #1
 800edcc:	4093      	lsls	r3, r2
 800edce:	608b      	str	r3, [r1, #8]
 800edd0:	4620      	mov	r0, r4
 800edd2:	f001 fa99 	bl	8010308 <_Bfree>
 800edd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	1e3b      	subs	r3, r7, #0
 800edde:	bfb9      	ittee	lt
 800ede0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ede4:	9303      	strlt	r3, [sp, #12]
 800ede6:	2300      	movge	r3, #0
 800ede8:	f8c8 3000 	strge.w	r3, [r8]
 800edec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800edf0:	4ba3      	ldr	r3, [pc, #652]	; (800f080 <_dtoa_r+0x300>)
 800edf2:	bfbc      	itt	lt
 800edf4:	2201      	movlt	r2, #1
 800edf6:	f8c8 2000 	strlt.w	r2, [r8]
 800edfa:	ea33 0309 	bics.w	r3, r3, r9
 800edfe:	d11b      	bne.n	800ee38 <_dtoa_r+0xb8>
 800ee00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee06:	6013      	str	r3, [r2, #0]
 800ee08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee0c:	4333      	orrs	r3, r6
 800ee0e:	f000 857a 	beq.w	800f906 <_dtoa_r+0xb86>
 800ee12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee14:	b963      	cbnz	r3, 800ee30 <_dtoa_r+0xb0>
 800ee16:	4b9b      	ldr	r3, [pc, #620]	; (800f084 <_dtoa_r+0x304>)
 800ee18:	e024      	b.n	800ee64 <_dtoa_r+0xe4>
 800ee1a:	4b9b      	ldr	r3, [pc, #620]	; (800f088 <_dtoa_r+0x308>)
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	3308      	adds	r3, #8
 800ee20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee22:	6013      	str	r3, [r2, #0]
 800ee24:	9800      	ldr	r0, [sp, #0]
 800ee26:	b015      	add	sp, #84	; 0x54
 800ee28:	ecbd 8b02 	vpop	{d8}
 800ee2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee30:	4b94      	ldr	r3, [pc, #592]	; (800f084 <_dtoa_r+0x304>)
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	3303      	adds	r3, #3
 800ee36:	e7f3      	b.n	800ee20 <_dtoa_r+0xa0>
 800ee38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	ec51 0b17 	vmov	r0, r1, d7
 800ee42:	2300      	movs	r3, #0
 800ee44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee48:	f7f1 fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	b158      	cbz	r0, 800ee68 <_dtoa_r+0xe8>
 800ee50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee52:	2301      	movs	r3, #1
 800ee54:	6013      	str	r3, [r2, #0]
 800ee56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f000 8551 	beq.w	800f900 <_dtoa_r+0xb80>
 800ee5e:	488b      	ldr	r0, [pc, #556]	; (800f08c <_dtoa_r+0x30c>)
 800ee60:	6018      	str	r0, [r3, #0]
 800ee62:	1e43      	subs	r3, r0, #1
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	e7dd      	b.n	800ee24 <_dtoa_r+0xa4>
 800ee68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ee6c:	aa12      	add	r2, sp, #72	; 0x48
 800ee6e:	a913      	add	r1, sp, #76	; 0x4c
 800ee70:	4620      	mov	r0, r4
 800ee72:	f001 fdf1 	bl	8010a58 <__d2b>
 800ee76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee7a:	4683      	mov	fp, r0
 800ee7c:	2d00      	cmp	r5, #0
 800ee7e:	d07c      	beq.n	800ef7a <_dtoa_r+0x1fa>
 800ee80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ee86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ee8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ee92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ee96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ee9a:	4b7d      	ldr	r3, [pc, #500]	; (800f090 <_dtoa_r+0x310>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	4630      	mov	r0, r6
 800eea0:	4639      	mov	r1, r7
 800eea2:	f7f1 fa01 	bl	80002a8 <__aeabi_dsub>
 800eea6:	a36e      	add	r3, pc, #440	; (adr r3, 800f060 <_dtoa_r+0x2e0>)
 800eea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeac:	f7f1 fbb4 	bl	8000618 <__aeabi_dmul>
 800eeb0:	a36d      	add	r3, pc, #436	; (adr r3, 800f068 <_dtoa_r+0x2e8>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 f9f9 	bl	80002ac <__adddf3>
 800eeba:	4606      	mov	r6, r0
 800eebc:	4628      	mov	r0, r5
 800eebe:	460f      	mov	r7, r1
 800eec0:	f7f1 fb40 	bl	8000544 <__aeabi_i2d>
 800eec4:	a36a      	add	r3, pc, #424	; (adr r3, 800f070 <_dtoa_r+0x2f0>)
 800eec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeca:	f7f1 fba5 	bl	8000618 <__aeabi_dmul>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	4630      	mov	r0, r6
 800eed4:	4639      	mov	r1, r7
 800eed6:	f7f1 f9e9 	bl	80002ac <__adddf3>
 800eeda:	4606      	mov	r6, r0
 800eedc:	460f      	mov	r7, r1
 800eede:	f7f1 fe4b 	bl	8000b78 <__aeabi_d2iz>
 800eee2:	2200      	movs	r2, #0
 800eee4:	4682      	mov	sl, r0
 800eee6:	2300      	movs	r3, #0
 800eee8:	4630      	mov	r0, r6
 800eeea:	4639      	mov	r1, r7
 800eeec:	f7f1 fe06 	bl	8000afc <__aeabi_dcmplt>
 800eef0:	b148      	cbz	r0, 800ef06 <_dtoa_r+0x186>
 800eef2:	4650      	mov	r0, sl
 800eef4:	f7f1 fb26 	bl	8000544 <__aeabi_i2d>
 800eef8:	4632      	mov	r2, r6
 800eefa:	463b      	mov	r3, r7
 800eefc:	f7f1 fdf4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef00:	b908      	cbnz	r0, 800ef06 <_dtoa_r+0x186>
 800ef02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef06:	f1ba 0f16 	cmp.w	sl, #22
 800ef0a:	d854      	bhi.n	800efb6 <_dtoa_r+0x236>
 800ef0c:	4b61      	ldr	r3, [pc, #388]	; (800f094 <_dtoa_r+0x314>)
 800ef0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef1a:	f7f1 fdef 	bl	8000afc <__aeabi_dcmplt>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d04b      	beq.n	800efba <_dtoa_r+0x23a>
 800ef22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef26:	2300      	movs	r3, #0
 800ef28:	930e      	str	r3, [sp, #56]	; 0x38
 800ef2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef2c:	1b5d      	subs	r5, r3, r5
 800ef2e:	1e6b      	subs	r3, r5, #1
 800ef30:	9304      	str	r3, [sp, #16]
 800ef32:	bf43      	ittte	mi
 800ef34:	2300      	movmi	r3, #0
 800ef36:	f1c5 0801 	rsbmi	r8, r5, #1
 800ef3a:	9304      	strmi	r3, [sp, #16]
 800ef3c:	f04f 0800 	movpl.w	r8, #0
 800ef40:	f1ba 0f00 	cmp.w	sl, #0
 800ef44:	db3b      	blt.n	800efbe <_dtoa_r+0x23e>
 800ef46:	9b04      	ldr	r3, [sp, #16]
 800ef48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ef4c:	4453      	add	r3, sl
 800ef4e:	9304      	str	r3, [sp, #16]
 800ef50:	2300      	movs	r3, #0
 800ef52:	9306      	str	r3, [sp, #24]
 800ef54:	9b05      	ldr	r3, [sp, #20]
 800ef56:	2b09      	cmp	r3, #9
 800ef58:	d869      	bhi.n	800f02e <_dtoa_r+0x2ae>
 800ef5a:	2b05      	cmp	r3, #5
 800ef5c:	bfc4      	itt	gt
 800ef5e:	3b04      	subgt	r3, #4
 800ef60:	9305      	strgt	r3, [sp, #20]
 800ef62:	9b05      	ldr	r3, [sp, #20]
 800ef64:	f1a3 0302 	sub.w	r3, r3, #2
 800ef68:	bfcc      	ite	gt
 800ef6a:	2500      	movgt	r5, #0
 800ef6c:	2501      	movle	r5, #1
 800ef6e:	2b03      	cmp	r3, #3
 800ef70:	d869      	bhi.n	800f046 <_dtoa_r+0x2c6>
 800ef72:	e8df f003 	tbb	[pc, r3]
 800ef76:	4e2c      	.short	0x4e2c
 800ef78:	5a4c      	.short	0x5a4c
 800ef7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ef7e:	441d      	add	r5, r3
 800ef80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef84:	2b20      	cmp	r3, #32
 800ef86:	bfc1      	itttt	gt
 800ef88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ef90:	fa09 f303 	lslgt.w	r3, r9, r3
 800ef94:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ef98:	bfda      	itte	le
 800ef9a:	f1c3 0320 	rsble	r3, r3, #32
 800ef9e:	fa06 f003 	lslle.w	r0, r6, r3
 800efa2:	4318      	orrgt	r0, r3
 800efa4:	f7f1 fabe 	bl	8000524 <__aeabi_ui2d>
 800efa8:	2301      	movs	r3, #1
 800efaa:	4606      	mov	r6, r0
 800efac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800efb0:	3d01      	subs	r5, #1
 800efb2:	9310      	str	r3, [sp, #64]	; 0x40
 800efb4:	e771      	b.n	800ee9a <_dtoa_r+0x11a>
 800efb6:	2301      	movs	r3, #1
 800efb8:	e7b6      	b.n	800ef28 <_dtoa_r+0x1a8>
 800efba:	900e      	str	r0, [sp, #56]	; 0x38
 800efbc:	e7b5      	b.n	800ef2a <_dtoa_r+0x1aa>
 800efbe:	f1ca 0300 	rsb	r3, sl, #0
 800efc2:	9306      	str	r3, [sp, #24]
 800efc4:	2300      	movs	r3, #0
 800efc6:	eba8 080a 	sub.w	r8, r8, sl
 800efca:	930d      	str	r3, [sp, #52]	; 0x34
 800efcc:	e7c2      	b.n	800ef54 <_dtoa_r+0x1d4>
 800efce:	2300      	movs	r3, #0
 800efd0:	9308      	str	r3, [sp, #32]
 800efd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	dc39      	bgt.n	800f04c <_dtoa_r+0x2cc>
 800efd8:	f04f 0901 	mov.w	r9, #1
 800efdc:	f8cd 9004 	str.w	r9, [sp, #4]
 800efe0:	464b      	mov	r3, r9
 800efe2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800efe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800efe8:	2200      	movs	r2, #0
 800efea:	6042      	str	r2, [r0, #4]
 800efec:	2204      	movs	r2, #4
 800efee:	f102 0614 	add.w	r6, r2, #20
 800eff2:	429e      	cmp	r6, r3
 800eff4:	6841      	ldr	r1, [r0, #4]
 800eff6:	d92f      	bls.n	800f058 <_dtoa_r+0x2d8>
 800eff8:	4620      	mov	r0, r4
 800effa:	f001 f945 	bl	8010288 <_Balloc>
 800effe:	9000      	str	r0, [sp, #0]
 800f000:	2800      	cmp	r0, #0
 800f002:	d14b      	bne.n	800f09c <_dtoa_r+0x31c>
 800f004:	4b24      	ldr	r3, [pc, #144]	; (800f098 <_dtoa_r+0x318>)
 800f006:	4602      	mov	r2, r0
 800f008:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f00c:	e6d1      	b.n	800edb2 <_dtoa_r+0x32>
 800f00e:	2301      	movs	r3, #1
 800f010:	e7de      	b.n	800efd0 <_dtoa_r+0x250>
 800f012:	2300      	movs	r3, #0
 800f014:	9308      	str	r3, [sp, #32]
 800f016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f018:	eb0a 0903 	add.w	r9, sl, r3
 800f01c:	f109 0301 	add.w	r3, r9, #1
 800f020:	2b01      	cmp	r3, #1
 800f022:	9301      	str	r3, [sp, #4]
 800f024:	bfb8      	it	lt
 800f026:	2301      	movlt	r3, #1
 800f028:	e7dd      	b.n	800efe6 <_dtoa_r+0x266>
 800f02a:	2301      	movs	r3, #1
 800f02c:	e7f2      	b.n	800f014 <_dtoa_r+0x294>
 800f02e:	2501      	movs	r5, #1
 800f030:	2300      	movs	r3, #0
 800f032:	9305      	str	r3, [sp, #20]
 800f034:	9508      	str	r5, [sp, #32]
 800f036:	f04f 39ff 	mov.w	r9, #4294967295
 800f03a:	2200      	movs	r2, #0
 800f03c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f040:	2312      	movs	r3, #18
 800f042:	9209      	str	r2, [sp, #36]	; 0x24
 800f044:	e7cf      	b.n	800efe6 <_dtoa_r+0x266>
 800f046:	2301      	movs	r3, #1
 800f048:	9308      	str	r3, [sp, #32]
 800f04a:	e7f4      	b.n	800f036 <_dtoa_r+0x2b6>
 800f04c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f050:	f8cd 9004 	str.w	r9, [sp, #4]
 800f054:	464b      	mov	r3, r9
 800f056:	e7c6      	b.n	800efe6 <_dtoa_r+0x266>
 800f058:	3101      	adds	r1, #1
 800f05a:	6041      	str	r1, [r0, #4]
 800f05c:	0052      	lsls	r2, r2, #1
 800f05e:	e7c6      	b.n	800efee <_dtoa_r+0x26e>
 800f060:	636f4361 	.word	0x636f4361
 800f064:	3fd287a7 	.word	0x3fd287a7
 800f068:	8b60c8b3 	.word	0x8b60c8b3
 800f06c:	3fc68a28 	.word	0x3fc68a28
 800f070:	509f79fb 	.word	0x509f79fb
 800f074:	3fd34413 	.word	0x3fd34413
 800f078:	08012156 	.word	0x08012156
 800f07c:	0801216d 	.word	0x0801216d
 800f080:	7ff00000 	.word	0x7ff00000
 800f084:	08012152 	.word	0x08012152
 800f088:	08012149 	.word	0x08012149
 800f08c:	08011fc9 	.word	0x08011fc9
 800f090:	3ff80000 	.word	0x3ff80000
 800f094:	08012348 	.word	0x08012348
 800f098:	080121cc 	.word	0x080121cc
 800f09c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f09e:	9a00      	ldr	r2, [sp, #0]
 800f0a0:	601a      	str	r2, [r3, #0]
 800f0a2:	9b01      	ldr	r3, [sp, #4]
 800f0a4:	2b0e      	cmp	r3, #14
 800f0a6:	f200 80ad 	bhi.w	800f204 <_dtoa_r+0x484>
 800f0aa:	2d00      	cmp	r5, #0
 800f0ac:	f000 80aa 	beq.w	800f204 <_dtoa_r+0x484>
 800f0b0:	f1ba 0f00 	cmp.w	sl, #0
 800f0b4:	dd36      	ble.n	800f124 <_dtoa_r+0x3a4>
 800f0b6:	4ac3      	ldr	r2, [pc, #780]	; (800f3c4 <_dtoa_r+0x644>)
 800f0b8:	f00a 030f 	and.w	r3, sl, #15
 800f0bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0c0:	ed93 7b00 	vldr	d7, [r3]
 800f0c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f0c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f0cc:	eeb0 8a47 	vmov.f32	s16, s14
 800f0d0:	eef0 8a67 	vmov.f32	s17, s15
 800f0d4:	d016      	beq.n	800f104 <_dtoa_r+0x384>
 800f0d6:	4bbc      	ldr	r3, [pc, #752]	; (800f3c8 <_dtoa_r+0x648>)
 800f0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f0dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0e0:	f7f1 fbc4 	bl	800086c <__aeabi_ddiv>
 800f0e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0e8:	f007 070f 	and.w	r7, r7, #15
 800f0ec:	2503      	movs	r5, #3
 800f0ee:	4eb6      	ldr	r6, [pc, #728]	; (800f3c8 <_dtoa_r+0x648>)
 800f0f0:	b957      	cbnz	r7, 800f108 <_dtoa_r+0x388>
 800f0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0f6:	ec53 2b18 	vmov	r2, r3, d8
 800f0fa:	f7f1 fbb7 	bl	800086c <__aeabi_ddiv>
 800f0fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f102:	e029      	b.n	800f158 <_dtoa_r+0x3d8>
 800f104:	2502      	movs	r5, #2
 800f106:	e7f2      	b.n	800f0ee <_dtoa_r+0x36e>
 800f108:	07f9      	lsls	r1, r7, #31
 800f10a:	d508      	bpl.n	800f11e <_dtoa_r+0x39e>
 800f10c:	ec51 0b18 	vmov	r0, r1, d8
 800f110:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f114:	f7f1 fa80 	bl	8000618 <__aeabi_dmul>
 800f118:	ec41 0b18 	vmov	d8, r0, r1
 800f11c:	3501      	adds	r5, #1
 800f11e:	107f      	asrs	r7, r7, #1
 800f120:	3608      	adds	r6, #8
 800f122:	e7e5      	b.n	800f0f0 <_dtoa_r+0x370>
 800f124:	f000 80a6 	beq.w	800f274 <_dtoa_r+0x4f4>
 800f128:	f1ca 0600 	rsb	r6, sl, #0
 800f12c:	4ba5      	ldr	r3, [pc, #660]	; (800f3c4 <_dtoa_r+0x644>)
 800f12e:	4fa6      	ldr	r7, [pc, #664]	; (800f3c8 <_dtoa_r+0x648>)
 800f130:	f006 020f 	and.w	r2, r6, #15
 800f134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f140:	f7f1 fa6a 	bl	8000618 <__aeabi_dmul>
 800f144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f148:	1136      	asrs	r6, r6, #4
 800f14a:	2300      	movs	r3, #0
 800f14c:	2502      	movs	r5, #2
 800f14e:	2e00      	cmp	r6, #0
 800f150:	f040 8085 	bne.w	800f25e <_dtoa_r+0x4de>
 800f154:	2b00      	cmp	r3, #0
 800f156:	d1d2      	bne.n	800f0fe <_dtoa_r+0x37e>
 800f158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 808c 	beq.w	800f278 <_dtoa_r+0x4f8>
 800f160:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f164:	4b99      	ldr	r3, [pc, #612]	; (800f3cc <_dtoa_r+0x64c>)
 800f166:	2200      	movs	r2, #0
 800f168:	4630      	mov	r0, r6
 800f16a:	4639      	mov	r1, r7
 800f16c:	f7f1 fcc6 	bl	8000afc <__aeabi_dcmplt>
 800f170:	2800      	cmp	r0, #0
 800f172:	f000 8081 	beq.w	800f278 <_dtoa_r+0x4f8>
 800f176:	9b01      	ldr	r3, [sp, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d07d      	beq.n	800f278 <_dtoa_r+0x4f8>
 800f17c:	f1b9 0f00 	cmp.w	r9, #0
 800f180:	dd3c      	ble.n	800f1fc <_dtoa_r+0x47c>
 800f182:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f186:	9307      	str	r3, [sp, #28]
 800f188:	2200      	movs	r2, #0
 800f18a:	4b91      	ldr	r3, [pc, #580]	; (800f3d0 <_dtoa_r+0x650>)
 800f18c:	4630      	mov	r0, r6
 800f18e:	4639      	mov	r1, r7
 800f190:	f7f1 fa42 	bl	8000618 <__aeabi_dmul>
 800f194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f198:	3501      	adds	r5, #1
 800f19a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f19e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f7f1 f9ce 	bl	8000544 <__aeabi_i2d>
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	463b      	mov	r3, r7
 800f1ac:	f7f1 fa34 	bl	8000618 <__aeabi_dmul>
 800f1b0:	4b88      	ldr	r3, [pc, #544]	; (800f3d4 <_dtoa_r+0x654>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f7f1 f87a 	bl	80002ac <__adddf3>
 800f1b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1c0:	9303      	str	r3, [sp, #12]
 800f1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d15c      	bne.n	800f282 <_dtoa_r+0x502>
 800f1c8:	4b83      	ldr	r3, [pc, #524]	; (800f3d8 <_dtoa_r+0x658>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	f7f1 f86a 	bl	80002a8 <__aeabi_dsub>
 800f1d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1d8:	4606      	mov	r6, r0
 800f1da:	460f      	mov	r7, r1
 800f1dc:	f7f1 fcac 	bl	8000b38 <__aeabi_dcmpgt>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	f040 8296 	bne.w	800f712 <_dtoa_r+0x992>
 800f1e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1f0:	4639      	mov	r1, r7
 800f1f2:	f7f1 fc83 	bl	8000afc <__aeabi_dcmplt>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f040 8288 	bne.w	800f70c <_dtoa_r+0x98c>
 800f1fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f206:	2b00      	cmp	r3, #0
 800f208:	f2c0 8158 	blt.w	800f4bc <_dtoa_r+0x73c>
 800f20c:	f1ba 0f0e 	cmp.w	sl, #14
 800f210:	f300 8154 	bgt.w	800f4bc <_dtoa_r+0x73c>
 800f214:	4b6b      	ldr	r3, [pc, #428]	; (800f3c4 <_dtoa_r+0x644>)
 800f216:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f21a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f220:	2b00      	cmp	r3, #0
 800f222:	f280 80e3 	bge.w	800f3ec <_dtoa_r+0x66c>
 800f226:	9b01      	ldr	r3, [sp, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f300 80df 	bgt.w	800f3ec <_dtoa_r+0x66c>
 800f22e:	f040 826d 	bne.w	800f70c <_dtoa_r+0x98c>
 800f232:	4b69      	ldr	r3, [pc, #420]	; (800f3d8 <_dtoa_r+0x658>)
 800f234:	2200      	movs	r2, #0
 800f236:	4640      	mov	r0, r8
 800f238:	4649      	mov	r1, r9
 800f23a:	f7f1 f9ed 	bl	8000618 <__aeabi_dmul>
 800f23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f242:	f7f1 fc6f 	bl	8000b24 <__aeabi_dcmpge>
 800f246:	9e01      	ldr	r6, [sp, #4]
 800f248:	4637      	mov	r7, r6
 800f24a:	2800      	cmp	r0, #0
 800f24c:	f040 8243 	bne.w	800f6d6 <_dtoa_r+0x956>
 800f250:	9d00      	ldr	r5, [sp, #0]
 800f252:	2331      	movs	r3, #49	; 0x31
 800f254:	f805 3b01 	strb.w	r3, [r5], #1
 800f258:	f10a 0a01 	add.w	sl, sl, #1
 800f25c:	e23f      	b.n	800f6de <_dtoa_r+0x95e>
 800f25e:	07f2      	lsls	r2, r6, #31
 800f260:	d505      	bpl.n	800f26e <_dtoa_r+0x4ee>
 800f262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f266:	f7f1 f9d7 	bl	8000618 <__aeabi_dmul>
 800f26a:	3501      	adds	r5, #1
 800f26c:	2301      	movs	r3, #1
 800f26e:	1076      	asrs	r6, r6, #1
 800f270:	3708      	adds	r7, #8
 800f272:	e76c      	b.n	800f14e <_dtoa_r+0x3ce>
 800f274:	2502      	movs	r5, #2
 800f276:	e76f      	b.n	800f158 <_dtoa_r+0x3d8>
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f27e:	930c      	str	r3, [sp, #48]	; 0x30
 800f280:	e78d      	b.n	800f19e <_dtoa_r+0x41e>
 800f282:	9900      	ldr	r1, [sp, #0]
 800f284:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f288:	4b4e      	ldr	r3, [pc, #312]	; (800f3c4 <_dtoa_r+0x644>)
 800f28a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f28e:	4401      	add	r1, r0
 800f290:	9102      	str	r1, [sp, #8]
 800f292:	9908      	ldr	r1, [sp, #32]
 800f294:	eeb0 8a47 	vmov.f32	s16, s14
 800f298:	eef0 8a67 	vmov.f32	s17, s15
 800f29c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f2a4:	2900      	cmp	r1, #0
 800f2a6:	d045      	beq.n	800f334 <_dtoa_r+0x5b4>
 800f2a8:	494c      	ldr	r1, [pc, #304]	; (800f3dc <_dtoa_r+0x65c>)
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	f7f1 fade 	bl	800086c <__aeabi_ddiv>
 800f2b0:	ec53 2b18 	vmov	r2, r3, d8
 800f2b4:	f7f0 fff8 	bl	80002a8 <__aeabi_dsub>
 800f2b8:	9d00      	ldr	r5, [sp, #0]
 800f2ba:	ec41 0b18 	vmov	d8, r0, r1
 800f2be:	4639      	mov	r1, r7
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7f1 fc59 	bl	8000b78 <__aeabi_d2iz>
 800f2c6:	900c      	str	r0, [sp, #48]	; 0x30
 800f2c8:	f7f1 f93c 	bl	8000544 <__aeabi_i2d>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	4639      	mov	r1, r7
 800f2d4:	f7f0 ffe8 	bl	80002a8 <__aeabi_dsub>
 800f2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2da:	3330      	adds	r3, #48	; 0x30
 800f2dc:	f805 3b01 	strb.w	r3, [r5], #1
 800f2e0:	ec53 2b18 	vmov	r2, r3, d8
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	460f      	mov	r7, r1
 800f2e8:	f7f1 fc08 	bl	8000afc <__aeabi_dcmplt>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d165      	bne.n	800f3bc <_dtoa_r+0x63c>
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	463b      	mov	r3, r7
 800f2f4:	4935      	ldr	r1, [pc, #212]	; (800f3cc <_dtoa_r+0x64c>)
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	f7f0 ffd6 	bl	80002a8 <__aeabi_dsub>
 800f2fc:	ec53 2b18 	vmov	r2, r3, d8
 800f300:	f7f1 fbfc 	bl	8000afc <__aeabi_dcmplt>
 800f304:	2800      	cmp	r0, #0
 800f306:	f040 80b9 	bne.w	800f47c <_dtoa_r+0x6fc>
 800f30a:	9b02      	ldr	r3, [sp, #8]
 800f30c:	429d      	cmp	r5, r3
 800f30e:	f43f af75 	beq.w	800f1fc <_dtoa_r+0x47c>
 800f312:	4b2f      	ldr	r3, [pc, #188]	; (800f3d0 <_dtoa_r+0x650>)
 800f314:	ec51 0b18 	vmov	r0, r1, d8
 800f318:	2200      	movs	r2, #0
 800f31a:	f7f1 f97d 	bl	8000618 <__aeabi_dmul>
 800f31e:	4b2c      	ldr	r3, [pc, #176]	; (800f3d0 <_dtoa_r+0x650>)
 800f320:	ec41 0b18 	vmov	d8, r0, r1
 800f324:	2200      	movs	r2, #0
 800f326:	4630      	mov	r0, r6
 800f328:	4639      	mov	r1, r7
 800f32a:	f7f1 f975 	bl	8000618 <__aeabi_dmul>
 800f32e:	4606      	mov	r6, r0
 800f330:	460f      	mov	r7, r1
 800f332:	e7c4      	b.n	800f2be <_dtoa_r+0x53e>
 800f334:	ec51 0b17 	vmov	r0, r1, d7
 800f338:	f7f1 f96e 	bl	8000618 <__aeabi_dmul>
 800f33c:	9b02      	ldr	r3, [sp, #8]
 800f33e:	9d00      	ldr	r5, [sp, #0]
 800f340:	930c      	str	r3, [sp, #48]	; 0x30
 800f342:	ec41 0b18 	vmov	d8, r0, r1
 800f346:	4639      	mov	r1, r7
 800f348:	4630      	mov	r0, r6
 800f34a:	f7f1 fc15 	bl	8000b78 <__aeabi_d2iz>
 800f34e:	9011      	str	r0, [sp, #68]	; 0x44
 800f350:	f7f1 f8f8 	bl	8000544 <__aeabi_i2d>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4630      	mov	r0, r6
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f0 ffa4 	bl	80002a8 <__aeabi_dsub>
 800f360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f362:	3330      	adds	r3, #48	; 0x30
 800f364:	f805 3b01 	strb.w	r3, [r5], #1
 800f368:	9b02      	ldr	r3, [sp, #8]
 800f36a:	429d      	cmp	r5, r3
 800f36c:	4606      	mov	r6, r0
 800f36e:	460f      	mov	r7, r1
 800f370:	f04f 0200 	mov.w	r2, #0
 800f374:	d134      	bne.n	800f3e0 <_dtoa_r+0x660>
 800f376:	4b19      	ldr	r3, [pc, #100]	; (800f3dc <_dtoa_r+0x65c>)
 800f378:	ec51 0b18 	vmov	r0, r1, d8
 800f37c:	f7f0 ff96 	bl	80002ac <__adddf3>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4630      	mov	r0, r6
 800f386:	4639      	mov	r1, r7
 800f388:	f7f1 fbd6 	bl	8000b38 <__aeabi_dcmpgt>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d175      	bne.n	800f47c <_dtoa_r+0x6fc>
 800f390:	ec53 2b18 	vmov	r2, r3, d8
 800f394:	4911      	ldr	r1, [pc, #68]	; (800f3dc <_dtoa_r+0x65c>)
 800f396:	2000      	movs	r0, #0
 800f398:	f7f0 ff86 	bl	80002a8 <__aeabi_dsub>
 800f39c:	4602      	mov	r2, r0
 800f39e:	460b      	mov	r3, r1
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f1 fbaa 	bl	8000afc <__aeabi_dcmplt>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	f43f af27 	beq.w	800f1fc <_dtoa_r+0x47c>
 800f3ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3b0:	1e6b      	subs	r3, r5, #1
 800f3b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f3b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3b8:	2b30      	cmp	r3, #48	; 0x30
 800f3ba:	d0f8      	beq.n	800f3ae <_dtoa_r+0x62e>
 800f3bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f3c0:	e04a      	b.n	800f458 <_dtoa_r+0x6d8>
 800f3c2:	bf00      	nop
 800f3c4:	08012348 	.word	0x08012348
 800f3c8:	08012320 	.word	0x08012320
 800f3cc:	3ff00000 	.word	0x3ff00000
 800f3d0:	40240000 	.word	0x40240000
 800f3d4:	401c0000 	.word	0x401c0000
 800f3d8:	40140000 	.word	0x40140000
 800f3dc:	3fe00000 	.word	0x3fe00000
 800f3e0:	4baf      	ldr	r3, [pc, #700]	; (800f6a0 <_dtoa_r+0x920>)
 800f3e2:	f7f1 f919 	bl	8000618 <__aeabi_dmul>
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	460f      	mov	r7, r1
 800f3ea:	e7ac      	b.n	800f346 <_dtoa_r+0x5c6>
 800f3ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3f0:	9d00      	ldr	r5, [sp, #0]
 800f3f2:	4642      	mov	r2, r8
 800f3f4:	464b      	mov	r3, r9
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	4639      	mov	r1, r7
 800f3fa:	f7f1 fa37 	bl	800086c <__aeabi_ddiv>
 800f3fe:	f7f1 fbbb 	bl	8000b78 <__aeabi_d2iz>
 800f402:	9002      	str	r0, [sp, #8]
 800f404:	f7f1 f89e 	bl	8000544 <__aeabi_i2d>
 800f408:	4642      	mov	r2, r8
 800f40a:	464b      	mov	r3, r9
 800f40c:	f7f1 f904 	bl	8000618 <__aeabi_dmul>
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	4630      	mov	r0, r6
 800f416:	4639      	mov	r1, r7
 800f418:	f7f0 ff46 	bl	80002a8 <__aeabi_dsub>
 800f41c:	9e02      	ldr	r6, [sp, #8]
 800f41e:	9f01      	ldr	r7, [sp, #4]
 800f420:	3630      	adds	r6, #48	; 0x30
 800f422:	f805 6b01 	strb.w	r6, [r5], #1
 800f426:	9e00      	ldr	r6, [sp, #0]
 800f428:	1bae      	subs	r6, r5, r6
 800f42a:	42b7      	cmp	r7, r6
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	d137      	bne.n	800f4a2 <_dtoa_r+0x722>
 800f432:	f7f0 ff3b 	bl	80002ac <__adddf3>
 800f436:	4642      	mov	r2, r8
 800f438:	464b      	mov	r3, r9
 800f43a:	4606      	mov	r6, r0
 800f43c:	460f      	mov	r7, r1
 800f43e:	f7f1 fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 800f442:	b9c8      	cbnz	r0, 800f478 <_dtoa_r+0x6f8>
 800f444:	4642      	mov	r2, r8
 800f446:	464b      	mov	r3, r9
 800f448:	4630      	mov	r0, r6
 800f44a:	4639      	mov	r1, r7
 800f44c:	f7f1 fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f450:	b110      	cbz	r0, 800f458 <_dtoa_r+0x6d8>
 800f452:	9b02      	ldr	r3, [sp, #8]
 800f454:	07d9      	lsls	r1, r3, #31
 800f456:	d40f      	bmi.n	800f478 <_dtoa_r+0x6f8>
 800f458:	4620      	mov	r0, r4
 800f45a:	4659      	mov	r1, fp
 800f45c:	f000 ff54 	bl	8010308 <_Bfree>
 800f460:	2300      	movs	r3, #0
 800f462:	702b      	strb	r3, [r5, #0]
 800f464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f466:	f10a 0001 	add.w	r0, sl, #1
 800f46a:	6018      	str	r0, [r3, #0]
 800f46c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f43f acd8 	beq.w	800ee24 <_dtoa_r+0xa4>
 800f474:	601d      	str	r5, [r3, #0]
 800f476:	e4d5      	b.n	800ee24 <_dtoa_r+0xa4>
 800f478:	f8cd a01c 	str.w	sl, [sp, #28]
 800f47c:	462b      	mov	r3, r5
 800f47e:	461d      	mov	r5, r3
 800f480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f484:	2a39      	cmp	r2, #57	; 0x39
 800f486:	d108      	bne.n	800f49a <_dtoa_r+0x71a>
 800f488:	9a00      	ldr	r2, [sp, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d1f7      	bne.n	800f47e <_dtoa_r+0x6fe>
 800f48e:	9a07      	ldr	r2, [sp, #28]
 800f490:	9900      	ldr	r1, [sp, #0]
 800f492:	3201      	adds	r2, #1
 800f494:	9207      	str	r2, [sp, #28]
 800f496:	2230      	movs	r2, #48	; 0x30
 800f498:	700a      	strb	r2, [r1, #0]
 800f49a:	781a      	ldrb	r2, [r3, #0]
 800f49c:	3201      	adds	r2, #1
 800f49e:	701a      	strb	r2, [r3, #0]
 800f4a0:	e78c      	b.n	800f3bc <_dtoa_r+0x63c>
 800f4a2:	4b7f      	ldr	r3, [pc, #508]	; (800f6a0 <_dtoa_r+0x920>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f7f1 f8b7 	bl	8000618 <__aeabi_dmul>
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	460f      	mov	r7, r1
 800f4b2:	f7f1 fb19 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d09b      	beq.n	800f3f2 <_dtoa_r+0x672>
 800f4ba:	e7cd      	b.n	800f458 <_dtoa_r+0x6d8>
 800f4bc:	9a08      	ldr	r2, [sp, #32]
 800f4be:	2a00      	cmp	r2, #0
 800f4c0:	f000 80c4 	beq.w	800f64c <_dtoa_r+0x8cc>
 800f4c4:	9a05      	ldr	r2, [sp, #20]
 800f4c6:	2a01      	cmp	r2, #1
 800f4c8:	f300 80a8 	bgt.w	800f61c <_dtoa_r+0x89c>
 800f4cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4ce:	2a00      	cmp	r2, #0
 800f4d0:	f000 80a0 	beq.w	800f614 <_dtoa_r+0x894>
 800f4d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f4d8:	9e06      	ldr	r6, [sp, #24]
 800f4da:	4645      	mov	r5, r8
 800f4dc:	9a04      	ldr	r2, [sp, #16]
 800f4de:	2101      	movs	r1, #1
 800f4e0:	441a      	add	r2, r3
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	4498      	add	r8, r3
 800f4e6:	9204      	str	r2, [sp, #16]
 800f4e8:	f001 f814 	bl	8010514 <__i2b>
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	dd0b      	ble.n	800f50a <_dtoa_r+0x78a>
 800f4f2:	9b04      	ldr	r3, [sp, #16]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	dd08      	ble.n	800f50a <_dtoa_r+0x78a>
 800f4f8:	42ab      	cmp	r3, r5
 800f4fa:	9a04      	ldr	r2, [sp, #16]
 800f4fc:	bfa8      	it	ge
 800f4fe:	462b      	movge	r3, r5
 800f500:	eba8 0803 	sub.w	r8, r8, r3
 800f504:	1aed      	subs	r5, r5, r3
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	9b06      	ldr	r3, [sp, #24]
 800f50c:	b1fb      	cbz	r3, 800f54e <_dtoa_r+0x7ce>
 800f50e:	9b08      	ldr	r3, [sp, #32]
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 809f 	beq.w	800f654 <_dtoa_r+0x8d4>
 800f516:	2e00      	cmp	r6, #0
 800f518:	dd11      	ble.n	800f53e <_dtoa_r+0x7be>
 800f51a:	4639      	mov	r1, r7
 800f51c:	4632      	mov	r2, r6
 800f51e:	4620      	mov	r0, r4
 800f520:	f001 f8b4 	bl	801068c <__pow5mult>
 800f524:	465a      	mov	r2, fp
 800f526:	4601      	mov	r1, r0
 800f528:	4607      	mov	r7, r0
 800f52a:	4620      	mov	r0, r4
 800f52c:	f001 f808 	bl	8010540 <__multiply>
 800f530:	4659      	mov	r1, fp
 800f532:	9007      	str	r0, [sp, #28]
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fee7 	bl	8010308 <_Bfree>
 800f53a:	9b07      	ldr	r3, [sp, #28]
 800f53c:	469b      	mov	fp, r3
 800f53e:	9b06      	ldr	r3, [sp, #24]
 800f540:	1b9a      	subs	r2, r3, r6
 800f542:	d004      	beq.n	800f54e <_dtoa_r+0x7ce>
 800f544:	4659      	mov	r1, fp
 800f546:	4620      	mov	r0, r4
 800f548:	f001 f8a0 	bl	801068c <__pow5mult>
 800f54c:	4683      	mov	fp, r0
 800f54e:	2101      	movs	r1, #1
 800f550:	4620      	mov	r0, r4
 800f552:	f000 ffdf 	bl	8010514 <__i2b>
 800f556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f558:	2b00      	cmp	r3, #0
 800f55a:	4606      	mov	r6, r0
 800f55c:	dd7c      	ble.n	800f658 <_dtoa_r+0x8d8>
 800f55e:	461a      	mov	r2, r3
 800f560:	4601      	mov	r1, r0
 800f562:	4620      	mov	r0, r4
 800f564:	f001 f892 	bl	801068c <__pow5mult>
 800f568:	9b05      	ldr	r3, [sp, #20]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	4606      	mov	r6, r0
 800f56e:	dd76      	ble.n	800f65e <_dtoa_r+0x8de>
 800f570:	2300      	movs	r3, #0
 800f572:	9306      	str	r3, [sp, #24]
 800f574:	6933      	ldr	r3, [r6, #16]
 800f576:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f57a:	6918      	ldr	r0, [r3, #16]
 800f57c:	f000 ff7a 	bl	8010474 <__hi0bits>
 800f580:	f1c0 0020 	rsb	r0, r0, #32
 800f584:	9b04      	ldr	r3, [sp, #16]
 800f586:	4418      	add	r0, r3
 800f588:	f010 001f 	ands.w	r0, r0, #31
 800f58c:	f000 8086 	beq.w	800f69c <_dtoa_r+0x91c>
 800f590:	f1c0 0320 	rsb	r3, r0, #32
 800f594:	2b04      	cmp	r3, #4
 800f596:	dd7f      	ble.n	800f698 <_dtoa_r+0x918>
 800f598:	f1c0 001c 	rsb	r0, r0, #28
 800f59c:	9b04      	ldr	r3, [sp, #16]
 800f59e:	4403      	add	r3, r0
 800f5a0:	4480      	add	r8, r0
 800f5a2:	4405      	add	r5, r0
 800f5a4:	9304      	str	r3, [sp, #16]
 800f5a6:	f1b8 0f00 	cmp.w	r8, #0
 800f5aa:	dd05      	ble.n	800f5b8 <_dtoa_r+0x838>
 800f5ac:	4659      	mov	r1, fp
 800f5ae:	4642      	mov	r2, r8
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f001 f8c5 	bl	8010740 <__lshift>
 800f5b6:	4683      	mov	fp, r0
 800f5b8:	9b04      	ldr	r3, [sp, #16]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	dd05      	ble.n	800f5ca <_dtoa_r+0x84a>
 800f5be:	4631      	mov	r1, r6
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f001 f8bc 	bl	8010740 <__lshift>
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d069      	beq.n	800f6a4 <_dtoa_r+0x924>
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	4658      	mov	r0, fp
 800f5d4:	f001 f920 	bl	8010818 <__mcmp>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	da63      	bge.n	800f6a4 <_dtoa_r+0x924>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4659      	mov	r1, fp
 800f5e0:	220a      	movs	r2, #10
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f000 feb2 	bl	801034c <__multadd>
 800f5e8:	9b08      	ldr	r3, [sp, #32]
 800f5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5ee:	4683      	mov	fp, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f000 818f 	beq.w	800f914 <_dtoa_r+0xb94>
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	220a      	movs	r2, #10
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f000 fea5 	bl	801034c <__multadd>
 800f602:	f1b9 0f00 	cmp.w	r9, #0
 800f606:	4607      	mov	r7, r0
 800f608:	f300 808e 	bgt.w	800f728 <_dtoa_r+0x9a8>
 800f60c:	9b05      	ldr	r3, [sp, #20]
 800f60e:	2b02      	cmp	r3, #2
 800f610:	dc50      	bgt.n	800f6b4 <_dtoa_r+0x934>
 800f612:	e089      	b.n	800f728 <_dtoa_r+0x9a8>
 800f614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f61a:	e75d      	b.n	800f4d8 <_dtoa_r+0x758>
 800f61c:	9b01      	ldr	r3, [sp, #4]
 800f61e:	1e5e      	subs	r6, r3, #1
 800f620:	9b06      	ldr	r3, [sp, #24]
 800f622:	42b3      	cmp	r3, r6
 800f624:	bfbf      	itttt	lt
 800f626:	9b06      	ldrlt	r3, [sp, #24]
 800f628:	9606      	strlt	r6, [sp, #24]
 800f62a:	1af2      	sublt	r2, r6, r3
 800f62c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f62e:	bfb6      	itet	lt
 800f630:	189b      	addlt	r3, r3, r2
 800f632:	1b9e      	subge	r6, r3, r6
 800f634:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f636:	9b01      	ldr	r3, [sp, #4]
 800f638:	bfb8      	it	lt
 800f63a:	2600      	movlt	r6, #0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	bfb5      	itete	lt
 800f640:	eba8 0503 	sublt.w	r5, r8, r3
 800f644:	9b01      	ldrge	r3, [sp, #4]
 800f646:	2300      	movlt	r3, #0
 800f648:	4645      	movge	r5, r8
 800f64a:	e747      	b.n	800f4dc <_dtoa_r+0x75c>
 800f64c:	9e06      	ldr	r6, [sp, #24]
 800f64e:	9f08      	ldr	r7, [sp, #32]
 800f650:	4645      	mov	r5, r8
 800f652:	e74c      	b.n	800f4ee <_dtoa_r+0x76e>
 800f654:	9a06      	ldr	r2, [sp, #24]
 800f656:	e775      	b.n	800f544 <_dtoa_r+0x7c4>
 800f658:	9b05      	ldr	r3, [sp, #20]
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	dc18      	bgt.n	800f690 <_dtoa_r+0x910>
 800f65e:	9b02      	ldr	r3, [sp, #8]
 800f660:	b9b3      	cbnz	r3, 800f690 <_dtoa_r+0x910>
 800f662:	9b03      	ldr	r3, [sp, #12]
 800f664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f668:	b9a3      	cbnz	r3, 800f694 <_dtoa_r+0x914>
 800f66a:	9b03      	ldr	r3, [sp, #12]
 800f66c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f670:	0d1b      	lsrs	r3, r3, #20
 800f672:	051b      	lsls	r3, r3, #20
 800f674:	b12b      	cbz	r3, 800f682 <_dtoa_r+0x902>
 800f676:	9b04      	ldr	r3, [sp, #16]
 800f678:	3301      	adds	r3, #1
 800f67a:	9304      	str	r3, [sp, #16]
 800f67c:	f108 0801 	add.w	r8, r8, #1
 800f680:	2301      	movs	r3, #1
 800f682:	9306      	str	r3, [sp, #24]
 800f684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f686:	2b00      	cmp	r3, #0
 800f688:	f47f af74 	bne.w	800f574 <_dtoa_r+0x7f4>
 800f68c:	2001      	movs	r0, #1
 800f68e:	e779      	b.n	800f584 <_dtoa_r+0x804>
 800f690:	2300      	movs	r3, #0
 800f692:	e7f6      	b.n	800f682 <_dtoa_r+0x902>
 800f694:	9b02      	ldr	r3, [sp, #8]
 800f696:	e7f4      	b.n	800f682 <_dtoa_r+0x902>
 800f698:	d085      	beq.n	800f5a6 <_dtoa_r+0x826>
 800f69a:	4618      	mov	r0, r3
 800f69c:	301c      	adds	r0, #28
 800f69e:	e77d      	b.n	800f59c <_dtoa_r+0x81c>
 800f6a0:	40240000 	.word	0x40240000
 800f6a4:	9b01      	ldr	r3, [sp, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dc38      	bgt.n	800f71c <_dtoa_r+0x99c>
 800f6aa:	9b05      	ldr	r3, [sp, #20]
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	dd35      	ble.n	800f71c <_dtoa_r+0x99c>
 800f6b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f6b4:	f1b9 0f00 	cmp.w	r9, #0
 800f6b8:	d10d      	bne.n	800f6d6 <_dtoa_r+0x956>
 800f6ba:	4631      	mov	r1, r6
 800f6bc:	464b      	mov	r3, r9
 800f6be:	2205      	movs	r2, #5
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f000 fe43 	bl	801034c <__multadd>
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	4658      	mov	r0, fp
 800f6cc:	f001 f8a4 	bl	8010818 <__mcmp>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	f73f adbd 	bgt.w	800f250 <_dtoa_r+0x4d0>
 800f6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d8:	9d00      	ldr	r5, [sp, #0]
 800f6da:	ea6f 0a03 	mvn.w	sl, r3
 800f6de:	f04f 0800 	mov.w	r8, #0
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 fe0f 	bl	8010308 <_Bfree>
 800f6ea:	2f00      	cmp	r7, #0
 800f6ec:	f43f aeb4 	beq.w	800f458 <_dtoa_r+0x6d8>
 800f6f0:	f1b8 0f00 	cmp.w	r8, #0
 800f6f4:	d005      	beq.n	800f702 <_dtoa_r+0x982>
 800f6f6:	45b8      	cmp	r8, r7
 800f6f8:	d003      	beq.n	800f702 <_dtoa_r+0x982>
 800f6fa:	4641      	mov	r1, r8
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 fe03 	bl	8010308 <_Bfree>
 800f702:	4639      	mov	r1, r7
 800f704:	4620      	mov	r0, r4
 800f706:	f000 fdff 	bl	8010308 <_Bfree>
 800f70a:	e6a5      	b.n	800f458 <_dtoa_r+0x6d8>
 800f70c:	2600      	movs	r6, #0
 800f70e:	4637      	mov	r7, r6
 800f710:	e7e1      	b.n	800f6d6 <_dtoa_r+0x956>
 800f712:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f718:	4637      	mov	r7, r6
 800f71a:	e599      	b.n	800f250 <_dtoa_r+0x4d0>
 800f71c:	9b08      	ldr	r3, [sp, #32]
 800f71e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 80fd 	beq.w	800f922 <_dtoa_r+0xba2>
 800f728:	2d00      	cmp	r5, #0
 800f72a:	dd05      	ble.n	800f738 <_dtoa_r+0x9b8>
 800f72c:	4639      	mov	r1, r7
 800f72e:	462a      	mov	r2, r5
 800f730:	4620      	mov	r0, r4
 800f732:	f001 f805 	bl	8010740 <__lshift>
 800f736:	4607      	mov	r7, r0
 800f738:	9b06      	ldr	r3, [sp, #24]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d05c      	beq.n	800f7f8 <_dtoa_r+0xa78>
 800f73e:	6879      	ldr	r1, [r7, #4]
 800f740:	4620      	mov	r0, r4
 800f742:	f000 fda1 	bl	8010288 <_Balloc>
 800f746:	4605      	mov	r5, r0
 800f748:	b928      	cbnz	r0, 800f756 <_dtoa_r+0x9d6>
 800f74a:	4b80      	ldr	r3, [pc, #512]	; (800f94c <_dtoa_r+0xbcc>)
 800f74c:	4602      	mov	r2, r0
 800f74e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f752:	f7ff bb2e 	b.w	800edb2 <_dtoa_r+0x32>
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	3202      	adds	r2, #2
 800f75a:	0092      	lsls	r2, r2, #2
 800f75c:	f107 010c 	add.w	r1, r7, #12
 800f760:	300c      	adds	r0, #12
 800f762:	f000 fd76 	bl	8010252 <memcpy>
 800f766:	2201      	movs	r2, #1
 800f768:	4629      	mov	r1, r5
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 ffe8 	bl	8010740 <__lshift>
 800f770:	9b00      	ldr	r3, [sp, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	9301      	str	r3, [sp, #4]
 800f776:	9b00      	ldr	r3, [sp, #0]
 800f778:	444b      	add	r3, r9
 800f77a:	9307      	str	r3, [sp, #28]
 800f77c:	9b02      	ldr	r3, [sp, #8]
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	46b8      	mov	r8, r7
 800f784:	9306      	str	r3, [sp, #24]
 800f786:	4607      	mov	r7, r0
 800f788:	9b01      	ldr	r3, [sp, #4]
 800f78a:	4631      	mov	r1, r6
 800f78c:	3b01      	subs	r3, #1
 800f78e:	4658      	mov	r0, fp
 800f790:	9302      	str	r3, [sp, #8]
 800f792:	f7ff fa67 	bl	800ec64 <quorem>
 800f796:	4603      	mov	r3, r0
 800f798:	3330      	adds	r3, #48	; 0x30
 800f79a:	9004      	str	r0, [sp, #16]
 800f79c:	4641      	mov	r1, r8
 800f79e:	4658      	mov	r0, fp
 800f7a0:	9308      	str	r3, [sp, #32]
 800f7a2:	f001 f839 	bl	8010818 <__mcmp>
 800f7a6:	463a      	mov	r2, r7
 800f7a8:	4681      	mov	r9, r0
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f001 f84f 	bl	8010850 <__mdiff>
 800f7b2:	68c2      	ldr	r2, [r0, #12]
 800f7b4:	9b08      	ldr	r3, [sp, #32]
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	bb02      	cbnz	r2, 800f7fc <_dtoa_r+0xa7c>
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	4658      	mov	r0, fp
 800f7be:	f001 f82b 	bl	8010818 <__mcmp>
 800f7c2:	9b08      	ldr	r3, [sp, #32]
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	4629      	mov	r1, r5
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f7ce:	f000 fd9b 	bl	8010308 <_Bfree>
 800f7d2:	9b05      	ldr	r3, [sp, #20]
 800f7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7d6:	9d01      	ldr	r5, [sp, #4]
 800f7d8:	ea43 0102 	orr.w	r1, r3, r2
 800f7dc:	9b06      	ldr	r3, [sp, #24]
 800f7de:	430b      	orrs	r3, r1
 800f7e0:	9b08      	ldr	r3, [sp, #32]
 800f7e2:	d10d      	bne.n	800f800 <_dtoa_r+0xa80>
 800f7e4:	2b39      	cmp	r3, #57	; 0x39
 800f7e6:	d029      	beq.n	800f83c <_dtoa_r+0xabc>
 800f7e8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ec:	dd01      	ble.n	800f7f2 <_dtoa_r+0xa72>
 800f7ee:	9b04      	ldr	r3, [sp, #16]
 800f7f0:	3331      	adds	r3, #49	; 0x31
 800f7f2:	9a02      	ldr	r2, [sp, #8]
 800f7f4:	7013      	strb	r3, [r2, #0]
 800f7f6:	e774      	b.n	800f6e2 <_dtoa_r+0x962>
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	e7b9      	b.n	800f770 <_dtoa_r+0x9f0>
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	e7e2      	b.n	800f7c6 <_dtoa_r+0xa46>
 800f800:	f1b9 0f00 	cmp.w	r9, #0
 800f804:	db06      	blt.n	800f814 <_dtoa_r+0xa94>
 800f806:	9905      	ldr	r1, [sp, #20]
 800f808:	ea41 0909 	orr.w	r9, r1, r9
 800f80c:	9906      	ldr	r1, [sp, #24]
 800f80e:	ea59 0101 	orrs.w	r1, r9, r1
 800f812:	d120      	bne.n	800f856 <_dtoa_r+0xad6>
 800f814:	2a00      	cmp	r2, #0
 800f816:	ddec      	ble.n	800f7f2 <_dtoa_r+0xa72>
 800f818:	4659      	mov	r1, fp
 800f81a:	2201      	movs	r2, #1
 800f81c:	4620      	mov	r0, r4
 800f81e:	9301      	str	r3, [sp, #4]
 800f820:	f000 ff8e 	bl	8010740 <__lshift>
 800f824:	4631      	mov	r1, r6
 800f826:	4683      	mov	fp, r0
 800f828:	f000 fff6 	bl	8010818 <__mcmp>
 800f82c:	2800      	cmp	r0, #0
 800f82e:	9b01      	ldr	r3, [sp, #4]
 800f830:	dc02      	bgt.n	800f838 <_dtoa_r+0xab8>
 800f832:	d1de      	bne.n	800f7f2 <_dtoa_r+0xa72>
 800f834:	07da      	lsls	r2, r3, #31
 800f836:	d5dc      	bpl.n	800f7f2 <_dtoa_r+0xa72>
 800f838:	2b39      	cmp	r3, #57	; 0x39
 800f83a:	d1d8      	bne.n	800f7ee <_dtoa_r+0xa6e>
 800f83c:	9a02      	ldr	r2, [sp, #8]
 800f83e:	2339      	movs	r3, #57	; 0x39
 800f840:	7013      	strb	r3, [r2, #0]
 800f842:	462b      	mov	r3, r5
 800f844:	461d      	mov	r5, r3
 800f846:	3b01      	subs	r3, #1
 800f848:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f84c:	2a39      	cmp	r2, #57	; 0x39
 800f84e:	d050      	beq.n	800f8f2 <_dtoa_r+0xb72>
 800f850:	3201      	adds	r2, #1
 800f852:	701a      	strb	r2, [r3, #0]
 800f854:	e745      	b.n	800f6e2 <_dtoa_r+0x962>
 800f856:	2a00      	cmp	r2, #0
 800f858:	dd03      	ble.n	800f862 <_dtoa_r+0xae2>
 800f85a:	2b39      	cmp	r3, #57	; 0x39
 800f85c:	d0ee      	beq.n	800f83c <_dtoa_r+0xabc>
 800f85e:	3301      	adds	r3, #1
 800f860:	e7c7      	b.n	800f7f2 <_dtoa_r+0xa72>
 800f862:	9a01      	ldr	r2, [sp, #4]
 800f864:	9907      	ldr	r1, [sp, #28]
 800f866:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f86a:	428a      	cmp	r2, r1
 800f86c:	d02a      	beq.n	800f8c4 <_dtoa_r+0xb44>
 800f86e:	4659      	mov	r1, fp
 800f870:	2300      	movs	r3, #0
 800f872:	220a      	movs	r2, #10
 800f874:	4620      	mov	r0, r4
 800f876:	f000 fd69 	bl	801034c <__multadd>
 800f87a:	45b8      	cmp	r8, r7
 800f87c:	4683      	mov	fp, r0
 800f87e:	f04f 0300 	mov.w	r3, #0
 800f882:	f04f 020a 	mov.w	r2, #10
 800f886:	4641      	mov	r1, r8
 800f888:	4620      	mov	r0, r4
 800f88a:	d107      	bne.n	800f89c <_dtoa_r+0xb1c>
 800f88c:	f000 fd5e 	bl	801034c <__multadd>
 800f890:	4680      	mov	r8, r0
 800f892:	4607      	mov	r7, r0
 800f894:	9b01      	ldr	r3, [sp, #4]
 800f896:	3301      	adds	r3, #1
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	e775      	b.n	800f788 <_dtoa_r+0xa08>
 800f89c:	f000 fd56 	bl	801034c <__multadd>
 800f8a0:	4639      	mov	r1, r7
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	220a      	movs	r2, #10
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 fd4f 	bl	801034c <__multadd>
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	e7f0      	b.n	800f894 <_dtoa_r+0xb14>
 800f8b2:	f1b9 0f00 	cmp.w	r9, #0
 800f8b6:	9a00      	ldr	r2, [sp, #0]
 800f8b8:	bfcc      	ite	gt
 800f8ba:	464d      	movgt	r5, r9
 800f8bc:	2501      	movle	r5, #1
 800f8be:	4415      	add	r5, r2
 800f8c0:	f04f 0800 	mov.w	r8, #0
 800f8c4:	4659      	mov	r1, fp
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	9301      	str	r3, [sp, #4]
 800f8cc:	f000 ff38 	bl	8010740 <__lshift>
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4683      	mov	fp, r0
 800f8d4:	f000 ffa0 	bl	8010818 <__mcmp>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	dcb2      	bgt.n	800f842 <_dtoa_r+0xac2>
 800f8dc:	d102      	bne.n	800f8e4 <_dtoa_r+0xb64>
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	07db      	lsls	r3, r3, #31
 800f8e2:	d4ae      	bmi.n	800f842 <_dtoa_r+0xac2>
 800f8e4:	462b      	mov	r3, r5
 800f8e6:	461d      	mov	r5, r3
 800f8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8ec:	2a30      	cmp	r2, #48	; 0x30
 800f8ee:	d0fa      	beq.n	800f8e6 <_dtoa_r+0xb66>
 800f8f0:	e6f7      	b.n	800f6e2 <_dtoa_r+0x962>
 800f8f2:	9a00      	ldr	r2, [sp, #0]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d1a5      	bne.n	800f844 <_dtoa_r+0xac4>
 800f8f8:	f10a 0a01 	add.w	sl, sl, #1
 800f8fc:	2331      	movs	r3, #49	; 0x31
 800f8fe:	e779      	b.n	800f7f4 <_dtoa_r+0xa74>
 800f900:	4b13      	ldr	r3, [pc, #76]	; (800f950 <_dtoa_r+0xbd0>)
 800f902:	f7ff baaf 	b.w	800ee64 <_dtoa_r+0xe4>
 800f906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f47f aa86 	bne.w	800ee1a <_dtoa_r+0x9a>
 800f90e:	4b11      	ldr	r3, [pc, #68]	; (800f954 <_dtoa_r+0xbd4>)
 800f910:	f7ff baa8 	b.w	800ee64 <_dtoa_r+0xe4>
 800f914:	f1b9 0f00 	cmp.w	r9, #0
 800f918:	dc03      	bgt.n	800f922 <_dtoa_r+0xba2>
 800f91a:	9b05      	ldr	r3, [sp, #20]
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	f73f aec9 	bgt.w	800f6b4 <_dtoa_r+0x934>
 800f922:	9d00      	ldr	r5, [sp, #0]
 800f924:	4631      	mov	r1, r6
 800f926:	4658      	mov	r0, fp
 800f928:	f7ff f99c 	bl	800ec64 <quorem>
 800f92c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f930:	f805 3b01 	strb.w	r3, [r5], #1
 800f934:	9a00      	ldr	r2, [sp, #0]
 800f936:	1aaa      	subs	r2, r5, r2
 800f938:	4591      	cmp	r9, r2
 800f93a:	ddba      	ble.n	800f8b2 <_dtoa_r+0xb32>
 800f93c:	4659      	mov	r1, fp
 800f93e:	2300      	movs	r3, #0
 800f940:	220a      	movs	r2, #10
 800f942:	4620      	mov	r0, r4
 800f944:	f000 fd02 	bl	801034c <__multadd>
 800f948:	4683      	mov	fp, r0
 800f94a:	e7eb      	b.n	800f924 <_dtoa_r+0xba4>
 800f94c:	080121cc 	.word	0x080121cc
 800f950:	08011fc8 	.word	0x08011fc8
 800f954:	08012149 	.word	0x08012149

0800f958 <std>:
 800f958:	2300      	movs	r3, #0
 800f95a:	b510      	push	{r4, lr}
 800f95c:	4604      	mov	r4, r0
 800f95e:	e9c0 3300 	strd	r3, r3, [r0]
 800f962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f966:	6083      	str	r3, [r0, #8]
 800f968:	8181      	strh	r1, [r0, #12]
 800f96a:	6643      	str	r3, [r0, #100]	; 0x64
 800f96c:	81c2      	strh	r2, [r0, #14]
 800f96e:	6183      	str	r3, [r0, #24]
 800f970:	4619      	mov	r1, r3
 800f972:	2208      	movs	r2, #8
 800f974:	305c      	adds	r0, #92	; 0x5c
 800f976:	f7fd fb49 	bl	800d00c <memset>
 800f97a:	4b05      	ldr	r3, [pc, #20]	; (800f990 <std+0x38>)
 800f97c:	6263      	str	r3, [r4, #36]	; 0x24
 800f97e:	4b05      	ldr	r3, [pc, #20]	; (800f994 <std+0x3c>)
 800f980:	62a3      	str	r3, [r4, #40]	; 0x28
 800f982:	4b05      	ldr	r3, [pc, #20]	; (800f998 <std+0x40>)
 800f984:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f986:	4b05      	ldr	r3, [pc, #20]	; (800f99c <std+0x44>)
 800f988:	6224      	str	r4, [r4, #32]
 800f98a:	6323      	str	r3, [r4, #48]	; 0x30
 800f98c:	bd10      	pop	{r4, pc}
 800f98e:	bf00      	nop
 800f990:	08011199 	.word	0x08011199
 800f994:	080111bb 	.word	0x080111bb
 800f998:	080111f3 	.word	0x080111f3
 800f99c:	08011217 	.word	0x08011217

0800f9a0 <_cleanup_r>:
 800f9a0:	4901      	ldr	r1, [pc, #4]	; (800f9a8 <_cleanup_r+0x8>)
 800f9a2:	f000 b8af 	b.w	800fb04 <_fwalk_reent>
 800f9a6:	bf00      	nop
 800f9a8:	0801156d 	.word	0x0801156d

0800f9ac <__sfmoreglue>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	1e4a      	subs	r2, r1, #1
 800f9b0:	2568      	movs	r5, #104	; 0x68
 800f9b2:	4355      	muls	r5, r2
 800f9b4:	460e      	mov	r6, r1
 800f9b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9ba:	f7fd fb7f 	bl	800d0bc <_malloc_r>
 800f9be:	4604      	mov	r4, r0
 800f9c0:	b140      	cbz	r0, 800f9d4 <__sfmoreglue+0x28>
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	e9c0 1600 	strd	r1, r6, [r0]
 800f9c8:	300c      	adds	r0, #12
 800f9ca:	60a0      	str	r0, [r4, #8]
 800f9cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9d0:	f7fd fb1c 	bl	800d00c <memset>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	bd70      	pop	{r4, r5, r6, pc}

0800f9d8 <__sfp_lock_acquire>:
 800f9d8:	4801      	ldr	r0, [pc, #4]	; (800f9e0 <__sfp_lock_acquire+0x8>)
 800f9da:	f000 bc26 	b.w	801022a <__retarget_lock_acquire_recursive>
 800f9de:	bf00      	nop
 800f9e0:	20002018 	.word	0x20002018

0800f9e4 <__sfp_lock_release>:
 800f9e4:	4801      	ldr	r0, [pc, #4]	; (800f9ec <__sfp_lock_release+0x8>)
 800f9e6:	f000 bc21 	b.w	801022c <__retarget_lock_release_recursive>
 800f9ea:	bf00      	nop
 800f9ec:	20002018 	.word	0x20002018

0800f9f0 <__sinit_lock_acquire>:
 800f9f0:	4801      	ldr	r0, [pc, #4]	; (800f9f8 <__sinit_lock_acquire+0x8>)
 800f9f2:	f000 bc1a 	b.w	801022a <__retarget_lock_acquire_recursive>
 800f9f6:	bf00      	nop
 800f9f8:	20002013 	.word	0x20002013

0800f9fc <__sinit_lock_release>:
 800f9fc:	4801      	ldr	r0, [pc, #4]	; (800fa04 <__sinit_lock_release+0x8>)
 800f9fe:	f000 bc15 	b.w	801022c <__retarget_lock_release_recursive>
 800fa02:	bf00      	nop
 800fa04:	20002013 	.word	0x20002013

0800fa08 <__sinit>:
 800fa08:	b510      	push	{r4, lr}
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	f7ff fff0 	bl	800f9f0 <__sinit_lock_acquire>
 800fa10:	69a3      	ldr	r3, [r4, #24]
 800fa12:	b11b      	cbz	r3, 800fa1c <__sinit+0x14>
 800fa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa18:	f7ff bff0 	b.w	800f9fc <__sinit_lock_release>
 800fa1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa20:	6523      	str	r3, [r4, #80]	; 0x50
 800fa22:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <__sinit+0x68>)
 800fa24:	4a13      	ldr	r2, [pc, #76]	; (800fa74 <__sinit+0x6c>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa2a:	42a3      	cmp	r3, r4
 800fa2c:	bf04      	itt	eq
 800fa2e:	2301      	moveq	r3, #1
 800fa30:	61a3      	streq	r3, [r4, #24]
 800fa32:	4620      	mov	r0, r4
 800fa34:	f000 f820 	bl	800fa78 <__sfp>
 800fa38:	6060      	str	r0, [r4, #4]
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 f81c 	bl	800fa78 <__sfp>
 800fa40:	60a0      	str	r0, [r4, #8]
 800fa42:	4620      	mov	r0, r4
 800fa44:	f000 f818 	bl	800fa78 <__sfp>
 800fa48:	2200      	movs	r2, #0
 800fa4a:	60e0      	str	r0, [r4, #12]
 800fa4c:	2104      	movs	r1, #4
 800fa4e:	6860      	ldr	r0, [r4, #4]
 800fa50:	f7ff ff82 	bl	800f958 <std>
 800fa54:	68a0      	ldr	r0, [r4, #8]
 800fa56:	2201      	movs	r2, #1
 800fa58:	2109      	movs	r1, #9
 800fa5a:	f7ff ff7d 	bl	800f958 <std>
 800fa5e:	68e0      	ldr	r0, [r4, #12]
 800fa60:	2202      	movs	r2, #2
 800fa62:	2112      	movs	r1, #18
 800fa64:	f7ff ff78 	bl	800f958 <std>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	61a3      	str	r3, [r4, #24]
 800fa6c:	e7d2      	b.n	800fa14 <__sinit+0xc>
 800fa6e:	bf00      	nop
 800fa70:	08011fb4 	.word	0x08011fb4
 800fa74:	0800f9a1 	.word	0x0800f9a1

0800fa78 <__sfp>:
 800fa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa7a:	4607      	mov	r7, r0
 800fa7c:	f7ff ffac 	bl	800f9d8 <__sfp_lock_acquire>
 800fa80:	4b1e      	ldr	r3, [pc, #120]	; (800fafc <__sfp+0x84>)
 800fa82:	681e      	ldr	r6, [r3, #0]
 800fa84:	69b3      	ldr	r3, [r6, #24]
 800fa86:	b913      	cbnz	r3, 800fa8e <__sfp+0x16>
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7ff ffbd 	bl	800fa08 <__sinit>
 800fa8e:	3648      	adds	r6, #72	; 0x48
 800fa90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa94:	3b01      	subs	r3, #1
 800fa96:	d503      	bpl.n	800faa0 <__sfp+0x28>
 800fa98:	6833      	ldr	r3, [r6, #0]
 800fa9a:	b30b      	cbz	r3, 800fae0 <__sfp+0x68>
 800fa9c:	6836      	ldr	r6, [r6, #0]
 800fa9e:	e7f7      	b.n	800fa90 <__sfp+0x18>
 800faa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800faa4:	b9d5      	cbnz	r5, 800fadc <__sfp+0x64>
 800faa6:	4b16      	ldr	r3, [pc, #88]	; (800fb00 <__sfp+0x88>)
 800faa8:	60e3      	str	r3, [r4, #12]
 800faaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800faae:	6665      	str	r5, [r4, #100]	; 0x64
 800fab0:	f000 fbba 	bl	8010228 <__retarget_lock_init_recursive>
 800fab4:	f7ff ff96 	bl	800f9e4 <__sfp_lock_release>
 800fab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fabc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fac0:	6025      	str	r5, [r4, #0]
 800fac2:	61a5      	str	r5, [r4, #24]
 800fac4:	2208      	movs	r2, #8
 800fac6:	4629      	mov	r1, r5
 800fac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800facc:	f7fd fa9e 	bl	800d00c <memset>
 800fad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fad8:	4620      	mov	r0, r4
 800fada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fadc:	3468      	adds	r4, #104	; 0x68
 800fade:	e7d9      	b.n	800fa94 <__sfp+0x1c>
 800fae0:	2104      	movs	r1, #4
 800fae2:	4638      	mov	r0, r7
 800fae4:	f7ff ff62 	bl	800f9ac <__sfmoreglue>
 800fae8:	4604      	mov	r4, r0
 800faea:	6030      	str	r0, [r6, #0]
 800faec:	2800      	cmp	r0, #0
 800faee:	d1d5      	bne.n	800fa9c <__sfp+0x24>
 800faf0:	f7ff ff78 	bl	800f9e4 <__sfp_lock_release>
 800faf4:	230c      	movs	r3, #12
 800faf6:	603b      	str	r3, [r7, #0]
 800faf8:	e7ee      	b.n	800fad8 <__sfp+0x60>
 800fafa:	bf00      	nop
 800fafc:	08011fb4 	.word	0x08011fb4
 800fb00:	ffff0001 	.word	0xffff0001

0800fb04 <_fwalk_reent>:
 800fb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb08:	4606      	mov	r6, r0
 800fb0a:	4688      	mov	r8, r1
 800fb0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb10:	2700      	movs	r7, #0
 800fb12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb16:	f1b9 0901 	subs.w	r9, r9, #1
 800fb1a:	d505      	bpl.n	800fb28 <_fwalk_reent+0x24>
 800fb1c:	6824      	ldr	r4, [r4, #0]
 800fb1e:	2c00      	cmp	r4, #0
 800fb20:	d1f7      	bne.n	800fb12 <_fwalk_reent+0xe>
 800fb22:	4638      	mov	r0, r7
 800fb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb28:	89ab      	ldrh	r3, [r5, #12]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d907      	bls.n	800fb3e <_fwalk_reent+0x3a>
 800fb2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb32:	3301      	adds	r3, #1
 800fb34:	d003      	beq.n	800fb3e <_fwalk_reent+0x3a>
 800fb36:	4629      	mov	r1, r5
 800fb38:	4630      	mov	r0, r6
 800fb3a:	47c0      	blx	r8
 800fb3c:	4307      	orrs	r7, r0
 800fb3e:	3568      	adds	r5, #104	; 0x68
 800fb40:	e7e9      	b.n	800fb16 <_fwalk_reent+0x12>

0800fb42 <rshift>:
 800fb42:	6903      	ldr	r3, [r0, #16]
 800fb44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fb50:	f100 0414 	add.w	r4, r0, #20
 800fb54:	dd45      	ble.n	800fbe2 <rshift+0xa0>
 800fb56:	f011 011f 	ands.w	r1, r1, #31
 800fb5a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb5e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb62:	d10c      	bne.n	800fb7e <rshift+0x3c>
 800fb64:	f100 0710 	add.w	r7, r0, #16
 800fb68:	4629      	mov	r1, r5
 800fb6a:	42b1      	cmp	r1, r6
 800fb6c:	d334      	bcc.n	800fbd8 <rshift+0x96>
 800fb6e:	1a9b      	subs	r3, r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	1eea      	subs	r2, r5, #3
 800fb74:	4296      	cmp	r6, r2
 800fb76:	bf38      	it	cc
 800fb78:	2300      	movcc	r3, #0
 800fb7a:	4423      	add	r3, r4
 800fb7c:	e015      	b.n	800fbaa <rshift+0x68>
 800fb7e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb82:	f1c1 0820 	rsb	r8, r1, #32
 800fb86:	40cf      	lsrs	r7, r1
 800fb88:	f105 0e04 	add.w	lr, r5, #4
 800fb8c:	46a1      	mov	r9, r4
 800fb8e:	4576      	cmp	r6, lr
 800fb90:	46f4      	mov	ip, lr
 800fb92:	d815      	bhi.n	800fbc0 <rshift+0x7e>
 800fb94:	1a9b      	subs	r3, r3, r2
 800fb96:	009a      	lsls	r2, r3, #2
 800fb98:	3a04      	subs	r2, #4
 800fb9a:	3501      	adds	r5, #1
 800fb9c:	42ae      	cmp	r6, r5
 800fb9e:	bf38      	it	cc
 800fba0:	2200      	movcc	r2, #0
 800fba2:	18a3      	adds	r3, r4, r2
 800fba4:	50a7      	str	r7, [r4, r2]
 800fba6:	b107      	cbz	r7, 800fbaa <rshift+0x68>
 800fba8:	3304      	adds	r3, #4
 800fbaa:	1b1a      	subs	r2, r3, r4
 800fbac:	42a3      	cmp	r3, r4
 800fbae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fbb2:	bf08      	it	eq
 800fbb4:	2300      	moveq	r3, #0
 800fbb6:	6102      	str	r2, [r0, #16]
 800fbb8:	bf08      	it	eq
 800fbba:	6143      	streq	r3, [r0, #20]
 800fbbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbc0:	f8dc c000 	ldr.w	ip, [ip]
 800fbc4:	fa0c fc08 	lsl.w	ip, ip, r8
 800fbc8:	ea4c 0707 	orr.w	r7, ip, r7
 800fbcc:	f849 7b04 	str.w	r7, [r9], #4
 800fbd0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbd4:	40cf      	lsrs	r7, r1
 800fbd6:	e7da      	b.n	800fb8e <rshift+0x4c>
 800fbd8:	f851 cb04 	ldr.w	ip, [r1], #4
 800fbdc:	f847 cf04 	str.w	ip, [r7, #4]!
 800fbe0:	e7c3      	b.n	800fb6a <rshift+0x28>
 800fbe2:	4623      	mov	r3, r4
 800fbe4:	e7e1      	b.n	800fbaa <rshift+0x68>

0800fbe6 <__hexdig_fun>:
 800fbe6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fbea:	2b09      	cmp	r3, #9
 800fbec:	d802      	bhi.n	800fbf4 <__hexdig_fun+0xe>
 800fbee:	3820      	subs	r0, #32
 800fbf0:	b2c0      	uxtb	r0, r0
 800fbf2:	4770      	bx	lr
 800fbf4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fbf8:	2b05      	cmp	r3, #5
 800fbfa:	d801      	bhi.n	800fc00 <__hexdig_fun+0x1a>
 800fbfc:	3847      	subs	r0, #71	; 0x47
 800fbfe:	e7f7      	b.n	800fbf0 <__hexdig_fun+0xa>
 800fc00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fc04:	2b05      	cmp	r3, #5
 800fc06:	d801      	bhi.n	800fc0c <__hexdig_fun+0x26>
 800fc08:	3827      	subs	r0, #39	; 0x27
 800fc0a:	e7f1      	b.n	800fbf0 <__hexdig_fun+0xa>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	4770      	bx	lr

0800fc10 <__gethex>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	ed2d 8b02 	vpush	{d8}
 800fc18:	b089      	sub	sp, #36	; 0x24
 800fc1a:	ee08 0a10 	vmov	s16, r0
 800fc1e:	9304      	str	r3, [sp, #16]
 800fc20:	4bbc      	ldr	r3, [pc, #752]	; (800ff14 <__gethex+0x304>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	4618      	mov	r0, r3
 800fc28:	468b      	mov	fp, r1
 800fc2a:	4690      	mov	r8, r2
 800fc2c:	f7f0 fae0 	bl	80001f0 <strlen>
 800fc30:	9b01      	ldr	r3, [sp, #4]
 800fc32:	f8db 2000 	ldr.w	r2, [fp]
 800fc36:	4403      	add	r3, r0
 800fc38:	4682      	mov	sl, r0
 800fc3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fc3e:	9305      	str	r3, [sp, #20]
 800fc40:	1c93      	adds	r3, r2, #2
 800fc42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fc46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fc4a:	32fe      	adds	r2, #254	; 0xfe
 800fc4c:	18d1      	adds	r1, r2, r3
 800fc4e:	461f      	mov	r7, r3
 800fc50:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc54:	9100      	str	r1, [sp, #0]
 800fc56:	2830      	cmp	r0, #48	; 0x30
 800fc58:	d0f8      	beq.n	800fc4c <__gethex+0x3c>
 800fc5a:	f7ff ffc4 	bl	800fbe6 <__hexdig_fun>
 800fc5e:	4604      	mov	r4, r0
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d13a      	bne.n	800fcda <__gethex+0xca>
 800fc64:	9901      	ldr	r1, [sp, #4]
 800fc66:	4652      	mov	r2, sl
 800fc68:	4638      	mov	r0, r7
 800fc6a:	f001 fad8 	bl	801121e <strncmp>
 800fc6e:	4605      	mov	r5, r0
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d168      	bne.n	800fd46 <__gethex+0x136>
 800fc74:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fc78:	eb07 060a 	add.w	r6, r7, sl
 800fc7c:	f7ff ffb3 	bl	800fbe6 <__hexdig_fun>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d062      	beq.n	800fd4a <__gethex+0x13a>
 800fc84:	4633      	mov	r3, r6
 800fc86:	7818      	ldrb	r0, [r3, #0]
 800fc88:	2830      	cmp	r0, #48	; 0x30
 800fc8a:	461f      	mov	r7, r3
 800fc8c:	f103 0301 	add.w	r3, r3, #1
 800fc90:	d0f9      	beq.n	800fc86 <__gethex+0x76>
 800fc92:	f7ff ffa8 	bl	800fbe6 <__hexdig_fun>
 800fc96:	2301      	movs	r3, #1
 800fc98:	fab0 f480 	clz	r4, r0
 800fc9c:	0964      	lsrs	r4, r4, #5
 800fc9e:	4635      	mov	r5, r6
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	463a      	mov	r2, r7
 800fca4:	4616      	mov	r6, r2
 800fca6:	3201      	adds	r2, #1
 800fca8:	7830      	ldrb	r0, [r6, #0]
 800fcaa:	f7ff ff9c 	bl	800fbe6 <__hexdig_fun>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d1f8      	bne.n	800fca4 <__gethex+0x94>
 800fcb2:	9901      	ldr	r1, [sp, #4]
 800fcb4:	4652      	mov	r2, sl
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f001 fab1 	bl	801121e <strncmp>
 800fcbc:	b980      	cbnz	r0, 800fce0 <__gethex+0xd0>
 800fcbe:	b94d      	cbnz	r5, 800fcd4 <__gethex+0xc4>
 800fcc0:	eb06 050a 	add.w	r5, r6, sl
 800fcc4:	462a      	mov	r2, r5
 800fcc6:	4616      	mov	r6, r2
 800fcc8:	3201      	adds	r2, #1
 800fcca:	7830      	ldrb	r0, [r6, #0]
 800fccc:	f7ff ff8b 	bl	800fbe6 <__hexdig_fun>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	d1f8      	bne.n	800fcc6 <__gethex+0xb6>
 800fcd4:	1bad      	subs	r5, r5, r6
 800fcd6:	00ad      	lsls	r5, r5, #2
 800fcd8:	e004      	b.n	800fce4 <__gethex+0xd4>
 800fcda:	2400      	movs	r4, #0
 800fcdc:	4625      	mov	r5, r4
 800fcde:	e7e0      	b.n	800fca2 <__gethex+0x92>
 800fce0:	2d00      	cmp	r5, #0
 800fce2:	d1f7      	bne.n	800fcd4 <__gethex+0xc4>
 800fce4:	7833      	ldrb	r3, [r6, #0]
 800fce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fcea:	2b50      	cmp	r3, #80	; 0x50
 800fcec:	d13b      	bne.n	800fd66 <__gethex+0x156>
 800fcee:	7873      	ldrb	r3, [r6, #1]
 800fcf0:	2b2b      	cmp	r3, #43	; 0x2b
 800fcf2:	d02c      	beq.n	800fd4e <__gethex+0x13e>
 800fcf4:	2b2d      	cmp	r3, #45	; 0x2d
 800fcf6:	d02e      	beq.n	800fd56 <__gethex+0x146>
 800fcf8:	1c71      	adds	r1, r6, #1
 800fcfa:	f04f 0900 	mov.w	r9, #0
 800fcfe:	7808      	ldrb	r0, [r1, #0]
 800fd00:	f7ff ff71 	bl	800fbe6 <__hexdig_fun>
 800fd04:	1e43      	subs	r3, r0, #1
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	2b18      	cmp	r3, #24
 800fd0a:	d82c      	bhi.n	800fd66 <__gethex+0x156>
 800fd0c:	f1a0 0210 	sub.w	r2, r0, #16
 800fd10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fd14:	f7ff ff67 	bl	800fbe6 <__hexdig_fun>
 800fd18:	1e43      	subs	r3, r0, #1
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	2b18      	cmp	r3, #24
 800fd1e:	d91d      	bls.n	800fd5c <__gethex+0x14c>
 800fd20:	f1b9 0f00 	cmp.w	r9, #0
 800fd24:	d000      	beq.n	800fd28 <__gethex+0x118>
 800fd26:	4252      	negs	r2, r2
 800fd28:	4415      	add	r5, r2
 800fd2a:	f8cb 1000 	str.w	r1, [fp]
 800fd2e:	b1e4      	cbz	r4, 800fd6a <__gethex+0x15a>
 800fd30:	9b00      	ldr	r3, [sp, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bf14      	ite	ne
 800fd36:	2700      	movne	r7, #0
 800fd38:	2706      	moveq	r7, #6
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	b009      	add	sp, #36	; 0x24
 800fd3e:	ecbd 8b02 	vpop	{d8}
 800fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd46:	463e      	mov	r6, r7
 800fd48:	4625      	mov	r5, r4
 800fd4a:	2401      	movs	r4, #1
 800fd4c:	e7ca      	b.n	800fce4 <__gethex+0xd4>
 800fd4e:	f04f 0900 	mov.w	r9, #0
 800fd52:	1cb1      	adds	r1, r6, #2
 800fd54:	e7d3      	b.n	800fcfe <__gethex+0xee>
 800fd56:	f04f 0901 	mov.w	r9, #1
 800fd5a:	e7fa      	b.n	800fd52 <__gethex+0x142>
 800fd5c:	230a      	movs	r3, #10
 800fd5e:	fb03 0202 	mla	r2, r3, r2, r0
 800fd62:	3a10      	subs	r2, #16
 800fd64:	e7d4      	b.n	800fd10 <__gethex+0x100>
 800fd66:	4631      	mov	r1, r6
 800fd68:	e7df      	b.n	800fd2a <__gethex+0x11a>
 800fd6a:	1bf3      	subs	r3, r6, r7
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	4621      	mov	r1, r4
 800fd70:	2b07      	cmp	r3, #7
 800fd72:	dc0b      	bgt.n	800fd8c <__gethex+0x17c>
 800fd74:	ee18 0a10 	vmov	r0, s16
 800fd78:	f000 fa86 	bl	8010288 <_Balloc>
 800fd7c:	4604      	mov	r4, r0
 800fd7e:	b940      	cbnz	r0, 800fd92 <__gethex+0x182>
 800fd80:	4b65      	ldr	r3, [pc, #404]	; (800ff18 <__gethex+0x308>)
 800fd82:	4602      	mov	r2, r0
 800fd84:	21de      	movs	r1, #222	; 0xde
 800fd86:	4865      	ldr	r0, [pc, #404]	; (800ff1c <__gethex+0x30c>)
 800fd88:	f001 fb3c 	bl	8011404 <__assert_func>
 800fd8c:	3101      	adds	r1, #1
 800fd8e:	105b      	asrs	r3, r3, #1
 800fd90:	e7ee      	b.n	800fd70 <__gethex+0x160>
 800fd92:	f100 0914 	add.w	r9, r0, #20
 800fd96:	f04f 0b00 	mov.w	fp, #0
 800fd9a:	f1ca 0301 	rsb	r3, sl, #1
 800fd9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fda2:	f8cd b000 	str.w	fp, [sp]
 800fda6:	9306      	str	r3, [sp, #24]
 800fda8:	42b7      	cmp	r7, r6
 800fdaa:	d340      	bcc.n	800fe2e <__gethex+0x21e>
 800fdac:	9802      	ldr	r0, [sp, #8]
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	f840 3b04 	str.w	r3, [r0], #4
 800fdb4:	eba0 0009 	sub.w	r0, r0, r9
 800fdb8:	1080      	asrs	r0, r0, #2
 800fdba:	0146      	lsls	r6, r0, #5
 800fdbc:	6120      	str	r0, [r4, #16]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 fb58 	bl	8010474 <__hi0bits>
 800fdc4:	1a30      	subs	r0, r6, r0
 800fdc6:	f8d8 6000 	ldr.w	r6, [r8]
 800fdca:	42b0      	cmp	r0, r6
 800fdcc:	dd63      	ble.n	800fe96 <__gethex+0x286>
 800fdce:	1b87      	subs	r7, r0, r6
 800fdd0:	4639      	mov	r1, r7
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 fef2 	bl	8010bbc <__any_on>
 800fdd8:	4682      	mov	sl, r0
 800fdda:	b1a8      	cbz	r0, 800fe08 <__gethex+0x1f8>
 800fddc:	1e7b      	subs	r3, r7, #1
 800fdde:	1159      	asrs	r1, r3, #5
 800fde0:	f003 021f 	and.w	r2, r3, #31
 800fde4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fde8:	f04f 0a01 	mov.w	sl, #1
 800fdec:	fa0a f202 	lsl.w	r2, sl, r2
 800fdf0:	420a      	tst	r2, r1
 800fdf2:	d009      	beq.n	800fe08 <__gethex+0x1f8>
 800fdf4:	4553      	cmp	r3, sl
 800fdf6:	dd05      	ble.n	800fe04 <__gethex+0x1f4>
 800fdf8:	1eb9      	subs	r1, r7, #2
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f000 fede 	bl	8010bbc <__any_on>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d145      	bne.n	800fe90 <__gethex+0x280>
 800fe04:	f04f 0a02 	mov.w	sl, #2
 800fe08:	4639      	mov	r1, r7
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f7ff fe99 	bl	800fb42 <rshift>
 800fe10:	443d      	add	r5, r7
 800fe12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe16:	42ab      	cmp	r3, r5
 800fe18:	da4c      	bge.n	800feb4 <__gethex+0x2a4>
 800fe1a:	ee18 0a10 	vmov	r0, s16
 800fe1e:	4621      	mov	r1, r4
 800fe20:	f000 fa72 	bl	8010308 <_Bfree>
 800fe24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe26:	2300      	movs	r3, #0
 800fe28:	6013      	str	r3, [r2, #0]
 800fe2a:	27a3      	movs	r7, #163	; 0xa3
 800fe2c:	e785      	b.n	800fd3a <__gethex+0x12a>
 800fe2e:	1e73      	subs	r3, r6, #1
 800fe30:	9a05      	ldr	r2, [sp, #20]
 800fe32:	9303      	str	r3, [sp, #12]
 800fe34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d019      	beq.n	800fe70 <__gethex+0x260>
 800fe3c:	f1bb 0f20 	cmp.w	fp, #32
 800fe40:	d107      	bne.n	800fe52 <__gethex+0x242>
 800fe42:	9b02      	ldr	r3, [sp, #8]
 800fe44:	9a00      	ldr	r2, [sp, #0]
 800fe46:	f843 2b04 	str.w	r2, [r3], #4
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	469b      	mov	fp, r3
 800fe52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fe56:	f7ff fec6 	bl	800fbe6 <__hexdig_fun>
 800fe5a:	9b00      	ldr	r3, [sp, #0]
 800fe5c:	f000 000f 	and.w	r0, r0, #15
 800fe60:	fa00 f00b 	lsl.w	r0, r0, fp
 800fe64:	4303      	orrs	r3, r0
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	f10b 0b04 	add.w	fp, fp, #4
 800fe6c:	9b03      	ldr	r3, [sp, #12]
 800fe6e:	e00d      	b.n	800fe8c <__gethex+0x27c>
 800fe70:	9b03      	ldr	r3, [sp, #12]
 800fe72:	9a06      	ldr	r2, [sp, #24]
 800fe74:	4413      	add	r3, r2
 800fe76:	42bb      	cmp	r3, r7
 800fe78:	d3e0      	bcc.n	800fe3c <__gethex+0x22c>
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	9901      	ldr	r1, [sp, #4]
 800fe7e:	9307      	str	r3, [sp, #28]
 800fe80:	4652      	mov	r2, sl
 800fe82:	f001 f9cc 	bl	801121e <strncmp>
 800fe86:	9b07      	ldr	r3, [sp, #28]
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d1d7      	bne.n	800fe3c <__gethex+0x22c>
 800fe8c:	461e      	mov	r6, r3
 800fe8e:	e78b      	b.n	800fda8 <__gethex+0x198>
 800fe90:	f04f 0a03 	mov.w	sl, #3
 800fe94:	e7b8      	b.n	800fe08 <__gethex+0x1f8>
 800fe96:	da0a      	bge.n	800feae <__gethex+0x29e>
 800fe98:	1a37      	subs	r7, r6, r0
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	ee18 0a10 	vmov	r0, s16
 800fea0:	463a      	mov	r2, r7
 800fea2:	f000 fc4d 	bl	8010740 <__lshift>
 800fea6:	1bed      	subs	r5, r5, r7
 800fea8:	4604      	mov	r4, r0
 800feaa:	f100 0914 	add.w	r9, r0, #20
 800feae:	f04f 0a00 	mov.w	sl, #0
 800feb2:	e7ae      	b.n	800fe12 <__gethex+0x202>
 800feb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800feb8:	42a8      	cmp	r0, r5
 800feba:	dd72      	ble.n	800ffa2 <__gethex+0x392>
 800febc:	1b45      	subs	r5, r0, r5
 800febe:	42ae      	cmp	r6, r5
 800fec0:	dc36      	bgt.n	800ff30 <__gethex+0x320>
 800fec2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	d02a      	beq.n	800ff20 <__gethex+0x310>
 800feca:	2b03      	cmp	r3, #3
 800fecc:	d02c      	beq.n	800ff28 <__gethex+0x318>
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d115      	bne.n	800fefe <__gethex+0x2ee>
 800fed2:	42ae      	cmp	r6, r5
 800fed4:	d113      	bne.n	800fefe <__gethex+0x2ee>
 800fed6:	2e01      	cmp	r6, #1
 800fed8:	d10b      	bne.n	800fef2 <__gethex+0x2e2>
 800feda:	9a04      	ldr	r2, [sp, #16]
 800fedc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fee0:	6013      	str	r3, [r2, #0]
 800fee2:	2301      	movs	r3, #1
 800fee4:	6123      	str	r3, [r4, #16]
 800fee6:	f8c9 3000 	str.w	r3, [r9]
 800feea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800feec:	2762      	movs	r7, #98	; 0x62
 800feee:	601c      	str	r4, [r3, #0]
 800fef0:	e723      	b.n	800fd3a <__gethex+0x12a>
 800fef2:	1e71      	subs	r1, r6, #1
 800fef4:	4620      	mov	r0, r4
 800fef6:	f000 fe61 	bl	8010bbc <__any_on>
 800fefa:	2800      	cmp	r0, #0
 800fefc:	d1ed      	bne.n	800feda <__gethex+0x2ca>
 800fefe:	ee18 0a10 	vmov	r0, s16
 800ff02:	4621      	mov	r1, r4
 800ff04:	f000 fa00 	bl	8010308 <_Bfree>
 800ff08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	6013      	str	r3, [r2, #0]
 800ff0e:	2750      	movs	r7, #80	; 0x50
 800ff10:	e713      	b.n	800fd3a <__gethex+0x12a>
 800ff12:	bf00      	nop
 800ff14:	080122ac 	.word	0x080122ac
 800ff18:	080121cc 	.word	0x080121cc
 800ff1c:	08012240 	.word	0x08012240
 800ff20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1eb      	bne.n	800fefe <__gethex+0x2ee>
 800ff26:	e7d8      	b.n	800feda <__gethex+0x2ca>
 800ff28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1d5      	bne.n	800feda <__gethex+0x2ca>
 800ff2e:	e7e6      	b.n	800fefe <__gethex+0x2ee>
 800ff30:	1e6f      	subs	r7, r5, #1
 800ff32:	f1ba 0f00 	cmp.w	sl, #0
 800ff36:	d131      	bne.n	800ff9c <__gethex+0x38c>
 800ff38:	b127      	cbz	r7, 800ff44 <__gethex+0x334>
 800ff3a:	4639      	mov	r1, r7
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f000 fe3d 	bl	8010bbc <__any_on>
 800ff42:	4682      	mov	sl, r0
 800ff44:	117b      	asrs	r3, r7, #5
 800ff46:	2101      	movs	r1, #1
 800ff48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ff4c:	f007 071f 	and.w	r7, r7, #31
 800ff50:	fa01 f707 	lsl.w	r7, r1, r7
 800ff54:	421f      	tst	r7, r3
 800ff56:	4629      	mov	r1, r5
 800ff58:	4620      	mov	r0, r4
 800ff5a:	bf18      	it	ne
 800ff5c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ff60:	1b76      	subs	r6, r6, r5
 800ff62:	f7ff fdee 	bl	800fb42 <rshift>
 800ff66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff6a:	2702      	movs	r7, #2
 800ff6c:	f1ba 0f00 	cmp.w	sl, #0
 800ff70:	d048      	beq.n	8010004 <__gethex+0x3f4>
 800ff72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	d015      	beq.n	800ffa6 <__gethex+0x396>
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d017      	beq.n	800ffae <__gethex+0x39e>
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d109      	bne.n	800ff96 <__gethex+0x386>
 800ff82:	f01a 0f02 	tst.w	sl, #2
 800ff86:	d006      	beq.n	800ff96 <__gethex+0x386>
 800ff88:	f8d9 0000 	ldr.w	r0, [r9]
 800ff8c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff90:	f01a 0f01 	tst.w	sl, #1
 800ff94:	d10e      	bne.n	800ffb4 <__gethex+0x3a4>
 800ff96:	f047 0710 	orr.w	r7, r7, #16
 800ff9a:	e033      	b.n	8010004 <__gethex+0x3f4>
 800ff9c:	f04f 0a01 	mov.w	sl, #1
 800ffa0:	e7d0      	b.n	800ff44 <__gethex+0x334>
 800ffa2:	2701      	movs	r7, #1
 800ffa4:	e7e2      	b.n	800ff6c <__gethex+0x35c>
 800ffa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffa8:	f1c3 0301 	rsb	r3, r3, #1
 800ffac:	9315      	str	r3, [sp, #84]	; 0x54
 800ffae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d0f0      	beq.n	800ff96 <__gethex+0x386>
 800ffb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ffb8:	f104 0314 	add.w	r3, r4, #20
 800ffbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ffc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ffc4:	f04f 0c00 	mov.w	ip, #0
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ffd2:	d01c      	beq.n	801000e <__gethex+0x3fe>
 800ffd4:	3201      	adds	r2, #1
 800ffd6:	6002      	str	r2, [r0, #0]
 800ffd8:	2f02      	cmp	r7, #2
 800ffda:	f104 0314 	add.w	r3, r4, #20
 800ffde:	d13f      	bne.n	8010060 <__gethex+0x450>
 800ffe0:	f8d8 2000 	ldr.w	r2, [r8]
 800ffe4:	3a01      	subs	r2, #1
 800ffe6:	42b2      	cmp	r2, r6
 800ffe8:	d10a      	bne.n	8010000 <__gethex+0x3f0>
 800ffea:	1171      	asrs	r1, r6, #5
 800ffec:	2201      	movs	r2, #1
 800ffee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fff2:	f006 061f 	and.w	r6, r6, #31
 800fff6:	fa02 f606 	lsl.w	r6, r2, r6
 800fffa:	421e      	tst	r6, r3
 800fffc:	bf18      	it	ne
 800fffe:	4617      	movne	r7, r2
 8010000:	f047 0720 	orr.w	r7, r7, #32
 8010004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010006:	601c      	str	r4, [r3, #0]
 8010008:	9b04      	ldr	r3, [sp, #16]
 801000a:	601d      	str	r5, [r3, #0]
 801000c:	e695      	b.n	800fd3a <__gethex+0x12a>
 801000e:	4299      	cmp	r1, r3
 8010010:	f843 cc04 	str.w	ip, [r3, #-4]
 8010014:	d8d8      	bhi.n	800ffc8 <__gethex+0x3b8>
 8010016:	68a3      	ldr	r3, [r4, #8]
 8010018:	459b      	cmp	fp, r3
 801001a:	db19      	blt.n	8010050 <__gethex+0x440>
 801001c:	6861      	ldr	r1, [r4, #4]
 801001e:	ee18 0a10 	vmov	r0, s16
 8010022:	3101      	adds	r1, #1
 8010024:	f000 f930 	bl	8010288 <_Balloc>
 8010028:	4681      	mov	r9, r0
 801002a:	b918      	cbnz	r0, 8010034 <__gethex+0x424>
 801002c:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <__gethex+0x488>)
 801002e:	4602      	mov	r2, r0
 8010030:	2184      	movs	r1, #132	; 0x84
 8010032:	e6a8      	b.n	800fd86 <__gethex+0x176>
 8010034:	6922      	ldr	r2, [r4, #16]
 8010036:	3202      	adds	r2, #2
 8010038:	f104 010c 	add.w	r1, r4, #12
 801003c:	0092      	lsls	r2, r2, #2
 801003e:	300c      	adds	r0, #12
 8010040:	f000 f907 	bl	8010252 <memcpy>
 8010044:	4621      	mov	r1, r4
 8010046:	ee18 0a10 	vmov	r0, s16
 801004a:	f000 f95d 	bl	8010308 <_Bfree>
 801004e:	464c      	mov	r4, r9
 8010050:	6923      	ldr	r3, [r4, #16]
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010058:	6122      	str	r2, [r4, #16]
 801005a:	2201      	movs	r2, #1
 801005c:	615a      	str	r2, [r3, #20]
 801005e:	e7bb      	b.n	800ffd8 <__gethex+0x3c8>
 8010060:	6922      	ldr	r2, [r4, #16]
 8010062:	455a      	cmp	r2, fp
 8010064:	dd0b      	ble.n	801007e <__gethex+0x46e>
 8010066:	2101      	movs	r1, #1
 8010068:	4620      	mov	r0, r4
 801006a:	f7ff fd6a 	bl	800fb42 <rshift>
 801006e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010072:	3501      	adds	r5, #1
 8010074:	42ab      	cmp	r3, r5
 8010076:	f6ff aed0 	blt.w	800fe1a <__gethex+0x20a>
 801007a:	2701      	movs	r7, #1
 801007c:	e7c0      	b.n	8010000 <__gethex+0x3f0>
 801007e:	f016 061f 	ands.w	r6, r6, #31
 8010082:	d0fa      	beq.n	801007a <__gethex+0x46a>
 8010084:	449a      	add	sl, r3
 8010086:	f1c6 0620 	rsb	r6, r6, #32
 801008a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801008e:	f000 f9f1 	bl	8010474 <__hi0bits>
 8010092:	42b0      	cmp	r0, r6
 8010094:	dbe7      	blt.n	8010066 <__gethex+0x456>
 8010096:	e7f0      	b.n	801007a <__gethex+0x46a>
 8010098:	080121cc 	.word	0x080121cc

0801009c <L_shift>:
 801009c:	f1c2 0208 	rsb	r2, r2, #8
 80100a0:	0092      	lsls	r2, r2, #2
 80100a2:	b570      	push	{r4, r5, r6, lr}
 80100a4:	f1c2 0620 	rsb	r6, r2, #32
 80100a8:	6843      	ldr	r3, [r0, #4]
 80100aa:	6804      	ldr	r4, [r0, #0]
 80100ac:	fa03 f506 	lsl.w	r5, r3, r6
 80100b0:	432c      	orrs	r4, r5
 80100b2:	40d3      	lsrs	r3, r2
 80100b4:	6004      	str	r4, [r0, #0]
 80100b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80100ba:	4288      	cmp	r0, r1
 80100bc:	d3f4      	bcc.n	80100a8 <L_shift+0xc>
 80100be:	bd70      	pop	{r4, r5, r6, pc}

080100c0 <__match>:
 80100c0:	b530      	push	{r4, r5, lr}
 80100c2:	6803      	ldr	r3, [r0, #0]
 80100c4:	3301      	adds	r3, #1
 80100c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ca:	b914      	cbnz	r4, 80100d2 <__match+0x12>
 80100cc:	6003      	str	r3, [r0, #0]
 80100ce:	2001      	movs	r0, #1
 80100d0:	bd30      	pop	{r4, r5, pc}
 80100d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80100da:	2d19      	cmp	r5, #25
 80100dc:	bf98      	it	ls
 80100de:	3220      	addls	r2, #32
 80100e0:	42a2      	cmp	r2, r4
 80100e2:	d0f0      	beq.n	80100c6 <__match+0x6>
 80100e4:	2000      	movs	r0, #0
 80100e6:	e7f3      	b.n	80100d0 <__match+0x10>

080100e8 <__hexnan>:
 80100e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ec:	680b      	ldr	r3, [r1, #0]
 80100ee:	6801      	ldr	r1, [r0, #0]
 80100f0:	115e      	asrs	r6, r3, #5
 80100f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80100f6:	f013 031f 	ands.w	r3, r3, #31
 80100fa:	b087      	sub	sp, #28
 80100fc:	bf18      	it	ne
 80100fe:	3604      	addne	r6, #4
 8010100:	2500      	movs	r5, #0
 8010102:	1f37      	subs	r7, r6, #4
 8010104:	4682      	mov	sl, r0
 8010106:	4690      	mov	r8, r2
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	f846 5c04 	str.w	r5, [r6, #-4]
 801010e:	46b9      	mov	r9, r7
 8010110:	463c      	mov	r4, r7
 8010112:	9502      	str	r5, [sp, #8]
 8010114:	46ab      	mov	fp, r5
 8010116:	784a      	ldrb	r2, [r1, #1]
 8010118:	1c4b      	adds	r3, r1, #1
 801011a:	9303      	str	r3, [sp, #12]
 801011c:	b342      	cbz	r2, 8010170 <__hexnan+0x88>
 801011e:	4610      	mov	r0, r2
 8010120:	9105      	str	r1, [sp, #20]
 8010122:	9204      	str	r2, [sp, #16]
 8010124:	f7ff fd5f 	bl	800fbe6 <__hexdig_fun>
 8010128:	2800      	cmp	r0, #0
 801012a:	d14f      	bne.n	80101cc <__hexnan+0xe4>
 801012c:	9a04      	ldr	r2, [sp, #16]
 801012e:	9905      	ldr	r1, [sp, #20]
 8010130:	2a20      	cmp	r2, #32
 8010132:	d818      	bhi.n	8010166 <__hexnan+0x7e>
 8010134:	9b02      	ldr	r3, [sp, #8]
 8010136:	459b      	cmp	fp, r3
 8010138:	dd13      	ble.n	8010162 <__hexnan+0x7a>
 801013a:	454c      	cmp	r4, r9
 801013c:	d206      	bcs.n	801014c <__hexnan+0x64>
 801013e:	2d07      	cmp	r5, #7
 8010140:	dc04      	bgt.n	801014c <__hexnan+0x64>
 8010142:	462a      	mov	r2, r5
 8010144:	4649      	mov	r1, r9
 8010146:	4620      	mov	r0, r4
 8010148:	f7ff ffa8 	bl	801009c <L_shift>
 801014c:	4544      	cmp	r4, r8
 801014e:	d950      	bls.n	80101f2 <__hexnan+0x10a>
 8010150:	2300      	movs	r3, #0
 8010152:	f1a4 0904 	sub.w	r9, r4, #4
 8010156:	f844 3c04 	str.w	r3, [r4, #-4]
 801015a:	f8cd b008 	str.w	fp, [sp, #8]
 801015e:	464c      	mov	r4, r9
 8010160:	461d      	mov	r5, r3
 8010162:	9903      	ldr	r1, [sp, #12]
 8010164:	e7d7      	b.n	8010116 <__hexnan+0x2e>
 8010166:	2a29      	cmp	r2, #41	; 0x29
 8010168:	d156      	bne.n	8010218 <__hexnan+0x130>
 801016a:	3102      	adds	r1, #2
 801016c:	f8ca 1000 	str.w	r1, [sl]
 8010170:	f1bb 0f00 	cmp.w	fp, #0
 8010174:	d050      	beq.n	8010218 <__hexnan+0x130>
 8010176:	454c      	cmp	r4, r9
 8010178:	d206      	bcs.n	8010188 <__hexnan+0xa0>
 801017a:	2d07      	cmp	r5, #7
 801017c:	dc04      	bgt.n	8010188 <__hexnan+0xa0>
 801017e:	462a      	mov	r2, r5
 8010180:	4649      	mov	r1, r9
 8010182:	4620      	mov	r0, r4
 8010184:	f7ff ff8a 	bl	801009c <L_shift>
 8010188:	4544      	cmp	r4, r8
 801018a:	d934      	bls.n	80101f6 <__hexnan+0x10e>
 801018c:	f1a8 0204 	sub.w	r2, r8, #4
 8010190:	4623      	mov	r3, r4
 8010192:	f853 1b04 	ldr.w	r1, [r3], #4
 8010196:	f842 1f04 	str.w	r1, [r2, #4]!
 801019a:	429f      	cmp	r7, r3
 801019c:	d2f9      	bcs.n	8010192 <__hexnan+0xaa>
 801019e:	1b3b      	subs	r3, r7, r4
 80101a0:	f023 0303 	bic.w	r3, r3, #3
 80101a4:	3304      	adds	r3, #4
 80101a6:	3401      	adds	r4, #1
 80101a8:	3e03      	subs	r6, #3
 80101aa:	42b4      	cmp	r4, r6
 80101ac:	bf88      	it	hi
 80101ae:	2304      	movhi	r3, #4
 80101b0:	4443      	add	r3, r8
 80101b2:	2200      	movs	r2, #0
 80101b4:	f843 2b04 	str.w	r2, [r3], #4
 80101b8:	429f      	cmp	r7, r3
 80101ba:	d2fb      	bcs.n	80101b4 <__hexnan+0xcc>
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	b91b      	cbnz	r3, 80101c8 <__hexnan+0xe0>
 80101c0:	4547      	cmp	r7, r8
 80101c2:	d127      	bne.n	8010214 <__hexnan+0x12c>
 80101c4:	2301      	movs	r3, #1
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	2005      	movs	r0, #5
 80101ca:	e026      	b.n	801021a <__hexnan+0x132>
 80101cc:	3501      	adds	r5, #1
 80101ce:	2d08      	cmp	r5, #8
 80101d0:	f10b 0b01 	add.w	fp, fp, #1
 80101d4:	dd06      	ble.n	80101e4 <__hexnan+0xfc>
 80101d6:	4544      	cmp	r4, r8
 80101d8:	d9c3      	bls.n	8010162 <__hexnan+0x7a>
 80101da:	2300      	movs	r3, #0
 80101dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80101e0:	2501      	movs	r5, #1
 80101e2:	3c04      	subs	r4, #4
 80101e4:	6822      	ldr	r2, [r4, #0]
 80101e6:	f000 000f 	and.w	r0, r0, #15
 80101ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80101ee:	6022      	str	r2, [r4, #0]
 80101f0:	e7b7      	b.n	8010162 <__hexnan+0x7a>
 80101f2:	2508      	movs	r5, #8
 80101f4:	e7b5      	b.n	8010162 <__hexnan+0x7a>
 80101f6:	9b01      	ldr	r3, [sp, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d0df      	beq.n	80101bc <__hexnan+0xd4>
 80101fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010200:	f1c3 0320 	rsb	r3, r3, #32
 8010204:	fa22 f303 	lsr.w	r3, r2, r3
 8010208:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801020c:	401a      	ands	r2, r3
 801020e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010212:	e7d3      	b.n	80101bc <__hexnan+0xd4>
 8010214:	3f04      	subs	r7, #4
 8010216:	e7d1      	b.n	80101bc <__hexnan+0xd4>
 8010218:	2004      	movs	r0, #4
 801021a:	b007      	add	sp, #28
 801021c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010220 <_localeconv_r>:
 8010220:	4800      	ldr	r0, [pc, #0]	; (8010224 <_localeconv_r+0x4>)
 8010222:	4770      	bx	lr
 8010224:	200002e8 	.word	0x200002e8

08010228 <__retarget_lock_init_recursive>:
 8010228:	4770      	bx	lr

0801022a <__retarget_lock_acquire_recursive>:
 801022a:	4770      	bx	lr

0801022c <__retarget_lock_release_recursive>:
 801022c:	4770      	bx	lr

0801022e <__ascii_mbtowc>:
 801022e:	b082      	sub	sp, #8
 8010230:	b901      	cbnz	r1, 8010234 <__ascii_mbtowc+0x6>
 8010232:	a901      	add	r1, sp, #4
 8010234:	b142      	cbz	r2, 8010248 <__ascii_mbtowc+0x1a>
 8010236:	b14b      	cbz	r3, 801024c <__ascii_mbtowc+0x1e>
 8010238:	7813      	ldrb	r3, [r2, #0]
 801023a:	600b      	str	r3, [r1, #0]
 801023c:	7812      	ldrb	r2, [r2, #0]
 801023e:	1e10      	subs	r0, r2, #0
 8010240:	bf18      	it	ne
 8010242:	2001      	movne	r0, #1
 8010244:	b002      	add	sp, #8
 8010246:	4770      	bx	lr
 8010248:	4610      	mov	r0, r2
 801024a:	e7fb      	b.n	8010244 <__ascii_mbtowc+0x16>
 801024c:	f06f 0001 	mvn.w	r0, #1
 8010250:	e7f8      	b.n	8010244 <__ascii_mbtowc+0x16>

08010252 <memcpy>:
 8010252:	440a      	add	r2, r1
 8010254:	4291      	cmp	r1, r2
 8010256:	f100 33ff 	add.w	r3, r0, #4294967295
 801025a:	d100      	bne.n	801025e <memcpy+0xc>
 801025c:	4770      	bx	lr
 801025e:	b510      	push	{r4, lr}
 8010260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010268:	4291      	cmp	r1, r2
 801026a:	d1f9      	bne.n	8010260 <memcpy+0xe>
 801026c:	bd10      	pop	{r4, pc}
	...

08010270 <__malloc_lock>:
 8010270:	4801      	ldr	r0, [pc, #4]	; (8010278 <__malloc_lock+0x8>)
 8010272:	f7ff bfda 	b.w	801022a <__retarget_lock_acquire_recursive>
 8010276:	bf00      	nop
 8010278:	20002014 	.word	0x20002014

0801027c <__malloc_unlock>:
 801027c:	4801      	ldr	r0, [pc, #4]	; (8010284 <__malloc_unlock+0x8>)
 801027e:	f7ff bfd5 	b.w	801022c <__retarget_lock_release_recursive>
 8010282:	bf00      	nop
 8010284:	20002014 	.word	0x20002014

08010288 <_Balloc>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801028c:	4604      	mov	r4, r0
 801028e:	460d      	mov	r5, r1
 8010290:	b976      	cbnz	r6, 80102b0 <_Balloc+0x28>
 8010292:	2010      	movs	r0, #16
 8010294:	f7fc feb2 	bl	800cffc <malloc>
 8010298:	4602      	mov	r2, r0
 801029a:	6260      	str	r0, [r4, #36]	; 0x24
 801029c:	b920      	cbnz	r0, 80102a8 <_Balloc+0x20>
 801029e:	4b18      	ldr	r3, [pc, #96]	; (8010300 <_Balloc+0x78>)
 80102a0:	4818      	ldr	r0, [pc, #96]	; (8010304 <_Balloc+0x7c>)
 80102a2:	2166      	movs	r1, #102	; 0x66
 80102a4:	f001 f8ae 	bl	8011404 <__assert_func>
 80102a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102ac:	6006      	str	r6, [r0, #0]
 80102ae:	60c6      	str	r6, [r0, #12]
 80102b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80102b2:	68f3      	ldr	r3, [r6, #12]
 80102b4:	b183      	cbz	r3, 80102d8 <_Balloc+0x50>
 80102b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102be:	b9b8      	cbnz	r0, 80102f0 <_Balloc+0x68>
 80102c0:	2101      	movs	r1, #1
 80102c2:	fa01 f605 	lsl.w	r6, r1, r5
 80102c6:	1d72      	adds	r2, r6, #5
 80102c8:	0092      	lsls	r2, r2, #2
 80102ca:	4620      	mov	r0, r4
 80102cc:	f000 fc97 	bl	8010bfe <_calloc_r>
 80102d0:	b160      	cbz	r0, 80102ec <_Balloc+0x64>
 80102d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102d6:	e00e      	b.n	80102f6 <_Balloc+0x6e>
 80102d8:	2221      	movs	r2, #33	; 0x21
 80102da:	2104      	movs	r1, #4
 80102dc:	4620      	mov	r0, r4
 80102de:	f000 fc8e 	bl	8010bfe <_calloc_r>
 80102e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102e4:	60f0      	str	r0, [r6, #12]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e4      	bne.n	80102b6 <_Balloc+0x2e>
 80102ec:	2000      	movs	r0, #0
 80102ee:	bd70      	pop	{r4, r5, r6, pc}
 80102f0:	6802      	ldr	r2, [r0, #0]
 80102f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102f6:	2300      	movs	r3, #0
 80102f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102fc:	e7f7      	b.n	80102ee <_Balloc+0x66>
 80102fe:	bf00      	nop
 8010300:	08012156 	.word	0x08012156
 8010304:	080122c0 	.word	0x080122c0

08010308 <_Bfree>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801030c:	4605      	mov	r5, r0
 801030e:	460c      	mov	r4, r1
 8010310:	b976      	cbnz	r6, 8010330 <_Bfree+0x28>
 8010312:	2010      	movs	r0, #16
 8010314:	f7fc fe72 	bl	800cffc <malloc>
 8010318:	4602      	mov	r2, r0
 801031a:	6268      	str	r0, [r5, #36]	; 0x24
 801031c:	b920      	cbnz	r0, 8010328 <_Bfree+0x20>
 801031e:	4b09      	ldr	r3, [pc, #36]	; (8010344 <_Bfree+0x3c>)
 8010320:	4809      	ldr	r0, [pc, #36]	; (8010348 <_Bfree+0x40>)
 8010322:	218a      	movs	r1, #138	; 0x8a
 8010324:	f001 f86e 	bl	8011404 <__assert_func>
 8010328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801032c:	6006      	str	r6, [r0, #0]
 801032e:	60c6      	str	r6, [r0, #12]
 8010330:	b13c      	cbz	r4, 8010342 <_Bfree+0x3a>
 8010332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010334:	6862      	ldr	r2, [r4, #4]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801033c:	6021      	str	r1, [r4, #0]
 801033e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010342:	bd70      	pop	{r4, r5, r6, pc}
 8010344:	08012156 	.word	0x08012156
 8010348:	080122c0 	.word	0x080122c0

0801034c <__multadd>:
 801034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010350:	690e      	ldr	r6, [r1, #16]
 8010352:	4607      	mov	r7, r0
 8010354:	4698      	mov	r8, r3
 8010356:	460c      	mov	r4, r1
 8010358:	f101 0014 	add.w	r0, r1, #20
 801035c:	2300      	movs	r3, #0
 801035e:	6805      	ldr	r5, [r0, #0]
 8010360:	b2a9      	uxth	r1, r5
 8010362:	fb02 8101 	mla	r1, r2, r1, r8
 8010366:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801036a:	0c2d      	lsrs	r5, r5, #16
 801036c:	fb02 c505 	mla	r5, r2, r5, ip
 8010370:	b289      	uxth	r1, r1
 8010372:	3301      	adds	r3, #1
 8010374:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010378:	429e      	cmp	r6, r3
 801037a:	f840 1b04 	str.w	r1, [r0], #4
 801037e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010382:	dcec      	bgt.n	801035e <__multadd+0x12>
 8010384:	f1b8 0f00 	cmp.w	r8, #0
 8010388:	d022      	beq.n	80103d0 <__multadd+0x84>
 801038a:	68a3      	ldr	r3, [r4, #8]
 801038c:	42b3      	cmp	r3, r6
 801038e:	dc19      	bgt.n	80103c4 <__multadd+0x78>
 8010390:	6861      	ldr	r1, [r4, #4]
 8010392:	4638      	mov	r0, r7
 8010394:	3101      	adds	r1, #1
 8010396:	f7ff ff77 	bl	8010288 <_Balloc>
 801039a:	4605      	mov	r5, r0
 801039c:	b928      	cbnz	r0, 80103aa <__multadd+0x5e>
 801039e:	4602      	mov	r2, r0
 80103a0:	4b0d      	ldr	r3, [pc, #52]	; (80103d8 <__multadd+0x8c>)
 80103a2:	480e      	ldr	r0, [pc, #56]	; (80103dc <__multadd+0x90>)
 80103a4:	21b5      	movs	r1, #181	; 0xb5
 80103a6:	f001 f82d 	bl	8011404 <__assert_func>
 80103aa:	6922      	ldr	r2, [r4, #16]
 80103ac:	3202      	adds	r2, #2
 80103ae:	f104 010c 	add.w	r1, r4, #12
 80103b2:	0092      	lsls	r2, r2, #2
 80103b4:	300c      	adds	r0, #12
 80103b6:	f7ff ff4c 	bl	8010252 <memcpy>
 80103ba:	4621      	mov	r1, r4
 80103bc:	4638      	mov	r0, r7
 80103be:	f7ff ffa3 	bl	8010308 <_Bfree>
 80103c2:	462c      	mov	r4, r5
 80103c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80103c8:	3601      	adds	r6, #1
 80103ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80103ce:	6126      	str	r6, [r4, #16]
 80103d0:	4620      	mov	r0, r4
 80103d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d6:	bf00      	nop
 80103d8:	080121cc 	.word	0x080121cc
 80103dc:	080122c0 	.word	0x080122c0

080103e0 <__s2b>:
 80103e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103e4:	460c      	mov	r4, r1
 80103e6:	4615      	mov	r5, r2
 80103e8:	461f      	mov	r7, r3
 80103ea:	2209      	movs	r2, #9
 80103ec:	3308      	adds	r3, #8
 80103ee:	4606      	mov	r6, r0
 80103f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80103f4:	2100      	movs	r1, #0
 80103f6:	2201      	movs	r2, #1
 80103f8:	429a      	cmp	r2, r3
 80103fa:	db09      	blt.n	8010410 <__s2b+0x30>
 80103fc:	4630      	mov	r0, r6
 80103fe:	f7ff ff43 	bl	8010288 <_Balloc>
 8010402:	b940      	cbnz	r0, 8010416 <__s2b+0x36>
 8010404:	4602      	mov	r2, r0
 8010406:	4b19      	ldr	r3, [pc, #100]	; (801046c <__s2b+0x8c>)
 8010408:	4819      	ldr	r0, [pc, #100]	; (8010470 <__s2b+0x90>)
 801040a:	21ce      	movs	r1, #206	; 0xce
 801040c:	f000 fffa 	bl	8011404 <__assert_func>
 8010410:	0052      	lsls	r2, r2, #1
 8010412:	3101      	adds	r1, #1
 8010414:	e7f0      	b.n	80103f8 <__s2b+0x18>
 8010416:	9b08      	ldr	r3, [sp, #32]
 8010418:	6143      	str	r3, [r0, #20]
 801041a:	2d09      	cmp	r5, #9
 801041c:	f04f 0301 	mov.w	r3, #1
 8010420:	6103      	str	r3, [r0, #16]
 8010422:	dd16      	ble.n	8010452 <__s2b+0x72>
 8010424:	f104 0909 	add.w	r9, r4, #9
 8010428:	46c8      	mov	r8, r9
 801042a:	442c      	add	r4, r5
 801042c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010430:	4601      	mov	r1, r0
 8010432:	3b30      	subs	r3, #48	; 0x30
 8010434:	220a      	movs	r2, #10
 8010436:	4630      	mov	r0, r6
 8010438:	f7ff ff88 	bl	801034c <__multadd>
 801043c:	45a0      	cmp	r8, r4
 801043e:	d1f5      	bne.n	801042c <__s2b+0x4c>
 8010440:	f1a5 0408 	sub.w	r4, r5, #8
 8010444:	444c      	add	r4, r9
 8010446:	1b2d      	subs	r5, r5, r4
 8010448:	1963      	adds	r3, r4, r5
 801044a:	42bb      	cmp	r3, r7
 801044c:	db04      	blt.n	8010458 <__s2b+0x78>
 801044e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010452:	340a      	adds	r4, #10
 8010454:	2509      	movs	r5, #9
 8010456:	e7f6      	b.n	8010446 <__s2b+0x66>
 8010458:	f814 3b01 	ldrb.w	r3, [r4], #1
 801045c:	4601      	mov	r1, r0
 801045e:	3b30      	subs	r3, #48	; 0x30
 8010460:	220a      	movs	r2, #10
 8010462:	4630      	mov	r0, r6
 8010464:	f7ff ff72 	bl	801034c <__multadd>
 8010468:	e7ee      	b.n	8010448 <__s2b+0x68>
 801046a:	bf00      	nop
 801046c:	080121cc 	.word	0x080121cc
 8010470:	080122c0 	.word	0x080122c0

08010474 <__hi0bits>:
 8010474:	0c03      	lsrs	r3, r0, #16
 8010476:	041b      	lsls	r3, r3, #16
 8010478:	b9d3      	cbnz	r3, 80104b0 <__hi0bits+0x3c>
 801047a:	0400      	lsls	r0, r0, #16
 801047c:	2310      	movs	r3, #16
 801047e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010482:	bf04      	itt	eq
 8010484:	0200      	lsleq	r0, r0, #8
 8010486:	3308      	addeq	r3, #8
 8010488:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801048c:	bf04      	itt	eq
 801048e:	0100      	lsleq	r0, r0, #4
 8010490:	3304      	addeq	r3, #4
 8010492:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010496:	bf04      	itt	eq
 8010498:	0080      	lsleq	r0, r0, #2
 801049a:	3302      	addeq	r3, #2
 801049c:	2800      	cmp	r0, #0
 801049e:	db05      	blt.n	80104ac <__hi0bits+0x38>
 80104a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80104a4:	f103 0301 	add.w	r3, r3, #1
 80104a8:	bf08      	it	eq
 80104aa:	2320      	moveq	r3, #32
 80104ac:	4618      	mov	r0, r3
 80104ae:	4770      	bx	lr
 80104b0:	2300      	movs	r3, #0
 80104b2:	e7e4      	b.n	801047e <__hi0bits+0xa>

080104b4 <__lo0bits>:
 80104b4:	6803      	ldr	r3, [r0, #0]
 80104b6:	f013 0207 	ands.w	r2, r3, #7
 80104ba:	4601      	mov	r1, r0
 80104bc:	d00b      	beq.n	80104d6 <__lo0bits+0x22>
 80104be:	07da      	lsls	r2, r3, #31
 80104c0:	d424      	bmi.n	801050c <__lo0bits+0x58>
 80104c2:	0798      	lsls	r0, r3, #30
 80104c4:	bf49      	itett	mi
 80104c6:	085b      	lsrmi	r3, r3, #1
 80104c8:	089b      	lsrpl	r3, r3, #2
 80104ca:	2001      	movmi	r0, #1
 80104cc:	600b      	strmi	r3, [r1, #0]
 80104ce:	bf5c      	itt	pl
 80104d0:	600b      	strpl	r3, [r1, #0]
 80104d2:	2002      	movpl	r0, #2
 80104d4:	4770      	bx	lr
 80104d6:	b298      	uxth	r0, r3
 80104d8:	b9b0      	cbnz	r0, 8010508 <__lo0bits+0x54>
 80104da:	0c1b      	lsrs	r3, r3, #16
 80104dc:	2010      	movs	r0, #16
 80104de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104e2:	bf04      	itt	eq
 80104e4:	0a1b      	lsreq	r3, r3, #8
 80104e6:	3008      	addeq	r0, #8
 80104e8:	071a      	lsls	r2, r3, #28
 80104ea:	bf04      	itt	eq
 80104ec:	091b      	lsreq	r3, r3, #4
 80104ee:	3004      	addeq	r0, #4
 80104f0:	079a      	lsls	r2, r3, #30
 80104f2:	bf04      	itt	eq
 80104f4:	089b      	lsreq	r3, r3, #2
 80104f6:	3002      	addeq	r0, #2
 80104f8:	07da      	lsls	r2, r3, #31
 80104fa:	d403      	bmi.n	8010504 <__lo0bits+0x50>
 80104fc:	085b      	lsrs	r3, r3, #1
 80104fe:	f100 0001 	add.w	r0, r0, #1
 8010502:	d005      	beq.n	8010510 <__lo0bits+0x5c>
 8010504:	600b      	str	r3, [r1, #0]
 8010506:	4770      	bx	lr
 8010508:	4610      	mov	r0, r2
 801050a:	e7e8      	b.n	80104de <__lo0bits+0x2a>
 801050c:	2000      	movs	r0, #0
 801050e:	4770      	bx	lr
 8010510:	2020      	movs	r0, #32
 8010512:	4770      	bx	lr

08010514 <__i2b>:
 8010514:	b510      	push	{r4, lr}
 8010516:	460c      	mov	r4, r1
 8010518:	2101      	movs	r1, #1
 801051a:	f7ff feb5 	bl	8010288 <_Balloc>
 801051e:	4602      	mov	r2, r0
 8010520:	b928      	cbnz	r0, 801052e <__i2b+0x1a>
 8010522:	4b05      	ldr	r3, [pc, #20]	; (8010538 <__i2b+0x24>)
 8010524:	4805      	ldr	r0, [pc, #20]	; (801053c <__i2b+0x28>)
 8010526:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801052a:	f000 ff6b 	bl	8011404 <__assert_func>
 801052e:	2301      	movs	r3, #1
 8010530:	6144      	str	r4, [r0, #20]
 8010532:	6103      	str	r3, [r0, #16]
 8010534:	bd10      	pop	{r4, pc}
 8010536:	bf00      	nop
 8010538:	080121cc 	.word	0x080121cc
 801053c:	080122c0 	.word	0x080122c0

08010540 <__multiply>:
 8010540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010544:	4614      	mov	r4, r2
 8010546:	690a      	ldr	r2, [r1, #16]
 8010548:	6923      	ldr	r3, [r4, #16]
 801054a:	429a      	cmp	r2, r3
 801054c:	bfb8      	it	lt
 801054e:	460b      	movlt	r3, r1
 8010550:	460d      	mov	r5, r1
 8010552:	bfbc      	itt	lt
 8010554:	4625      	movlt	r5, r4
 8010556:	461c      	movlt	r4, r3
 8010558:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801055c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010560:	68ab      	ldr	r3, [r5, #8]
 8010562:	6869      	ldr	r1, [r5, #4]
 8010564:	eb0a 0709 	add.w	r7, sl, r9
 8010568:	42bb      	cmp	r3, r7
 801056a:	b085      	sub	sp, #20
 801056c:	bfb8      	it	lt
 801056e:	3101      	addlt	r1, #1
 8010570:	f7ff fe8a 	bl	8010288 <_Balloc>
 8010574:	b930      	cbnz	r0, 8010584 <__multiply+0x44>
 8010576:	4602      	mov	r2, r0
 8010578:	4b42      	ldr	r3, [pc, #264]	; (8010684 <__multiply+0x144>)
 801057a:	4843      	ldr	r0, [pc, #268]	; (8010688 <__multiply+0x148>)
 801057c:	f240 115d 	movw	r1, #349	; 0x15d
 8010580:	f000 ff40 	bl	8011404 <__assert_func>
 8010584:	f100 0614 	add.w	r6, r0, #20
 8010588:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801058c:	4633      	mov	r3, r6
 801058e:	2200      	movs	r2, #0
 8010590:	4543      	cmp	r3, r8
 8010592:	d31e      	bcc.n	80105d2 <__multiply+0x92>
 8010594:	f105 0c14 	add.w	ip, r5, #20
 8010598:	f104 0314 	add.w	r3, r4, #20
 801059c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80105a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80105a4:	9202      	str	r2, [sp, #8]
 80105a6:	ebac 0205 	sub.w	r2, ip, r5
 80105aa:	3a15      	subs	r2, #21
 80105ac:	f022 0203 	bic.w	r2, r2, #3
 80105b0:	3204      	adds	r2, #4
 80105b2:	f105 0115 	add.w	r1, r5, #21
 80105b6:	458c      	cmp	ip, r1
 80105b8:	bf38      	it	cc
 80105ba:	2204      	movcc	r2, #4
 80105bc:	9201      	str	r2, [sp, #4]
 80105be:	9a02      	ldr	r2, [sp, #8]
 80105c0:	9303      	str	r3, [sp, #12]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d808      	bhi.n	80105d8 <__multiply+0x98>
 80105c6:	2f00      	cmp	r7, #0
 80105c8:	dc55      	bgt.n	8010676 <__multiply+0x136>
 80105ca:	6107      	str	r7, [r0, #16]
 80105cc:	b005      	add	sp, #20
 80105ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d2:	f843 2b04 	str.w	r2, [r3], #4
 80105d6:	e7db      	b.n	8010590 <__multiply+0x50>
 80105d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80105dc:	f1ba 0f00 	cmp.w	sl, #0
 80105e0:	d020      	beq.n	8010624 <__multiply+0xe4>
 80105e2:	f105 0e14 	add.w	lr, r5, #20
 80105e6:	46b1      	mov	r9, r6
 80105e8:	2200      	movs	r2, #0
 80105ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80105ee:	f8d9 b000 	ldr.w	fp, [r9]
 80105f2:	b2a1      	uxth	r1, r4
 80105f4:	fa1f fb8b 	uxth.w	fp, fp
 80105f8:	fb0a b101 	mla	r1, sl, r1, fp
 80105fc:	4411      	add	r1, r2
 80105fe:	f8d9 2000 	ldr.w	r2, [r9]
 8010602:	0c24      	lsrs	r4, r4, #16
 8010604:	0c12      	lsrs	r2, r2, #16
 8010606:	fb0a 2404 	mla	r4, sl, r4, r2
 801060a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801060e:	b289      	uxth	r1, r1
 8010610:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010614:	45f4      	cmp	ip, lr
 8010616:	f849 1b04 	str.w	r1, [r9], #4
 801061a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801061e:	d8e4      	bhi.n	80105ea <__multiply+0xaa>
 8010620:	9901      	ldr	r1, [sp, #4]
 8010622:	5072      	str	r2, [r6, r1]
 8010624:	9a03      	ldr	r2, [sp, #12]
 8010626:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801062a:	3304      	adds	r3, #4
 801062c:	f1b9 0f00 	cmp.w	r9, #0
 8010630:	d01f      	beq.n	8010672 <__multiply+0x132>
 8010632:	6834      	ldr	r4, [r6, #0]
 8010634:	f105 0114 	add.w	r1, r5, #20
 8010638:	46b6      	mov	lr, r6
 801063a:	f04f 0a00 	mov.w	sl, #0
 801063e:	880a      	ldrh	r2, [r1, #0]
 8010640:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010644:	fb09 b202 	mla	r2, r9, r2, fp
 8010648:	4492      	add	sl, r2
 801064a:	b2a4      	uxth	r4, r4
 801064c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010650:	f84e 4b04 	str.w	r4, [lr], #4
 8010654:	f851 4b04 	ldr.w	r4, [r1], #4
 8010658:	f8be 2000 	ldrh.w	r2, [lr]
 801065c:	0c24      	lsrs	r4, r4, #16
 801065e:	fb09 2404 	mla	r4, r9, r4, r2
 8010662:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010666:	458c      	cmp	ip, r1
 8010668:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801066c:	d8e7      	bhi.n	801063e <__multiply+0xfe>
 801066e:	9a01      	ldr	r2, [sp, #4]
 8010670:	50b4      	str	r4, [r6, r2]
 8010672:	3604      	adds	r6, #4
 8010674:	e7a3      	b.n	80105be <__multiply+0x7e>
 8010676:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801067a:	2b00      	cmp	r3, #0
 801067c:	d1a5      	bne.n	80105ca <__multiply+0x8a>
 801067e:	3f01      	subs	r7, #1
 8010680:	e7a1      	b.n	80105c6 <__multiply+0x86>
 8010682:	bf00      	nop
 8010684:	080121cc 	.word	0x080121cc
 8010688:	080122c0 	.word	0x080122c0

0801068c <__pow5mult>:
 801068c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010690:	4615      	mov	r5, r2
 8010692:	f012 0203 	ands.w	r2, r2, #3
 8010696:	4606      	mov	r6, r0
 8010698:	460f      	mov	r7, r1
 801069a:	d007      	beq.n	80106ac <__pow5mult+0x20>
 801069c:	4c25      	ldr	r4, [pc, #148]	; (8010734 <__pow5mult+0xa8>)
 801069e:	3a01      	subs	r2, #1
 80106a0:	2300      	movs	r3, #0
 80106a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106a6:	f7ff fe51 	bl	801034c <__multadd>
 80106aa:	4607      	mov	r7, r0
 80106ac:	10ad      	asrs	r5, r5, #2
 80106ae:	d03d      	beq.n	801072c <__pow5mult+0xa0>
 80106b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80106b2:	b97c      	cbnz	r4, 80106d4 <__pow5mult+0x48>
 80106b4:	2010      	movs	r0, #16
 80106b6:	f7fc fca1 	bl	800cffc <malloc>
 80106ba:	4602      	mov	r2, r0
 80106bc:	6270      	str	r0, [r6, #36]	; 0x24
 80106be:	b928      	cbnz	r0, 80106cc <__pow5mult+0x40>
 80106c0:	4b1d      	ldr	r3, [pc, #116]	; (8010738 <__pow5mult+0xac>)
 80106c2:	481e      	ldr	r0, [pc, #120]	; (801073c <__pow5mult+0xb0>)
 80106c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80106c8:	f000 fe9c 	bl	8011404 <__assert_func>
 80106cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106d0:	6004      	str	r4, [r0, #0]
 80106d2:	60c4      	str	r4, [r0, #12]
 80106d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106dc:	b94c      	cbnz	r4, 80106f2 <__pow5mult+0x66>
 80106de:	f240 2171 	movw	r1, #625	; 0x271
 80106e2:	4630      	mov	r0, r6
 80106e4:	f7ff ff16 	bl	8010514 <__i2b>
 80106e8:	2300      	movs	r3, #0
 80106ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80106ee:	4604      	mov	r4, r0
 80106f0:	6003      	str	r3, [r0, #0]
 80106f2:	f04f 0900 	mov.w	r9, #0
 80106f6:	07eb      	lsls	r3, r5, #31
 80106f8:	d50a      	bpl.n	8010710 <__pow5mult+0x84>
 80106fa:	4639      	mov	r1, r7
 80106fc:	4622      	mov	r2, r4
 80106fe:	4630      	mov	r0, r6
 8010700:	f7ff ff1e 	bl	8010540 <__multiply>
 8010704:	4639      	mov	r1, r7
 8010706:	4680      	mov	r8, r0
 8010708:	4630      	mov	r0, r6
 801070a:	f7ff fdfd 	bl	8010308 <_Bfree>
 801070e:	4647      	mov	r7, r8
 8010710:	106d      	asrs	r5, r5, #1
 8010712:	d00b      	beq.n	801072c <__pow5mult+0xa0>
 8010714:	6820      	ldr	r0, [r4, #0]
 8010716:	b938      	cbnz	r0, 8010728 <__pow5mult+0x9c>
 8010718:	4622      	mov	r2, r4
 801071a:	4621      	mov	r1, r4
 801071c:	4630      	mov	r0, r6
 801071e:	f7ff ff0f 	bl	8010540 <__multiply>
 8010722:	6020      	str	r0, [r4, #0]
 8010724:	f8c0 9000 	str.w	r9, [r0]
 8010728:	4604      	mov	r4, r0
 801072a:	e7e4      	b.n	80106f6 <__pow5mult+0x6a>
 801072c:	4638      	mov	r0, r7
 801072e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010732:	bf00      	nop
 8010734:	08012410 	.word	0x08012410
 8010738:	08012156 	.word	0x08012156
 801073c:	080122c0 	.word	0x080122c0

08010740 <__lshift>:
 8010740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010744:	460c      	mov	r4, r1
 8010746:	6849      	ldr	r1, [r1, #4]
 8010748:	6923      	ldr	r3, [r4, #16]
 801074a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801074e:	68a3      	ldr	r3, [r4, #8]
 8010750:	4607      	mov	r7, r0
 8010752:	4691      	mov	r9, r2
 8010754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010758:	f108 0601 	add.w	r6, r8, #1
 801075c:	42b3      	cmp	r3, r6
 801075e:	db0b      	blt.n	8010778 <__lshift+0x38>
 8010760:	4638      	mov	r0, r7
 8010762:	f7ff fd91 	bl	8010288 <_Balloc>
 8010766:	4605      	mov	r5, r0
 8010768:	b948      	cbnz	r0, 801077e <__lshift+0x3e>
 801076a:	4602      	mov	r2, r0
 801076c:	4b28      	ldr	r3, [pc, #160]	; (8010810 <__lshift+0xd0>)
 801076e:	4829      	ldr	r0, [pc, #164]	; (8010814 <__lshift+0xd4>)
 8010770:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010774:	f000 fe46 	bl	8011404 <__assert_func>
 8010778:	3101      	adds	r1, #1
 801077a:	005b      	lsls	r3, r3, #1
 801077c:	e7ee      	b.n	801075c <__lshift+0x1c>
 801077e:	2300      	movs	r3, #0
 8010780:	f100 0114 	add.w	r1, r0, #20
 8010784:	f100 0210 	add.w	r2, r0, #16
 8010788:	4618      	mov	r0, r3
 801078a:	4553      	cmp	r3, sl
 801078c:	db33      	blt.n	80107f6 <__lshift+0xb6>
 801078e:	6920      	ldr	r0, [r4, #16]
 8010790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010794:	f104 0314 	add.w	r3, r4, #20
 8010798:	f019 091f 	ands.w	r9, r9, #31
 801079c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107a4:	d02b      	beq.n	80107fe <__lshift+0xbe>
 80107a6:	f1c9 0e20 	rsb	lr, r9, #32
 80107aa:	468a      	mov	sl, r1
 80107ac:	2200      	movs	r2, #0
 80107ae:	6818      	ldr	r0, [r3, #0]
 80107b0:	fa00 f009 	lsl.w	r0, r0, r9
 80107b4:	4302      	orrs	r2, r0
 80107b6:	f84a 2b04 	str.w	r2, [sl], #4
 80107ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80107be:	459c      	cmp	ip, r3
 80107c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80107c4:	d8f3      	bhi.n	80107ae <__lshift+0x6e>
 80107c6:	ebac 0304 	sub.w	r3, ip, r4
 80107ca:	3b15      	subs	r3, #21
 80107cc:	f023 0303 	bic.w	r3, r3, #3
 80107d0:	3304      	adds	r3, #4
 80107d2:	f104 0015 	add.w	r0, r4, #21
 80107d6:	4584      	cmp	ip, r0
 80107d8:	bf38      	it	cc
 80107da:	2304      	movcc	r3, #4
 80107dc:	50ca      	str	r2, [r1, r3]
 80107de:	b10a      	cbz	r2, 80107e4 <__lshift+0xa4>
 80107e0:	f108 0602 	add.w	r6, r8, #2
 80107e4:	3e01      	subs	r6, #1
 80107e6:	4638      	mov	r0, r7
 80107e8:	612e      	str	r6, [r5, #16]
 80107ea:	4621      	mov	r1, r4
 80107ec:	f7ff fd8c 	bl	8010308 <_Bfree>
 80107f0:	4628      	mov	r0, r5
 80107f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80107fa:	3301      	adds	r3, #1
 80107fc:	e7c5      	b.n	801078a <__lshift+0x4a>
 80107fe:	3904      	subs	r1, #4
 8010800:	f853 2b04 	ldr.w	r2, [r3], #4
 8010804:	f841 2f04 	str.w	r2, [r1, #4]!
 8010808:	459c      	cmp	ip, r3
 801080a:	d8f9      	bhi.n	8010800 <__lshift+0xc0>
 801080c:	e7ea      	b.n	80107e4 <__lshift+0xa4>
 801080e:	bf00      	nop
 8010810:	080121cc 	.word	0x080121cc
 8010814:	080122c0 	.word	0x080122c0

08010818 <__mcmp>:
 8010818:	b530      	push	{r4, r5, lr}
 801081a:	6902      	ldr	r2, [r0, #16]
 801081c:	690c      	ldr	r4, [r1, #16]
 801081e:	1b12      	subs	r2, r2, r4
 8010820:	d10e      	bne.n	8010840 <__mcmp+0x28>
 8010822:	f100 0314 	add.w	r3, r0, #20
 8010826:	3114      	adds	r1, #20
 8010828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801082c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010838:	42a5      	cmp	r5, r4
 801083a:	d003      	beq.n	8010844 <__mcmp+0x2c>
 801083c:	d305      	bcc.n	801084a <__mcmp+0x32>
 801083e:	2201      	movs	r2, #1
 8010840:	4610      	mov	r0, r2
 8010842:	bd30      	pop	{r4, r5, pc}
 8010844:	4283      	cmp	r3, r0
 8010846:	d3f3      	bcc.n	8010830 <__mcmp+0x18>
 8010848:	e7fa      	b.n	8010840 <__mcmp+0x28>
 801084a:	f04f 32ff 	mov.w	r2, #4294967295
 801084e:	e7f7      	b.n	8010840 <__mcmp+0x28>

08010850 <__mdiff>:
 8010850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	460c      	mov	r4, r1
 8010856:	4606      	mov	r6, r0
 8010858:	4611      	mov	r1, r2
 801085a:	4620      	mov	r0, r4
 801085c:	4617      	mov	r7, r2
 801085e:	f7ff ffdb 	bl	8010818 <__mcmp>
 8010862:	1e05      	subs	r5, r0, #0
 8010864:	d110      	bne.n	8010888 <__mdiff+0x38>
 8010866:	4629      	mov	r1, r5
 8010868:	4630      	mov	r0, r6
 801086a:	f7ff fd0d 	bl	8010288 <_Balloc>
 801086e:	b930      	cbnz	r0, 801087e <__mdiff+0x2e>
 8010870:	4b39      	ldr	r3, [pc, #228]	; (8010958 <__mdiff+0x108>)
 8010872:	4602      	mov	r2, r0
 8010874:	f240 2132 	movw	r1, #562	; 0x232
 8010878:	4838      	ldr	r0, [pc, #224]	; (801095c <__mdiff+0x10c>)
 801087a:	f000 fdc3 	bl	8011404 <__assert_func>
 801087e:	2301      	movs	r3, #1
 8010880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010888:	bfa4      	itt	ge
 801088a:	463b      	movge	r3, r7
 801088c:	4627      	movge	r7, r4
 801088e:	4630      	mov	r0, r6
 8010890:	6879      	ldr	r1, [r7, #4]
 8010892:	bfa6      	itte	ge
 8010894:	461c      	movge	r4, r3
 8010896:	2500      	movge	r5, #0
 8010898:	2501      	movlt	r5, #1
 801089a:	f7ff fcf5 	bl	8010288 <_Balloc>
 801089e:	b920      	cbnz	r0, 80108aa <__mdiff+0x5a>
 80108a0:	4b2d      	ldr	r3, [pc, #180]	; (8010958 <__mdiff+0x108>)
 80108a2:	4602      	mov	r2, r0
 80108a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80108a8:	e7e6      	b.n	8010878 <__mdiff+0x28>
 80108aa:	693e      	ldr	r6, [r7, #16]
 80108ac:	60c5      	str	r5, [r0, #12]
 80108ae:	6925      	ldr	r5, [r4, #16]
 80108b0:	f107 0114 	add.w	r1, r7, #20
 80108b4:	f104 0914 	add.w	r9, r4, #20
 80108b8:	f100 0e14 	add.w	lr, r0, #20
 80108bc:	f107 0210 	add.w	r2, r7, #16
 80108c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80108c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80108c8:	46f2      	mov	sl, lr
 80108ca:	2700      	movs	r7, #0
 80108cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80108d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80108d4:	fa1f f883 	uxth.w	r8, r3
 80108d8:	fa17 f78b 	uxtah	r7, r7, fp
 80108dc:	0c1b      	lsrs	r3, r3, #16
 80108de:	eba7 0808 	sub.w	r8, r7, r8
 80108e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80108ea:	fa1f f888 	uxth.w	r8, r8
 80108ee:	141f      	asrs	r7, r3, #16
 80108f0:	454d      	cmp	r5, r9
 80108f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80108f6:	f84a 3b04 	str.w	r3, [sl], #4
 80108fa:	d8e7      	bhi.n	80108cc <__mdiff+0x7c>
 80108fc:	1b2b      	subs	r3, r5, r4
 80108fe:	3b15      	subs	r3, #21
 8010900:	f023 0303 	bic.w	r3, r3, #3
 8010904:	3304      	adds	r3, #4
 8010906:	3415      	adds	r4, #21
 8010908:	42a5      	cmp	r5, r4
 801090a:	bf38      	it	cc
 801090c:	2304      	movcc	r3, #4
 801090e:	4419      	add	r1, r3
 8010910:	4473      	add	r3, lr
 8010912:	469e      	mov	lr, r3
 8010914:	460d      	mov	r5, r1
 8010916:	4565      	cmp	r5, ip
 8010918:	d30e      	bcc.n	8010938 <__mdiff+0xe8>
 801091a:	f10c 0203 	add.w	r2, ip, #3
 801091e:	1a52      	subs	r2, r2, r1
 8010920:	f022 0203 	bic.w	r2, r2, #3
 8010924:	3903      	subs	r1, #3
 8010926:	458c      	cmp	ip, r1
 8010928:	bf38      	it	cc
 801092a:	2200      	movcc	r2, #0
 801092c:	441a      	add	r2, r3
 801092e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010932:	b17b      	cbz	r3, 8010954 <__mdiff+0x104>
 8010934:	6106      	str	r6, [r0, #16]
 8010936:	e7a5      	b.n	8010884 <__mdiff+0x34>
 8010938:	f855 8b04 	ldr.w	r8, [r5], #4
 801093c:	fa17 f488 	uxtah	r4, r7, r8
 8010940:	1422      	asrs	r2, r4, #16
 8010942:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010946:	b2a4      	uxth	r4, r4
 8010948:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801094c:	f84e 4b04 	str.w	r4, [lr], #4
 8010950:	1417      	asrs	r7, r2, #16
 8010952:	e7e0      	b.n	8010916 <__mdiff+0xc6>
 8010954:	3e01      	subs	r6, #1
 8010956:	e7ea      	b.n	801092e <__mdiff+0xde>
 8010958:	080121cc 	.word	0x080121cc
 801095c:	080122c0 	.word	0x080122c0

08010960 <__ulp>:
 8010960:	b082      	sub	sp, #8
 8010962:	ed8d 0b00 	vstr	d0, [sp]
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	4912      	ldr	r1, [pc, #72]	; (80109b4 <__ulp+0x54>)
 801096a:	4019      	ands	r1, r3
 801096c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010970:	2900      	cmp	r1, #0
 8010972:	dd05      	ble.n	8010980 <__ulp+0x20>
 8010974:	2200      	movs	r2, #0
 8010976:	460b      	mov	r3, r1
 8010978:	ec43 2b10 	vmov	d0, r2, r3
 801097c:	b002      	add	sp, #8
 801097e:	4770      	bx	lr
 8010980:	4249      	negs	r1, r1
 8010982:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010986:	ea4f 5021 	mov.w	r0, r1, asr #20
 801098a:	f04f 0200 	mov.w	r2, #0
 801098e:	f04f 0300 	mov.w	r3, #0
 8010992:	da04      	bge.n	801099e <__ulp+0x3e>
 8010994:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010998:	fa41 f300 	asr.w	r3, r1, r0
 801099c:	e7ec      	b.n	8010978 <__ulp+0x18>
 801099e:	f1a0 0114 	sub.w	r1, r0, #20
 80109a2:	291e      	cmp	r1, #30
 80109a4:	bfda      	itte	le
 80109a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80109aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80109ae:	2101      	movgt	r1, #1
 80109b0:	460a      	mov	r2, r1
 80109b2:	e7e1      	b.n	8010978 <__ulp+0x18>
 80109b4:	7ff00000 	.word	0x7ff00000

080109b8 <__b2d>:
 80109b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ba:	6905      	ldr	r5, [r0, #16]
 80109bc:	f100 0714 	add.w	r7, r0, #20
 80109c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80109c4:	1f2e      	subs	r6, r5, #4
 80109c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80109ca:	4620      	mov	r0, r4
 80109cc:	f7ff fd52 	bl	8010474 <__hi0bits>
 80109d0:	f1c0 0320 	rsb	r3, r0, #32
 80109d4:	280a      	cmp	r0, #10
 80109d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010a54 <__b2d+0x9c>
 80109da:	600b      	str	r3, [r1, #0]
 80109dc:	dc14      	bgt.n	8010a08 <__b2d+0x50>
 80109de:	f1c0 0e0b 	rsb	lr, r0, #11
 80109e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80109e6:	42b7      	cmp	r7, r6
 80109e8:	ea41 030c 	orr.w	r3, r1, ip
 80109ec:	bf34      	ite	cc
 80109ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80109f2:	2100      	movcs	r1, #0
 80109f4:	3015      	adds	r0, #21
 80109f6:	fa04 f000 	lsl.w	r0, r4, r0
 80109fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80109fe:	ea40 0201 	orr.w	r2, r0, r1
 8010a02:	ec43 2b10 	vmov	d0, r2, r3
 8010a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a08:	42b7      	cmp	r7, r6
 8010a0a:	bf3a      	itte	cc
 8010a0c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a10:	f1a5 0608 	subcc.w	r6, r5, #8
 8010a14:	2100      	movcs	r1, #0
 8010a16:	380b      	subs	r0, #11
 8010a18:	d017      	beq.n	8010a4a <__b2d+0x92>
 8010a1a:	f1c0 0c20 	rsb	ip, r0, #32
 8010a1e:	fa04 f500 	lsl.w	r5, r4, r0
 8010a22:	42be      	cmp	r6, r7
 8010a24:	fa21 f40c 	lsr.w	r4, r1, ip
 8010a28:	ea45 0504 	orr.w	r5, r5, r4
 8010a2c:	bf8c      	ite	hi
 8010a2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010a32:	2400      	movls	r4, #0
 8010a34:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010a38:	fa01 f000 	lsl.w	r0, r1, r0
 8010a3c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010a40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010a44:	ea40 0204 	orr.w	r2, r0, r4
 8010a48:	e7db      	b.n	8010a02 <__b2d+0x4a>
 8010a4a:	ea44 030c 	orr.w	r3, r4, ip
 8010a4e:	460a      	mov	r2, r1
 8010a50:	e7d7      	b.n	8010a02 <__b2d+0x4a>
 8010a52:	bf00      	nop
 8010a54:	3ff00000 	.word	0x3ff00000

08010a58 <__d2b>:
 8010a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a5c:	4689      	mov	r9, r1
 8010a5e:	2101      	movs	r1, #1
 8010a60:	ec57 6b10 	vmov	r6, r7, d0
 8010a64:	4690      	mov	r8, r2
 8010a66:	f7ff fc0f 	bl	8010288 <_Balloc>
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	b930      	cbnz	r0, 8010a7c <__d2b+0x24>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	4b25      	ldr	r3, [pc, #148]	; (8010b08 <__d2b+0xb0>)
 8010a72:	4826      	ldr	r0, [pc, #152]	; (8010b0c <__d2b+0xb4>)
 8010a74:	f240 310a 	movw	r1, #778	; 0x30a
 8010a78:	f000 fcc4 	bl	8011404 <__assert_func>
 8010a7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a84:	bb35      	cbnz	r5, 8010ad4 <__d2b+0x7c>
 8010a86:	2e00      	cmp	r6, #0
 8010a88:	9301      	str	r3, [sp, #4]
 8010a8a:	d028      	beq.n	8010ade <__d2b+0x86>
 8010a8c:	4668      	mov	r0, sp
 8010a8e:	9600      	str	r6, [sp, #0]
 8010a90:	f7ff fd10 	bl	80104b4 <__lo0bits>
 8010a94:	9900      	ldr	r1, [sp, #0]
 8010a96:	b300      	cbz	r0, 8010ada <__d2b+0x82>
 8010a98:	9a01      	ldr	r2, [sp, #4]
 8010a9a:	f1c0 0320 	rsb	r3, r0, #32
 8010a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010aa2:	430b      	orrs	r3, r1
 8010aa4:	40c2      	lsrs	r2, r0
 8010aa6:	6163      	str	r3, [r4, #20]
 8010aa8:	9201      	str	r2, [sp, #4]
 8010aaa:	9b01      	ldr	r3, [sp, #4]
 8010aac:	61a3      	str	r3, [r4, #24]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	bf14      	ite	ne
 8010ab2:	2202      	movne	r2, #2
 8010ab4:	2201      	moveq	r2, #1
 8010ab6:	6122      	str	r2, [r4, #16]
 8010ab8:	b1d5      	cbz	r5, 8010af0 <__d2b+0x98>
 8010aba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010abe:	4405      	add	r5, r0
 8010ac0:	f8c9 5000 	str.w	r5, [r9]
 8010ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ac8:	f8c8 0000 	str.w	r0, [r8]
 8010acc:	4620      	mov	r0, r4
 8010ace:	b003      	add	sp, #12
 8010ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ad8:	e7d5      	b.n	8010a86 <__d2b+0x2e>
 8010ada:	6161      	str	r1, [r4, #20]
 8010adc:	e7e5      	b.n	8010aaa <__d2b+0x52>
 8010ade:	a801      	add	r0, sp, #4
 8010ae0:	f7ff fce8 	bl	80104b4 <__lo0bits>
 8010ae4:	9b01      	ldr	r3, [sp, #4]
 8010ae6:	6163      	str	r3, [r4, #20]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	6122      	str	r2, [r4, #16]
 8010aec:	3020      	adds	r0, #32
 8010aee:	e7e3      	b.n	8010ab8 <__d2b+0x60>
 8010af0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010af8:	f8c9 0000 	str.w	r0, [r9]
 8010afc:	6918      	ldr	r0, [r3, #16]
 8010afe:	f7ff fcb9 	bl	8010474 <__hi0bits>
 8010b02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b06:	e7df      	b.n	8010ac8 <__d2b+0x70>
 8010b08:	080121cc 	.word	0x080121cc
 8010b0c:	080122c0 	.word	0x080122c0

08010b10 <__ratio>:
 8010b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b14:	4688      	mov	r8, r1
 8010b16:	4669      	mov	r1, sp
 8010b18:	4681      	mov	r9, r0
 8010b1a:	f7ff ff4d 	bl	80109b8 <__b2d>
 8010b1e:	a901      	add	r1, sp, #4
 8010b20:	4640      	mov	r0, r8
 8010b22:	ec55 4b10 	vmov	r4, r5, d0
 8010b26:	f7ff ff47 	bl	80109b8 <__b2d>
 8010b2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010b32:	eba3 0c02 	sub.w	ip, r3, r2
 8010b36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010b3a:	1a9b      	subs	r3, r3, r2
 8010b3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010b40:	ec51 0b10 	vmov	r0, r1, d0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	bfd6      	itet	le
 8010b48:	460a      	movle	r2, r1
 8010b4a:	462a      	movgt	r2, r5
 8010b4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010b50:	468b      	mov	fp, r1
 8010b52:	462f      	mov	r7, r5
 8010b54:	bfd4      	ite	le
 8010b56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010b5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010b5e:	4620      	mov	r0, r4
 8010b60:	ee10 2a10 	vmov	r2, s0
 8010b64:	465b      	mov	r3, fp
 8010b66:	4639      	mov	r1, r7
 8010b68:	f7ef fe80 	bl	800086c <__aeabi_ddiv>
 8010b6c:	ec41 0b10 	vmov	d0, r0, r1
 8010b70:	b003      	add	sp, #12
 8010b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b76 <__copybits>:
 8010b76:	3901      	subs	r1, #1
 8010b78:	b570      	push	{r4, r5, r6, lr}
 8010b7a:	1149      	asrs	r1, r1, #5
 8010b7c:	6914      	ldr	r4, [r2, #16]
 8010b7e:	3101      	adds	r1, #1
 8010b80:	f102 0314 	add.w	r3, r2, #20
 8010b84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010b88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b8c:	1f05      	subs	r5, r0, #4
 8010b8e:	42a3      	cmp	r3, r4
 8010b90:	d30c      	bcc.n	8010bac <__copybits+0x36>
 8010b92:	1aa3      	subs	r3, r4, r2
 8010b94:	3b11      	subs	r3, #17
 8010b96:	f023 0303 	bic.w	r3, r3, #3
 8010b9a:	3211      	adds	r2, #17
 8010b9c:	42a2      	cmp	r2, r4
 8010b9e:	bf88      	it	hi
 8010ba0:	2300      	movhi	r3, #0
 8010ba2:	4418      	add	r0, r3
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	4288      	cmp	r0, r1
 8010ba8:	d305      	bcc.n	8010bb6 <__copybits+0x40>
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	f853 6b04 	ldr.w	r6, [r3], #4
 8010bb0:	f845 6f04 	str.w	r6, [r5, #4]!
 8010bb4:	e7eb      	b.n	8010b8e <__copybits+0x18>
 8010bb6:	f840 3b04 	str.w	r3, [r0], #4
 8010bba:	e7f4      	b.n	8010ba6 <__copybits+0x30>

08010bbc <__any_on>:
 8010bbc:	f100 0214 	add.w	r2, r0, #20
 8010bc0:	6900      	ldr	r0, [r0, #16]
 8010bc2:	114b      	asrs	r3, r1, #5
 8010bc4:	4298      	cmp	r0, r3
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	db11      	blt.n	8010bee <__any_on+0x32>
 8010bca:	dd0a      	ble.n	8010be2 <__any_on+0x26>
 8010bcc:	f011 011f 	ands.w	r1, r1, #31
 8010bd0:	d007      	beq.n	8010be2 <__any_on+0x26>
 8010bd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010bd6:	fa24 f001 	lsr.w	r0, r4, r1
 8010bda:	fa00 f101 	lsl.w	r1, r0, r1
 8010bde:	428c      	cmp	r4, r1
 8010be0:	d10b      	bne.n	8010bfa <__any_on+0x3e>
 8010be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d803      	bhi.n	8010bf2 <__any_on+0x36>
 8010bea:	2000      	movs	r0, #0
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	4603      	mov	r3, r0
 8010bf0:	e7f7      	b.n	8010be2 <__any_on+0x26>
 8010bf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010bf6:	2900      	cmp	r1, #0
 8010bf8:	d0f5      	beq.n	8010be6 <__any_on+0x2a>
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	e7f6      	b.n	8010bec <__any_on+0x30>

08010bfe <_calloc_r>:
 8010bfe:	b513      	push	{r0, r1, r4, lr}
 8010c00:	434a      	muls	r2, r1
 8010c02:	4611      	mov	r1, r2
 8010c04:	9201      	str	r2, [sp, #4]
 8010c06:	f7fc fa59 	bl	800d0bc <_malloc_r>
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	b118      	cbz	r0, 8010c16 <_calloc_r+0x18>
 8010c0e:	9a01      	ldr	r2, [sp, #4]
 8010c10:	2100      	movs	r1, #0
 8010c12:	f7fc f9fb 	bl	800d00c <memset>
 8010c16:	4620      	mov	r0, r4
 8010c18:	b002      	add	sp, #8
 8010c1a:	bd10      	pop	{r4, pc}

08010c1c <__ssputs_r>:
 8010c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c20:	688e      	ldr	r6, [r1, #8]
 8010c22:	429e      	cmp	r6, r3
 8010c24:	4682      	mov	sl, r0
 8010c26:	460c      	mov	r4, r1
 8010c28:	4690      	mov	r8, r2
 8010c2a:	461f      	mov	r7, r3
 8010c2c:	d838      	bhi.n	8010ca0 <__ssputs_r+0x84>
 8010c2e:	898a      	ldrh	r2, [r1, #12]
 8010c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c34:	d032      	beq.n	8010c9c <__ssputs_r+0x80>
 8010c36:	6825      	ldr	r5, [r4, #0]
 8010c38:	6909      	ldr	r1, [r1, #16]
 8010c3a:	eba5 0901 	sub.w	r9, r5, r1
 8010c3e:	6965      	ldr	r5, [r4, #20]
 8010c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c48:	3301      	adds	r3, #1
 8010c4a:	444b      	add	r3, r9
 8010c4c:	106d      	asrs	r5, r5, #1
 8010c4e:	429d      	cmp	r5, r3
 8010c50:	bf38      	it	cc
 8010c52:	461d      	movcc	r5, r3
 8010c54:	0553      	lsls	r3, r2, #21
 8010c56:	d531      	bpl.n	8010cbc <__ssputs_r+0xa0>
 8010c58:	4629      	mov	r1, r5
 8010c5a:	f7fc fa2f 	bl	800d0bc <_malloc_r>
 8010c5e:	4606      	mov	r6, r0
 8010c60:	b950      	cbnz	r0, 8010c78 <__ssputs_r+0x5c>
 8010c62:	230c      	movs	r3, #12
 8010c64:	f8ca 3000 	str.w	r3, [sl]
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295
 8010c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c78:	6921      	ldr	r1, [r4, #16]
 8010c7a:	464a      	mov	r2, r9
 8010c7c:	f7ff fae9 	bl	8010252 <memcpy>
 8010c80:	89a3      	ldrh	r3, [r4, #12]
 8010c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c8a:	81a3      	strh	r3, [r4, #12]
 8010c8c:	6126      	str	r6, [r4, #16]
 8010c8e:	6165      	str	r5, [r4, #20]
 8010c90:	444e      	add	r6, r9
 8010c92:	eba5 0509 	sub.w	r5, r5, r9
 8010c96:	6026      	str	r6, [r4, #0]
 8010c98:	60a5      	str	r5, [r4, #8]
 8010c9a:	463e      	mov	r6, r7
 8010c9c:	42be      	cmp	r6, r7
 8010c9e:	d900      	bls.n	8010ca2 <__ssputs_r+0x86>
 8010ca0:	463e      	mov	r6, r7
 8010ca2:	4632      	mov	r2, r6
 8010ca4:	6820      	ldr	r0, [r4, #0]
 8010ca6:	4641      	mov	r1, r8
 8010ca8:	f000 fd24 	bl	80116f4 <memmove>
 8010cac:	68a3      	ldr	r3, [r4, #8]
 8010cae:	6822      	ldr	r2, [r4, #0]
 8010cb0:	1b9b      	subs	r3, r3, r6
 8010cb2:	4432      	add	r2, r6
 8010cb4:	60a3      	str	r3, [r4, #8]
 8010cb6:	6022      	str	r2, [r4, #0]
 8010cb8:	2000      	movs	r0, #0
 8010cba:	e7db      	b.n	8010c74 <__ssputs_r+0x58>
 8010cbc:	462a      	mov	r2, r5
 8010cbe:	f000 fd33 	bl	8011728 <_realloc_r>
 8010cc2:	4606      	mov	r6, r0
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d1e1      	bne.n	8010c8c <__ssputs_r+0x70>
 8010cc8:	6921      	ldr	r1, [r4, #16]
 8010cca:	4650      	mov	r0, sl
 8010ccc:	f7fc f9a6 	bl	800d01c <_free_r>
 8010cd0:	e7c7      	b.n	8010c62 <__ssputs_r+0x46>
	...

08010cd4 <_svfiprintf_r>:
 8010cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd8:	4698      	mov	r8, r3
 8010cda:	898b      	ldrh	r3, [r1, #12]
 8010cdc:	061b      	lsls	r3, r3, #24
 8010cde:	b09d      	sub	sp, #116	; 0x74
 8010ce0:	4607      	mov	r7, r0
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	4614      	mov	r4, r2
 8010ce6:	d50e      	bpl.n	8010d06 <_svfiprintf_r+0x32>
 8010ce8:	690b      	ldr	r3, [r1, #16]
 8010cea:	b963      	cbnz	r3, 8010d06 <_svfiprintf_r+0x32>
 8010cec:	2140      	movs	r1, #64	; 0x40
 8010cee:	f7fc f9e5 	bl	800d0bc <_malloc_r>
 8010cf2:	6028      	str	r0, [r5, #0]
 8010cf4:	6128      	str	r0, [r5, #16]
 8010cf6:	b920      	cbnz	r0, 8010d02 <_svfiprintf_r+0x2e>
 8010cf8:	230c      	movs	r3, #12
 8010cfa:	603b      	str	r3, [r7, #0]
 8010cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010d00:	e0d1      	b.n	8010ea6 <_svfiprintf_r+0x1d2>
 8010d02:	2340      	movs	r3, #64	; 0x40
 8010d04:	616b      	str	r3, [r5, #20]
 8010d06:	2300      	movs	r3, #0
 8010d08:	9309      	str	r3, [sp, #36]	; 0x24
 8010d0a:	2320      	movs	r3, #32
 8010d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d14:	2330      	movs	r3, #48	; 0x30
 8010d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ec0 <_svfiprintf_r+0x1ec>
 8010d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d1e:	f04f 0901 	mov.w	r9, #1
 8010d22:	4623      	mov	r3, r4
 8010d24:	469a      	mov	sl, r3
 8010d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d2a:	b10a      	cbz	r2, 8010d30 <_svfiprintf_r+0x5c>
 8010d2c:	2a25      	cmp	r2, #37	; 0x25
 8010d2e:	d1f9      	bne.n	8010d24 <_svfiprintf_r+0x50>
 8010d30:	ebba 0b04 	subs.w	fp, sl, r4
 8010d34:	d00b      	beq.n	8010d4e <_svfiprintf_r+0x7a>
 8010d36:	465b      	mov	r3, fp
 8010d38:	4622      	mov	r2, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	f7ff ff6d 	bl	8010c1c <__ssputs_r>
 8010d42:	3001      	adds	r0, #1
 8010d44:	f000 80aa 	beq.w	8010e9c <_svfiprintf_r+0x1c8>
 8010d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d4a:	445a      	add	r2, fp
 8010d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8010d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f000 80a2 	beq.w	8010e9c <_svfiprintf_r+0x1c8>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d62:	f10a 0a01 	add.w	sl, sl, #1
 8010d66:	9304      	str	r3, [sp, #16]
 8010d68:	9307      	str	r3, [sp, #28]
 8010d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8010d70:	4654      	mov	r4, sl
 8010d72:	2205      	movs	r2, #5
 8010d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d78:	4851      	ldr	r0, [pc, #324]	; (8010ec0 <_svfiprintf_r+0x1ec>)
 8010d7a:	f7ef fa41 	bl	8000200 <memchr>
 8010d7e:	9a04      	ldr	r2, [sp, #16]
 8010d80:	b9d8      	cbnz	r0, 8010dba <_svfiprintf_r+0xe6>
 8010d82:	06d0      	lsls	r0, r2, #27
 8010d84:	bf44      	itt	mi
 8010d86:	2320      	movmi	r3, #32
 8010d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d8c:	0711      	lsls	r1, r2, #28
 8010d8e:	bf44      	itt	mi
 8010d90:	232b      	movmi	r3, #43	; 0x2b
 8010d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d96:	f89a 3000 	ldrb.w	r3, [sl]
 8010d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8010d9c:	d015      	beq.n	8010dca <_svfiprintf_r+0xf6>
 8010d9e:	9a07      	ldr	r2, [sp, #28]
 8010da0:	4654      	mov	r4, sl
 8010da2:	2000      	movs	r0, #0
 8010da4:	f04f 0c0a 	mov.w	ip, #10
 8010da8:	4621      	mov	r1, r4
 8010daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dae:	3b30      	subs	r3, #48	; 0x30
 8010db0:	2b09      	cmp	r3, #9
 8010db2:	d94e      	bls.n	8010e52 <_svfiprintf_r+0x17e>
 8010db4:	b1b0      	cbz	r0, 8010de4 <_svfiprintf_r+0x110>
 8010db6:	9207      	str	r2, [sp, #28]
 8010db8:	e014      	b.n	8010de4 <_svfiprintf_r+0x110>
 8010dba:	eba0 0308 	sub.w	r3, r0, r8
 8010dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	9304      	str	r3, [sp, #16]
 8010dc6:	46a2      	mov	sl, r4
 8010dc8:	e7d2      	b.n	8010d70 <_svfiprintf_r+0x9c>
 8010dca:	9b03      	ldr	r3, [sp, #12]
 8010dcc:	1d19      	adds	r1, r3, #4
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	9103      	str	r1, [sp, #12]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	bfbb      	ittet	lt
 8010dd6:	425b      	neglt	r3, r3
 8010dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8010ddc:	9307      	strge	r3, [sp, #28]
 8010dde:	9307      	strlt	r3, [sp, #28]
 8010de0:	bfb8      	it	lt
 8010de2:	9204      	strlt	r2, [sp, #16]
 8010de4:	7823      	ldrb	r3, [r4, #0]
 8010de6:	2b2e      	cmp	r3, #46	; 0x2e
 8010de8:	d10c      	bne.n	8010e04 <_svfiprintf_r+0x130>
 8010dea:	7863      	ldrb	r3, [r4, #1]
 8010dec:	2b2a      	cmp	r3, #42	; 0x2a
 8010dee:	d135      	bne.n	8010e5c <_svfiprintf_r+0x188>
 8010df0:	9b03      	ldr	r3, [sp, #12]
 8010df2:	1d1a      	adds	r2, r3, #4
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	9203      	str	r2, [sp, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	bfb8      	it	lt
 8010dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e00:	3402      	adds	r4, #2
 8010e02:	9305      	str	r3, [sp, #20]
 8010e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ed0 <_svfiprintf_r+0x1fc>
 8010e08:	7821      	ldrb	r1, [r4, #0]
 8010e0a:	2203      	movs	r2, #3
 8010e0c:	4650      	mov	r0, sl
 8010e0e:	f7ef f9f7 	bl	8000200 <memchr>
 8010e12:	b140      	cbz	r0, 8010e26 <_svfiprintf_r+0x152>
 8010e14:	2340      	movs	r3, #64	; 0x40
 8010e16:	eba0 000a 	sub.w	r0, r0, sl
 8010e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8010e1e:	9b04      	ldr	r3, [sp, #16]
 8010e20:	4303      	orrs	r3, r0
 8010e22:	3401      	adds	r4, #1
 8010e24:	9304      	str	r3, [sp, #16]
 8010e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e2a:	4826      	ldr	r0, [pc, #152]	; (8010ec4 <_svfiprintf_r+0x1f0>)
 8010e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e30:	2206      	movs	r2, #6
 8010e32:	f7ef f9e5 	bl	8000200 <memchr>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d038      	beq.n	8010eac <_svfiprintf_r+0x1d8>
 8010e3a:	4b23      	ldr	r3, [pc, #140]	; (8010ec8 <_svfiprintf_r+0x1f4>)
 8010e3c:	bb1b      	cbnz	r3, 8010e86 <_svfiprintf_r+0x1b2>
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	3307      	adds	r3, #7
 8010e42:	f023 0307 	bic.w	r3, r3, #7
 8010e46:	3308      	adds	r3, #8
 8010e48:	9303      	str	r3, [sp, #12]
 8010e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e4c:	4433      	add	r3, r6
 8010e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e50:	e767      	b.n	8010d22 <_svfiprintf_r+0x4e>
 8010e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e56:	460c      	mov	r4, r1
 8010e58:	2001      	movs	r0, #1
 8010e5a:	e7a5      	b.n	8010da8 <_svfiprintf_r+0xd4>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	3401      	adds	r4, #1
 8010e60:	9305      	str	r3, [sp, #20]
 8010e62:	4619      	mov	r1, r3
 8010e64:	f04f 0c0a 	mov.w	ip, #10
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e6e:	3a30      	subs	r2, #48	; 0x30
 8010e70:	2a09      	cmp	r2, #9
 8010e72:	d903      	bls.n	8010e7c <_svfiprintf_r+0x1a8>
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d0c5      	beq.n	8010e04 <_svfiprintf_r+0x130>
 8010e78:	9105      	str	r1, [sp, #20]
 8010e7a:	e7c3      	b.n	8010e04 <_svfiprintf_r+0x130>
 8010e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e80:	4604      	mov	r4, r0
 8010e82:	2301      	movs	r3, #1
 8010e84:	e7f0      	b.n	8010e68 <_svfiprintf_r+0x194>
 8010e86:	ab03      	add	r3, sp, #12
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	462a      	mov	r2, r5
 8010e8c:	4b0f      	ldr	r3, [pc, #60]	; (8010ecc <_svfiprintf_r+0x1f8>)
 8010e8e:	a904      	add	r1, sp, #16
 8010e90:	4638      	mov	r0, r7
 8010e92:	f7fc fa0d 	bl	800d2b0 <_printf_float>
 8010e96:	1c42      	adds	r2, r0, #1
 8010e98:	4606      	mov	r6, r0
 8010e9a:	d1d6      	bne.n	8010e4a <_svfiprintf_r+0x176>
 8010e9c:	89ab      	ldrh	r3, [r5, #12]
 8010e9e:	065b      	lsls	r3, r3, #25
 8010ea0:	f53f af2c 	bmi.w	8010cfc <_svfiprintf_r+0x28>
 8010ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ea6:	b01d      	add	sp, #116	; 0x74
 8010ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eac:	ab03      	add	r3, sp, #12
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	462a      	mov	r2, r5
 8010eb2:	4b06      	ldr	r3, [pc, #24]	; (8010ecc <_svfiprintf_r+0x1f8>)
 8010eb4:	a904      	add	r1, sp, #16
 8010eb6:	4638      	mov	r0, r7
 8010eb8:	f7fc fc9e 	bl	800d7f8 <_printf_i>
 8010ebc:	e7eb      	b.n	8010e96 <_svfiprintf_r+0x1c2>
 8010ebe:	bf00      	nop
 8010ec0:	0801241c 	.word	0x0801241c
 8010ec4:	08012426 	.word	0x08012426
 8010ec8:	0800d2b1 	.word	0x0800d2b1
 8010ecc:	08010c1d 	.word	0x08010c1d
 8010ed0:	08012422 	.word	0x08012422

08010ed4 <__sfputc_r>:
 8010ed4:	6893      	ldr	r3, [r2, #8]
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	b410      	push	{r4}
 8010edc:	6093      	str	r3, [r2, #8]
 8010ede:	da08      	bge.n	8010ef2 <__sfputc_r+0x1e>
 8010ee0:	6994      	ldr	r4, [r2, #24]
 8010ee2:	42a3      	cmp	r3, r4
 8010ee4:	db01      	blt.n	8010eea <__sfputc_r+0x16>
 8010ee6:	290a      	cmp	r1, #10
 8010ee8:	d103      	bne.n	8010ef2 <__sfputc_r+0x1e>
 8010eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eee:	f000 b9a9 	b.w	8011244 <__swbuf_r>
 8010ef2:	6813      	ldr	r3, [r2, #0]
 8010ef4:	1c58      	adds	r0, r3, #1
 8010ef6:	6010      	str	r0, [r2, #0]
 8010ef8:	7019      	strb	r1, [r3, #0]
 8010efa:	4608      	mov	r0, r1
 8010efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <__sfputs_r>:
 8010f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f04:	4606      	mov	r6, r0
 8010f06:	460f      	mov	r7, r1
 8010f08:	4614      	mov	r4, r2
 8010f0a:	18d5      	adds	r5, r2, r3
 8010f0c:	42ac      	cmp	r4, r5
 8010f0e:	d101      	bne.n	8010f14 <__sfputs_r+0x12>
 8010f10:	2000      	movs	r0, #0
 8010f12:	e007      	b.n	8010f24 <__sfputs_r+0x22>
 8010f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f18:	463a      	mov	r2, r7
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7ff ffda 	bl	8010ed4 <__sfputc_r>
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	d1f3      	bne.n	8010f0c <__sfputs_r+0xa>
 8010f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f28 <_vfiprintf_r>:
 8010f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f2c:	460d      	mov	r5, r1
 8010f2e:	b09d      	sub	sp, #116	; 0x74
 8010f30:	4614      	mov	r4, r2
 8010f32:	4698      	mov	r8, r3
 8010f34:	4606      	mov	r6, r0
 8010f36:	b118      	cbz	r0, 8010f40 <_vfiprintf_r+0x18>
 8010f38:	6983      	ldr	r3, [r0, #24]
 8010f3a:	b90b      	cbnz	r3, 8010f40 <_vfiprintf_r+0x18>
 8010f3c:	f7fe fd64 	bl	800fa08 <__sinit>
 8010f40:	4b89      	ldr	r3, [pc, #548]	; (8011168 <_vfiprintf_r+0x240>)
 8010f42:	429d      	cmp	r5, r3
 8010f44:	d11b      	bne.n	8010f7e <_vfiprintf_r+0x56>
 8010f46:	6875      	ldr	r5, [r6, #4]
 8010f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f4a:	07d9      	lsls	r1, r3, #31
 8010f4c:	d405      	bmi.n	8010f5a <_vfiprintf_r+0x32>
 8010f4e:	89ab      	ldrh	r3, [r5, #12]
 8010f50:	059a      	lsls	r2, r3, #22
 8010f52:	d402      	bmi.n	8010f5a <_vfiprintf_r+0x32>
 8010f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f56:	f7ff f968 	bl	801022a <__retarget_lock_acquire_recursive>
 8010f5a:	89ab      	ldrh	r3, [r5, #12]
 8010f5c:	071b      	lsls	r3, r3, #28
 8010f5e:	d501      	bpl.n	8010f64 <_vfiprintf_r+0x3c>
 8010f60:	692b      	ldr	r3, [r5, #16]
 8010f62:	b9eb      	cbnz	r3, 8010fa0 <_vfiprintf_r+0x78>
 8010f64:	4629      	mov	r1, r5
 8010f66:	4630      	mov	r0, r6
 8010f68:	f000 f9de 	bl	8011328 <__swsetup_r>
 8010f6c:	b1c0      	cbz	r0, 8010fa0 <_vfiprintf_r+0x78>
 8010f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f70:	07dc      	lsls	r4, r3, #31
 8010f72:	d50e      	bpl.n	8010f92 <_vfiprintf_r+0x6a>
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295
 8010f78:	b01d      	add	sp, #116	; 0x74
 8010f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7e:	4b7b      	ldr	r3, [pc, #492]	; (801116c <_vfiprintf_r+0x244>)
 8010f80:	429d      	cmp	r5, r3
 8010f82:	d101      	bne.n	8010f88 <_vfiprintf_r+0x60>
 8010f84:	68b5      	ldr	r5, [r6, #8]
 8010f86:	e7df      	b.n	8010f48 <_vfiprintf_r+0x20>
 8010f88:	4b79      	ldr	r3, [pc, #484]	; (8011170 <_vfiprintf_r+0x248>)
 8010f8a:	429d      	cmp	r5, r3
 8010f8c:	bf08      	it	eq
 8010f8e:	68f5      	ldreq	r5, [r6, #12]
 8010f90:	e7da      	b.n	8010f48 <_vfiprintf_r+0x20>
 8010f92:	89ab      	ldrh	r3, [r5, #12]
 8010f94:	0598      	lsls	r0, r3, #22
 8010f96:	d4ed      	bmi.n	8010f74 <_vfiprintf_r+0x4c>
 8010f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f9a:	f7ff f947 	bl	801022c <__retarget_lock_release_recursive>
 8010f9e:	e7e9      	b.n	8010f74 <_vfiprintf_r+0x4c>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa4:	2320      	movs	r3, #32
 8010fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fae:	2330      	movs	r3, #48	; 0x30
 8010fb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011174 <_vfiprintf_r+0x24c>
 8010fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fb8:	f04f 0901 	mov.w	r9, #1
 8010fbc:	4623      	mov	r3, r4
 8010fbe:	469a      	mov	sl, r3
 8010fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fc4:	b10a      	cbz	r2, 8010fca <_vfiprintf_r+0xa2>
 8010fc6:	2a25      	cmp	r2, #37	; 0x25
 8010fc8:	d1f9      	bne.n	8010fbe <_vfiprintf_r+0x96>
 8010fca:	ebba 0b04 	subs.w	fp, sl, r4
 8010fce:	d00b      	beq.n	8010fe8 <_vfiprintf_r+0xc0>
 8010fd0:	465b      	mov	r3, fp
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7ff ff93 	bl	8010f02 <__sfputs_r>
 8010fdc:	3001      	adds	r0, #1
 8010fde:	f000 80aa 	beq.w	8011136 <_vfiprintf_r+0x20e>
 8010fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fe4:	445a      	add	r2, fp
 8010fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8010fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f000 80a2 	beq.w	8011136 <_vfiprintf_r+0x20e>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ffc:	f10a 0a01 	add.w	sl, sl, #1
 8011000:	9304      	str	r3, [sp, #16]
 8011002:	9307      	str	r3, [sp, #28]
 8011004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011008:	931a      	str	r3, [sp, #104]	; 0x68
 801100a:	4654      	mov	r4, sl
 801100c:	2205      	movs	r2, #5
 801100e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011012:	4858      	ldr	r0, [pc, #352]	; (8011174 <_vfiprintf_r+0x24c>)
 8011014:	f7ef f8f4 	bl	8000200 <memchr>
 8011018:	9a04      	ldr	r2, [sp, #16]
 801101a:	b9d8      	cbnz	r0, 8011054 <_vfiprintf_r+0x12c>
 801101c:	06d1      	lsls	r1, r2, #27
 801101e:	bf44      	itt	mi
 8011020:	2320      	movmi	r3, #32
 8011022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011026:	0713      	lsls	r3, r2, #28
 8011028:	bf44      	itt	mi
 801102a:	232b      	movmi	r3, #43	; 0x2b
 801102c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011030:	f89a 3000 	ldrb.w	r3, [sl]
 8011034:	2b2a      	cmp	r3, #42	; 0x2a
 8011036:	d015      	beq.n	8011064 <_vfiprintf_r+0x13c>
 8011038:	9a07      	ldr	r2, [sp, #28]
 801103a:	4654      	mov	r4, sl
 801103c:	2000      	movs	r0, #0
 801103e:	f04f 0c0a 	mov.w	ip, #10
 8011042:	4621      	mov	r1, r4
 8011044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011048:	3b30      	subs	r3, #48	; 0x30
 801104a:	2b09      	cmp	r3, #9
 801104c:	d94e      	bls.n	80110ec <_vfiprintf_r+0x1c4>
 801104e:	b1b0      	cbz	r0, 801107e <_vfiprintf_r+0x156>
 8011050:	9207      	str	r2, [sp, #28]
 8011052:	e014      	b.n	801107e <_vfiprintf_r+0x156>
 8011054:	eba0 0308 	sub.w	r3, r0, r8
 8011058:	fa09 f303 	lsl.w	r3, r9, r3
 801105c:	4313      	orrs	r3, r2
 801105e:	9304      	str	r3, [sp, #16]
 8011060:	46a2      	mov	sl, r4
 8011062:	e7d2      	b.n	801100a <_vfiprintf_r+0xe2>
 8011064:	9b03      	ldr	r3, [sp, #12]
 8011066:	1d19      	adds	r1, r3, #4
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	9103      	str	r1, [sp, #12]
 801106c:	2b00      	cmp	r3, #0
 801106e:	bfbb      	ittet	lt
 8011070:	425b      	neglt	r3, r3
 8011072:	f042 0202 	orrlt.w	r2, r2, #2
 8011076:	9307      	strge	r3, [sp, #28]
 8011078:	9307      	strlt	r3, [sp, #28]
 801107a:	bfb8      	it	lt
 801107c:	9204      	strlt	r2, [sp, #16]
 801107e:	7823      	ldrb	r3, [r4, #0]
 8011080:	2b2e      	cmp	r3, #46	; 0x2e
 8011082:	d10c      	bne.n	801109e <_vfiprintf_r+0x176>
 8011084:	7863      	ldrb	r3, [r4, #1]
 8011086:	2b2a      	cmp	r3, #42	; 0x2a
 8011088:	d135      	bne.n	80110f6 <_vfiprintf_r+0x1ce>
 801108a:	9b03      	ldr	r3, [sp, #12]
 801108c:	1d1a      	adds	r2, r3, #4
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	9203      	str	r2, [sp, #12]
 8011092:	2b00      	cmp	r3, #0
 8011094:	bfb8      	it	lt
 8011096:	f04f 33ff 	movlt.w	r3, #4294967295
 801109a:	3402      	adds	r4, #2
 801109c:	9305      	str	r3, [sp, #20]
 801109e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011184 <_vfiprintf_r+0x25c>
 80110a2:	7821      	ldrb	r1, [r4, #0]
 80110a4:	2203      	movs	r2, #3
 80110a6:	4650      	mov	r0, sl
 80110a8:	f7ef f8aa 	bl	8000200 <memchr>
 80110ac:	b140      	cbz	r0, 80110c0 <_vfiprintf_r+0x198>
 80110ae:	2340      	movs	r3, #64	; 0x40
 80110b0:	eba0 000a 	sub.w	r0, r0, sl
 80110b4:	fa03 f000 	lsl.w	r0, r3, r0
 80110b8:	9b04      	ldr	r3, [sp, #16]
 80110ba:	4303      	orrs	r3, r0
 80110bc:	3401      	adds	r4, #1
 80110be:	9304      	str	r3, [sp, #16]
 80110c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c4:	482c      	ldr	r0, [pc, #176]	; (8011178 <_vfiprintf_r+0x250>)
 80110c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110ca:	2206      	movs	r2, #6
 80110cc:	f7ef f898 	bl	8000200 <memchr>
 80110d0:	2800      	cmp	r0, #0
 80110d2:	d03f      	beq.n	8011154 <_vfiprintf_r+0x22c>
 80110d4:	4b29      	ldr	r3, [pc, #164]	; (801117c <_vfiprintf_r+0x254>)
 80110d6:	bb1b      	cbnz	r3, 8011120 <_vfiprintf_r+0x1f8>
 80110d8:	9b03      	ldr	r3, [sp, #12]
 80110da:	3307      	adds	r3, #7
 80110dc:	f023 0307 	bic.w	r3, r3, #7
 80110e0:	3308      	adds	r3, #8
 80110e2:	9303      	str	r3, [sp, #12]
 80110e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e6:	443b      	add	r3, r7
 80110e8:	9309      	str	r3, [sp, #36]	; 0x24
 80110ea:	e767      	b.n	8010fbc <_vfiprintf_r+0x94>
 80110ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80110f0:	460c      	mov	r4, r1
 80110f2:	2001      	movs	r0, #1
 80110f4:	e7a5      	b.n	8011042 <_vfiprintf_r+0x11a>
 80110f6:	2300      	movs	r3, #0
 80110f8:	3401      	adds	r4, #1
 80110fa:	9305      	str	r3, [sp, #20]
 80110fc:	4619      	mov	r1, r3
 80110fe:	f04f 0c0a 	mov.w	ip, #10
 8011102:	4620      	mov	r0, r4
 8011104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011108:	3a30      	subs	r2, #48	; 0x30
 801110a:	2a09      	cmp	r2, #9
 801110c:	d903      	bls.n	8011116 <_vfiprintf_r+0x1ee>
 801110e:	2b00      	cmp	r3, #0
 8011110:	d0c5      	beq.n	801109e <_vfiprintf_r+0x176>
 8011112:	9105      	str	r1, [sp, #20]
 8011114:	e7c3      	b.n	801109e <_vfiprintf_r+0x176>
 8011116:	fb0c 2101 	mla	r1, ip, r1, r2
 801111a:	4604      	mov	r4, r0
 801111c:	2301      	movs	r3, #1
 801111e:	e7f0      	b.n	8011102 <_vfiprintf_r+0x1da>
 8011120:	ab03      	add	r3, sp, #12
 8011122:	9300      	str	r3, [sp, #0]
 8011124:	462a      	mov	r2, r5
 8011126:	4b16      	ldr	r3, [pc, #88]	; (8011180 <_vfiprintf_r+0x258>)
 8011128:	a904      	add	r1, sp, #16
 801112a:	4630      	mov	r0, r6
 801112c:	f7fc f8c0 	bl	800d2b0 <_printf_float>
 8011130:	4607      	mov	r7, r0
 8011132:	1c78      	adds	r0, r7, #1
 8011134:	d1d6      	bne.n	80110e4 <_vfiprintf_r+0x1bc>
 8011136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011138:	07d9      	lsls	r1, r3, #31
 801113a:	d405      	bmi.n	8011148 <_vfiprintf_r+0x220>
 801113c:	89ab      	ldrh	r3, [r5, #12]
 801113e:	059a      	lsls	r2, r3, #22
 8011140:	d402      	bmi.n	8011148 <_vfiprintf_r+0x220>
 8011142:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011144:	f7ff f872 	bl	801022c <__retarget_lock_release_recursive>
 8011148:	89ab      	ldrh	r3, [r5, #12]
 801114a:	065b      	lsls	r3, r3, #25
 801114c:	f53f af12 	bmi.w	8010f74 <_vfiprintf_r+0x4c>
 8011150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011152:	e711      	b.n	8010f78 <_vfiprintf_r+0x50>
 8011154:	ab03      	add	r3, sp, #12
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	462a      	mov	r2, r5
 801115a:	4b09      	ldr	r3, [pc, #36]	; (8011180 <_vfiprintf_r+0x258>)
 801115c:	a904      	add	r1, sp, #16
 801115e:	4630      	mov	r0, r6
 8011160:	f7fc fb4a 	bl	800d7f8 <_printf_i>
 8011164:	e7e4      	b.n	8011130 <_vfiprintf_r+0x208>
 8011166:	bf00      	nop
 8011168:	08012200 	.word	0x08012200
 801116c:	08012220 	.word	0x08012220
 8011170:	080121e0 	.word	0x080121e0
 8011174:	0801241c 	.word	0x0801241c
 8011178:	08012426 	.word	0x08012426
 801117c:	0800d2b1 	.word	0x0800d2b1
 8011180:	08010f03 	.word	0x08010f03
 8011184:	08012422 	.word	0x08012422

08011188 <nan>:
 8011188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011190 <nan+0x8>
 801118c:	4770      	bx	lr
 801118e:	bf00      	nop
 8011190:	00000000 	.word	0x00000000
 8011194:	7ff80000 	.word	0x7ff80000

08011198 <__sread>:
 8011198:	b510      	push	{r4, lr}
 801119a:	460c      	mov	r4, r1
 801119c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a0:	f000 fae8 	bl	8011774 <_read_r>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	bfab      	itete	ge
 80111a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111aa:	89a3      	ldrhlt	r3, [r4, #12]
 80111ac:	181b      	addge	r3, r3, r0
 80111ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111b2:	bfac      	ite	ge
 80111b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80111b6:	81a3      	strhlt	r3, [r4, #12]
 80111b8:	bd10      	pop	{r4, pc}

080111ba <__swrite>:
 80111ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111be:	461f      	mov	r7, r3
 80111c0:	898b      	ldrh	r3, [r1, #12]
 80111c2:	05db      	lsls	r3, r3, #23
 80111c4:	4605      	mov	r5, r0
 80111c6:	460c      	mov	r4, r1
 80111c8:	4616      	mov	r6, r2
 80111ca:	d505      	bpl.n	80111d8 <__swrite+0x1e>
 80111cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d0:	2302      	movs	r3, #2
 80111d2:	2200      	movs	r2, #0
 80111d4:	f000 fa18 	bl	8011608 <_lseek_r>
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111e2:	81a3      	strh	r3, [r4, #12]
 80111e4:	4632      	mov	r2, r6
 80111e6:	463b      	mov	r3, r7
 80111e8:	4628      	mov	r0, r5
 80111ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111ee:	f000 b889 	b.w	8011304 <_write_r>

080111f2 <__sseek>:
 80111f2:	b510      	push	{r4, lr}
 80111f4:	460c      	mov	r4, r1
 80111f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111fa:	f000 fa05 	bl	8011608 <_lseek_r>
 80111fe:	1c43      	adds	r3, r0, #1
 8011200:	89a3      	ldrh	r3, [r4, #12]
 8011202:	bf15      	itete	ne
 8011204:	6560      	strne	r0, [r4, #84]	; 0x54
 8011206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801120a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801120e:	81a3      	strheq	r3, [r4, #12]
 8011210:	bf18      	it	ne
 8011212:	81a3      	strhne	r3, [r4, #12]
 8011214:	bd10      	pop	{r4, pc}

08011216 <__sclose>:
 8011216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801121a:	f000 b911 	b.w	8011440 <_close_r>

0801121e <strncmp>:
 801121e:	b510      	push	{r4, lr}
 8011220:	b16a      	cbz	r2, 801123e <strncmp+0x20>
 8011222:	3901      	subs	r1, #1
 8011224:	1884      	adds	r4, r0, r2
 8011226:	f810 3b01 	ldrb.w	r3, [r0], #1
 801122a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801122e:	4293      	cmp	r3, r2
 8011230:	d103      	bne.n	801123a <strncmp+0x1c>
 8011232:	42a0      	cmp	r0, r4
 8011234:	d001      	beq.n	801123a <strncmp+0x1c>
 8011236:	2b00      	cmp	r3, #0
 8011238:	d1f5      	bne.n	8011226 <strncmp+0x8>
 801123a:	1a98      	subs	r0, r3, r2
 801123c:	bd10      	pop	{r4, pc}
 801123e:	4610      	mov	r0, r2
 8011240:	e7fc      	b.n	801123c <strncmp+0x1e>
	...

08011244 <__swbuf_r>:
 8011244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011246:	460e      	mov	r6, r1
 8011248:	4614      	mov	r4, r2
 801124a:	4605      	mov	r5, r0
 801124c:	b118      	cbz	r0, 8011256 <__swbuf_r+0x12>
 801124e:	6983      	ldr	r3, [r0, #24]
 8011250:	b90b      	cbnz	r3, 8011256 <__swbuf_r+0x12>
 8011252:	f7fe fbd9 	bl	800fa08 <__sinit>
 8011256:	4b21      	ldr	r3, [pc, #132]	; (80112dc <__swbuf_r+0x98>)
 8011258:	429c      	cmp	r4, r3
 801125a:	d12b      	bne.n	80112b4 <__swbuf_r+0x70>
 801125c:	686c      	ldr	r4, [r5, #4]
 801125e:	69a3      	ldr	r3, [r4, #24]
 8011260:	60a3      	str	r3, [r4, #8]
 8011262:	89a3      	ldrh	r3, [r4, #12]
 8011264:	071a      	lsls	r2, r3, #28
 8011266:	d52f      	bpl.n	80112c8 <__swbuf_r+0x84>
 8011268:	6923      	ldr	r3, [r4, #16]
 801126a:	b36b      	cbz	r3, 80112c8 <__swbuf_r+0x84>
 801126c:	6923      	ldr	r3, [r4, #16]
 801126e:	6820      	ldr	r0, [r4, #0]
 8011270:	1ac0      	subs	r0, r0, r3
 8011272:	6963      	ldr	r3, [r4, #20]
 8011274:	b2f6      	uxtb	r6, r6
 8011276:	4283      	cmp	r3, r0
 8011278:	4637      	mov	r7, r6
 801127a:	dc04      	bgt.n	8011286 <__swbuf_r+0x42>
 801127c:	4621      	mov	r1, r4
 801127e:	4628      	mov	r0, r5
 8011280:	f000 f974 	bl	801156c <_fflush_r>
 8011284:	bb30      	cbnz	r0, 80112d4 <__swbuf_r+0x90>
 8011286:	68a3      	ldr	r3, [r4, #8]
 8011288:	3b01      	subs	r3, #1
 801128a:	60a3      	str	r3, [r4, #8]
 801128c:	6823      	ldr	r3, [r4, #0]
 801128e:	1c5a      	adds	r2, r3, #1
 8011290:	6022      	str	r2, [r4, #0]
 8011292:	701e      	strb	r6, [r3, #0]
 8011294:	6963      	ldr	r3, [r4, #20]
 8011296:	3001      	adds	r0, #1
 8011298:	4283      	cmp	r3, r0
 801129a:	d004      	beq.n	80112a6 <__swbuf_r+0x62>
 801129c:	89a3      	ldrh	r3, [r4, #12]
 801129e:	07db      	lsls	r3, r3, #31
 80112a0:	d506      	bpl.n	80112b0 <__swbuf_r+0x6c>
 80112a2:	2e0a      	cmp	r6, #10
 80112a4:	d104      	bne.n	80112b0 <__swbuf_r+0x6c>
 80112a6:	4621      	mov	r1, r4
 80112a8:	4628      	mov	r0, r5
 80112aa:	f000 f95f 	bl	801156c <_fflush_r>
 80112ae:	b988      	cbnz	r0, 80112d4 <__swbuf_r+0x90>
 80112b0:	4638      	mov	r0, r7
 80112b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b4:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <__swbuf_r+0x9c>)
 80112b6:	429c      	cmp	r4, r3
 80112b8:	d101      	bne.n	80112be <__swbuf_r+0x7a>
 80112ba:	68ac      	ldr	r4, [r5, #8]
 80112bc:	e7cf      	b.n	801125e <__swbuf_r+0x1a>
 80112be:	4b09      	ldr	r3, [pc, #36]	; (80112e4 <__swbuf_r+0xa0>)
 80112c0:	429c      	cmp	r4, r3
 80112c2:	bf08      	it	eq
 80112c4:	68ec      	ldreq	r4, [r5, #12]
 80112c6:	e7ca      	b.n	801125e <__swbuf_r+0x1a>
 80112c8:	4621      	mov	r1, r4
 80112ca:	4628      	mov	r0, r5
 80112cc:	f000 f82c 	bl	8011328 <__swsetup_r>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	d0cb      	beq.n	801126c <__swbuf_r+0x28>
 80112d4:	f04f 37ff 	mov.w	r7, #4294967295
 80112d8:	e7ea      	b.n	80112b0 <__swbuf_r+0x6c>
 80112da:	bf00      	nop
 80112dc:	08012200 	.word	0x08012200
 80112e0:	08012220 	.word	0x08012220
 80112e4:	080121e0 	.word	0x080121e0

080112e8 <__ascii_wctomb>:
 80112e8:	b149      	cbz	r1, 80112fe <__ascii_wctomb+0x16>
 80112ea:	2aff      	cmp	r2, #255	; 0xff
 80112ec:	bf85      	ittet	hi
 80112ee:	238a      	movhi	r3, #138	; 0x8a
 80112f0:	6003      	strhi	r3, [r0, #0]
 80112f2:	700a      	strbls	r2, [r1, #0]
 80112f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80112f8:	bf98      	it	ls
 80112fa:	2001      	movls	r0, #1
 80112fc:	4770      	bx	lr
 80112fe:	4608      	mov	r0, r1
 8011300:	4770      	bx	lr
	...

08011304 <_write_r>:
 8011304:	b538      	push	{r3, r4, r5, lr}
 8011306:	4d07      	ldr	r5, [pc, #28]	; (8011324 <_write_r+0x20>)
 8011308:	4604      	mov	r4, r0
 801130a:	4608      	mov	r0, r1
 801130c:	4611      	mov	r1, r2
 801130e:	2200      	movs	r2, #0
 8011310:	602a      	str	r2, [r5, #0]
 8011312:	461a      	mov	r2, r3
 8011314:	f7f1 feb1 	bl	800307a <_write>
 8011318:	1c43      	adds	r3, r0, #1
 801131a:	d102      	bne.n	8011322 <_write_r+0x1e>
 801131c:	682b      	ldr	r3, [r5, #0]
 801131e:	b103      	cbz	r3, 8011322 <_write_r+0x1e>
 8011320:	6023      	str	r3, [r4, #0]
 8011322:	bd38      	pop	{r3, r4, r5, pc}
 8011324:	2000201c 	.word	0x2000201c

08011328 <__swsetup_r>:
 8011328:	4b32      	ldr	r3, [pc, #200]	; (80113f4 <__swsetup_r+0xcc>)
 801132a:	b570      	push	{r4, r5, r6, lr}
 801132c:	681d      	ldr	r5, [r3, #0]
 801132e:	4606      	mov	r6, r0
 8011330:	460c      	mov	r4, r1
 8011332:	b125      	cbz	r5, 801133e <__swsetup_r+0x16>
 8011334:	69ab      	ldr	r3, [r5, #24]
 8011336:	b913      	cbnz	r3, 801133e <__swsetup_r+0x16>
 8011338:	4628      	mov	r0, r5
 801133a:	f7fe fb65 	bl	800fa08 <__sinit>
 801133e:	4b2e      	ldr	r3, [pc, #184]	; (80113f8 <__swsetup_r+0xd0>)
 8011340:	429c      	cmp	r4, r3
 8011342:	d10f      	bne.n	8011364 <__swsetup_r+0x3c>
 8011344:	686c      	ldr	r4, [r5, #4]
 8011346:	89a3      	ldrh	r3, [r4, #12]
 8011348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801134c:	0719      	lsls	r1, r3, #28
 801134e:	d42c      	bmi.n	80113aa <__swsetup_r+0x82>
 8011350:	06dd      	lsls	r5, r3, #27
 8011352:	d411      	bmi.n	8011378 <__swsetup_r+0x50>
 8011354:	2309      	movs	r3, #9
 8011356:	6033      	str	r3, [r6, #0]
 8011358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801135c:	81a3      	strh	r3, [r4, #12]
 801135e:	f04f 30ff 	mov.w	r0, #4294967295
 8011362:	e03e      	b.n	80113e2 <__swsetup_r+0xba>
 8011364:	4b25      	ldr	r3, [pc, #148]	; (80113fc <__swsetup_r+0xd4>)
 8011366:	429c      	cmp	r4, r3
 8011368:	d101      	bne.n	801136e <__swsetup_r+0x46>
 801136a:	68ac      	ldr	r4, [r5, #8]
 801136c:	e7eb      	b.n	8011346 <__swsetup_r+0x1e>
 801136e:	4b24      	ldr	r3, [pc, #144]	; (8011400 <__swsetup_r+0xd8>)
 8011370:	429c      	cmp	r4, r3
 8011372:	bf08      	it	eq
 8011374:	68ec      	ldreq	r4, [r5, #12]
 8011376:	e7e6      	b.n	8011346 <__swsetup_r+0x1e>
 8011378:	0758      	lsls	r0, r3, #29
 801137a:	d512      	bpl.n	80113a2 <__swsetup_r+0x7a>
 801137c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801137e:	b141      	cbz	r1, 8011392 <__swsetup_r+0x6a>
 8011380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011384:	4299      	cmp	r1, r3
 8011386:	d002      	beq.n	801138e <__swsetup_r+0x66>
 8011388:	4630      	mov	r0, r6
 801138a:	f7fb fe47 	bl	800d01c <_free_r>
 801138e:	2300      	movs	r3, #0
 8011390:	6363      	str	r3, [r4, #52]	; 0x34
 8011392:	89a3      	ldrh	r3, [r4, #12]
 8011394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011398:	81a3      	strh	r3, [r4, #12]
 801139a:	2300      	movs	r3, #0
 801139c:	6063      	str	r3, [r4, #4]
 801139e:	6923      	ldr	r3, [r4, #16]
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	89a3      	ldrh	r3, [r4, #12]
 80113a4:	f043 0308 	orr.w	r3, r3, #8
 80113a8:	81a3      	strh	r3, [r4, #12]
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	b94b      	cbnz	r3, 80113c2 <__swsetup_r+0x9a>
 80113ae:	89a3      	ldrh	r3, [r4, #12]
 80113b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113b8:	d003      	beq.n	80113c2 <__swsetup_r+0x9a>
 80113ba:	4621      	mov	r1, r4
 80113bc:	4630      	mov	r0, r6
 80113be:	f000 f959 	bl	8011674 <__smakebuf_r>
 80113c2:	89a0      	ldrh	r0, [r4, #12]
 80113c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113c8:	f010 0301 	ands.w	r3, r0, #1
 80113cc:	d00a      	beq.n	80113e4 <__swsetup_r+0xbc>
 80113ce:	2300      	movs	r3, #0
 80113d0:	60a3      	str	r3, [r4, #8]
 80113d2:	6963      	ldr	r3, [r4, #20]
 80113d4:	425b      	negs	r3, r3
 80113d6:	61a3      	str	r3, [r4, #24]
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	b943      	cbnz	r3, 80113ee <__swsetup_r+0xc6>
 80113dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80113e0:	d1ba      	bne.n	8011358 <__swsetup_r+0x30>
 80113e2:	bd70      	pop	{r4, r5, r6, pc}
 80113e4:	0781      	lsls	r1, r0, #30
 80113e6:	bf58      	it	pl
 80113e8:	6963      	ldrpl	r3, [r4, #20]
 80113ea:	60a3      	str	r3, [r4, #8]
 80113ec:	e7f4      	b.n	80113d8 <__swsetup_r+0xb0>
 80113ee:	2000      	movs	r0, #0
 80113f0:	e7f7      	b.n	80113e2 <__swsetup_r+0xba>
 80113f2:	bf00      	nop
 80113f4:	20000190 	.word	0x20000190
 80113f8:	08012200 	.word	0x08012200
 80113fc:	08012220 	.word	0x08012220
 8011400:	080121e0 	.word	0x080121e0

08011404 <__assert_func>:
 8011404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011406:	4614      	mov	r4, r2
 8011408:	461a      	mov	r2, r3
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <__assert_func+0x2c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4605      	mov	r5, r0
 8011410:	68d8      	ldr	r0, [r3, #12]
 8011412:	b14c      	cbz	r4, 8011428 <__assert_func+0x24>
 8011414:	4b07      	ldr	r3, [pc, #28]	; (8011434 <__assert_func+0x30>)
 8011416:	9100      	str	r1, [sp, #0]
 8011418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801141c:	4906      	ldr	r1, [pc, #24]	; (8011438 <__assert_func+0x34>)
 801141e:	462b      	mov	r3, r5
 8011420:	f000 f8e0 	bl	80115e4 <fiprintf>
 8011424:	f000 f9b8 	bl	8011798 <abort>
 8011428:	4b04      	ldr	r3, [pc, #16]	; (801143c <__assert_func+0x38>)
 801142a:	461c      	mov	r4, r3
 801142c:	e7f3      	b.n	8011416 <__assert_func+0x12>
 801142e:	bf00      	nop
 8011430:	20000190 	.word	0x20000190
 8011434:	0801242d 	.word	0x0801242d
 8011438:	0801243a 	.word	0x0801243a
 801143c:	08012468 	.word	0x08012468

08011440 <_close_r>:
 8011440:	b538      	push	{r3, r4, r5, lr}
 8011442:	4d06      	ldr	r5, [pc, #24]	; (801145c <_close_r+0x1c>)
 8011444:	2300      	movs	r3, #0
 8011446:	4604      	mov	r4, r0
 8011448:	4608      	mov	r0, r1
 801144a:	602b      	str	r3, [r5, #0]
 801144c:	f7f1 fe31 	bl	80030b2 <_close>
 8011450:	1c43      	adds	r3, r0, #1
 8011452:	d102      	bne.n	801145a <_close_r+0x1a>
 8011454:	682b      	ldr	r3, [r5, #0]
 8011456:	b103      	cbz	r3, 801145a <_close_r+0x1a>
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	2000201c 	.word	0x2000201c

08011460 <__sflush_r>:
 8011460:	898a      	ldrh	r2, [r1, #12]
 8011462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011466:	4605      	mov	r5, r0
 8011468:	0710      	lsls	r0, r2, #28
 801146a:	460c      	mov	r4, r1
 801146c:	d458      	bmi.n	8011520 <__sflush_r+0xc0>
 801146e:	684b      	ldr	r3, [r1, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	dc05      	bgt.n	8011480 <__sflush_r+0x20>
 8011474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011476:	2b00      	cmp	r3, #0
 8011478:	dc02      	bgt.n	8011480 <__sflush_r+0x20>
 801147a:	2000      	movs	r0, #0
 801147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011482:	2e00      	cmp	r6, #0
 8011484:	d0f9      	beq.n	801147a <__sflush_r+0x1a>
 8011486:	2300      	movs	r3, #0
 8011488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801148c:	682f      	ldr	r7, [r5, #0]
 801148e:	602b      	str	r3, [r5, #0]
 8011490:	d032      	beq.n	80114f8 <__sflush_r+0x98>
 8011492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011494:	89a3      	ldrh	r3, [r4, #12]
 8011496:	075a      	lsls	r2, r3, #29
 8011498:	d505      	bpl.n	80114a6 <__sflush_r+0x46>
 801149a:	6863      	ldr	r3, [r4, #4]
 801149c:	1ac0      	subs	r0, r0, r3
 801149e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114a0:	b10b      	cbz	r3, 80114a6 <__sflush_r+0x46>
 80114a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114a4:	1ac0      	subs	r0, r0, r3
 80114a6:	2300      	movs	r3, #0
 80114a8:	4602      	mov	r2, r0
 80114aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114ac:	6a21      	ldr	r1, [r4, #32]
 80114ae:	4628      	mov	r0, r5
 80114b0:	47b0      	blx	r6
 80114b2:	1c43      	adds	r3, r0, #1
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	d106      	bne.n	80114c6 <__sflush_r+0x66>
 80114b8:	6829      	ldr	r1, [r5, #0]
 80114ba:	291d      	cmp	r1, #29
 80114bc:	d82c      	bhi.n	8011518 <__sflush_r+0xb8>
 80114be:	4a2a      	ldr	r2, [pc, #168]	; (8011568 <__sflush_r+0x108>)
 80114c0:	40ca      	lsrs	r2, r1
 80114c2:	07d6      	lsls	r6, r2, #31
 80114c4:	d528      	bpl.n	8011518 <__sflush_r+0xb8>
 80114c6:	2200      	movs	r2, #0
 80114c8:	6062      	str	r2, [r4, #4]
 80114ca:	04d9      	lsls	r1, r3, #19
 80114cc:	6922      	ldr	r2, [r4, #16]
 80114ce:	6022      	str	r2, [r4, #0]
 80114d0:	d504      	bpl.n	80114dc <__sflush_r+0x7c>
 80114d2:	1c42      	adds	r2, r0, #1
 80114d4:	d101      	bne.n	80114da <__sflush_r+0x7a>
 80114d6:	682b      	ldr	r3, [r5, #0]
 80114d8:	b903      	cbnz	r3, 80114dc <__sflush_r+0x7c>
 80114da:	6560      	str	r0, [r4, #84]	; 0x54
 80114dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114de:	602f      	str	r7, [r5, #0]
 80114e0:	2900      	cmp	r1, #0
 80114e2:	d0ca      	beq.n	801147a <__sflush_r+0x1a>
 80114e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e8:	4299      	cmp	r1, r3
 80114ea:	d002      	beq.n	80114f2 <__sflush_r+0x92>
 80114ec:	4628      	mov	r0, r5
 80114ee:	f7fb fd95 	bl	800d01c <_free_r>
 80114f2:	2000      	movs	r0, #0
 80114f4:	6360      	str	r0, [r4, #52]	; 0x34
 80114f6:	e7c1      	b.n	801147c <__sflush_r+0x1c>
 80114f8:	6a21      	ldr	r1, [r4, #32]
 80114fa:	2301      	movs	r3, #1
 80114fc:	4628      	mov	r0, r5
 80114fe:	47b0      	blx	r6
 8011500:	1c41      	adds	r1, r0, #1
 8011502:	d1c7      	bne.n	8011494 <__sflush_r+0x34>
 8011504:	682b      	ldr	r3, [r5, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d0c4      	beq.n	8011494 <__sflush_r+0x34>
 801150a:	2b1d      	cmp	r3, #29
 801150c:	d001      	beq.n	8011512 <__sflush_r+0xb2>
 801150e:	2b16      	cmp	r3, #22
 8011510:	d101      	bne.n	8011516 <__sflush_r+0xb6>
 8011512:	602f      	str	r7, [r5, #0]
 8011514:	e7b1      	b.n	801147a <__sflush_r+0x1a>
 8011516:	89a3      	ldrh	r3, [r4, #12]
 8011518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801151c:	81a3      	strh	r3, [r4, #12]
 801151e:	e7ad      	b.n	801147c <__sflush_r+0x1c>
 8011520:	690f      	ldr	r7, [r1, #16]
 8011522:	2f00      	cmp	r7, #0
 8011524:	d0a9      	beq.n	801147a <__sflush_r+0x1a>
 8011526:	0793      	lsls	r3, r2, #30
 8011528:	680e      	ldr	r6, [r1, #0]
 801152a:	bf08      	it	eq
 801152c:	694b      	ldreq	r3, [r1, #20]
 801152e:	600f      	str	r7, [r1, #0]
 8011530:	bf18      	it	ne
 8011532:	2300      	movne	r3, #0
 8011534:	eba6 0807 	sub.w	r8, r6, r7
 8011538:	608b      	str	r3, [r1, #8]
 801153a:	f1b8 0f00 	cmp.w	r8, #0
 801153e:	dd9c      	ble.n	801147a <__sflush_r+0x1a>
 8011540:	6a21      	ldr	r1, [r4, #32]
 8011542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011544:	4643      	mov	r3, r8
 8011546:	463a      	mov	r2, r7
 8011548:	4628      	mov	r0, r5
 801154a:	47b0      	blx	r6
 801154c:	2800      	cmp	r0, #0
 801154e:	dc06      	bgt.n	801155e <__sflush_r+0xfe>
 8011550:	89a3      	ldrh	r3, [r4, #12]
 8011552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011556:	81a3      	strh	r3, [r4, #12]
 8011558:	f04f 30ff 	mov.w	r0, #4294967295
 801155c:	e78e      	b.n	801147c <__sflush_r+0x1c>
 801155e:	4407      	add	r7, r0
 8011560:	eba8 0800 	sub.w	r8, r8, r0
 8011564:	e7e9      	b.n	801153a <__sflush_r+0xda>
 8011566:	bf00      	nop
 8011568:	20400001 	.word	0x20400001

0801156c <_fflush_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	690b      	ldr	r3, [r1, #16]
 8011570:	4605      	mov	r5, r0
 8011572:	460c      	mov	r4, r1
 8011574:	b913      	cbnz	r3, 801157c <_fflush_r+0x10>
 8011576:	2500      	movs	r5, #0
 8011578:	4628      	mov	r0, r5
 801157a:	bd38      	pop	{r3, r4, r5, pc}
 801157c:	b118      	cbz	r0, 8011586 <_fflush_r+0x1a>
 801157e:	6983      	ldr	r3, [r0, #24]
 8011580:	b90b      	cbnz	r3, 8011586 <_fflush_r+0x1a>
 8011582:	f7fe fa41 	bl	800fa08 <__sinit>
 8011586:	4b14      	ldr	r3, [pc, #80]	; (80115d8 <_fflush_r+0x6c>)
 8011588:	429c      	cmp	r4, r3
 801158a:	d11b      	bne.n	80115c4 <_fflush_r+0x58>
 801158c:	686c      	ldr	r4, [r5, #4]
 801158e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d0ef      	beq.n	8011576 <_fflush_r+0xa>
 8011596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011598:	07d0      	lsls	r0, r2, #31
 801159a:	d404      	bmi.n	80115a6 <_fflush_r+0x3a>
 801159c:	0599      	lsls	r1, r3, #22
 801159e:	d402      	bmi.n	80115a6 <_fflush_r+0x3a>
 80115a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115a2:	f7fe fe42 	bl	801022a <__retarget_lock_acquire_recursive>
 80115a6:	4628      	mov	r0, r5
 80115a8:	4621      	mov	r1, r4
 80115aa:	f7ff ff59 	bl	8011460 <__sflush_r>
 80115ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115b0:	07da      	lsls	r2, r3, #31
 80115b2:	4605      	mov	r5, r0
 80115b4:	d4e0      	bmi.n	8011578 <_fflush_r+0xc>
 80115b6:	89a3      	ldrh	r3, [r4, #12]
 80115b8:	059b      	lsls	r3, r3, #22
 80115ba:	d4dd      	bmi.n	8011578 <_fflush_r+0xc>
 80115bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115be:	f7fe fe35 	bl	801022c <__retarget_lock_release_recursive>
 80115c2:	e7d9      	b.n	8011578 <_fflush_r+0xc>
 80115c4:	4b05      	ldr	r3, [pc, #20]	; (80115dc <_fflush_r+0x70>)
 80115c6:	429c      	cmp	r4, r3
 80115c8:	d101      	bne.n	80115ce <_fflush_r+0x62>
 80115ca:	68ac      	ldr	r4, [r5, #8]
 80115cc:	e7df      	b.n	801158e <_fflush_r+0x22>
 80115ce:	4b04      	ldr	r3, [pc, #16]	; (80115e0 <_fflush_r+0x74>)
 80115d0:	429c      	cmp	r4, r3
 80115d2:	bf08      	it	eq
 80115d4:	68ec      	ldreq	r4, [r5, #12]
 80115d6:	e7da      	b.n	801158e <_fflush_r+0x22>
 80115d8:	08012200 	.word	0x08012200
 80115dc:	08012220 	.word	0x08012220
 80115e0:	080121e0 	.word	0x080121e0

080115e4 <fiprintf>:
 80115e4:	b40e      	push	{r1, r2, r3}
 80115e6:	b503      	push	{r0, r1, lr}
 80115e8:	4601      	mov	r1, r0
 80115ea:	ab03      	add	r3, sp, #12
 80115ec:	4805      	ldr	r0, [pc, #20]	; (8011604 <fiprintf+0x20>)
 80115ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80115f2:	6800      	ldr	r0, [r0, #0]
 80115f4:	9301      	str	r3, [sp, #4]
 80115f6:	f7ff fc97 	bl	8010f28 <_vfiprintf_r>
 80115fa:	b002      	add	sp, #8
 80115fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011600:	b003      	add	sp, #12
 8011602:	4770      	bx	lr
 8011604:	20000190 	.word	0x20000190

08011608 <_lseek_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4d07      	ldr	r5, [pc, #28]	; (8011628 <_lseek_r+0x20>)
 801160c:	4604      	mov	r4, r0
 801160e:	4608      	mov	r0, r1
 8011610:	4611      	mov	r1, r2
 8011612:	2200      	movs	r2, #0
 8011614:	602a      	str	r2, [r5, #0]
 8011616:	461a      	mov	r2, r3
 8011618:	f7f1 fd72 	bl	8003100 <_lseek>
 801161c:	1c43      	adds	r3, r0, #1
 801161e:	d102      	bne.n	8011626 <_lseek_r+0x1e>
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	b103      	cbz	r3, 8011626 <_lseek_r+0x1e>
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	bd38      	pop	{r3, r4, r5, pc}
 8011628:	2000201c 	.word	0x2000201c

0801162c <__swhatbuf_r>:
 801162c:	b570      	push	{r4, r5, r6, lr}
 801162e:	460e      	mov	r6, r1
 8011630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011634:	2900      	cmp	r1, #0
 8011636:	b096      	sub	sp, #88	; 0x58
 8011638:	4614      	mov	r4, r2
 801163a:	461d      	mov	r5, r3
 801163c:	da07      	bge.n	801164e <__swhatbuf_r+0x22>
 801163e:	2300      	movs	r3, #0
 8011640:	602b      	str	r3, [r5, #0]
 8011642:	89b3      	ldrh	r3, [r6, #12]
 8011644:	061a      	lsls	r2, r3, #24
 8011646:	d410      	bmi.n	801166a <__swhatbuf_r+0x3e>
 8011648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801164c:	e00e      	b.n	801166c <__swhatbuf_r+0x40>
 801164e:	466a      	mov	r2, sp
 8011650:	f000 f8aa 	bl	80117a8 <_fstat_r>
 8011654:	2800      	cmp	r0, #0
 8011656:	dbf2      	blt.n	801163e <__swhatbuf_r+0x12>
 8011658:	9a01      	ldr	r2, [sp, #4]
 801165a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801165e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011662:	425a      	negs	r2, r3
 8011664:	415a      	adcs	r2, r3
 8011666:	602a      	str	r2, [r5, #0]
 8011668:	e7ee      	b.n	8011648 <__swhatbuf_r+0x1c>
 801166a:	2340      	movs	r3, #64	; 0x40
 801166c:	2000      	movs	r0, #0
 801166e:	6023      	str	r3, [r4, #0]
 8011670:	b016      	add	sp, #88	; 0x58
 8011672:	bd70      	pop	{r4, r5, r6, pc}

08011674 <__smakebuf_r>:
 8011674:	898b      	ldrh	r3, [r1, #12]
 8011676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011678:	079d      	lsls	r5, r3, #30
 801167a:	4606      	mov	r6, r0
 801167c:	460c      	mov	r4, r1
 801167e:	d507      	bpl.n	8011690 <__smakebuf_r+0x1c>
 8011680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011684:	6023      	str	r3, [r4, #0]
 8011686:	6123      	str	r3, [r4, #16]
 8011688:	2301      	movs	r3, #1
 801168a:	6163      	str	r3, [r4, #20]
 801168c:	b002      	add	sp, #8
 801168e:	bd70      	pop	{r4, r5, r6, pc}
 8011690:	ab01      	add	r3, sp, #4
 8011692:	466a      	mov	r2, sp
 8011694:	f7ff ffca 	bl	801162c <__swhatbuf_r>
 8011698:	9900      	ldr	r1, [sp, #0]
 801169a:	4605      	mov	r5, r0
 801169c:	4630      	mov	r0, r6
 801169e:	f7fb fd0d 	bl	800d0bc <_malloc_r>
 80116a2:	b948      	cbnz	r0, 80116b8 <__smakebuf_r+0x44>
 80116a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116a8:	059a      	lsls	r2, r3, #22
 80116aa:	d4ef      	bmi.n	801168c <__smakebuf_r+0x18>
 80116ac:	f023 0303 	bic.w	r3, r3, #3
 80116b0:	f043 0302 	orr.w	r3, r3, #2
 80116b4:	81a3      	strh	r3, [r4, #12]
 80116b6:	e7e3      	b.n	8011680 <__smakebuf_r+0xc>
 80116b8:	4b0d      	ldr	r3, [pc, #52]	; (80116f0 <__smakebuf_r+0x7c>)
 80116ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80116bc:	89a3      	ldrh	r3, [r4, #12]
 80116be:	6020      	str	r0, [r4, #0]
 80116c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116c4:	81a3      	strh	r3, [r4, #12]
 80116c6:	9b00      	ldr	r3, [sp, #0]
 80116c8:	6163      	str	r3, [r4, #20]
 80116ca:	9b01      	ldr	r3, [sp, #4]
 80116cc:	6120      	str	r0, [r4, #16]
 80116ce:	b15b      	cbz	r3, 80116e8 <__smakebuf_r+0x74>
 80116d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116d4:	4630      	mov	r0, r6
 80116d6:	f000 f879 	bl	80117cc <_isatty_r>
 80116da:	b128      	cbz	r0, 80116e8 <__smakebuf_r+0x74>
 80116dc:	89a3      	ldrh	r3, [r4, #12]
 80116de:	f023 0303 	bic.w	r3, r3, #3
 80116e2:	f043 0301 	orr.w	r3, r3, #1
 80116e6:	81a3      	strh	r3, [r4, #12]
 80116e8:	89a0      	ldrh	r0, [r4, #12]
 80116ea:	4305      	orrs	r5, r0
 80116ec:	81a5      	strh	r5, [r4, #12]
 80116ee:	e7cd      	b.n	801168c <__smakebuf_r+0x18>
 80116f0:	0800f9a1 	.word	0x0800f9a1

080116f4 <memmove>:
 80116f4:	4288      	cmp	r0, r1
 80116f6:	b510      	push	{r4, lr}
 80116f8:	eb01 0402 	add.w	r4, r1, r2
 80116fc:	d902      	bls.n	8011704 <memmove+0x10>
 80116fe:	4284      	cmp	r4, r0
 8011700:	4623      	mov	r3, r4
 8011702:	d807      	bhi.n	8011714 <memmove+0x20>
 8011704:	1e43      	subs	r3, r0, #1
 8011706:	42a1      	cmp	r1, r4
 8011708:	d008      	beq.n	801171c <memmove+0x28>
 801170a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801170e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011712:	e7f8      	b.n	8011706 <memmove+0x12>
 8011714:	4402      	add	r2, r0
 8011716:	4601      	mov	r1, r0
 8011718:	428a      	cmp	r2, r1
 801171a:	d100      	bne.n	801171e <memmove+0x2a>
 801171c:	bd10      	pop	{r4, pc}
 801171e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011726:	e7f7      	b.n	8011718 <memmove+0x24>

08011728 <_realloc_r>:
 8011728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172a:	4607      	mov	r7, r0
 801172c:	4614      	mov	r4, r2
 801172e:	460e      	mov	r6, r1
 8011730:	b921      	cbnz	r1, 801173c <_realloc_r+0x14>
 8011732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011736:	4611      	mov	r1, r2
 8011738:	f7fb bcc0 	b.w	800d0bc <_malloc_r>
 801173c:	b922      	cbnz	r2, 8011748 <_realloc_r+0x20>
 801173e:	f7fb fc6d 	bl	800d01c <_free_r>
 8011742:	4625      	mov	r5, r4
 8011744:	4628      	mov	r0, r5
 8011746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011748:	f000 f850 	bl	80117ec <_malloc_usable_size_r>
 801174c:	42a0      	cmp	r0, r4
 801174e:	d20f      	bcs.n	8011770 <_realloc_r+0x48>
 8011750:	4621      	mov	r1, r4
 8011752:	4638      	mov	r0, r7
 8011754:	f7fb fcb2 	bl	800d0bc <_malloc_r>
 8011758:	4605      	mov	r5, r0
 801175a:	2800      	cmp	r0, #0
 801175c:	d0f2      	beq.n	8011744 <_realloc_r+0x1c>
 801175e:	4631      	mov	r1, r6
 8011760:	4622      	mov	r2, r4
 8011762:	f7fe fd76 	bl	8010252 <memcpy>
 8011766:	4631      	mov	r1, r6
 8011768:	4638      	mov	r0, r7
 801176a:	f7fb fc57 	bl	800d01c <_free_r>
 801176e:	e7e9      	b.n	8011744 <_realloc_r+0x1c>
 8011770:	4635      	mov	r5, r6
 8011772:	e7e7      	b.n	8011744 <_realloc_r+0x1c>

08011774 <_read_r>:
 8011774:	b538      	push	{r3, r4, r5, lr}
 8011776:	4d07      	ldr	r5, [pc, #28]	; (8011794 <_read_r+0x20>)
 8011778:	4604      	mov	r4, r0
 801177a:	4608      	mov	r0, r1
 801177c:	4611      	mov	r1, r2
 801177e:	2200      	movs	r2, #0
 8011780:	602a      	str	r2, [r5, #0]
 8011782:	461a      	mov	r2, r3
 8011784:	f7f1 fc5c 	bl	8003040 <_read>
 8011788:	1c43      	adds	r3, r0, #1
 801178a:	d102      	bne.n	8011792 <_read_r+0x1e>
 801178c:	682b      	ldr	r3, [r5, #0]
 801178e:	b103      	cbz	r3, 8011792 <_read_r+0x1e>
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	bd38      	pop	{r3, r4, r5, pc}
 8011794:	2000201c 	.word	0x2000201c

08011798 <abort>:
 8011798:	b508      	push	{r3, lr}
 801179a:	2006      	movs	r0, #6
 801179c:	f000 f856 	bl	801184c <raise>
 80117a0:	2001      	movs	r0, #1
 80117a2:	f7f1 fc43 	bl	800302c <_exit>
	...

080117a8 <_fstat_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d07      	ldr	r5, [pc, #28]	; (80117c8 <_fstat_r+0x20>)
 80117ac:	2300      	movs	r3, #0
 80117ae:	4604      	mov	r4, r0
 80117b0:	4608      	mov	r0, r1
 80117b2:	4611      	mov	r1, r2
 80117b4:	602b      	str	r3, [r5, #0]
 80117b6:	f7f1 fc88 	bl	80030ca <_fstat>
 80117ba:	1c43      	adds	r3, r0, #1
 80117bc:	d102      	bne.n	80117c4 <_fstat_r+0x1c>
 80117be:	682b      	ldr	r3, [r5, #0]
 80117c0:	b103      	cbz	r3, 80117c4 <_fstat_r+0x1c>
 80117c2:	6023      	str	r3, [r4, #0]
 80117c4:	bd38      	pop	{r3, r4, r5, pc}
 80117c6:	bf00      	nop
 80117c8:	2000201c 	.word	0x2000201c

080117cc <_isatty_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	4d06      	ldr	r5, [pc, #24]	; (80117e8 <_isatty_r+0x1c>)
 80117d0:	2300      	movs	r3, #0
 80117d2:	4604      	mov	r4, r0
 80117d4:	4608      	mov	r0, r1
 80117d6:	602b      	str	r3, [r5, #0]
 80117d8:	f7f1 fc87 	bl	80030ea <_isatty>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d102      	bne.n	80117e6 <_isatty_r+0x1a>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	b103      	cbz	r3, 80117e6 <_isatty_r+0x1a>
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	bd38      	pop	{r3, r4, r5, pc}
 80117e8:	2000201c 	.word	0x2000201c

080117ec <_malloc_usable_size_r>:
 80117ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117f0:	1f18      	subs	r0, r3, #4
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	bfbc      	itt	lt
 80117f6:	580b      	ldrlt	r3, [r1, r0]
 80117f8:	18c0      	addlt	r0, r0, r3
 80117fa:	4770      	bx	lr

080117fc <_raise_r>:
 80117fc:	291f      	cmp	r1, #31
 80117fe:	b538      	push	{r3, r4, r5, lr}
 8011800:	4604      	mov	r4, r0
 8011802:	460d      	mov	r5, r1
 8011804:	d904      	bls.n	8011810 <_raise_r+0x14>
 8011806:	2316      	movs	r3, #22
 8011808:	6003      	str	r3, [r0, #0]
 801180a:	f04f 30ff 	mov.w	r0, #4294967295
 801180e:	bd38      	pop	{r3, r4, r5, pc}
 8011810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011812:	b112      	cbz	r2, 801181a <_raise_r+0x1e>
 8011814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011818:	b94b      	cbnz	r3, 801182e <_raise_r+0x32>
 801181a:	4620      	mov	r0, r4
 801181c:	f000 f830 	bl	8011880 <_getpid_r>
 8011820:	462a      	mov	r2, r5
 8011822:	4601      	mov	r1, r0
 8011824:	4620      	mov	r0, r4
 8011826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801182a:	f000 b817 	b.w	801185c <_kill_r>
 801182e:	2b01      	cmp	r3, #1
 8011830:	d00a      	beq.n	8011848 <_raise_r+0x4c>
 8011832:	1c59      	adds	r1, r3, #1
 8011834:	d103      	bne.n	801183e <_raise_r+0x42>
 8011836:	2316      	movs	r3, #22
 8011838:	6003      	str	r3, [r0, #0]
 801183a:	2001      	movs	r0, #1
 801183c:	e7e7      	b.n	801180e <_raise_r+0x12>
 801183e:	2400      	movs	r4, #0
 8011840:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011844:	4628      	mov	r0, r5
 8011846:	4798      	blx	r3
 8011848:	2000      	movs	r0, #0
 801184a:	e7e0      	b.n	801180e <_raise_r+0x12>

0801184c <raise>:
 801184c:	4b02      	ldr	r3, [pc, #8]	; (8011858 <raise+0xc>)
 801184e:	4601      	mov	r1, r0
 8011850:	6818      	ldr	r0, [r3, #0]
 8011852:	f7ff bfd3 	b.w	80117fc <_raise_r>
 8011856:	bf00      	nop
 8011858:	20000190 	.word	0x20000190

0801185c <_kill_r>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	4d07      	ldr	r5, [pc, #28]	; (801187c <_kill_r+0x20>)
 8011860:	2300      	movs	r3, #0
 8011862:	4604      	mov	r4, r0
 8011864:	4608      	mov	r0, r1
 8011866:	4611      	mov	r1, r2
 8011868:	602b      	str	r3, [r5, #0]
 801186a:	f7f1 fbcf 	bl	800300c <_kill>
 801186e:	1c43      	adds	r3, r0, #1
 8011870:	d102      	bne.n	8011878 <_kill_r+0x1c>
 8011872:	682b      	ldr	r3, [r5, #0]
 8011874:	b103      	cbz	r3, 8011878 <_kill_r+0x1c>
 8011876:	6023      	str	r3, [r4, #0]
 8011878:	bd38      	pop	{r3, r4, r5, pc}
 801187a:	bf00      	nop
 801187c:	2000201c 	.word	0x2000201c

08011880 <_getpid_r>:
 8011880:	f7f1 bbbc 	b.w	8002ffc <_getpid>

08011884 <_init>:
 8011884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011886:	bf00      	nop
 8011888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801188a:	bc08      	pop	{r3}
 801188c:	469e      	mov	lr, r3
 801188e:	4770      	bx	lr

08011890 <_fini>:
 8011890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011892:	bf00      	nop
 8011894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011896:	bc08      	pop	{r3}
 8011898:	469e      	mov	lr, r3
 801189a:	4770      	bx	lr
